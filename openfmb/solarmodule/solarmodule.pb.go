// Code generated by protoc-gen-go. DO NOT EDIT.
// source: solarmodule/solarmodule.proto

package solarmodule

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "gitlab.com/openfmb/psm/ops/protobuf/go-openfmb-ops-protobuf/openfmb"
	commonmodule "gitlab.com/openfmb/psm/ops/protobuf/go-openfmb-ops-protobuf/openfmb/commonmodule"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Point definition (Point)
type SolarPoint struct {
	// Enable frequency set point
	FrequencySetPointEnabled *commonmodule.ControlDPC `protobuf:"bytes,1,opt,name=frequencySetPointEnabled,proto3" json:"frequencySetPointEnabled,omitempty"`
	// Grid connect mode
	Mode *commonmodule.ENG_GridConnectModeKind `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty"`
	// Black start enable
	PctHzDroop *wrappers.FloatValue `protobuf:"bytes,3,opt,name=pctHzDroop,proto3" json:"pctHzDroop,omitempty"`
	// Black start enable
	PctVDroop *wrappers.FloatValue `protobuf:"bytes,4,opt,name=pctVDroop,proto3" json:"pctVDroop,omitempty"`
	// Ramp rates
	RampRates *commonmodule.RampRate `protobuf:"bytes,5,opt,name=rampRates,proto3" json:"rampRates,omitempty"`
	// Enable reactive power set point
	ReactivePwrSetPointEnabled *commonmodule.ControlDPC `protobuf:"bytes,6,opt,name=reactivePwrSetPointEnabled,proto3" json:"reactivePwrSetPointEnabled,omitempty"`
	// Enable real power set point
	RealPwrSetPointEnabled *commonmodule.ControlDPC `protobuf:"bytes,7,opt,name=realPwrSetPointEnabled,proto3" json:"realPwrSetPointEnabled,omitempty"`
	// Reset device
	Reset_ *commonmodule.ControlDPC `protobuf:"bytes,8,opt,name=reset,proto3" json:"reset,omitempty"`
	// ESS state
	State *commonmodule.Optional_StateKind `protobuf:"bytes,9,opt,name=state,proto3" json:"state,omitempty"`
	// Enable voltage set point
	VoltageSetPointEnabled *commonmodule.ControlDPC `protobuf:"bytes,10,opt,name=voltageSetPointEnabled,proto3" json:"voltageSetPointEnabled,omitempty"`
	// X-axis value (Unix time).
	StartTime            *commonmodule.ControlTimestamp `protobuf:"bytes,11,opt,name=startTime,proto3" json:"startTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *SolarPoint) Reset()         { *m = SolarPoint{} }
func (m *SolarPoint) String() string { return proto.CompactTextString(m) }
func (*SolarPoint) ProtoMessage()    {}
func (*SolarPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6f3f5b0498b5726, []int{0}
}

func (m *SolarPoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SolarPoint.Unmarshal(m, b)
}
func (m *SolarPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SolarPoint.Marshal(b, m, deterministic)
}
func (m *SolarPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SolarPoint.Merge(m, src)
}
func (m *SolarPoint) XXX_Size() int {
	return xxx_messageInfo_SolarPoint.Size(m)
}
func (m *SolarPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_SolarPoint.DiscardUnknown(m)
}

var xxx_messageInfo_SolarPoint proto.InternalMessageInfo

func (m *SolarPoint) GetFrequencySetPointEnabled() *commonmodule.ControlDPC {
	if m != nil {
		return m.FrequencySetPointEnabled
	}
	return nil
}

func (m *SolarPoint) GetMode() *commonmodule.ENG_GridConnectModeKind {
	if m != nil {
		return m.Mode
	}
	return nil
}

func (m *SolarPoint) GetPctHzDroop() *wrappers.FloatValue {
	if m != nil {
		return m.PctHzDroop
	}
	return nil
}

func (m *SolarPoint) GetPctVDroop() *wrappers.FloatValue {
	if m != nil {
		return m.PctVDroop
	}
	return nil
}

func (m *SolarPoint) GetRampRates() *commonmodule.RampRate {
	if m != nil {
		return m.RampRates
	}
	return nil
}

func (m *SolarPoint) GetReactivePwrSetPointEnabled() *commonmodule.ControlDPC {
	if m != nil {
		return m.ReactivePwrSetPointEnabled
	}
	return nil
}

func (m *SolarPoint) GetRealPwrSetPointEnabled() *commonmodule.ControlDPC {
	if m != nil {
		return m.RealPwrSetPointEnabled
	}
	return nil
}

func (m *SolarPoint) GetReset_() *commonmodule.ControlDPC {
	if m != nil {
		return m.Reset_
	}
	return nil
}

func (m *SolarPoint) GetState() *commonmodule.Optional_StateKind {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *SolarPoint) GetVoltageSetPointEnabled() *commonmodule.ControlDPC {
	if m != nil {
		return m.VoltageSetPointEnabled
	}
	return nil
}

func (m *SolarPoint) GetStartTime() *commonmodule.ControlTimestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

// Curve shape setting (FC=SP) (CSG_SP)
type SolarCSG struct {
	// The array with the points specifying a curve shape.
	CrvPts               []*SolarPoint `protobuf:"bytes,1,rep,name=crvPts,proto3" json:"crvPts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SolarCSG) Reset()         { *m = SolarCSG{} }
func (m *SolarCSG) String() string { return proto.CompactTextString(m) }
func (*SolarCSG) ProtoMessage()    {}
func (*SolarCSG) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6f3f5b0498b5726, []int{1}
}

func (m *SolarCSG) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SolarCSG.Unmarshal(m, b)
}
func (m *SolarCSG) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SolarCSG.Marshal(b, m, deterministic)
}
func (m *SolarCSG) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SolarCSG.Merge(m, src)
}
func (m *SolarCSG) XXX_Size() int {
	return xxx_messageInfo_SolarCSG.Size(m)
}
func (m *SolarCSG) XXX_DiscardUnknown() {
	xxx_messageInfo_SolarCSG.DiscardUnknown(m)
}

var xxx_messageInfo_SolarCSG proto.InternalMessageInfo

func (m *SolarCSG) GetCrvPts() []*SolarPoint {
	if m != nil {
		return m.CrvPts
	}
	return nil
}

// OpenFMB specialization for control schedule using:  LN: Schedule   Name: FSCH
type SolarControlScheduleFSCH struct {
	// Discrete value in SolarCSG type
	ValDCSG              *SolarCSG `protobuf:"bytes,1,opt,name=ValDCSG,proto3" json:"ValDCSG,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SolarControlScheduleFSCH) Reset()         { *m = SolarControlScheduleFSCH{} }
func (m *SolarControlScheduleFSCH) String() string { return proto.CompactTextString(m) }
func (*SolarControlScheduleFSCH) ProtoMessage()    {}
func (*SolarControlScheduleFSCH) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6f3f5b0498b5726, []int{2}
}

func (m *SolarControlScheduleFSCH) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SolarControlScheduleFSCH.Unmarshal(m, b)
}
func (m *SolarControlScheduleFSCH) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SolarControlScheduleFSCH.Marshal(b, m, deterministic)
}
func (m *SolarControlScheduleFSCH) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SolarControlScheduleFSCH.Merge(m, src)
}
func (m *SolarControlScheduleFSCH) XXX_Size() int {
	return xxx_messageInfo_SolarControlScheduleFSCH.Size(m)
}
func (m *SolarControlScheduleFSCH) XXX_DiscardUnknown() {
	xxx_messageInfo_SolarControlScheduleFSCH.DiscardUnknown(m)
}

var xxx_messageInfo_SolarControlScheduleFSCH proto.InternalMessageInfo

func (m *SolarControlScheduleFSCH) GetValDCSG() *SolarCSG {
	if m != nil {
		return m.ValDCSG
	}
	return nil
}

// Specialized 61850 FSCC class.  LN: Schedule controller   Name: FSCC
type SolarControlFSCC struct {
	// UML inherited base object
	ControlFSCC *commonmodule.ControlFSCC `protobuf:"bytes,1,opt,name=controlFSCC,proto3" json:"controlFSCC,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarControlScheduleFSCH *SolarControlScheduleFSCH `protobuf:"bytes,2,opt,name=SolarControlScheduleFSCH,proto3" json:"SolarControlScheduleFSCH,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                  `json:"-"`
	XXX_unrecognized         []byte                    `json:"-"`
	XXX_sizecache            int32                     `json:"-"`
}

func (m *SolarControlFSCC) Reset()         { *m = SolarControlFSCC{} }
func (m *SolarControlFSCC) String() string { return proto.CompactTextString(m) }
func (*SolarControlFSCC) ProtoMessage()    {}
func (*SolarControlFSCC) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6f3f5b0498b5726, []int{3}
}

func (m *SolarControlFSCC) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SolarControlFSCC.Unmarshal(m, b)
}
func (m *SolarControlFSCC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SolarControlFSCC.Marshal(b, m, deterministic)
}
func (m *SolarControlFSCC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SolarControlFSCC.Merge(m, src)
}
func (m *SolarControlFSCC) XXX_Size() int {
	return xxx_messageInfo_SolarControlFSCC.Size(m)
}
func (m *SolarControlFSCC) XXX_DiscardUnknown() {
	xxx_messageInfo_SolarControlFSCC.DiscardUnknown(m)
}

var xxx_messageInfo_SolarControlFSCC proto.InternalMessageInfo

func (m *SolarControlFSCC) GetControlFSCC() *commonmodule.ControlFSCC {
	if m != nil {
		return m.ControlFSCC
	}
	return nil
}

func (m *SolarControlFSCC) GetSolarControlScheduleFSCH() *SolarControlScheduleFSCH {
	if m != nil {
		return m.SolarControlScheduleFSCH
	}
	return nil
}

// Solar control
type SolarControl struct {
	// UML inherited base object
	ControlValue *commonmodule.ControlValue `protobuf:"bytes,1,opt,name=controlValue,proto3" json:"controlValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	Check *commonmodule.CheckConditions `protobuf:"bytes,2,opt,name=check,proto3" json:"check,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarControlFSCC     *SolarControlFSCC `protobuf:"bytes,3,opt,name=solarControlFSCC,proto3" json:"solarControlFSCC,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SolarControl) Reset()         { *m = SolarControl{} }
func (m *SolarControl) String() string { return proto.CompactTextString(m) }
func (*SolarControl) ProtoMessage()    {}
func (*SolarControl) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6f3f5b0498b5726, []int{4}
}

func (m *SolarControl) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SolarControl.Unmarshal(m, b)
}
func (m *SolarControl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SolarControl.Marshal(b, m, deterministic)
}
func (m *SolarControl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SolarControl.Merge(m, src)
}
func (m *SolarControl) XXX_Size() int {
	return xxx_messageInfo_SolarControl.Size(m)
}
func (m *SolarControl) XXX_DiscardUnknown() {
	xxx_messageInfo_SolarControl.DiscardUnknown(m)
}

var xxx_messageInfo_SolarControl proto.InternalMessageInfo

func (m *SolarControl) GetControlValue() *commonmodule.ControlValue {
	if m != nil {
		return m.ControlValue
	}
	return nil
}

func (m *SolarControl) GetCheck() *commonmodule.CheckConditions {
	if m != nil {
		return m.Check
	}
	return nil
}

func (m *SolarControl) GetSolarControlFSCC() *SolarControlFSCC {
	if m != nil {
		return m.SolarControlFSCC
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type SolarInverter struct {
	// UML inherited base object
	ConductingEquipment  *commonmodule.ConductingEquipment `protobuf:"bytes,1,opt,name=conductingEquipment,proto3" json:"conductingEquipment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *SolarInverter) Reset()         { *m = SolarInverter{} }
func (m *SolarInverter) String() string { return proto.CompactTextString(m) }
func (*SolarInverter) ProtoMessage()    {}
func (*SolarInverter) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6f3f5b0498b5726, []int{5}
}

func (m *SolarInverter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SolarInverter.Unmarshal(m, b)
}
func (m *SolarInverter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SolarInverter.Marshal(b, m, deterministic)
}
func (m *SolarInverter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SolarInverter.Merge(m, src)
}
func (m *SolarInverter) XXX_Size() int {
	return xxx_messageInfo_SolarInverter.Size(m)
}
func (m *SolarInverter) XXX_DiscardUnknown() {
	xxx_messageInfo_SolarInverter.DiscardUnknown(m)
}

var xxx_messageInfo_SolarInverter proto.InternalMessageInfo

func (m *SolarInverter) GetConductingEquipment() *commonmodule.ConductingEquipment {
	if m != nil {
		return m.ConductingEquipment
	}
	return nil
}

// Solar control profile
type SolarControlProfile struct {
	// UML inherited base object
	ControlMessageInfo *commonmodule.ControlMessageInfo `protobuf:"bytes,1,opt,name=controlMessageInfo,proto3" json:"controlMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	Ied *commonmodule.IED `protobuf:"bytes,2,opt,name=ied,proto3" json:"ied,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarControl *SolarControl `protobuf:"bytes,3,opt,name=solarControl,proto3" json:"solarControl,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarInverter        *SolarInverter `protobuf:"bytes,4,opt,name=solarInverter,proto3" json:"solarInverter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SolarControlProfile) Reset()         { *m = SolarControlProfile{} }
func (m *SolarControlProfile) String() string { return proto.CompactTextString(m) }
func (*SolarControlProfile) ProtoMessage()    {}
func (*SolarControlProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6f3f5b0498b5726, []int{6}
}

func (m *SolarControlProfile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SolarControlProfile.Unmarshal(m, b)
}
func (m *SolarControlProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SolarControlProfile.Marshal(b, m, deterministic)
}
func (m *SolarControlProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SolarControlProfile.Merge(m, src)
}
func (m *SolarControlProfile) XXX_Size() int {
	return xxx_messageInfo_SolarControlProfile.Size(m)
}
func (m *SolarControlProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_SolarControlProfile.DiscardUnknown(m)
}

var xxx_messageInfo_SolarControlProfile proto.InternalMessageInfo

func (m *SolarControlProfile) GetControlMessageInfo() *commonmodule.ControlMessageInfo {
	if m != nil {
		return m.ControlMessageInfo
	}
	return nil
}

func (m *SolarControlProfile) GetIed() *commonmodule.IED {
	if m != nil {
		return m.Ied
	}
	return nil
}

func (m *SolarControlProfile) GetSolarControl() *SolarControl {
	if m != nil {
		return m.SolarControl
	}
	return nil
}

func (m *SolarControlProfile) GetSolarInverter() *SolarInverter {
	if m != nil {
		return m.SolarInverter
	}
	return nil
}

// Point definition (Point)
type SolarPointStatus struct {
	// Enable frequency set point
	FrequencySetPointEnabled *commonmodule.ControlDPC `protobuf:"bytes,1,opt,name=frequencySetPointEnabled,proto3" json:"frequencySetPointEnabled,omitempty"`
	// Grid connect mode
	Mode *commonmodule.ENG_GridConnectModeKind `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty"`
	// Black start enable
	PctHzDroop *wrappers.FloatValue `protobuf:"bytes,3,opt,name=pctHzDroop,proto3" json:"pctHzDroop,omitempty"`
	// Black start enable
	PctVDroop *wrappers.FloatValue `protobuf:"bytes,4,opt,name=pctVDroop,proto3" json:"pctVDroop,omitempty"`
	// Ramp rates
	RampRates *commonmodule.RampRate `protobuf:"bytes,5,opt,name=rampRates,proto3" json:"rampRates,omitempty"`
	// Enable reactive power set point
	ReactivePwrSetPointEnabled *commonmodule.ControlDPC `protobuf:"bytes,6,opt,name=reactivePwrSetPointEnabled,proto3" json:"reactivePwrSetPointEnabled,omitempty"`
	// Enable real power set point
	RealPwrSetPointEnabled *commonmodule.ControlDPC `protobuf:"bytes,7,opt,name=realPwrSetPointEnabled,proto3" json:"realPwrSetPointEnabled,omitempty"`
	// ESS state
	State *commonmodule.Optional_StateKind `protobuf:"bytes,8,opt,name=state,proto3" json:"state,omitempty"`
	// Enable voltage set point
	VoltageSetPointEnabled *commonmodule.ControlDPC `protobuf:"bytes,9,opt,name=voltageSetPointEnabled,proto3" json:"voltageSetPointEnabled,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                 `json:"-"`
	XXX_unrecognized       []byte                   `json:"-"`
	XXX_sizecache          int32                    `json:"-"`
}

func (m *SolarPointStatus) Reset()         { *m = SolarPointStatus{} }
func (m *SolarPointStatus) String() string { return proto.CompactTextString(m) }
func (*SolarPointStatus) ProtoMessage()    {}
func (*SolarPointStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6f3f5b0498b5726, []int{7}
}

func (m *SolarPointStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SolarPointStatus.Unmarshal(m, b)
}
func (m *SolarPointStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SolarPointStatus.Marshal(b, m, deterministic)
}
func (m *SolarPointStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SolarPointStatus.Merge(m, src)
}
func (m *SolarPointStatus) XXX_Size() int {
	return xxx_messageInfo_SolarPointStatus.Size(m)
}
func (m *SolarPointStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_SolarPointStatus.DiscardUnknown(m)
}

var xxx_messageInfo_SolarPointStatus proto.InternalMessageInfo

func (m *SolarPointStatus) GetFrequencySetPointEnabled() *commonmodule.ControlDPC {
	if m != nil {
		return m.FrequencySetPointEnabled
	}
	return nil
}

func (m *SolarPointStatus) GetMode() *commonmodule.ENG_GridConnectModeKind {
	if m != nil {
		return m.Mode
	}
	return nil
}

func (m *SolarPointStatus) GetPctHzDroop() *wrappers.FloatValue {
	if m != nil {
		return m.PctHzDroop
	}
	return nil
}

func (m *SolarPointStatus) GetPctVDroop() *wrappers.FloatValue {
	if m != nil {
		return m.PctVDroop
	}
	return nil
}

func (m *SolarPointStatus) GetRampRates() *commonmodule.RampRate {
	if m != nil {
		return m.RampRates
	}
	return nil
}

func (m *SolarPointStatus) GetReactivePwrSetPointEnabled() *commonmodule.ControlDPC {
	if m != nil {
		return m.ReactivePwrSetPointEnabled
	}
	return nil
}

func (m *SolarPointStatus) GetRealPwrSetPointEnabled() *commonmodule.ControlDPC {
	if m != nil {
		return m.RealPwrSetPointEnabled
	}
	return nil
}

func (m *SolarPointStatus) GetState() *commonmodule.Optional_StateKind {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *SolarPointStatus) GetVoltageSetPointEnabled() *commonmodule.ControlDPC {
	if m != nil {
		return m.VoltageSetPointEnabled
	}
	return nil
}

// Specialized 61850 ZGEN class
type SolarEventAndStatusZGEN struct {
	// UML inherited base object
	LogicalNodeForEventAndStatus *commonmodule.LogicalNodeForEventAndStatus `protobuf:"bytes,1,opt,name=logicalNodeForEventAndStatus,proto3" json:"logicalNodeForEventAndStatus,omitempty"`
	// DC Power On/Off Status; True = DC power on
	AuxPwrSt *commonmodule.StatusSPS `protobuf:"bytes,2,opt,name=AuxPwrSt,proto3" json:"AuxPwrSt,omitempty"`
	// MISSING DOCUMENTATION!!!
	DynamicTest *commonmodule.ENS_DynamicTestKind `protobuf:"bytes,3,opt,name=DynamicTest,proto3" json:"DynamicTest,omitempty"`
	// Emergency stop
	EmgStop *commonmodule.StatusSPS `protobuf:"bytes,4,opt,name=EmgStop,proto3" json:"EmgStop,omitempty"`
	// MISSING DOCUMENTATION!!!
	PointStatus          *SolarPointStatus `protobuf:"bytes,5,opt,name=PointStatus,proto3" json:"PointStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SolarEventAndStatusZGEN) Reset()         { *m = SolarEventAndStatusZGEN{} }
func (m *SolarEventAndStatusZGEN) String() string { return proto.CompactTextString(m) }
func (*SolarEventAndStatusZGEN) ProtoMessage()    {}
func (*SolarEventAndStatusZGEN) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6f3f5b0498b5726, []int{8}
}

func (m *SolarEventAndStatusZGEN) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SolarEventAndStatusZGEN.Unmarshal(m, b)
}
func (m *SolarEventAndStatusZGEN) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SolarEventAndStatusZGEN.Marshal(b, m, deterministic)
}
func (m *SolarEventAndStatusZGEN) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SolarEventAndStatusZGEN.Merge(m, src)
}
func (m *SolarEventAndStatusZGEN) XXX_Size() int {
	return xxx_messageInfo_SolarEventAndStatusZGEN.Size(m)
}
func (m *SolarEventAndStatusZGEN) XXX_DiscardUnknown() {
	xxx_messageInfo_SolarEventAndStatusZGEN.DiscardUnknown(m)
}

var xxx_messageInfo_SolarEventAndStatusZGEN proto.InternalMessageInfo

func (m *SolarEventAndStatusZGEN) GetLogicalNodeForEventAndStatus() *commonmodule.LogicalNodeForEventAndStatus {
	if m != nil {
		return m.LogicalNodeForEventAndStatus
	}
	return nil
}

func (m *SolarEventAndStatusZGEN) GetAuxPwrSt() *commonmodule.StatusSPS {
	if m != nil {
		return m.AuxPwrSt
	}
	return nil
}

func (m *SolarEventAndStatusZGEN) GetDynamicTest() *commonmodule.ENS_DynamicTestKind {
	if m != nil {
		return m.DynamicTest
	}
	return nil
}

func (m *SolarEventAndStatusZGEN) GetEmgStop() *commonmodule.StatusSPS {
	if m != nil {
		return m.EmgStop
	}
	return nil
}

func (m *SolarEventAndStatusZGEN) GetPointStatus() *SolarPointStatus {
	if m != nil {
		return m.PointStatus
	}
	return nil
}

// Specialized 61850 ZGEN class
type SolarEventZGEN struct {
	// UML inherited base object
	SolarEventAndStatusZGEN *SolarEventAndStatusZGEN `protobuf:"bytes,1,opt,name=solarEventAndStatusZGEN,proto3" json:"solarEventAndStatusZGEN,omitempty"`
	// MISSING DOCUMENTATION!!!
	GriMod               *commonmodule.ENG_GridConnectModeKind `protobuf:"bytes,2,opt,name=GriMod,proto3" json:"GriMod,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *SolarEventZGEN) Reset()         { *m = SolarEventZGEN{} }
func (m *SolarEventZGEN) String() string { return proto.CompactTextString(m) }
func (*SolarEventZGEN) ProtoMessage()    {}
func (*SolarEventZGEN) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6f3f5b0498b5726, []int{9}
}

func (m *SolarEventZGEN) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SolarEventZGEN.Unmarshal(m, b)
}
func (m *SolarEventZGEN) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SolarEventZGEN.Marshal(b, m, deterministic)
}
func (m *SolarEventZGEN) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SolarEventZGEN.Merge(m, src)
}
func (m *SolarEventZGEN) XXX_Size() int {
	return xxx_messageInfo_SolarEventZGEN.Size(m)
}
func (m *SolarEventZGEN) XXX_DiscardUnknown() {
	xxx_messageInfo_SolarEventZGEN.DiscardUnknown(m)
}

var xxx_messageInfo_SolarEventZGEN proto.InternalMessageInfo

func (m *SolarEventZGEN) GetSolarEventAndStatusZGEN() *SolarEventAndStatusZGEN {
	if m != nil {
		return m.SolarEventAndStatusZGEN
	}
	return nil
}

func (m *SolarEventZGEN) GetGriMod() *commonmodule.ENG_GridConnectModeKind {
	if m != nil {
		return m.GriMod
	}
	return nil
}

// Solar event
type SolarEvent struct {
	// UML inherited base object
	EventValue *commonmodule.EventValue `protobuf:"bytes,1,opt,name=eventValue,proto3" json:"eventValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarEventZGEN       *SolarEventZGEN `protobuf:"bytes,2,opt,name=solarEventZGEN,proto3" json:"solarEventZGEN,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SolarEvent) Reset()         { *m = SolarEvent{} }
func (m *SolarEvent) String() string { return proto.CompactTextString(m) }
func (*SolarEvent) ProtoMessage()    {}
func (*SolarEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6f3f5b0498b5726, []int{10}
}

func (m *SolarEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SolarEvent.Unmarshal(m, b)
}
func (m *SolarEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SolarEvent.Marshal(b, m, deterministic)
}
func (m *SolarEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SolarEvent.Merge(m, src)
}
func (m *SolarEvent) XXX_Size() int {
	return xxx_messageInfo_SolarEvent.Size(m)
}
func (m *SolarEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_SolarEvent.DiscardUnknown(m)
}

var xxx_messageInfo_SolarEvent proto.InternalMessageInfo

func (m *SolarEvent) GetEventValue() *commonmodule.EventValue {
	if m != nil {
		return m.EventValue
	}
	return nil
}

func (m *SolarEvent) GetSolarEventZGEN() *SolarEventZGEN {
	if m != nil {
		return m.SolarEventZGEN
	}
	return nil
}

// Solar event profile
type SolarEventProfile struct {
	// UML inherited base object
	EventMessageInfo *commonmodule.EventMessageInfo `protobuf:"bytes,1,opt,name=eventMessageInfo,proto3" json:"eventMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	Ied *commonmodule.IED `protobuf:"bytes,2,opt,name=ied,proto3" json:"ied,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarEvent *SolarEvent `protobuf:"bytes,3,opt,name=solarEvent,proto3" json:"solarEvent,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarInverter        *SolarInverter `protobuf:"bytes,4,opt,name=solarInverter,proto3" json:"solarInverter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SolarEventProfile) Reset()         { *m = SolarEventProfile{} }
func (m *SolarEventProfile) String() string { return proto.CompactTextString(m) }
func (*SolarEventProfile) ProtoMessage()    {}
func (*SolarEventProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6f3f5b0498b5726, []int{11}
}

func (m *SolarEventProfile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SolarEventProfile.Unmarshal(m, b)
}
func (m *SolarEventProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SolarEventProfile.Marshal(b, m, deterministic)
}
func (m *SolarEventProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SolarEventProfile.Merge(m, src)
}
func (m *SolarEventProfile) XXX_Size() int {
	return xxx_messageInfo_SolarEventProfile.Size(m)
}
func (m *SolarEventProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_SolarEventProfile.DiscardUnknown(m)
}

var xxx_messageInfo_SolarEventProfile proto.InternalMessageInfo

func (m *SolarEventProfile) GetEventMessageInfo() *commonmodule.EventMessageInfo {
	if m != nil {
		return m.EventMessageInfo
	}
	return nil
}

func (m *SolarEventProfile) GetIed() *commonmodule.IED {
	if m != nil {
		return m.Ied
	}
	return nil
}

func (m *SolarEventProfile) GetSolarEvent() *SolarEvent {
	if m != nil {
		return m.SolarEvent
	}
	return nil
}

func (m *SolarEventProfile) GetSolarInverter() *SolarInverter {
	if m != nil {
		return m.SolarInverter
	}
	return nil
}

// Solar reading value
type SolarReading struct {
	// UML inherited base object
	ConductingEquipmentTerminalReading *commonmodule.ConductingEquipmentTerminalReading `protobuf:"bytes,1,opt,name=conductingEquipmentTerminalReading,proto3" json:"conductingEquipmentTerminalReading,omitempty"`
	// MISSING DOCUMENTATION!!!
	PhaseMMTN *commonmodule.PhaseMMTN `protobuf:"bytes,2,opt,name=phaseMMTN,proto3" json:"phaseMMTN,omitempty"`
	// MISSING DOCUMENTATION!!!
	ReadingMMTR *commonmodule.ReadingMMTR `protobuf:"bytes,3,opt,name=readingMMTR,proto3" json:"readingMMTR,omitempty"`
	// MISSING DOCUMENTATION!!!
	ReadingMMXU          *commonmodule.ReadingMMXU `protobuf:"bytes,4,opt,name=readingMMXU,proto3" json:"readingMMXU,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *SolarReading) Reset()         { *m = SolarReading{} }
func (m *SolarReading) String() string { return proto.CompactTextString(m) }
func (*SolarReading) ProtoMessage()    {}
func (*SolarReading) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6f3f5b0498b5726, []int{12}
}

func (m *SolarReading) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SolarReading.Unmarshal(m, b)
}
func (m *SolarReading) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SolarReading.Marshal(b, m, deterministic)
}
func (m *SolarReading) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SolarReading.Merge(m, src)
}
func (m *SolarReading) XXX_Size() int {
	return xxx_messageInfo_SolarReading.Size(m)
}
func (m *SolarReading) XXX_DiscardUnknown() {
	xxx_messageInfo_SolarReading.DiscardUnknown(m)
}

var xxx_messageInfo_SolarReading proto.InternalMessageInfo

func (m *SolarReading) GetConductingEquipmentTerminalReading() *commonmodule.ConductingEquipmentTerminalReading {
	if m != nil {
		return m.ConductingEquipmentTerminalReading
	}
	return nil
}

func (m *SolarReading) GetPhaseMMTN() *commonmodule.PhaseMMTN {
	if m != nil {
		return m.PhaseMMTN
	}
	return nil
}

func (m *SolarReading) GetReadingMMTR() *commonmodule.ReadingMMTR {
	if m != nil {
		return m.ReadingMMTR
	}
	return nil
}

func (m *SolarReading) GetReadingMMXU() *commonmodule.ReadingMMXU {
	if m != nil {
		return m.ReadingMMXU
	}
	return nil
}

// Solar reading profile
type SolarReadingProfile struct {
	// UML inherited base object
	ReadingMessageInfo *commonmodule.ReadingMessageInfo `protobuf:"bytes,1,opt,name=readingMessageInfo,proto3" json:"readingMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	Ied *commonmodule.IED `protobuf:"bytes,2,opt,name=ied,proto3" json:"ied,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarInverter *SolarInverter `protobuf:"bytes,3,opt,name=solarInverter,proto3" json:"solarInverter,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarReading         *SolarReading `protobuf:"bytes,4,opt,name=solarReading,proto3" json:"solarReading,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SolarReadingProfile) Reset()         { *m = SolarReadingProfile{} }
func (m *SolarReadingProfile) String() string { return proto.CompactTextString(m) }
func (*SolarReadingProfile) ProtoMessage()    {}
func (*SolarReadingProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6f3f5b0498b5726, []int{13}
}

func (m *SolarReadingProfile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SolarReadingProfile.Unmarshal(m, b)
}
func (m *SolarReadingProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SolarReadingProfile.Marshal(b, m, deterministic)
}
func (m *SolarReadingProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SolarReadingProfile.Merge(m, src)
}
func (m *SolarReadingProfile) XXX_Size() int {
	return xxx_messageInfo_SolarReadingProfile.Size(m)
}
func (m *SolarReadingProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_SolarReadingProfile.DiscardUnknown(m)
}

var xxx_messageInfo_SolarReadingProfile proto.InternalMessageInfo

func (m *SolarReadingProfile) GetReadingMessageInfo() *commonmodule.ReadingMessageInfo {
	if m != nil {
		return m.ReadingMessageInfo
	}
	return nil
}

func (m *SolarReadingProfile) GetIed() *commonmodule.IED {
	if m != nil {
		return m.Ied
	}
	return nil
}

func (m *SolarReadingProfile) GetSolarInverter() *SolarInverter {
	if m != nil {
		return m.SolarInverter
	}
	return nil
}

func (m *SolarReadingProfile) GetSolarReading() *SolarReading {
	if m != nil {
		return m.SolarReading
	}
	return nil
}

// Specialized 61850 ZGEN LN class
type SolarStatusZGEN struct {
	// UML inherited base object
	SolarEventAndStatusZGEN *SolarEventAndStatusZGEN `protobuf:"bytes,1,opt,name=solarEventAndStatusZGEN,proto3" json:"solarEventAndStatusZGEN,omitempty"`
	// MISSING DOCUMENTATION!!!
	GriMod               *commonmodule.ENG_GridConnectModeKind `protobuf:"bytes,2,opt,name=GriMod,proto3" json:"GriMod,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *SolarStatusZGEN) Reset()         { *m = SolarStatusZGEN{} }
func (m *SolarStatusZGEN) String() string { return proto.CompactTextString(m) }
func (*SolarStatusZGEN) ProtoMessage()    {}
func (*SolarStatusZGEN) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6f3f5b0498b5726, []int{14}
}

func (m *SolarStatusZGEN) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SolarStatusZGEN.Unmarshal(m, b)
}
func (m *SolarStatusZGEN) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SolarStatusZGEN.Marshal(b, m, deterministic)
}
func (m *SolarStatusZGEN) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SolarStatusZGEN.Merge(m, src)
}
func (m *SolarStatusZGEN) XXX_Size() int {
	return xxx_messageInfo_SolarStatusZGEN.Size(m)
}
func (m *SolarStatusZGEN) XXX_DiscardUnknown() {
	xxx_messageInfo_SolarStatusZGEN.DiscardUnknown(m)
}

var xxx_messageInfo_SolarStatusZGEN proto.InternalMessageInfo

func (m *SolarStatusZGEN) GetSolarEventAndStatusZGEN() *SolarEventAndStatusZGEN {
	if m != nil {
		return m.SolarEventAndStatusZGEN
	}
	return nil
}

func (m *SolarStatusZGEN) GetGriMod() *commonmodule.ENG_GridConnectModeKind {
	if m != nil {
		return m.GriMod
	}
	return nil
}

// Solar status
type SolarStatus struct {
	// UML inherited base object
	StatusValue *commonmodule.StatusValue `protobuf:"bytes,1,opt,name=statusValue,proto3" json:"statusValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarStatusZGEN      *SolarStatusZGEN `protobuf:"bytes,2,opt,name=solarStatusZGEN,proto3" json:"solarStatusZGEN,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SolarStatus) Reset()         { *m = SolarStatus{} }
func (m *SolarStatus) String() string { return proto.CompactTextString(m) }
func (*SolarStatus) ProtoMessage()    {}
func (*SolarStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6f3f5b0498b5726, []int{15}
}

func (m *SolarStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SolarStatus.Unmarshal(m, b)
}
func (m *SolarStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SolarStatus.Marshal(b, m, deterministic)
}
func (m *SolarStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SolarStatus.Merge(m, src)
}
func (m *SolarStatus) XXX_Size() int {
	return xxx_messageInfo_SolarStatus.Size(m)
}
func (m *SolarStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_SolarStatus.DiscardUnknown(m)
}

var xxx_messageInfo_SolarStatus proto.InternalMessageInfo

func (m *SolarStatus) GetStatusValue() *commonmodule.StatusValue {
	if m != nil {
		return m.StatusValue
	}
	return nil
}

func (m *SolarStatus) GetSolarStatusZGEN() *SolarStatusZGEN {
	if m != nil {
		return m.SolarStatusZGEN
	}
	return nil
}

// Solar status profile
type SolarStatusProfile struct {
	// UML inherited base object
	StatusMessageInfo *commonmodule.StatusMessageInfo `protobuf:"bytes,1,opt,name=statusMessageInfo,proto3" json:"statusMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	Ied *commonmodule.IED `protobuf:"bytes,2,opt,name=ied,proto3" json:"ied,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarInverter *SolarInverter `protobuf:"bytes,3,opt,name=solarInverter,proto3" json:"solarInverter,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarStatus          *SolarStatus `protobuf:"bytes,4,opt,name=solarStatus,proto3" json:"solarStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SolarStatusProfile) Reset()         { *m = SolarStatusProfile{} }
func (m *SolarStatusProfile) String() string { return proto.CompactTextString(m) }
func (*SolarStatusProfile) ProtoMessage()    {}
func (*SolarStatusProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6f3f5b0498b5726, []int{16}
}

func (m *SolarStatusProfile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SolarStatusProfile.Unmarshal(m, b)
}
func (m *SolarStatusProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SolarStatusProfile.Marshal(b, m, deterministic)
}
func (m *SolarStatusProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SolarStatusProfile.Merge(m, src)
}
func (m *SolarStatusProfile) XXX_Size() int {
	return xxx_messageInfo_SolarStatusProfile.Size(m)
}
func (m *SolarStatusProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_SolarStatusProfile.DiscardUnknown(m)
}

var xxx_messageInfo_SolarStatusProfile proto.InternalMessageInfo

func (m *SolarStatusProfile) GetStatusMessageInfo() *commonmodule.StatusMessageInfo {
	if m != nil {
		return m.StatusMessageInfo
	}
	return nil
}

func (m *SolarStatusProfile) GetIed() *commonmodule.IED {
	if m != nil {
		return m.Ied
	}
	return nil
}

func (m *SolarStatusProfile) GetSolarInverter() *SolarInverter {
	if m != nil {
		return m.SolarInverter
	}
	return nil
}

func (m *SolarStatusProfile) GetSolarStatus() *SolarStatus {
	if m != nil {
		return m.SolarStatus
	}
	return nil
}

func init() {
	proto.RegisterType((*SolarPoint)(nil), "solarmodule.SolarPoint")
	proto.RegisterType((*SolarCSG)(nil), "solarmodule.SolarCSG")
	proto.RegisterType((*SolarControlScheduleFSCH)(nil), "solarmodule.SolarControlScheduleFSCH")
	proto.RegisterType((*SolarControlFSCC)(nil), "solarmodule.SolarControlFSCC")
	proto.RegisterType((*SolarControl)(nil), "solarmodule.SolarControl")
	proto.RegisterType((*SolarInverter)(nil), "solarmodule.SolarInverter")
	proto.RegisterType((*SolarControlProfile)(nil), "solarmodule.SolarControlProfile")
	proto.RegisterType((*SolarPointStatus)(nil), "solarmodule.SolarPointStatus")
	proto.RegisterType((*SolarEventAndStatusZGEN)(nil), "solarmodule.SolarEventAndStatusZGEN")
	proto.RegisterType((*SolarEventZGEN)(nil), "solarmodule.SolarEventZGEN")
	proto.RegisterType((*SolarEvent)(nil), "solarmodule.SolarEvent")
	proto.RegisterType((*SolarEventProfile)(nil), "solarmodule.SolarEventProfile")
	proto.RegisterType((*SolarReading)(nil), "solarmodule.SolarReading")
	proto.RegisterType((*SolarReadingProfile)(nil), "solarmodule.SolarReadingProfile")
	proto.RegisterType((*SolarStatusZGEN)(nil), "solarmodule.SolarStatusZGEN")
	proto.RegisterType((*SolarStatus)(nil), "solarmodule.SolarStatus")
	proto.RegisterType((*SolarStatusProfile)(nil), "solarmodule.SolarStatusProfile")
}

func init() { proto.RegisterFile("solarmodule/solarmodule.proto", fileDescriptor_c6f3f5b0498b5726) }

var fileDescriptor_c6f3f5b0498b5726 = []byte{
	// 1284 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0xcf, 0x6f, 0xdc, 0xc4,
	0x17, 0x97, 0x37, 0xd9, 0x24, 0xfb, 0x36, 0x6d, 0x93, 0x89, 0xbe, 0x8d, 0x93, 0x36, 0x69, 0x6a,
	0x7d, 0x91, 0x2a, 0xa4, 0x6c, 0xa0, 0x01, 0xa4, 0x50, 0x01, 0x4a, 0x76, 0x37, 0xdb, 0x00, 0x9b,
	0xae, 0xec, 0x4d, 0x14, 0x7a, 0x89, 0x1c, 0x7b, 0xb2, 0x31, 0xd8, 0x1e, 0xd7, 0x9e, 0x4d, 0x29,
	0x07, 0xc4, 0x09, 0x38, 0x72, 0xe7, 0xc6, 0x0d, 0x4e, 0x5c, 0x02, 0x1c, 0x39, 0xf2, 0x07, 0xf0,
	0x9f, 0x70, 0xe2, 0x80, 0x84, 0x3c, 0x1e, 0xaf, 0xc7, 0xbf, 0xb2, 0xa4, 0x02, 0x21, 0x04, 0x37,
	0xaf, 0xe7, 0xf3, 0xf9, 0xcc, 0x7b, 0xcf, 0x9f, 0x99, 0xf7, 0x12, 0x58, 0x09, 0x88, 0xad, 0xfb,
	0x0e, 0x31, 0x87, 0x36, 0xde, 0x10, 0x9e, 0x1b, 0x9e, 0x4f, 0x28, 0x41, 0x75, 0xe1, 0xd5, 0x72,
	0x6d, 0xe8, 0xd8, 0xd1, 0xfb, 0xe5, 0xd5, 0x01, 0x21, 0x03, 0x1b, 0x6f, 0xb0, 0x5f, 0x27, 0xc3,
	0xd3, 0x8d, 0xa7, 0xbe, 0xee, 0x79, 0xd8, 0x0f, 0xf8, 0xfa, 0x1d, 0x83, 0x38, 0x0e, 0x71, 0xb9,
	0xae, 0xf8, 0x23, 0x02, 0x28, 0xbf, 0x56, 0x01, 0xb4, 0x50, 0xbb, 0x47, 0x2c, 0x97, 0xa2, 0x3e,
	0xc8, 0xa7, 0x3e, 0x7e, 0x32, 0xc4, 0xae, 0xf1, 0x4c, 0xc3, 0x94, 0xbd, 0x6c, 0xbb, 0xfa, 0x89,
	0x8d, 0x4d, 0x59, 0x5a, 0x93, 0xee, 0xd5, 0xef, 0xcb, 0x8d, 0x94, 0x4a, 0x93, 0xb8, 0xd4, 0x27,
	0x76, 0xab, 0xd7, 0x54, 0x4b, 0x99, 0x68, 0x0b, 0x26, 0x1d, 0x62, 0x62, 0xb9, 0xc2, 0x14, 0x5e,
	0x48, 0x2b, 0xb4, 0xf7, 0x3b, 0xc7, 0x1d, 0xdf, 0x32, 0x9b, 0xc4, 0x75, 0xb1, 0x41, 0xbb, 0xc4,
	0xc4, 0xef, 0x58, 0xae, 0xa9, 0x32, 0x0a, 0x7a, 0x00, 0xe0, 0x19, 0xf4, 0xe1, 0x47, 0x2d, 0x9f,
	0x10, 0x4f, 0x9e, 0x60, 0x02, 0xb7, 0x1a, 0x51, 0xd6, 0x8d, 0x38, 0xeb, 0xc6, 0xae, 0x4d, 0x74,
	0x7a, 0xa8, 0xdb, 0x43, 0xac, 0x0a, 0x70, 0xb4, 0x05, 0x35, 0xcf, 0xa0, 0x87, 0x11, 0x77, 0x72,
	0x3c, 0x37, 0x41, 0xa3, 0x57, 0xa0, 0xe6, 0xeb, 0x8e, 0xa7, 0xea, 0x14, 0x07, 0x72, 0x95, 0x51,
	0x6f, 0xa6, 0xe3, 0x56, 0xf9, 0xb2, 0x9a, 0x00, 0xd1, 0x11, 0x2c, 0xfb, 0x58, 0x37, 0xa8, 0x75,
	0x8e, 0x7b, 0x4f, 0xfd, 0x6c, 0x01, 0xa7, 0xc6, 0x14, 0xf0, 0x12, 0x2e, 0xea, 0xc1, 0x4d, 0x1f,
	0xeb, 0x76, 0x81, 0xea, 0xf4, 0x18, 0xd5, 0x12, 0x1e, 0x6a, 0x40, 0xd5, 0xc7, 0x01, 0xa6, 0xf2,
	0xcc, 0x18, 0x81, 0x08, 0x86, 0x5e, 0x83, 0x6a, 0x40, 0x75, 0x8a, 0xe5, 0x1a, 0xc3, 0xaf, 0xa5,
	0xf1, 0x8f, 0x3c, 0x6a, 0x11, 0x57, 0xb7, 0x8f, 0xb5, 0x10, 0xc3, 0x3e, 0x60, 0x04, 0x0f, 0x23,
	0x3f, 0x27, 0x36, 0xd5, 0x07, 0x38, 0x1b, 0x39, 0x8c, 0x8b, 0xbc, 0x98, 0x87, 0x76, 0xa1, 0x16,
	0x50, 0xdd, 0xa7, 0x7d, 0xcb, 0xc1, 0x72, 0x9d, 0x89, 0xac, 0x16, 0x8a, 0x84, 0x80, 0x80, 0xea,
	0x8e, 0xb7, 0x33, 0xf3, 0xf9, 0x85, 0x2c, 0x7d, 0x71, 0x21, 0x4b, 0x6a, 0x42, 0x55, 0xda, 0x30,
	0xc3, 0xac, 0xdf, 0xd4, 0x3a, 0x68, 0x0b, 0xa6, 0x0c, 0xff, 0xbc, 0x47, 0x03, 0x59, 0x5a, 0x9b,
	0xb8, 0x57, 0xbf, 0xbf, 0xd8, 0x10, 0x0f, 0x61, 0x72, 0x42, 0x04, 0x25, 0x4e, 0x50, 0x0e, 0x40,
	0x8e, 0x64, 0xa2, 0x4d, 0x35, 0xe3, 0x0c, 0x87, 0xa4, 0x5d, 0xad, 0xf9, 0x10, 0x6d, 0xc1, 0xf4,
	0xa1, 0x6e, 0xb7, 0x9a, 0x5a, 0x87, 0x1f, 0x9f, 0xff, 0xe5, 0x75, 0x9b, 0x5a, 0x47, 0x50, 0x8d,
	0xf1, 0xca, 0x0f, 0x12, 0xcc, 0x89, 0xba, 0xbb, 0x5a, 0xb3, 0x89, 0xb6, 0xa1, 0x6e, 0x24, 0x3f,
	0xb9, 0xe6, 0x52, 0x61, 0xf2, 0x21, 0x60, 0x67, 0xf2, 0x93, 0x50, 0x53, 0xe4, 0x20, 0xbd, 0x3c,
	0xdc, 0xd1, 0x01, 0xcd, 0xc7, 0x98, 0x07, 0xab, 0xa5, 0x32, 0xca, 0xcf, 0x12, 0xcc, 0x8a, 0x8b,
	0xa8, 0x05, 0xb3, 0x3c, 0x04, 0x76, 0xd0, 0x78, 0xdc, 0xcb, 0x85, 0x71, 0x33, 0x04, 0x0f, 0x3c,
	0xc5, 0x42, 0x9b, 0x50, 0x35, 0xce, 0xb0, 0xf1, 0x01, 0x0f, 0x73, 0x25, 0x43, 0x0f, 0x97, 0x9a,
	0xc4, 0x35, 0xad, 0xd0, 0x89, 0x81, 0x1a, 0x61, 0xd1, 0x1e, 0xcc, 0x05, 0x99, 0x2a, 0xf2, 0x6b,
	0x64, 0xa5, 0x34, 0xcd, 0x10, 0xa4, 0xe6, 0x68, 0xca, 0xfb, 0x70, 0x8d, 0xa1, 0xf6, 0xdc, 0x73,
	0xec, 0x53, 0xec, 0xa3, 0xf7, 0x60, 0xc1, 0x20, 0xae, 0x39, 0x34, 0xa8, 0xe5, 0x0e, 0xda, 0x4f,
	0x86, 0x96, 0xe7, 0x60, 0x97, 0xf2, 0xec, 0xee, 0xe6, 0xb2, 0xcb, 0x02, 0x79, 0x92, 0x45, 0x1a,
	0xca, 0xf7, 0x15, 0x58, 0x10, 0x43, 0xea, 0xf9, 0xe4, 0xd4, 0xb2, 0x31, 0x3a, 0x04, 0xc4, 0x6b,
	0xd2, 0xc5, 0x41, 0xa0, 0x0f, 0xf0, 0x9e, 0x7b, 0x4a, 0xf8, 0x8e, 0x6b, 0x85, 0xf5, 0x14, 0x70,
	0x7c, 0xc3, 0x02, 0x05, 0xb4, 0x0e, 0x13, 0x16, 0x36, 0x79, 0x65, 0xe7, 0xd3, 0x42, 0x7b, 0xed,
	0x96, 0x60, 0xd0, 0x10, 0x87, 0x3a, 0x30, 0x2b, 0x96, 0x87, 0x57, 0x74, 0xa9, 0xb4, 0xa2, 0x02,
	0x3f, 0x45, 0x44, 0x6f, 0xc3, 0xb5, 0x40, 0xac, 0x29, 0xbf, 0xa6, 0x97, 0xf3, 0x4a, 0x31, 0x42,
	0x90, 0x4a, 0x53, 0x5f, 0x9f, 0xfc, 0xf1, 0x17, 0x59, 0x52, 0x3e, 0xab, 0xf2, 0x73, 0xc3, 0xce,
	0x6b, 0x78, 0x1d, 0x0d, 0x83, 0xff, 0xfa, 0xda, 0xbf, 0xa7, 0xaf, 0x8d, 0xfa, 0xd4, 0xcc, 0x9f,
	0xd5, 0xa7, 0x6a, 0xcf, 0xd7, 0xa7, 0x94, 0xdf, 0x2a, 0xb0, 0xc8, 0x9c, 0xd8, 0x3e, 0xc7, 0x2e,
	0xdd, 0x76, 0xcd, 0xc8, 0x8c, 0x8f, 0x3b, 0xed, 0x7d, 0x44, 0xe1, 0xb6, 0x4d, 0x06, 0x96, 0xa1,
	0xdb, 0xfb, 0xc4, 0xc4, 0xbb, 0x24, 0x83, 0xe1, 0xa6, 0x7c, 0x31, 0xbd, 0xe7, 0xbb, 0x97, 0x30,
	0xf8, 0xd9, 0xbe, 0x54, 0x15, 0x6d, 0xc2, 0xcc, 0xf6, 0xf0, 0xc3, 0xb0, 0x68, 0x94, 0x9b, 0x76,
	0x31, 0xbd, 0x43, 0x84, 0xd3, 0x7a, 0x9a, 0x3a, 0x02, 0xa2, 0x26, 0xd4, 0x5b, 0xcf, 0x5c, 0xdd,
	0xb1, 0x8c, 0x3e, 0x0e, 0x28, 0xf7, 0xea, 0xdd, 0xac, 0xd9, 0xb5, 0x63, 0x01, 0xc4, 0xea, 0x2a,
	0xb2, 0xd0, 0xcb, 0x30, 0xdd, 0x76, 0x06, 0x1a, 0x1d, 0x19, 0xb6, 0x74, 0xe3, 0x18, 0x87, 0xde,
	0x82, 0xba, 0x70, 0x84, 0xb9, 0x59, 0x57, 0x4a, 0xfa, 0x72, 0x04, 0x52, 0x45, 0x86, 0x72, 0x21,
	0xc1, 0xf5, 0xa4, 0xfe, 0xac, 0xec, 0x26, 0x2c, 0x06, 0xc5, 0x5f, 0x84, 0x57, 0xfc, 0xff, 0x79,
	0xfd, 0x3c, 0x96, 0xd7, 0xba, 0x4c, 0x0a, 0xbd, 0x01, 0x53, 0x1d, 0xdf, 0xea, 0x12, 0xf3, 0x6a,
	0x37, 0x03, 0x27, 0x29, 0x5f, 0x4a, 0x7c, 0x26, 0x67, 0xd2, 0xe8, 0x4d, 0x00, 0x1c, 0x3e, 0x88,
	0xad, 0x33, 0x63, 0xc6, 0xf6, 0x68, 0x9d, 0x87, 0x26, 0x30, 0x50, 0x17, 0xae, 0x07, 0xa9, 0x2a,
	0xf0, 0xa8, 0x6e, 0x95, 0xa4, 0xca, 0x32, 0x4c, 0x2e, 0xd9, 0x0c, 0x59, 0xf9, 0xba, 0x02, 0xf3,
	0x09, 0x38, 0xee, 0x4b, 0x3d, 0x98, 0x63, 0x5b, 0xe6, 0xbb, 0xd2, 0x6a, 0x41, 0xa8, 0xf9, 0x9e,
	0x94, 0x63, 0x5f, 0xb5, 0x23, 0x6d, 0x03, 0x24, 0x81, 0x72, 0x93, 0x2e, 0x96, 0x64, 0x28, 0x70,
	0x05, 0xd2, 0x5f, 0xd0, 0x8b, 0x7e, 0xaa, 0xf0, 0x41, 0x48, 0xc5, 0xba, 0x69, 0xb9, 0x03, 0xf4,
	0xa9, 0x04, 0x4a, 0x41, 0xbb, 0xef, 0x63, 0xdf, 0xb1, 0x5c, 0xdd, 0xe6, 0x30, 0x5e, 0xb9, 0x97,
	0xc6, 0x4e, 0x10, 0x19, 0x1e, 0xaf, 0xe5, 0x1f, 0xd8, 0x01, 0xbd, 0x0a, 0x35, 0xef, 0x4c, 0x0f,
	0x70, 0xb7, 0xdb, 0xdf, 0x2f, 0xbe, 0x0a, 0x7a, 0xf1, 0xb2, 0x9a, 0x20, 0xd1, 0x03, 0xa8, 0xfb,
	0x91, 0x42, 0xb7, 0xdb, 0x57, 0x47, 0x6d, 0x3f, 0xdd, 0x40, 0x12, 0x80, 0x2a, 0xa2, 0x53, 0xe4,
	0xa3, 0x03, 0x5e, 0xdd, 0x32, 0xf2, 0xd1, 0x81, 0x2a, 0xa2, 0x93, 0x81, 0x88, 0x23, 0x84, 0x81,
	0x28, 0x86, 0x8d, 0x1b, 0x88, 0xd4, 0x1c, 0x2e, 0x1e, 0x88, 0xf2, 0x0a, 0x57, 0xb5, 0x5f, 0xce,
	0x3b, 0x13, 0xcf, 0xed, 0x9d, 0xd1, 0x70, 0x15, 0xbb, 0x61, 0xb2, 0x6c, 0xb8, 0x8a, 0x3f, 0x7b,
	0x76, 0xb8, 0xe2, 0xef, 0xb9, 0x09, 0xbf, 0x93, 0xe0, 0x06, 0x83, 0x0b, 0x37, 0xd4, 0x3f, 0xe2,
	0x1e, 0xfc, 0x4a, 0x82, 0xba, 0x10, 0x78, 0xf8, 0xc7, 0x4f, 0xc0, 0x9e, 0xc4, 0x9b, 0x70, 0xa9,
	0xa8, 0x8f, 0x88, 0x57, 0xa1, 0xc8, 0x41, 0x3d, 0xb8, 0x11, 0xa4, 0x4b, 0xc1, 0x43, 0xbb, 0x9d,
	0xcf, 0x57, 0xc8, 0x33, 0x29, 0x70, 0x96, 0xae, 0x7c, 0x5b, 0x01, 0x24, 0xc0, 0x63, 0x5b, 0x6a,
	0x30, 0x1f, 0xed, 0x9b, 0x77, 0xe5, 0x9d, 0xa2, 0x88, 0xf3, 0xa6, 0xcc, 0xf3, 0xff, 0x4e, 0x4f,
	0xb6, 0xa0, 0x2e, 0x64, 0xce, 0x2d, 0x29, 0x97, 0x15, 0x4d, 0xd0, 0x11, 0x69, 0x91, 0x21, 0x77,
	0x3e, 0x86, 0x05, 0xe2, 0x61, 0xf7, 0xd4, 0x39, 0x11, 0xf9, 0x3d, 0xe9, 0xf1, 0xa3, 0x81, 0x45,
	0x6d, 0xfd, 0x24, 0x4c, 0x6c, 0x83, 0x23, 0x36, 0xbc, 0x20, 0x7c, 0x0e, 0x92, 0xff, 0x70, 0x0d,
	0xc8, 0x3a, 0x5f, 0x5b, 0x27, 0x5e, 0xb0, 0x3e, 0x7a, 0x1f, 0x13, 0x04, 0xc9, 0x6f, 0x2a, 0x45,
	0x1b, 0x9d, 0x4c, 0x31, 0xce, 0xe6, 0xef, 0x01, 0x00, 0x00, 0xff, 0xff, 0x88, 0x0b, 0x56, 0x64,
	0x74, 0x13, 0x00, 0x00,
}
