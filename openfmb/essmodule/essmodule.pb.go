// Code generated by protoc-gen-go. DO NOT EDIT.
// source: essmodule/essmodule.proto

package essmodule

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "gitlab.com/openfmb/psm/ops/protobuf/go-openfmb-ops-protobuf/openfmb"
	commonmodule "gitlab.com/openfmb/psm/ops/protobuf/go-openfmb-ops-protobuf/openfmb/commonmodule"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Specialized 61850 ZBAT class  LN: Battery   Name: ZBAT
type EssEventZBAT struct {
	// UML inherited base object
	LogicalNodeForEventAndStatus *commonmodule.LogicalNodeForEventAndStatus `protobuf:"bytes,1,opt,name=logicalNodeForEventAndStatus,proto3" json:"logicalNodeForEventAndStatus,omitempty"`
	// If true, the battery is in overcharge (voltage or current) condition.
	BatHi *commonmodule.StatusSPS `protobuf:"bytes,2,opt,name=BatHi,proto3" json:"BatHi,omitempty"`
	// If true, the battery voltage or charge has dropped below a pre-set level.
	BatLo *commonmodule.StatusSPS `protobuf:"bytes,3,opt,name=BatLo,proto3" json:"BatLo,omitempty"`
	// MISSING DOCUMENTATION!!!
	BatSt *commonmodule.StatusSPS `protobuf:"bytes,4,opt,name=BatSt,proto3" json:"BatSt,omitempty"`
	// State of charge (in percentage)
	Soc *commonmodule.MV `protobuf:"bytes,5,opt,name=Soc,proto3" json:"Soc,omitempty"`
	// If stVal TRUE, the device is in standby.
	Stdby                *commonmodule.StatusSPS `protobuf:"bytes,6,opt,name=Stdby,proto3" json:"Stdby,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *EssEventZBAT) Reset()         { *m = EssEventZBAT{} }
func (m *EssEventZBAT) String() string { return proto.CompactTextString(m) }
func (*EssEventZBAT) ProtoMessage()    {}
func (*EssEventZBAT) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd0031865232ccc6, []int{0}
}

func (m *EssEventZBAT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EssEventZBAT.Unmarshal(m, b)
}
func (m *EssEventZBAT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EssEventZBAT.Marshal(b, m, deterministic)
}
func (m *EssEventZBAT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EssEventZBAT.Merge(m, src)
}
func (m *EssEventZBAT) XXX_Size() int {
	return xxx_messageInfo_EssEventZBAT.Size(m)
}
func (m *EssEventZBAT) XXX_DiscardUnknown() {
	xxx_messageInfo_EssEventZBAT.DiscardUnknown(m)
}

var xxx_messageInfo_EssEventZBAT proto.InternalMessageInfo

func (m *EssEventZBAT) GetLogicalNodeForEventAndStatus() *commonmodule.LogicalNodeForEventAndStatus {
	if m != nil {
		return m.LogicalNodeForEventAndStatus
	}
	return nil
}

func (m *EssEventZBAT) GetBatHi() *commonmodule.StatusSPS {
	if m != nil {
		return m.BatHi
	}
	return nil
}

func (m *EssEventZBAT) GetBatLo() *commonmodule.StatusSPS {
	if m != nil {
		return m.BatLo
	}
	return nil
}

func (m *EssEventZBAT) GetBatSt() *commonmodule.StatusSPS {
	if m != nil {
		return m.BatSt
	}
	return nil
}

func (m *EssEventZBAT) GetSoc() *commonmodule.MV {
	if m != nil {
		return m.Soc
	}
	return nil
}

func (m *EssEventZBAT) GetStdby() *commonmodule.StatusSPS {
	if m != nil {
		return m.Stdby
	}
	return nil
}

// ESS inverter high level function to maintain frequency within dead bands.
type FrequencyRegulation struct {
	// uint/0.01Hz  Frequency regulation is performed when the grid frequency goes beyond the dead
	// bands. The dead bands are defined as follows: Upper DB = frequency set point + dead band plus Lower
	// DB = frequency set point – dead band minus
	FrequencyDeadBandMinus *wrappers.FloatValue `protobuf:"bytes,1,opt,name=frequencyDeadBandMinus,proto3" json:"frequencyDeadBandMinus,omitempty"`
	// uint/0.01Hz  Frequency regulation is performed when the grid frequency goes beyond the dead
	// bands. The dead bands are defined as follows: Upper DB = frequency set point + dead band plus Lower
	// DB = frequency set point – dead band minus
	FrequencyDeadBandPlus *wrappers.FloatValue `protobuf:"bytes,2,opt,name=frequencyDeadBandPlus,proto3" json:"frequencyDeadBandPlus,omitempty"`
	// Control value (TRUE or FALSE)
	FrequencyRegulationCtl *wrappers.BoolValue `protobuf:"bytes,3,opt,name=frequencyRegulationCtl,proto3" json:"frequencyRegulationCtl,omitempty"`
	// uint/0.01Hz  Target frequency
	FrequencySetPoint *wrappers.FloatValue `protobuf:"bytes,4,opt,name=frequencySetPoint,proto3" json:"frequencySetPoint,omitempty"`
	// uint/0.01Hz  Other modes of operation, such as peak shaving, smoothing or SOC management may
	// operate if the grid frequency is within the stable band. Upper stable band = frequency set point +
	// band plus Lower stable band = frequency set point – band minus
	GridFrequencyStableBandMinus *wrappers.FloatValue `protobuf:"bytes,5,opt,name=gridFrequencyStableBandMinus,proto3" json:"gridFrequencyStableBandMinus,omitempty"`
	// uint/0.01Hz  Other modes of operation, such as peak shaving, smoothing or SOC management may
	// operate if the grid frequency is within the stable band. Upper stable band = frequency set point +
	// band plus Lower stable band = frequency set point – band minus
	GridFrequencyStableBandPlus *wrappers.FloatValue `protobuf:"bytes,6,opt,name=gridFrequencyStableBandPlus,proto3" json:"gridFrequencyStableBandPlus,omitempty"`
	// uint/0.1%  The droops define the reaction of the PCS to under/over frequency events. A droop of
	// 1% means that the PCS will output 100% power if the frequency is 1% of the nominal frequency away
	// from the upper or lower dead band. The minimum droop value possible is 0.8%.
	OverFrequencyDroop *wrappers.FloatValue `protobuf:"bytes,7,opt,name=overFrequencyDroop,proto3" json:"overFrequencyDroop,omitempty"`
	// uint/0.1%  The droops define the reaction of the PCS to under/over voltage events. A droop of 1%
	// means that the PCS will output 100% power if the voltage is 1% of the nominal voltage away from the
	// upper or lower dead band. The minimum droop value possible is 0.8%.
	UnderFrequencyDroop  *wrappers.FloatValue `protobuf:"bytes,8,opt,name=underFrequencyDroop,proto3" json:"underFrequencyDroop,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *FrequencyRegulation) Reset()         { *m = FrequencyRegulation{} }
func (m *FrequencyRegulation) String() string { return proto.CompactTextString(m) }
func (*FrequencyRegulation) ProtoMessage()    {}
func (*FrequencyRegulation) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd0031865232ccc6, []int{1}
}

func (m *FrequencyRegulation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FrequencyRegulation.Unmarshal(m, b)
}
func (m *FrequencyRegulation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FrequencyRegulation.Marshal(b, m, deterministic)
}
func (m *FrequencyRegulation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrequencyRegulation.Merge(m, src)
}
func (m *FrequencyRegulation) XXX_Size() int {
	return xxx_messageInfo_FrequencyRegulation.Size(m)
}
func (m *FrequencyRegulation) XXX_DiscardUnknown() {
	xxx_messageInfo_FrequencyRegulation.DiscardUnknown(m)
}

var xxx_messageInfo_FrequencyRegulation proto.InternalMessageInfo

func (m *FrequencyRegulation) GetFrequencyDeadBandMinus() *wrappers.FloatValue {
	if m != nil {
		return m.FrequencyDeadBandMinus
	}
	return nil
}

func (m *FrequencyRegulation) GetFrequencyDeadBandPlus() *wrappers.FloatValue {
	if m != nil {
		return m.FrequencyDeadBandPlus
	}
	return nil
}

func (m *FrequencyRegulation) GetFrequencyRegulationCtl() *wrappers.BoolValue {
	if m != nil {
		return m.FrequencyRegulationCtl
	}
	return nil
}

func (m *FrequencyRegulation) GetFrequencySetPoint() *wrappers.FloatValue {
	if m != nil {
		return m.FrequencySetPoint
	}
	return nil
}

func (m *FrequencyRegulation) GetGridFrequencyStableBandMinus() *wrappers.FloatValue {
	if m != nil {
		return m.GridFrequencyStableBandMinus
	}
	return nil
}

func (m *FrequencyRegulation) GetGridFrequencyStableBandPlus() *wrappers.FloatValue {
	if m != nil {
		return m.GridFrequencyStableBandPlus
	}
	return nil
}

func (m *FrequencyRegulation) GetOverFrequencyDroop() *wrappers.FloatValue {
	if m != nil {
		return m.OverFrequencyDroop
	}
	return nil
}

func (m *FrequencyRegulation) GetUnderFrequencyDroop() *wrappers.FloatValue {
	if m != nil {
		return m.UnderFrequencyDroop
	}
	return nil
}

// ESS inverter high level function to maintain power level by charging or discharging
type PeakShaving struct {
	// uint/1kW  If the supervised power goes below this limit, the ESS will charge to maintain this limit.
	BaseShavingLimit *wrappers.FloatValue `protobuf:"bytes,1,opt,name=baseShavingLimit,proto3" json:"baseShavingLimit,omitempty"`
	// Control value (TRUE or FALSE)
	PeakShavingCtl *wrappers.BoolValue `protobuf:"bytes,2,opt,name=peakShavingCtl,proto3" json:"peakShavingCtl,omitempty"`
	// uint/1kW  If the supervised power goes above this limit, the ESS will discharge to maintain this
	// limit.
	PeakShavingLimit *wrappers.FloatValue `protobuf:"bytes,3,opt,name=peakShavingLimit,proto3" json:"peakShavingLimit,omitempty"`
	// uint/1kW  If the supervised power is between the band defined by these two limits then SOC
	// management is allowed.
	SocManagementAllowedHighLimit *wrappers.FloatValue `protobuf:"bytes,4,opt,name=socManagementAllowedHighLimit,proto3" json:"socManagementAllowedHighLimit,omitempty"`
	// uint/1kW  If the supervised power is between the band defined by these two limits then SOC
	// management is allowed.
	SocManagementAllowedLowLimit *wrappers.FloatValue `protobuf:"bytes,5,opt,name=socManagementAllowedLowLimit,proto3" json:"socManagementAllowedLowLimit,omitempty"`
	XXX_NoUnkeyedLiteral         struct{}             `json:"-"`
	XXX_unrecognized             []byte               `json:"-"`
	XXX_sizecache                int32                `json:"-"`
}

func (m *PeakShaving) Reset()         { *m = PeakShaving{} }
func (m *PeakShaving) String() string { return proto.CompactTextString(m) }
func (*PeakShaving) ProtoMessage()    {}
func (*PeakShaving) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd0031865232ccc6, []int{2}
}

func (m *PeakShaving) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeakShaving.Unmarshal(m, b)
}
func (m *PeakShaving) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeakShaving.Marshal(b, m, deterministic)
}
func (m *PeakShaving) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeakShaving.Merge(m, src)
}
func (m *PeakShaving) XXX_Size() int {
	return xxx_messageInfo_PeakShaving.Size(m)
}
func (m *PeakShaving) XXX_DiscardUnknown() {
	xxx_messageInfo_PeakShaving.DiscardUnknown(m)
}

var xxx_messageInfo_PeakShaving proto.InternalMessageInfo

func (m *PeakShaving) GetBaseShavingLimit() *wrappers.FloatValue {
	if m != nil {
		return m.BaseShavingLimit
	}
	return nil
}

func (m *PeakShaving) GetPeakShavingCtl() *wrappers.BoolValue {
	if m != nil {
		return m.PeakShavingCtl
	}
	return nil
}

func (m *PeakShaving) GetPeakShavingLimit() *wrappers.FloatValue {
	if m != nil {
		return m.PeakShavingLimit
	}
	return nil
}

func (m *PeakShaving) GetSocManagementAllowedHighLimit() *wrappers.FloatValue {
	if m != nil {
		return m.SocManagementAllowedHighLimit
	}
	return nil
}

func (m *PeakShaving) GetSocManagementAllowedLowLimit() *wrappers.FloatValue {
	if m != nil {
		return m.SocManagementAllowedLowLimit
	}
	return nil
}

// ESS inverter high level function to shut down ESS if SOC exceeds high or low limits.
type SocLimit struct {
	// uint/1%  These limits define the operational range of the battery. If a lineup reaches the SOC
	// high limit, the inverter’s output is reduced to 0. Charging is then blocked until the hysteresis is
	// overcome. The same logic applies to the SOC low limit, except that after the ramp down is complete,
	// discharging is blocked until the hysteresis is overcome.
	SocHighLimit *wrappers.FloatValue `protobuf:"bytes,1,opt,name=socHighLimit,proto3" json:"socHighLimit,omitempty"`
	// uint/1%  These limits define the operational range of the battery. If a lineup reaches the SOC
	// high limit, the inverter’s output is reduced to 0. Charging is then blocked until the hysteresis is
	// overcome. The same logic applies to the SOC low limit, except that after the ramp down is complete,
	// discharging is blocked until the hysteresis is overcome.
	SocHighLimitHysteresis *wrappers.FloatValue `protobuf:"bytes,2,opt,name=socHighLimitHysteresis,proto3" json:"socHighLimitHysteresis,omitempty"`
	// Control value (TRUE or FALSE)
	SocLimitCtl *wrappers.BoolValue `protobuf:"bytes,3,opt,name=socLimitCtl,proto3" json:"socLimitCtl,omitempty"`
	// uint/1%  These limits define the operational range of the battery. If a lineup reaches the SOC
	// high limit, the inverter’s output is reduced to 0. Charging is then blocked until the hysteresis is
	// overcome. The same logic applies to the SOC low limit, except that after the ramp down is complete,
	// discharging is blocked until the hysteresis is overcome.
	SocLowLimit *wrappers.FloatValue `protobuf:"bytes,4,opt,name=socLowLimit,proto3" json:"socLowLimit,omitempty"`
	// uint/1%  These hysteresis define the release conditions for the block charge or discharge
	// initiated by the SOC limits.For example, assume a SOC low limit of 10% and a SOC low limit
	// hysteresis of 2% and that discharging is blocked because the batteries SOC reached the SOC low
	// limit, discharging will only be allowed again after the battery’s SOC reaches 13%.
	SocLowLimitHysteresis *wrappers.FloatValue `protobuf:"bytes,5,opt,name=socLowLimitHysteresis,proto3" json:"socLowLimitHysteresis,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}             `json:"-"`
	XXX_unrecognized      []byte               `json:"-"`
	XXX_sizecache         int32                `json:"-"`
}

func (m *SocLimit) Reset()         { *m = SocLimit{} }
func (m *SocLimit) String() string { return proto.CompactTextString(m) }
func (*SocLimit) ProtoMessage()    {}
func (*SocLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd0031865232ccc6, []int{3}
}

func (m *SocLimit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SocLimit.Unmarshal(m, b)
}
func (m *SocLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SocLimit.Marshal(b, m, deterministic)
}
func (m *SocLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SocLimit.Merge(m, src)
}
func (m *SocLimit) XXX_Size() int {
	return xxx_messageInfo_SocLimit.Size(m)
}
func (m *SocLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_SocLimit.DiscardUnknown(m)
}

var xxx_messageInfo_SocLimit proto.InternalMessageInfo

func (m *SocLimit) GetSocHighLimit() *wrappers.FloatValue {
	if m != nil {
		return m.SocHighLimit
	}
	return nil
}

func (m *SocLimit) GetSocHighLimitHysteresis() *wrappers.FloatValue {
	if m != nil {
		return m.SocHighLimitHysteresis
	}
	return nil
}

func (m *SocLimit) GetSocLimitCtl() *wrappers.BoolValue {
	if m != nil {
		return m.SocLimitCtl
	}
	return nil
}

func (m *SocLimit) GetSocLowLimit() *wrappers.FloatValue {
	if m != nil {
		return m.SocLowLimit
	}
	return nil
}

func (m *SocLimit) GetSocLowLimitHysteresis() *wrappers.FloatValue {
	if m != nil {
		return m.SocLowLimitHysteresis
	}
	return nil
}

// ESS inverter high level function to maintain SOC within dead bands
type SOCManagement struct {
	// uint/1%  Define a dead band (DB) around the SOC set point. When the battery SOC goes outside the
	// dead band, the SOC management executes and bring the SOC back to the set point. Upper DB = set point
	// + dead band plus Lower DB = set point – dead band minus
	SocDeadBandMinus *wrappers.FloatValue `protobuf:"bytes,1,opt,name=socDeadBandMinus,proto3" json:"socDeadBandMinus,omitempty"`
	// uint/1%  Define a dead band (DB) around the SOC set point. When the battery SOC goes outside the
	// dead band, the SOC management executes and bring the SOC back to the set point. Upper DB = set point
	// + dead band plus Lower DB = set point – dead band minus
	SocDeadBandPlus *wrappers.FloatValue `protobuf:"bytes,2,opt,name=socDeadBandPlus,proto3" json:"socDeadBandPlus,omitempty"`
	// Control value (TRUE or FALSE)
	SocManagementCtl *wrappers.BoolValue `protobuf:"bytes,3,opt,name=socManagementCtl,proto3" json:"socManagementCtl,omitempty"`
	// uint/1kW  Set point used for SOC maintenance
	SocPowerSetPoint *wrappers.FloatValue `protobuf:"bytes,4,opt,name=socPowerSetPoint,proto3" json:"socPowerSetPoint,omitempty"`
	// uint/1%  SOC Target in percentage (%).
	SocSetPoint          *wrappers.FloatValue `protobuf:"bytes,5,opt,name=socSetPoint,proto3" json:"socSetPoint,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SOCManagement) Reset()         { *m = SOCManagement{} }
func (m *SOCManagement) String() string { return proto.CompactTextString(m) }
func (*SOCManagement) ProtoMessage()    {}
func (*SOCManagement) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd0031865232ccc6, []int{4}
}

func (m *SOCManagement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SOCManagement.Unmarshal(m, b)
}
func (m *SOCManagement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SOCManagement.Marshal(b, m, deterministic)
}
func (m *SOCManagement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SOCManagement.Merge(m, src)
}
func (m *SOCManagement) XXX_Size() int {
	return xxx_messageInfo_SOCManagement.Size(m)
}
func (m *SOCManagement) XXX_DiscardUnknown() {
	xxx_messageInfo_SOCManagement.DiscardUnknown(m)
}

var xxx_messageInfo_SOCManagement proto.InternalMessageInfo

func (m *SOCManagement) GetSocDeadBandMinus() *wrappers.FloatValue {
	if m != nil {
		return m.SocDeadBandMinus
	}
	return nil
}

func (m *SOCManagement) GetSocDeadBandPlus() *wrappers.FloatValue {
	if m != nil {
		return m.SocDeadBandPlus
	}
	return nil
}

func (m *SOCManagement) GetSocManagementCtl() *wrappers.BoolValue {
	if m != nil {
		return m.SocManagementCtl
	}
	return nil
}

func (m *SOCManagement) GetSocPowerSetPoint() *wrappers.FloatValue {
	if m != nil {
		return m.SocPowerSetPoint
	}
	return nil
}

func (m *SOCManagement) GetSocSetPoint() *wrappers.FloatValue {
	if m != nil {
		return m.SocSetPoint
	}
	return nil
}

// Voltage regulation function
type VoltageRegulation struct {
	// uint/0.1%  The droops define the reaction of the PCS to under/over voltage events. A droop of 1%
	// means that the PCS will output 100% power if the voltage is 1% of the nominal voltage away from the
	// upper or lower dead band. The minimum droop value possible is 0.8%.
	OverVoltageDroop *wrappers.FloatValue `protobuf:"bytes,1,opt,name=overVoltageDroop,proto3" json:"overVoltageDroop,omitempty"`
	// uint/0.1%  The droops define the reaction of the PCS to under/over voltage events. A droop of 1%
	// means that the PCS will output 100% power if the voltage is 1% of the nominal voltage away from the
	// upper or lower dead band. The minimum droop value possible is 0.8%.
	UnderVoltageDroop *wrappers.FloatValue `protobuf:"bytes,2,opt,name=underVoltageDroop,proto3" json:"underVoltageDroop,omitempty"`
	// uint/0.1V  Voltage regulation is performed when the grid voltage goes beyond the dead bands. The
	// dead bands are defined as follows: Upper DB = voltage set point + dead band plus Lower DB = voltage
	// set point – dead band minus
	VoltageDeadBandMinus *wrappers.FloatValue `protobuf:"bytes,3,opt,name=voltageDeadBandMinus,proto3" json:"voltageDeadBandMinus,omitempty"`
	// uint/0.1V  Voltage regulation is performed when the grid voltage goes beyond the dead bands. The
	// dead bands are defined as follows: Upper DB = voltage set point + dead band plus Lower DB = voltage
	// set point – dead band minus
	VoltageDeadBandPlus *wrappers.FloatValue `protobuf:"bytes,4,opt,name=voltageDeadBandPlus,proto3" json:"voltageDeadBandPlus,omitempty"`
	// uint/0.1V  Other modes of operation, such as peak shaving, smoothing or SOC management may
	// operate if the grid frequency is within the stable band. Upper stable band = frequency set point +
	// band plus Lower stable band = frequency set point – band minus
	VoltageSetPoint      *wrappers.FloatValue `protobuf:"bytes,5,opt,name=voltageSetPoint,proto3" json:"voltageSetPoint,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *VoltageRegulation) Reset()         { *m = VoltageRegulation{} }
func (m *VoltageRegulation) String() string { return proto.CompactTextString(m) }
func (*VoltageRegulation) ProtoMessage()    {}
func (*VoltageRegulation) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd0031865232ccc6, []int{5}
}

func (m *VoltageRegulation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VoltageRegulation.Unmarshal(m, b)
}
func (m *VoltageRegulation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VoltageRegulation.Marshal(b, m, deterministic)
}
func (m *VoltageRegulation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoltageRegulation.Merge(m, src)
}
func (m *VoltageRegulation) XXX_Size() int {
	return xxx_messageInfo_VoltageRegulation.Size(m)
}
func (m *VoltageRegulation) XXX_DiscardUnknown() {
	xxx_messageInfo_VoltageRegulation.DiscardUnknown(m)
}

var xxx_messageInfo_VoltageRegulation proto.InternalMessageInfo

func (m *VoltageRegulation) GetOverVoltageDroop() *wrappers.FloatValue {
	if m != nil {
		return m.OverVoltageDroop
	}
	return nil
}

func (m *VoltageRegulation) GetUnderVoltageDroop() *wrappers.FloatValue {
	if m != nil {
		return m.UnderVoltageDroop
	}
	return nil
}

func (m *VoltageRegulation) GetVoltageDeadBandMinus() *wrappers.FloatValue {
	if m != nil {
		return m.VoltageDeadBandMinus
	}
	return nil
}

func (m *VoltageRegulation) GetVoltageDeadBandPlus() *wrappers.FloatValue {
	if m != nil {
		return m.VoltageDeadBandPlus
	}
	return nil
}

func (m *VoltageRegulation) GetVoltageSetPoint() *wrappers.FloatValue {
	if m != nil {
		return m.VoltageSetPoint
	}
	return nil
}

// ESS inverter high level function to maintain voltage within droop dead bands.
type VoltageDroop struct {
	// Control value (TRUE or FALSE)
	VoltageDroopCtl *wrappers.BoolValue `protobuf:"bytes,1,opt,name=voltageDroopCtl,proto3" json:"voltageDroopCtl,omitempty"`
	// Voltage regulation
	VoltageRegulation    *VoltageRegulation `protobuf:"bytes,2,opt,name=voltageRegulation,proto3" json:"voltageRegulation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *VoltageDroop) Reset()         { *m = VoltageDroop{} }
func (m *VoltageDroop) String() string { return proto.CompactTextString(m) }
func (*VoltageDroop) ProtoMessage()    {}
func (*VoltageDroop) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd0031865232ccc6, []int{6}
}

func (m *VoltageDroop) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VoltageDroop.Unmarshal(m, b)
}
func (m *VoltageDroop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VoltageDroop.Marshal(b, m, deterministic)
}
func (m *VoltageDroop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoltageDroop.Merge(m, src)
}
func (m *VoltageDroop) XXX_Size() int {
	return xxx_messageInfo_VoltageDroop.Size(m)
}
func (m *VoltageDroop) XXX_DiscardUnknown() {
	xxx_messageInfo_VoltageDroop.DiscardUnknown(m)
}

var xxx_messageInfo_VoltageDroop proto.InternalMessageInfo

func (m *VoltageDroop) GetVoltageDroopCtl() *wrappers.BoolValue {
	if m != nil {
		return m.VoltageDroopCtl
	}
	return nil
}

func (m *VoltageDroop) GetVoltageRegulation() *VoltageRegulation {
	if m != nil {
		return m.VoltageRegulation
	}
	return nil
}

// ESS inverter high level function to maintain voltage within dead bands.
type VoltagePI struct {
	// Control value (TRUE or FALSE)
	VoltagePICtl *wrappers.BoolValue `protobuf:"bytes,1,opt,name=voltagePICtl,proto3" json:"voltagePICtl,omitempty"`
	// Voltage regulation
	VoltageRegulation    *VoltageRegulation `protobuf:"bytes,2,opt,name=voltageRegulation,proto3" json:"voltageRegulation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *VoltagePI) Reset()         { *m = VoltagePI{} }
func (m *VoltagePI) String() string { return proto.CompactTextString(m) }
func (*VoltagePI) ProtoMessage()    {}
func (*VoltagePI) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd0031865232ccc6, []int{7}
}

func (m *VoltagePI) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VoltagePI.Unmarshal(m, b)
}
func (m *VoltagePI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VoltagePI.Marshal(b, m, deterministic)
}
func (m *VoltagePI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoltagePI.Merge(m, src)
}
func (m *VoltagePI) XXX_Size() int {
	return xxx_messageInfo_VoltagePI.Size(m)
}
func (m *VoltagePI) XXX_DiscardUnknown() {
	xxx_messageInfo_VoltagePI.DiscardUnknown(m)
}

var xxx_messageInfo_VoltagePI proto.InternalMessageInfo

func (m *VoltagePI) GetVoltagePICtl() *wrappers.BoolValue {
	if m != nil {
		return m.VoltagePICtl
	}
	return nil
}

func (m *VoltagePI) GetVoltageRegulation() *VoltageRegulation {
	if m != nil {
		return m.VoltageRegulation
	}
	return nil
}

// ESS inverter high level function to reduce (smooth) charging or discharging rate of change.
type CapacityFirming struct {
	// Control value (TRUE or FALSE)
	CapacityFirmingCtl *wrappers.BoolValue `protobuf:"bytes,1,opt,name=capacityFirmingCtl,proto3" json:"capacityFirmingCtl,omitempty"`
	// uint/1kW/min  If the supervised power increases at a rate higher that the rate defined by these
	// limits, the ESS will discharge/charge at an opposite dp/dt to reduce (smooth) the rate of change at
	// the PCC
	LimitNegativeDpDt *wrappers.FloatValue `protobuf:"bytes,2,opt,name=limitNegative_dp_dt,json=limitNegativeDpDt,proto3" json:"limitNegative_dp_dt,omitempty"`
	// uint/1kW/min  If the supervised power increases at a rate higher that the rate defined by these
	// limits, the ESS will discharge/charge at an opposite dp/dt to reduce (smooth) the rate of change at
	// the PCC
	LimitPositiveDpDt    *wrappers.FloatValue `protobuf:"bytes,3,opt,name=limitPositive_dp_dt,json=limitPositiveDpDt,proto3" json:"limitPositive_dp_dt,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CapacityFirming) Reset()         { *m = CapacityFirming{} }
func (m *CapacityFirming) String() string { return proto.CompactTextString(m) }
func (*CapacityFirming) ProtoMessage()    {}
func (*CapacityFirming) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd0031865232ccc6, []int{8}
}

func (m *CapacityFirming) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CapacityFirming.Unmarshal(m, b)
}
func (m *CapacityFirming) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CapacityFirming.Marshal(b, m, deterministic)
}
func (m *CapacityFirming) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapacityFirming.Merge(m, src)
}
func (m *CapacityFirming) XXX_Size() int {
	return xxx_messageInfo_CapacityFirming.Size(m)
}
func (m *CapacityFirming) XXX_DiscardUnknown() {
	xxx_messageInfo_CapacityFirming.DiscardUnknown(m)
}

var xxx_messageInfo_CapacityFirming proto.InternalMessageInfo

func (m *CapacityFirming) GetCapacityFirmingCtl() *wrappers.BoolValue {
	if m != nil {
		return m.CapacityFirmingCtl
	}
	return nil
}

func (m *CapacityFirming) GetLimitNegativeDpDt() *wrappers.FloatValue {
	if m != nil {
		return m.LimitNegativeDpDt
	}
	return nil
}

func (m *CapacityFirming) GetLimitPositiveDpDt() *wrappers.FloatValue {
	if m != nil {
		return m.LimitPositiveDpDt
	}
	return nil
}

// ESS inverter high level functions.
type ESSFunction struct {
	// ESS inverter high level function to reduce (smooth) charging or discharging rate of change.
	CapacityFirming *CapacityFirming `protobuf:"bytes,1,opt,name=capacityFirming,proto3" json:"capacityFirming,omitempty"`
	// ESS inverter high level function to maintain frequency within dead bands.
	FrequencyRegulation *FrequencyRegulation `protobuf:"bytes,2,opt,name=frequencyRegulation,proto3" json:"frequencyRegulation,omitempty"`
	// ESS inverter high level function to maintain power level by charging or discharging
	PeakShaving *PeakShaving `protobuf:"bytes,3,opt,name=peakShaving,proto3" json:"peakShaving,omitempty"`
	// ESS inverter high level function to shut down ESS if SOC exceeds high or low limits.
	SocLimit *SocLimit `protobuf:"bytes,4,opt,name=socLimit,proto3" json:"socLimit,omitempty"`
	// ESS inverter high level function to maintain SOC within dead bands
	SocManagement *SOCManagement `protobuf:"bytes,5,opt,name=socManagement,proto3" json:"socManagement,omitempty"`
	// ESS inverter high level function to maintain voltage within droop dead bands.
	VoltageDroop *VoltageDroop `protobuf:"bytes,6,opt,name=voltageDroop,proto3" json:"voltageDroop,omitempty"`
	// ESS inverter high level function to maintain voltage within dead bands.
	VoltagePI            *VoltagePI `protobuf:"bytes,7,opt,name=voltagePI,proto3" json:"voltagePI,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ESSFunction) Reset()         { *m = ESSFunction{} }
func (m *ESSFunction) String() string { return proto.CompactTextString(m) }
func (*ESSFunction) ProtoMessage()    {}
func (*ESSFunction) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd0031865232ccc6, []int{9}
}

func (m *ESSFunction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ESSFunction.Unmarshal(m, b)
}
func (m *ESSFunction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ESSFunction.Marshal(b, m, deterministic)
}
func (m *ESSFunction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESSFunction.Merge(m, src)
}
func (m *ESSFunction) XXX_Size() int {
	return xxx_messageInfo_ESSFunction.Size(m)
}
func (m *ESSFunction) XXX_DiscardUnknown() {
	xxx_messageInfo_ESSFunction.DiscardUnknown(m)
}

var xxx_messageInfo_ESSFunction proto.InternalMessageInfo

func (m *ESSFunction) GetCapacityFirming() *CapacityFirming {
	if m != nil {
		return m.CapacityFirming
	}
	return nil
}

func (m *ESSFunction) GetFrequencyRegulation() *FrequencyRegulation {
	if m != nil {
		return m.FrequencyRegulation
	}
	return nil
}

func (m *ESSFunction) GetPeakShaving() *PeakShaving {
	if m != nil {
		return m.PeakShaving
	}
	return nil
}

func (m *ESSFunction) GetSocLimit() *SocLimit {
	if m != nil {
		return m.SocLimit
	}
	return nil
}

func (m *ESSFunction) GetSocManagement() *SOCManagement {
	if m != nil {
		return m.SocManagement
	}
	return nil
}

func (m *ESSFunction) GetVoltageDroop() *VoltageDroop {
	if m != nil {
		return m.VoltageDroop
	}
	return nil
}

func (m *ESSFunction) GetVoltagePI() *VoltagePI {
	if m != nil {
		return m.VoltagePI
	}
	return nil
}

// Point definition (Point)
type ESSPointStatus struct {
	// Black start enable
	BlackStartEnabled *commonmodule.ControlDPC `protobuf:"bytes,1,opt,name=blackStartEnabled,proto3" json:"blackStartEnabled,omitempty"`
	// Enable frequency set point
	FrequencySetPointEnabled *commonmodule.ControlDPC `protobuf:"bytes,2,opt,name=frequencySetPointEnabled,proto3" json:"frequencySetPointEnabled,omitempty"`
	// ESS function parameter
	Function *ESSFunction `protobuf:"bytes,3,opt,name=function,proto3" json:"function,omitempty"`
	// Grid connect mode
	Mode *commonmodule.ENG_GridConnectModeKind `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"`
	// Black start enable
	PctHzDroop *wrappers.FloatValue `protobuf:"bytes,5,opt,name=pctHzDroop,proto3" json:"pctHzDroop,omitempty"`
	// Black start enable
	PctVDroop *wrappers.FloatValue `protobuf:"bytes,6,opt,name=pctVDroop,proto3" json:"pctVDroop,omitempty"`
	// Ramp rates
	RampRates *commonmodule.RampRate `protobuf:"bytes,7,opt,name=rampRates,proto3" json:"rampRates,omitempty"`
	// Enable reactive power set point
	ReactivePwrSetPointEnabled *commonmodule.ControlDPC `protobuf:"bytes,8,opt,name=reactivePwrSetPointEnabled,proto3" json:"reactivePwrSetPointEnabled,omitempty"`
	// Enable real power set point
	RealPwrSetPointEnabled *commonmodule.ControlDPC `protobuf:"bytes,9,opt,name=realPwrSetPointEnabled,proto3" json:"realPwrSetPointEnabled,omitempty"`
	// ESS state
	State *commonmodule.Optional_StateKind `protobuf:"bytes,10,opt,name=state,proto3" json:"state,omitempty"`
	// Synchronize back to grid
	SyncBackToGrid *commonmodule.ControlDPC `protobuf:"bytes,11,opt,name=syncBackToGrid,proto3" json:"syncBackToGrid,omitempty"`
	// Transition to island on grid loss enable
	TransToIslndOnGridLossEnabled *commonmodule.ControlDPC `protobuf:"bytes,12,opt,name=transToIslndOnGridLossEnabled,proto3" json:"transToIslndOnGridLossEnabled,omitempty"`
	// Enable voltage set point
	VoltageSetPointEnabled *commonmodule.ControlDPC `protobuf:"bytes,13,opt,name=voltageSetPointEnabled,proto3" json:"voltageSetPointEnabled,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                 `json:"-"`
	XXX_unrecognized       []byte                   `json:"-"`
	XXX_sizecache          int32                    `json:"-"`
}

func (m *ESSPointStatus) Reset()         { *m = ESSPointStatus{} }
func (m *ESSPointStatus) String() string { return proto.CompactTextString(m) }
func (*ESSPointStatus) ProtoMessage()    {}
func (*ESSPointStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd0031865232ccc6, []int{10}
}

func (m *ESSPointStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ESSPointStatus.Unmarshal(m, b)
}
func (m *ESSPointStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ESSPointStatus.Marshal(b, m, deterministic)
}
func (m *ESSPointStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESSPointStatus.Merge(m, src)
}
func (m *ESSPointStatus) XXX_Size() int {
	return xxx_messageInfo_ESSPointStatus.Size(m)
}
func (m *ESSPointStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ESSPointStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ESSPointStatus proto.InternalMessageInfo

func (m *ESSPointStatus) GetBlackStartEnabled() *commonmodule.ControlDPC {
	if m != nil {
		return m.BlackStartEnabled
	}
	return nil
}

func (m *ESSPointStatus) GetFrequencySetPointEnabled() *commonmodule.ControlDPC {
	if m != nil {
		return m.FrequencySetPointEnabled
	}
	return nil
}

func (m *ESSPointStatus) GetFunction() *ESSFunction {
	if m != nil {
		return m.Function
	}
	return nil
}

func (m *ESSPointStatus) GetMode() *commonmodule.ENG_GridConnectModeKind {
	if m != nil {
		return m.Mode
	}
	return nil
}

func (m *ESSPointStatus) GetPctHzDroop() *wrappers.FloatValue {
	if m != nil {
		return m.PctHzDroop
	}
	return nil
}

func (m *ESSPointStatus) GetPctVDroop() *wrappers.FloatValue {
	if m != nil {
		return m.PctVDroop
	}
	return nil
}

func (m *ESSPointStatus) GetRampRates() *commonmodule.RampRate {
	if m != nil {
		return m.RampRates
	}
	return nil
}

func (m *ESSPointStatus) GetReactivePwrSetPointEnabled() *commonmodule.ControlDPC {
	if m != nil {
		return m.ReactivePwrSetPointEnabled
	}
	return nil
}

func (m *ESSPointStatus) GetRealPwrSetPointEnabled() *commonmodule.ControlDPC {
	if m != nil {
		return m.RealPwrSetPointEnabled
	}
	return nil
}

func (m *ESSPointStatus) GetState() *commonmodule.Optional_StateKind {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *ESSPointStatus) GetSyncBackToGrid() *commonmodule.ControlDPC {
	if m != nil {
		return m.SyncBackToGrid
	}
	return nil
}

func (m *ESSPointStatus) GetTransToIslndOnGridLossEnabled() *commonmodule.ControlDPC {
	if m != nil {
		return m.TransToIslndOnGridLossEnabled
	}
	return nil
}

func (m *ESSPointStatus) GetVoltageSetPointEnabled() *commonmodule.ControlDPC {
	if m != nil {
		return m.VoltageSetPointEnabled
	}
	return nil
}

// Specialized 61850 ZGEN class
type ESSEventAndStatusZGEN struct {
	// UML inherited base object
	LogicalNodeForEventAndStatus *commonmodule.LogicalNodeForEventAndStatus `protobuf:"bytes,1,opt,name=logicalNodeForEventAndStatus,proto3" json:"logicalNodeForEventAndStatus,omitempty"`
	// DC Power On/Off Status; True = DC power on
	AuxPwrSt *commonmodule.StatusSPS `protobuf:"bytes,2,opt,name=AuxPwrSt,proto3" json:"AuxPwrSt,omitempty"`
	// MISSING DOCUMENTATION!!!
	DynamicTest *commonmodule.ENS_DynamicTestKind `protobuf:"bytes,3,opt,name=DynamicTest,proto3" json:"DynamicTest,omitempty"`
	// Emergency stop
	EmgStop *commonmodule.StatusSPS `protobuf:"bytes,4,opt,name=EmgStop,proto3" json:"EmgStop,omitempty"`
	// Generator is synchronized to EPS, or not; True = Synchronized
	GnSynSt *commonmodule.StatusSPS `protobuf:"bytes,5,opt,name=GnSynSt,proto3" json:"GnSynSt,omitempty"`
	// Point status
	PointStatus          *ESSPointStatus `protobuf:"bytes,6,opt,name=PointStatus,proto3" json:"PointStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ESSEventAndStatusZGEN) Reset()         { *m = ESSEventAndStatusZGEN{} }
func (m *ESSEventAndStatusZGEN) String() string { return proto.CompactTextString(m) }
func (*ESSEventAndStatusZGEN) ProtoMessage()    {}
func (*ESSEventAndStatusZGEN) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd0031865232ccc6, []int{11}
}

func (m *ESSEventAndStatusZGEN) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ESSEventAndStatusZGEN.Unmarshal(m, b)
}
func (m *ESSEventAndStatusZGEN) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ESSEventAndStatusZGEN.Marshal(b, m, deterministic)
}
func (m *ESSEventAndStatusZGEN) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESSEventAndStatusZGEN.Merge(m, src)
}
func (m *ESSEventAndStatusZGEN) XXX_Size() int {
	return xxx_messageInfo_ESSEventAndStatusZGEN.Size(m)
}
func (m *ESSEventAndStatusZGEN) XXX_DiscardUnknown() {
	xxx_messageInfo_ESSEventAndStatusZGEN.DiscardUnknown(m)
}

var xxx_messageInfo_ESSEventAndStatusZGEN proto.InternalMessageInfo

func (m *ESSEventAndStatusZGEN) GetLogicalNodeForEventAndStatus() *commonmodule.LogicalNodeForEventAndStatus {
	if m != nil {
		return m.LogicalNodeForEventAndStatus
	}
	return nil
}

func (m *ESSEventAndStatusZGEN) GetAuxPwrSt() *commonmodule.StatusSPS {
	if m != nil {
		return m.AuxPwrSt
	}
	return nil
}

func (m *ESSEventAndStatusZGEN) GetDynamicTest() *commonmodule.ENS_DynamicTestKind {
	if m != nil {
		return m.DynamicTest
	}
	return nil
}

func (m *ESSEventAndStatusZGEN) GetEmgStop() *commonmodule.StatusSPS {
	if m != nil {
		return m.EmgStop
	}
	return nil
}

func (m *ESSEventAndStatusZGEN) GetGnSynSt() *commonmodule.StatusSPS {
	if m != nil {
		return m.GnSynSt
	}
	return nil
}

func (m *ESSEventAndStatusZGEN) GetPointStatus() *ESSPointStatus {
	if m != nil {
		return m.PointStatus
	}
	return nil
}

// Specialized 61850 ZGEN class for ESS event profile
type ESSEventZGEN struct {
	// UML inherited base object
	ESSEventAndStatusZGEN *ESSEventAndStatusZGEN `protobuf:"bytes,1,opt,name=eSSEventAndStatusZGEN,proto3" json:"eSSEventAndStatusZGEN,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}               `json:"-"`
	XXX_unrecognized      []byte                 `json:"-"`
	XXX_sizecache         int32                  `json:"-"`
}

func (m *ESSEventZGEN) Reset()         { *m = ESSEventZGEN{} }
func (m *ESSEventZGEN) String() string { return proto.CompactTextString(m) }
func (*ESSEventZGEN) ProtoMessage()    {}
func (*ESSEventZGEN) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd0031865232ccc6, []int{12}
}

func (m *ESSEventZGEN) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ESSEventZGEN.Unmarshal(m, b)
}
func (m *ESSEventZGEN) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ESSEventZGEN.Marshal(b, m, deterministic)
}
func (m *ESSEventZGEN) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESSEventZGEN.Merge(m, src)
}
func (m *ESSEventZGEN) XXX_Size() int {
	return xxx_messageInfo_ESSEventZGEN.Size(m)
}
func (m *ESSEventZGEN) XXX_DiscardUnknown() {
	xxx_messageInfo_ESSEventZGEN.DiscardUnknown(m)
}

var xxx_messageInfo_ESSEventZGEN proto.InternalMessageInfo

func (m *ESSEventZGEN) GetESSEventAndStatusZGEN() *ESSEventAndStatusZGEN {
	if m != nil {
		return m.ESSEventAndStatusZGEN
	}
	return nil
}

// ESS event
type ESSEvent struct {
	// UML inherited base object
	EventValue *commonmodule.EventValue `protobuf:"bytes,1,opt,name=eventValue,proto3" json:"eventValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	EssEventZBAT *EssEventZBAT `protobuf:"bytes,2,opt,name=essEventZBAT,proto3" json:"essEventZBAT,omitempty"`
	// MISSING DOCUMENTATION!!!
	EssEventZGEN         *ESSEventZGEN `protobuf:"bytes,3,opt,name=essEventZGEN,proto3" json:"essEventZGEN,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ESSEvent) Reset()         { *m = ESSEvent{} }
func (m *ESSEvent) String() string { return proto.CompactTextString(m) }
func (*ESSEvent) ProtoMessage()    {}
func (*ESSEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd0031865232ccc6, []int{13}
}

func (m *ESSEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ESSEvent.Unmarshal(m, b)
}
func (m *ESSEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ESSEvent.Marshal(b, m, deterministic)
}
func (m *ESSEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESSEvent.Merge(m, src)
}
func (m *ESSEvent) XXX_Size() int {
	return xxx_messageInfo_ESSEvent.Size(m)
}
func (m *ESSEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ESSEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ESSEvent proto.InternalMessageInfo

func (m *ESSEvent) GetEventValue() *commonmodule.EventValue {
	if m != nil {
		return m.EventValue
	}
	return nil
}

func (m *ESSEvent) GetEssEventZBAT() *EssEventZBAT {
	if m != nil {
		return m.EssEventZBAT
	}
	return nil
}

func (m *ESSEvent) GetEssEventZGEN() *ESSEventZGEN {
	if m != nil {
		return m.EssEventZGEN
	}
	return nil
}

// ESS event profile
type ESSEventProfile struct {
	// UML inherited base object
	EventMessageInfo *commonmodule.EventMessageInfo `protobuf:"bytes,1,opt,name=eventMessageInfo,proto3" json:"eventMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	Ess *commonmodule.ESS `protobuf:"bytes,2,opt,name=ess,proto3" json:"ess,omitempty"`
	// MISSING DOCUMENTATION!!!
	EssEvent *ESSEvent `protobuf:"bytes,3,opt,name=essEvent,proto3" json:"essEvent,omitempty"`
	// MISSING DOCUMENTATION!!!
	Ied                  *commonmodule.IED `protobuf:"bytes,4,opt,name=ied,proto3" json:"ied,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ESSEventProfile) Reset()         { *m = ESSEventProfile{} }
func (m *ESSEventProfile) String() string { return proto.CompactTextString(m) }
func (*ESSEventProfile) ProtoMessage()    {}
func (*ESSEventProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd0031865232ccc6, []int{14}
}

func (m *ESSEventProfile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ESSEventProfile.Unmarshal(m, b)
}
func (m *ESSEventProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ESSEventProfile.Marshal(b, m, deterministic)
}
func (m *ESSEventProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESSEventProfile.Merge(m, src)
}
func (m *ESSEventProfile) XXX_Size() int {
	return xxx_messageInfo_ESSEventProfile.Size(m)
}
func (m *ESSEventProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_ESSEventProfile.DiscardUnknown(m)
}

var xxx_messageInfo_ESSEventProfile proto.InternalMessageInfo

func (m *ESSEventProfile) GetEventMessageInfo() *commonmodule.EventMessageInfo {
	if m != nil {
		return m.EventMessageInfo
	}
	return nil
}

func (m *ESSEventProfile) GetEss() *commonmodule.ESS {
	if m != nil {
		return m.Ess
	}
	return nil
}

func (m *ESSEventProfile) GetEssEvent() *ESSEvent {
	if m != nil {
		return m.EssEvent
	}
	return nil
}

func (m *ESSEventProfile) GetIed() *commonmodule.IED {
	if m != nil {
		return m.Ied
	}
	return nil
}

// ESS reading value
type ESSReading struct {
	// UML inherited base object
	ConductingEquipmentTerminalReading *commonmodule.ConductingEquipmentTerminalReading `protobuf:"bytes,1,opt,name=conductingEquipmentTerminalReading,proto3" json:"conductingEquipmentTerminalReading,omitempty"`
	// MISSING DOCUMENTATION!!!
	PhaseMMTN *commonmodule.PhaseMMTN `protobuf:"bytes,2,opt,name=phaseMMTN,proto3" json:"phaseMMTN,omitempty"`
	// MISSING DOCUMENTATION!!!
	ReadingMMTR *commonmodule.ReadingMMTR `protobuf:"bytes,3,opt,name=readingMMTR,proto3" json:"readingMMTR,omitempty"`
	// MISSING DOCUMENTATION!!!
	ReadingMMXU          *commonmodule.ReadingMMXU `protobuf:"bytes,4,opt,name=readingMMXU,proto3" json:"readingMMXU,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ESSReading) Reset()         { *m = ESSReading{} }
func (m *ESSReading) String() string { return proto.CompactTextString(m) }
func (*ESSReading) ProtoMessage()    {}
func (*ESSReading) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd0031865232ccc6, []int{15}
}

func (m *ESSReading) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ESSReading.Unmarshal(m, b)
}
func (m *ESSReading) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ESSReading.Marshal(b, m, deterministic)
}
func (m *ESSReading) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESSReading.Merge(m, src)
}
func (m *ESSReading) XXX_Size() int {
	return xxx_messageInfo_ESSReading.Size(m)
}
func (m *ESSReading) XXX_DiscardUnknown() {
	xxx_messageInfo_ESSReading.DiscardUnknown(m)
}

var xxx_messageInfo_ESSReading proto.InternalMessageInfo

func (m *ESSReading) GetConductingEquipmentTerminalReading() *commonmodule.ConductingEquipmentTerminalReading {
	if m != nil {
		return m.ConductingEquipmentTerminalReading
	}
	return nil
}

func (m *ESSReading) GetPhaseMMTN() *commonmodule.PhaseMMTN {
	if m != nil {
		return m.PhaseMMTN
	}
	return nil
}

func (m *ESSReading) GetReadingMMTR() *commonmodule.ReadingMMTR {
	if m != nil {
		return m.ReadingMMTR
	}
	return nil
}

func (m *ESSReading) GetReadingMMXU() *commonmodule.ReadingMMXU {
	if m != nil {
		return m.ReadingMMXU
	}
	return nil
}

// ESS reading profile
type ESSReadingProfile struct {
	// UML inherited base object
	ReadingMessageInfo *commonmodule.ReadingMessageInfo `protobuf:"bytes,1,opt,name=readingMessageInfo,proto3" json:"readingMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	Ess *commonmodule.ESS `protobuf:"bytes,2,opt,name=ess,proto3" json:"ess,omitempty"`
	// MISSING DOCUMENTATION!!!
	EssReading *ESSReading `protobuf:"bytes,3,opt,name=essReading,proto3" json:"essReading,omitempty"`
	// MISSING DOCUMENTATION!!!
	Ied                  *commonmodule.IED `protobuf:"bytes,4,opt,name=ied,proto3" json:"ied,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ESSReadingProfile) Reset()         { *m = ESSReadingProfile{} }
func (m *ESSReadingProfile) String() string { return proto.CompactTextString(m) }
func (*ESSReadingProfile) ProtoMessage()    {}
func (*ESSReadingProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd0031865232ccc6, []int{16}
}

func (m *ESSReadingProfile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ESSReadingProfile.Unmarshal(m, b)
}
func (m *ESSReadingProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ESSReadingProfile.Marshal(b, m, deterministic)
}
func (m *ESSReadingProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESSReadingProfile.Merge(m, src)
}
func (m *ESSReadingProfile) XXX_Size() int {
	return xxx_messageInfo_ESSReadingProfile.Size(m)
}
func (m *ESSReadingProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_ESSReadingProfile.DiscardUnknown(m)
}

var xxx_messageInfo_ESSReadingProfile proto.InternalMessageInfo

func (m *ESSReadingProfile) GetReadingMessageInfo() *commonmodule.ReadingMessageInfo {
	if m != nil {
		return m.ReadingMessageInfo
	}
	return nil
}

func (m *ESSReadingProfile) GetEss() *commonmodule.ESS {
	if m != nil {
		return m.Ess
	}
	return nil
}

func (m *ESSReadingProfile) GetEssReading() *ESSReading {
	if m != nil {
		return m.EssReading
	}
	return nil
}

func (m *ESSReadingProfile) GetIed() *commonmodule.IED {
	if m != nil {
		return m.Ied
	}
	return nil
}

// Specialized 61850 ZBAT
type EssStatusZBAT struct {
	// UML inherited base object
	LogicalNodeForEventAndStatus *commonmodule.LogicalNodeForEventAndStatus `protobuf:"bytes,1,opt,name=logicalNodeForEventAndStatus,proto3" json:"logicalNodeForEventAndStatus,omitempty"`
	// Battery system status &ndash; True: on
	BatSt *commonmodule.StatusSPS `protobuf:"bytes,2,opt,name=BatSt,proto3" json:"BatSt,omitempty"`
	// MISSING DOCUMENTATION!!!
	GriMod *commonmodule.ENG_GridConnectModeKind `protobuf:"bytes,3,opt,name=GriMod,proto3" json:"GriMod,omitempty"`
	// State of charge (in percentage)
	Soc *commonmodule.MV `protobuf:"bytes,4,opt,name=Soc,proto3" json:"Soc,omitempty"`
	// MISSING DOCUMENTATION!!!
	Stdby                *commonmodule.StatusSPS `protobuf:"bytes,5,opt,name=Stdby,proto3" json:"Stdby,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *EssStatusZBAT) Reset()         { *m = EssStatusZBAT{} }
func (m *EssStatusZBAT) String() string { return proto.CompactTextString(m) }
func (*EssStatusZBAT) ProtoMessage()    {}
func (*EssStatusZBAT) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd0031865232ccc6, []int{17}
}

func (m *EssStatusZBAT) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EssStatusZBAT.Unmarshal(m, b)
}
func (m *EssStatusZBAT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EssStatusZBAT.Marshal(b, m, deterministic)
}
func (m *EssStatusZBAT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EssStatusZBAT.Merge(m, src)
}
func (m *EssStatusZBAT) XXX_Size() int {
	return xxx_messageInfo_EssStatusZBAT.Size(m)
}
func (m *EssStatusZBAT) XXX_DiscardUnknown() {
	xxx_messageInfo_EssStatusZBAT.DiscardUnknown(m)
}

var xxx_messageInfo_EssStatusZBAT proto.InternalMessageInfo

func (m *EssStatusZBAT) GetLogicalNodeForEventAndStatus() *commonmodule.LogicalNodeForEventAndStatus {
	if m != nil {
		return m.LogicalNodeForEventAndStatus
	}
	return nil
}

func (m *EssStatusZBAT) GetBatSt() *commonmodule.StatusSPS {
	if m != nil {
		return m.BatSt
	}
	return nil
}

func (m *EssStatusZBAT) GetGriMod() *commonmodule.ENG_GridConnectModeKind {
	if m != nil {
		return m.GriMod
	}
	return nil
}

func (m *EssStatusZBAT) GetSoc() *commonmodule.MV {
	if m != nil {
		return m.Soc
	}
	return nil
}

func (m *EssStatusZBAT) GetStdby() *commonmodule.StatusSPS {
	if m != nil {
		return m.Stdby
	}
	return nil
}

// Specialized 61850 ZGEN class
type ESSStatusZGEN struct {
	// UML inherited base object
	ESSEventAndStatusZGEN *ESSEventAndStatusZGEN `protobuf:"bytes,1,opt,name=eSSEventAndStatusZGEN,proto3" json:"eSSEventAndStatusZGEN,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}               `json:"-"`
	XXX_unrecognized      []byte                 `json:"-"`
	XXX_sizecache         int32                  `json:"-"`
}

func (m *ESSStatusZGEN) Reset()         { *m = ESSStatusZGEN{} }
func (m *ESSStatusZGEN) String() string { return proto.CompactTextString(m) }
func (*ESSStatusZGEN) ProtoMessage()    {}
func (*ESSStatusZGEN) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd0031865232ccc6, []int{18}
}

func (m *ESSStatusZGEN) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ESSStatusZGEN.Unmarshal(m, b)
}
func (m *ESSStatusZGEN) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ESSStatusZGEN.Marshal(b, m, deterministic)
}
func (m *ESSStatusZGEN) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESSStatusZGEN.Merge(m, src)
}
func (m *ESSStatusZGEN) XXX_Size() int {
	return xxx_messageInfo_ESSStatusZGEN.Size(m)
}
func (m *ESSStatusZGEN) XXX_DiscardUnknown() {
	xxx_messageInfo_ESSStatusZGEN.DiscardUnknown(m)
}

var xxx_messageInfo_ESSStatusZGEN proto.InternalMessageInfo

func (m *ESSStatusZGEN) GetESSEventAndStatusZGEN() *ESSEventAndStatusZGEN {
	if m != nil {
		return m.ESSEventAndStatusZGEN
	}
	return nil
}

// ESS status
type ESSStatus struct {
	// UML inherited base object
	StatusValue *commonmodule.StatusValue `protobuf:"bytes,1,opt,name=statusValue,proto3" json:"statusValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	EssStatusZBAT *EssStatusZBAT `protobuf:"bytes,2,opt,name=essStatusZBAT,proto3" json:"essStatusZBAT,omitempty"`
	// MISSING DOCUMENTATION!!!
	EssStatusZGEN        *ESSStatusZGEN `protobuf:"bytes,3,opt,name=essStatusZGEN,proto3" json:"essStatusZGEN,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ESSStatus) Reset()         { *m = ESSStatus{} }
func (m *ESSStatus) String() string { return proto.CompactTextString(m) }
func (*ESSStatus) ProtoMessage()    {}
func (*ESSStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd0031865232ccc6, []int{19}
}

func (m *ESSStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ESSStatus.Unmarshal(m, b)
}
func (m *ESSStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ESSStatus.Marshal(b, m, deterministic)
}
func (m *ESSStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESSStatus.Merge(m, src)
}
func (m *ESSStatus) XXX_Size() int {
	return xxx_messageInfo_ESSStatus.Size(m)
}
func (m *ESSStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ESSStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ESSStatus proto.InternalMessageInfo

func (m *ESSStatus) GetStatusValue() *commonmodule.StatusValue {
	if m != nil {
		return m.StatusValue
	}
	return nil
}

func (m *ESSStatus) GetEssStatusZBAT() *EssStatusZBAT {
	if m != nil {
		return m.EssStatusZBAT
	}
	return nil
}

func (m *ESSStatus) GetEssStatusZGEN() *ESSStatusZGEN {
	if m != nil {
		return m.EssStatusZGEN
	}
	return nil
}

// ESS status profile
type ESSStatusProfile struct {
	// UML inherited base object
	StatusMessageInfo *commonmodule.StatusMessageInfo `protobuf:"bytes,1,opt,name=statusMessageInfo,proto3" json:"statusMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	Ess *commonmodule.ESS `protobuf:"bytes,2,opt,name=ess,proto3" json:"ess,omitempty"`
	// MISSING DOCUMENTATION!!!
	EssStatus *ESSStatus `protobuf:"bytes,3,opt,name=essStatus,proto3" json:"essStatus,omitempty"`
	// MISSING DOCUMENTATION!!!
	Ied                  *commonmodule.IED `protobuf:"bytes,4,opt,name=ied,proto3" json:"ied,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ESSStatusProfile) Reset()         { *m = ESSStatusProfile{} }
func (m *ESSStatusProfile) String() string { return proto.CompactTextString(m) }
func (*ESSStatusProfile) ProtoMessage()    {}
func (*ESSStatusProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd0031865232ccc6, []int{20}
}

func (m *ESSStatusProfile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ESSStatusProfile.Unmarshal(m, b)
}
func (m *ESSStatusProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ESSStatusProfile.Marshal(b, m, deterministic)
}
func (m *ESSStatusProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESSStatusProfile.Merge(m, src)
}
func (m *ESSStatusProfile) XXX_Size() int {
	return xxx_messageInfo_ESSStatusProfile.Size(m)
}
func (m *ESSStatusProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_ESSStatusProfile.DiscardUnknown(m)
}

var xxx_messageInfo_ESSStatusProfile proto.InternalMessageInfo

func (m *ESSStatusProfile) GetStatusMessageInfo() *commonmodule.StatusMessageInfo {
	if m != nil {
		return m.StatusMessageInfo
	}
	return nil
}

func (m *ESSStatusProfile) GetEss() *commonmodule.ESS {
	if m != nil {
		return m.Ess
	}
	return nil
}

func (m *ESSStatusProfile) GetEssStatus() *ESSStatus {
	if m != nil {
		return m.EssStatus
	}
	return nil
}

func (m *ESSStatusProfile) GetIed() *commonmodule.IED {
	if m != nil {
		return m.Ied
	}
	return nil
}

// Point definition (Point)
type ESSPoint struct {
	// Black start enable
	BlackStartEnabled *commonmodule.ControlDPC `protobuf:"bytes,1,opt,name=blackStartEnabled,proto3" json:"blackStartEnabled,omitempty"`
	// Enable frequency set point
	FrequencySetPointEnabled *commonmodule.ControlDPC `protobuf:"bytes,2,opt,name=frequencySetPointEnabled,proto3" json:"frequencySetPointEnabled,omitempty"`
	// ESS function parameter
	Function *ESSFunction `protobuf:"bytes,3,opt,name=function,proto3" json:"function,omitempty"`
	// Grid connect mode
	Mode *commonmodule.ENG_GridConnectModeKind `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"`
	// Black start enable
	PctHzDroop *wrappers.FloatValue `protobuf:"bytes,5,opt,name=pctHzDroop,proto3" json:"pctHzDroop,omitempty"`
	// Black start enable
	PctVDroop *wrappers.FloatValue `protobuf:"bytes,6,opt,name=pctVDroop,proto3" json:"pctVDroop,omitempty"`
	// Ramp rates
	RampRates *commonmodule.RampRate `protobuf:"bytes,7,opt,name=rampRates,proto3" json:"rampRates,omitempty"`
	// Enable reactive power set point
	ReactivePwrSetPointEnabled *commonmodule.ControlDPC `protobuf:"bytes,8,opt,name=reactivePwrSetPointEnabled,proto3" json:"reactivePwrSetPointEnabled,omitempty"`
	// Enable real power set point
	RealPwrSetPointEnabled *commonmodule.ControlDPC `protobuf:"bytes,9,opt,name=realPwrSetPointEnabled,proto3" json:"realPwrSetPointEnabled,omitempty"`
	// Reset device
	Reset_ *commonmodule.ControlDPC `protobuf:"bytes,10,opt,name=reset,proto3" json:"reset,omitempty"`
	// ESS state
	State *commonmodule.Optional_StateKind `protobuf:"bytes,11,opt,name=state,proto3" json:"state,omitempty"`
	// Synchronize back to grid
	SyncBackToGrid *commonmodule.ControlDPC `protobuf:"bytes,12,opt,name=syncBackToGrid,proto3" json:"syncBackToGrid,omitempty"`
	// Transition to island on grid loss enable
	TransToIslndOnGridLossEnabled *commonmodule.ControlDPC `protobuf:"bytes,13,opt,name=transToIslndOnGridLossEnabled,proto3" json:"transToIslndOnGridLossEnabled,omitempty"`
	// Enable voltage set point
	VoltageSetPointEnabled *commonmodule.ControlDPC `protobuf:"bytes,14,opt,name=voltageSetPointEnabled,proto3" json:"voltageSetPointEnabled,omitempty"`
	// Start time
	StartTime            *commonmodule.ControlTimestamp `protobuf:"bytes,15,opt,name=startTime,proto3" json:"startTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *ESSPoint) Reset()         { *m = ESSPoint{} }
func (m *ESSPoint) String() string { return proto.CompactTextString(m) }
func (*ESSPoint) ProtoMessage()    {}
func (*ESSPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd0031865232ccc6, []int{21}
}

func (m *ESSPoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ESSPoint.Unmarshal(m, b)
}
func (m *ESSPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ESSPoint.Marshal(b, m, deterministic)
}
func (m *ESSPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESSPoint.Merge(m, src)
}
func (m *ESSPoint) XXX_Size() int {
	return xxx_messageInfo_ESSPoint.Size(m)
}
func (m *ESSPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_ESSPoint.DiscardUnknown(m)
}

var xxx_messageInfo_ESSPoint proto.InternalMessageInfo

func (m *ESSPoint) GetBlackStartEnabled() *commonmodule.ControlDPC {
	if m != nil {
		return m.BlackStartEnabled
	}
	return nil
}

func (m *ESSPoint) GetFrequencySetPointEnabled() *commonmodule.ControlDPC {
	if m != nil {
		return m.FrequencySetPointEnabled
	}
	return nil
}

func (m *ESSPoint) GetFunction() *ESSFunction {
	if m != nil {
		return m.Function
	}
	return nil
}

func (m *ESSPoint) GetMode() *commonmodule.ENG_GridConnectModeKind {
	if m != nil {
		return m.Mode
	}
	return nil
}

func (m *ESSPoint) GetPctHzDroop() *wrappers.FloatValue {
	if m != nil {
		return m.PctHzDroop
	}
	return nil
}

func (m *ESSPoint) GetPctVDroop() *wrappers.FloatValue {
	if m != nil {
		return m.PctVDroop
	}
	return nil
}

func (m *ESSPoint) GetRampRates() *commonmodule.RampRate {
	if m != nil {
		return m.RampRates
	}
	return nil
}

func (m *ESSPoint) GetReactivePwrSetPointEnabled() *commonmodule.ControlDPC {
	if m != nil {
		return m.ReactivePwrSetPointEnabled
	}
	return nil
}

func (m *ESSPoint) GetRealPwrSetPointEnabled() *commonmodule.ControlDPC {
	if m != nil {
		return m.RealPwrSetPointEnabled
	}
	return nil
}

func (m *ESSPoint) GetReset_() *commonmodule.ControlDPC {
	if m != nil {
		return m.Reset_
	}
	return nil
}

func (m *ESSPoint) GetState() *commonmodule.Optional_StateKind {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *ESSPoint) GetSyncBackToGrid() *commonmodule.ControlDPC {
	if m != nil {
		return m.SyncBackToGrid
	}
	return nil
}

func (m *ESSPoint) GetTransToIslndOnGridLossEnabled() *commonmodule.ControlDPC {
	if m != nil {
		return m.TransToIslndOnGridLossEnabled
	}
	return nil
}

func (m *ESSPoint) GetVoltageSetPointEnabled() *commonmodule.ControlDPC {
	if m != nil {
		return m.VoltageSetPointEnabled
	}
	return nil
}

func (m *ESSPoint) GetStartTime() *commonmodule.ControlTimestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

// Curve shape setting (FC=SP) (CSG_SP)
type ESSCSG struct {
	// The array with the points specifying a curve shape.
	CrvPts               []*ESSPoint `protobuf:"bytes,1,rep,name=crvPts,proto3" json:"crvPts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ESSCSG) Reset()         { *m = ESSCSG{} }
func (m *ESSCSG) String() string { return proto.CompactTextString(m) }
func (*ESSCSG) ProtoMessage()    {}
func (*ESSCSG) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd0031865232ccc6, []int{22}
}

func (m *ESSCSG) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ESSCSG.Unmarshal(m, b)
}
func (m *ESSCSG) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ESSCSG.Marshal(b, m, deterministic)
}
func (m *ESSCSG) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESSCSG.Merge(m, src)
}
func (m *ESSCSG) XXX_Size() int {
	return xxx_messageInfo_ESSCSG.Size(m)
}
func (m *ESSCSG) XXX_DiscardUnknown() {
	xxx_messageInfo_ESSCSG.DiscardUnknown(m)
}

var xxx_messageInfo_ESSCSG proto.InternalMessageInfo

func (m *ESSCSG) GetCrvPts() []*ESSPoint {
	if m != nil {
		return m.CrvPts
	}
	return nil
}

// OpenFMB specialization for control schedule using:  LN: Schedule   Name: FSCH
type ESSControlScheduleFSCH struct {
	// Discrete value in ESSCSG type
	ValDCSG              *ESSCSG  `protobuf:"bytes,1,opt,name=ValDCSG,proto3" json:"ValDCSG,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ESSControlScheduleFSCH) Reset()         { *m = ESSControlScheduleFSCH{} }
func (m *ESSControlScheduleFSCH) String() string { return proto.CompactTextString(m) }
func (*ESSControlScheduleFSCH) ProtoMessage()    {}
func (*ESSControlScheduleFSCH) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd0031865232ccc6, []int{23}
}

func (m *ESSControlScheduleFSCH) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ESSControlScheduleFSCH.Unmarshal(m, b)
}
func (m *ESSControlScheduleFSCH) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ESSControlScheduleFSCH.Marshal(b, m, deterministic)
}
func (m *ESSControlScheduleFSCH) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESSControlScheduleFSCH.Merge(m, src)
}
func (m *ESSControlScheduleFSCH) XXX_Size() int {
	return xxx_messageInfo_ESSControlScheduleFSCH.Size(m)
}
func (m *ESSControlScheduleFSCH) XXX_DiscardUnknown() {
	xxx_messageInfo_ESSControlScheduleFSCH.DiscardUnknown(m)
}

var xxx_messageInfo_ESSControlScheduleFSCH proto.InternalMessageInfo

func (m *ESSControlScheduleFSCH) GetValDCSG() *ESSCSG {
	if m != nil {
		return m.ValDCSG
	}
	return nil
}

// Specialized 61850 FSCC class.  LN: Schedule controller   Name: FSCC
type EssControlFSCC struct {
	// UML inherited base object
	ControlFSCC *commonmodule.ControlFSCC `protobuf:"bytes,1,opt,name=controlFSCC,proto3" json:"controlFSCC,omitempty"`
	// MISSING DOCUMENTATION!!!
	EssControlScheduleFSCH *ESSControlScheduleFSCH `protobuf:"bytes,2,opt,name=essControlScheduleFSCH,proto3" json:"essControlScheduleFSCH,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                `json:"-"`
	XXX_unrecognized       []byte                  `json:"-"`
	XXX_sizecache          int32                   `json:"-"`
}

func (m *EssControlFSCC) Reset()         { *m = EssControlFSCC{} }
func (m *EssControlFSCC) String() string { return proto.CompactTextString(m) }
func (*EssControlFSCC) ProtoMessage()    {}
func (*EssControlFSCC) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd0031865232ccc6, []int{24}
}

func (m *EssControlFSCC) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EssControlFSCC.Unmarshal(m, b)
}
func (m *EssControlFSCC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EssControlFSCC.Marshal(b, m, deterministic)
}
func (m *EssControlFSCC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EssControlFSCC.Merge(m, src)
}
func (m *EssControlFSCC) XXX_Size() int {
	return xxx_messageInfo_EssControlFSCC.Size(m)
}
func (m *EssControlFSCC) XXX_DiscardUnknown() {
	xxx_messageInfo_EssControlFSCC.DiscardUnknown(m)
}

var xxx_messageInfo_EssControlFSCC proto.InternalMessageInfo

func (m *EssControlFSCC) GetControlFSCC() *commonmodule.ControlFSCC {
	if m != nil {
		return m.ControlFSCC
	}
	return nil
}

func (m *EssControlFSCC) GetEssControlScheduleFSCH() *ESSControlScheduleFSCH {
	if m != nil {
		return m.EssControlScheduleFSCH
	}
	return nil
}

// ESS control class
type ESSControl struct {
	// UML inherited base object
	ControlValue *commonmodule.ControlValue `protobuf:"bytes,1,opt,name=controlValue,proto3" json:"controlValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	Check *commonmodule.CheckConditions `protobuf:"bytes,2,opt,name=check,proto3" json:"check,omitempty"`
	// MISSING DOCUMENTATION!!!
	EssControlFSCC       *EssControlFSCC `protobuf:"bytes,3,opt,name=essControlFSCC,proto3" json:"essControlFSCC,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ESSControl) Reset()         { *m = ESSControl{} }
func (m *ESSControl) String() string { return proto.CompactTextString(m) }
func (*ESSControl) ProtoMessage()    {}
func (*ESSControl) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd0031865232ccc6, []int{25}
}

func (m *ESSControl) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ESSControl.Unmarshal(m, b)
}
func (m *ESSControl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ESSControl.Marshal(b, m, deterministic)
}
func (m *ESSControl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESSControl.Merge(m, src)
}
func (m *ESSControl) XXX_Size() int {
	return xxx_messageInfo_ESSControl.Size(m)
}
func (m *ESSControl) XXX_DiscardUnknown() {
	xxx_messageInfo_ESSControl.DiscardUnknown(m)
}

var xxx_messageInfo_ESSControl proto.InternalMessageInfo

func (m *ESSControl) GetControlValue() *commonmodule.ControlValue {
	if m != nil {
		return m.ControlValue
	}
	return nil
}

func (m *ESSControl) GetCheck() *commonmodule.CheckConditions {
	if m != nil {
		return m.Check
	}
	return nil
}

func (m *ESSControl) GetEssControlFSCC() *EssControlFSCC {
	if m != nil {
		return m.EssControlFSCC
	}
	return nil
}

// ESS control profile
type ESSControlProfile struct {
	// UML inherited base object
	ControlMessageInfo *commonmodule.ControlMessageInfo `protobuf:"bytes,1,opt,name=controlMessageInfo,proto3" json:"controlMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	Ess *commonmodule.ESS `protobuf:"bytes,2,opt,name=ess,proto3" json:"ess,omitempty"`
	// MISSING DOCUMENTATION!!!
	EssControl *ESSControl `protobuf:"bytes,3,opt,name=essControl,proto3" json:"essControl,omitempty"`
	// MISSING DOCUMENTATION!!!
	Ied                  *commonmodule.IED `protobuf:"bytes,4,opt,name=ied,proto3" json:"ied,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ESSControlProfile) Reset()         { *m = ESSControlProfile{} }
func (m *ESSControlProfile) String() string { return proto.CompactTextString(m) }
func (*ESSControlProfile) ProtoMessage()    {}
func (*ESSControlProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd0031865232ccc6, []int{26}
}

func (m *ESSControlProfile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ESSControlProfile.Unmarshal(m, b)
}
func (m *ESSControlProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ESSControlProfile.Marshal(b, m, deterministic)
}
func (m *ESSControlProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESSControlProfile.Merge(m, src)
}
func (m *ESSControlProfile) XXX_Size() int {
	return xxx_messageInfo_ESSControlProfile.Size(m)
}
func (m *ESSControlProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_ESSControlProfile.DiscardUnknown(m)
}

var xxx_messageInfo_ESSControlProfile proto.InternalMessageInfo

func (m *ESSControlProfile) GetControlMessageInfo() *commonmodule.ControlMessageInfo {
	if m != nil {
		return m.ControlMessageInfo
	}
	return nil
}

func (m *ESSControlProfile) GetEss() *commonmodule.ESS {
	if m != nil {
		return m.Ess
	}
	return nil
}

func (m *ESSControlProfile) GetEssControl() *ESSControl {
	if m != nil {
		return m.EssControl
	}
	return nil
}

func (m *ESSControlProfile) GetIed() *commonmodule.IED {
	if m != nil {
		return m.Ied
	}
	return nil
}

func init() {
	proto.RegisterType((*EssEventZBAT)(nil), "essmodule.EssEventZBAT")
	proto.RegisterType((*FrequencyRegulation)(nil), "essmodule.FrequencyRegulation")
	proto.RegisterType((*PeakShaving)(nil), "essmodule.PeakShaving")
	proto.RegisterType((*SocLimit)(nil), "essmodule.SocLimit")
	proto.RegisterType((*SOCManagement)(nil), "essmodule.SOCManagement")
	proto.RegisterType((*VoltageRegulation)(nil), "essmodule.VoltageRegulation")
	proto.RegisterType((*VoltageDroop)(nil), "essmodule.VoltageDroop")
	proto.RegisterType((*VoltagePI)(nil), "essmodule.VoltagePI")
	proto.RegisterType((*CapacityFirming)(nil), "essmodule.CapacityFirming")
	proto.RegisterType((*ESSFunction)(nil), "essmodule.ESSFunction")
	proto.RegisterType((*ESSPointStatus)(nil), "essmodule.ESSPointStatus")
	proto.RegisterType((*ESSEventAndStatusZGEN)(nil), "essmodule.ESSEventAndStatusZGEN")
	proto.RegisterType((*ESSEventZGEN)(nil), "essmodule.ESSEventZGEN")
	proto.RegisterType((*ESSEvent)(nil), "essmodule.ESSEvent")
	proto.RegisterType((*ESSEventProfile)(nil), "essmodule.ESSEventProfile")
	proto.RegisterType((*ESSReading)(nil), "essmodule.ESSReading")
	proto.RegisterType((*ESSReadingProfile)(nil), "essmodule.ESSReadingProfile")
	proto.RegisterType((*EssStatusZBAT)(nil), "essmodule.EssStatusZBAT")
	proto.RegisterType((*ESSStatusZGEN)(nil), "essmodule.ESSStatusZGEN")
	proto.RegisterType((*ESSStatus)(nil), "essmodule.ESSStatus")
	proto.RegisterType((*ESSStatusProfile)(nil), "essmodule.ESSStatusProfile")
	proto.RegisterType((*ESSPoint)(nil), "essmodule.ESSPoint")
	proto.RegisterType((*ESSCSG)(nil), "essmodule.ESSCSG")
	proto.RegisterType((*ESSControlScheduleFSCH)(nil), "essmodule.ESSControlScheduleFSCH")
	proto.RegisterType((*EssControlFSCC)(nil), "essmodule.EssControlFSCC")
	proto.RegisterType((*ESSControl)(nil), "essmodule.ESSControl")
	proto.RegisterType((*ESSControlProfile)(nil), "essmodule.ESSControlProfile")
}

func init() { proto.RegisterFile("essmodule/essmodule.proto", fileDescriptor_fd0031865232ccc6) }

var fileDescriptor_fd0031865232ccc6 = []byte{
	// 2149 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0xcd, 0x6f, 0x1c, 0x49,
	0x15, 0xd7, 0xcc, 0xc4, 0xce, 0xcc, 0x1b, 0x7f, 0x96, 0x37, 0x66, 0xe2, 0x4d, 0xb2, 0xd9, 0x96,
	0x90, 0x10, 0x92, 0x6d, 0x48, 0x08, 0x10, 0xb2, 0x9b, 0x10, 0xcf, 0x97, 0xbd, 0xf1, 0xd8, 0x43,
	0x97, 0xd7, 0x0a, 0x11, 0x60, 0xb5, 0xbb, 0xcb, 0xe3, 0x56, 0x7a, 0xba, 0x66, 0xbb, 0x6a, 0xec,
	0x35, 0x27, 0xc4, 0x01, 0xc1, 0x05, 0xed, 0x05, 0x71, 0x45, 0xe2, 0x80, 0xb4, 0x07, 0x6e, 0x2b,
	0x71, 0x04, 0x09, 0x71, 0x44, 0x1c, 0xf8, 0x13, 0xb8, 0x83, 0xc4, 0x81, 0x2b, 0xaa, 0xee, 0xea,
	0xee, 0xea, 0x0f, 0xcf, 0xb4, 0xcd, 0x2e, 0x7b, 0xd9, 0x9b, 0xbb, 0xeb, 0xf7, 0xfb, 0xd5, 0xab,
	0xf7, 0x5e, 0xbd, 0x7a, 0xd5, 0x63, 0xb8, 0x4d, 0x18, 0x1b, 0x52, 0x6b, 0xec, 0x90, 0xcd, 0xe8,
	0xaf, 0x8d, 0x91, 0x47, 0x39, 0x45, 0xb5, 0xe8, 0xc5, 0x5a, 0x6d, 0x3c, 0x74, 0x82, 0xb7, 0x6b,
	0xf7, 0x06, 0x94, 0x0e, 0x1c, 0xb2, 0xe9, 0x3f, 0x1d, 0x8f, 0x4f, 0x36, 0xcf, 0x3d, 0x63, 0x34,
	0x22, 0x1e, 0x93, 0xe3, 0x6f, 0x99, 0x74, 0x38, 0xa4, 0xae, 0xd4, 0x54, 0x1f, 0x02, 0x80, 0xf6,
	0x8f, 0x32, 0xcc, 0xb5, 0x19, 0x6b, 0x9f, 0x11, 0x97, 0xbf, 0xda, 0x7a, 0x7e, 0x80, 0x38, 0xdc,
	0x71, 0xe8, 0xc0, 0x36, 0x0d, 0x67, 0x8f, 0x5a, 0xa4, 0x43, 0x3d, 0x7f, 0xe8, 0xb9, 0x6b, 0x61,
	0x6e, 0xf0, 0x31, 0x6b, 0x94, 0xee, 0x97, 0xbe, 0x52, 0x7f, 0xf0, 0xd5, 0x8d, 0x84, 0xd6, 0xee,
	0x04, 0xc6, 0xd6, 0x8d, 0x9f, 0x7c, 0xd2, 0x28, 0xe9, 0x13, 0x55, 0xd1, 0x3a, 0xcc, 0x6c, 0x19,
	0x7c, 0xdb, 0x6e, 0x94, 0x7d, 0xf9, 0x2f, 0x25, 0xe5, 0x03, 0x10, 0xee, 0x63, 0x3d, 0x40, 0x49,
	0xf8, 0x2e, 0x6d, 0x54, 0xa6, 0xc3, 0x77, 0xa9, 0x84, 0x63, 0xde, 0xb8, 0x31, 0x1d, 0x8e, 0x39,
	0xd2, 0xa0, 0x82, 0xa9, 0xd9, 0x98, 0xf1, 0xc1, 0x4b, 0x49, 0x70, 0xef, 0x50, 0x17, 0x83, 0x42,
	0x12, 0x73, 0xeb, 0xf8, 0xa2, 0x31, 0x3b, 0x45, 0xd2, 0x47, 0x69, 0x7f, 0x98, 0x81, 0x95, 0x8e,
	0x47, 0x3e, 0x18, 0x13, 0xd7, 0xbc, 0xd0, 0xc9, 0x60, 0xec, 0x18, 0xdc, 0xa6, 0x2e, 0xc2, 0xb0,
	0x7a, 0x12, 0xbe, 0x6e, 0x11, 0xc3, 0xda, 0x32, 0x5c, 0xab, 0x67, 0xbb, 0x91, 0x9f, 0xdf, 0xdc,
	0x08, 0x02, 0xbc, 0x11, 0x06, 0x78, 0xa3, 0xe3, 0x50, 0x83, 0x1f, 0x1a, 0xce, 0x98, 0xe8, 0x97,
	0x50, 0xd1, 0xf7, 0xe0, 0x56, 0x66, 0xa4, 0xef, 0x8c, 0x99, 0x74, 0xee, 0x44, 0xcd, 0x7c, 0x26,
	0xd2, 0x15, 0x3b, 0x63, 0xf3, 0x9b, 0xdc, 0x91, 0x11, 0x58, 0xcb, 0x68, 0x6e, 0x51, 0xea, 0xa4,
	0xcd, 0x4c, 0x30, 0xd1, 0x0e, 0x2c, 0x47, 0x23, 0x98, 0xf0, 0x3e, 0xb5, 0xdd, 0x30, 0x42, 0x13,
	0x4d, 0xcc, 0xb2, 0xd0, 0x11, 0xdc, 0x19, 0x78, 0xb6, 0x15, 0x79, 0x18, 0x73, 0xe3, 0xd8, 0x21,
	0xb1, 0x33, 0x67, 0xa6, 0xab, 0x4e, 0x14, 0x40, 0x3f, 0x84, 0x37, 0x2f, 0x19, 0xf7, 0x1d, 0x3b,
	0x3b, 0x5d, 0x7f, 0x12, 0x1f, 0xbd, 0x00, 0x44, 0xcf, 0x88, 0x17, 0x0d, 0xb7, 0x3c, 0x4a, 0x47,
	0x8d, 0x9b, 0xd3, 0x55, 0x73, 0x68, 0xa8, 0x07, 0x2b, 0x63, 0xd7, 0xca, 0xa8, 0x55, 0xa7, 0xab,
	0xe5, 0xf1, 0xb4, 0xdf, 0x55, 0xa0, 0xde, 0x27, 0xc6, 0x6b, 0x7c, 0x6a, 0x9c, 0xd9, 0xee, 0x00,
	0x75, 0x61, 0xe9, 0xd8, 0x60, 0x44, 0x3e, 0xee, 0xda, 0x43, 0x9b, 0x17, 0x49, 0xd6, 0x0c, 0x09,
	0x6d, 0xc1, 0xc2, 0x28, 0xd6, 0x15, 0xb9, 0x54, 0x9e, 0x9a, 0x4b, 0x29, 0x86, 0x30, 0x46, 0x79,
	0x13, 0x18, 0x53, 0x29, 0x60, 0x4c, 0x9a, 0x84, 0x0c, 0xb8, 0xcb, 0xa8, 0xd9, 0x33, 0x5c, 0x63,
	0x40, 0x86, 0xa2, 0x34, 0x39, 0x0e, 0x3d, 0x27, 0xd6, 0xb6, 0x3d, 0x38, 0x0d, 0x54, 0x0b, 0x24,
	0xe6, 0x64, 0x05, 0x91, 0xa4, 0x79, 0x80, 0x5d, 0x7a, 0x1e, 0xcc, 0x50, 0x24, 0x49, 0x27, 0x09,
	0x68, 0xff, 0x2a, 0x43, 0x15, 0x53, 0x33, 0x98, 0xed, 0x19, 0xcc, 0x31, 0x6a, 0xc6, 0xf6, 0x17,
	0x08, 0x51, 0x82, 0x20, 0x4a, 0x93, 0xfa, 0xbc, 0x7d, 0xc1, 0x38, 0xf1, 0x08, 0xb3, 0x0b, 0x95,
	0x91, 0x4b, 0xa8, 0xe8, 0x1d, 0xa8, 0x33, 0x69, 0x61, 0xb1, 0xe2, 0xa1, 0xc2, 0xd1, 0xbb, 0x01,
	0x3b, 0x74, 0x58, 0x81, 0x90, 0xa8, 0x78, 0x51, 0x17, 0x95, 0x47, 0x65, 0x41, 0x05, 0x3c, 0x9f,
	0xcf, 0xd4, 0xfe, 0x59, 0x86, 0x79, 0xbc, 0xdf, 0x8c, 0x63, 0x22, 0x32, 0x92, 0x51, 0xf3, 0xca,
	0xb5, 0x3c, 0x43, 0x42, 0x6d, 0x58, 0x54, 0xde, 0x15, 0xad, 0xdf, 0x69, 0x0e, 0xea, 0xf8, 0xf6,
	0xc4, 0x06, 0x16, 0x73, 0x7b, 0x86, 0x23, 0xd7, 0xd5, 0xa7, 0xe7, 0xc4, 0xbb, 0x4a, 0xb1, 0xce,
	0x90, 0x64, 0x10, 0x23, 0x8d, 0x99, 0x62, 0x41, 0x0c, 0xf1, 0xda, 0x2f, 0x2b, 0xb0, 0x7c, 0x48,
	0x1d, 0x6e, 0x0c, 0x88, 0x72, 0x8e, 0x76, 0x61, 0x49, 0x54, 0x42, 0x39, 0x10, 0x14, 0xbc, 0x22,
	0x5e, 0x4f, 0x93, 0xc4, 0xa1, 0xe4, 0x17, 0xc1, 0x84, 0x52, 0x01, 0xbf, 0x67, 0x59, 0x68, 0x1f,
	0xde, 0x38, 0x93, 0xcf, 0x89, 0x6c, 0x28, 0x50, 0x9f, 0x72, 0x89, 0xa2, 0xb0, 0xa7, 0xde, 0xfb,
	0x59, 0x51, 0x20, 0x0a, 0x79, 0x3c, 0x91, 0x60, 0xf2, 0xf5, 0x55, 0x82, 0x91, 0xe6, 0x68, 0xbf,
	0x29, 0xc1, 0x5c, 0x62, 0xdd, 0xad, 0x48, 0xd7, 0x7f, 0x16, 0x09, 0x57, 0x9a, 0x9a, 0x70, 0x69,
	0x0a, 0x7a, 0x0f, 0x96, 0xcf, 0xd2, 0x61, 0x96, 0x81, 0xb8, 0xb3, 0x11, 0x37, 0xc7, 0x99, 0x54,
	0xd0, 0xb3, 0x34, 0xed, 0xd7, 0x25, 0xa8, 0x49, 0x60, 0x7f, 0x07, 0x3d, 0x85, 0xb9, 0xb3, 0xf0,
	0xa1, 0x98, 0x71, 0x09, 0xfc, 0xa7, 0x6a, 0xd9, 0x7f, 0x4a, 0xb0, 0xd8, 0x34, 0x46, 0x86, 0x69,
	0xf3, 0x8b, 0x8e, 0xed, 0x0d, 0xc5, 0x01, 0xfb, 0x1e, 0x20, 0x33, 0xf9, 0xaa, 0x98, 0x95, 0x39,
	0x2c, 0xf4, 0x02, 0x56, 0x1c, 0x51, 0xb2, 0xf6, 0xc8, 0xc0, 0xe0, 0xf6, 0x19, 0x39, 0xb2, 0x46,
	0x47, 0x16, 0x2f, 0x94, 0xd0, 0x09, 0x5e, 0x6b, 0xd4, 0xe2, 0x91, 0x58, 0x9f, 0x32, 0x5b, 0x11,
	0xab, 0x14, 0x15, 0x0b, 0x79, 0x42, 0x4c, 0xfb, 0x53, 0x05, 0xea, 0x6d, 0x8c, 0x3b, 0x63, 0xd7,
	0xf4, 0x77, 0x70, 0x0b, 0x16, 0x53, 0xf6, 0x47, 0x4b, 0x8e, 0x7d, 0x9a, 0x72, 0x95, 0x9e, 0xa6,
	0xa0, 0x3e, 0xac, 0xe4, 0x74, 0x9b, 0x72, 0xbd, 0xf7, 0x14, 0xa5, 0x9c, 0x66, 0x5c, 0xcf, 0xa3,
	0xa2, 0x6f, 0x43, 0x5d, 0x69, 0x16, 0xe4, 0x62, 0x57, 0x15, 0x25, 0xa5, 0x37, 0xd2, 0x55, 0x28,
	0xda, 0x84, 0x6a, 0x78, 0x78, 0xc9, 0x3d, 0xba, 0xa2, 0xd0, 0xc2, 0x83, 0x5a, 0x8f, 0x40, 0xe8,
	0x29, 0xcc, 0x27, 0xca, 0xae, 0xdc, 0x8e, 0x0d, 0x95, 0xa5, 0x9e, 0x35, 0x7a, 0x12, 0x8e, 0x9e,
	0x44, 0x89, 0x1d, 0x94, 0xad, 0xf0, 0x6a, 0x92, 0xc9, 0x49, 0x7f, 0x58, 0x4f, 0x80, 0xd1, 0x03,
	0xa8, 0x45, 0x59, 0x2e, 0x3b, 0xcf, 0x37, 0xb2, 0xcc, 0xfe, 0x8e, 0x1e, 0xc3, 0xb4, 0xdf, 0xde,
	0x84, 0x85, 0x36, 0xc6, 0x7e, 0x1d, 0x90, 0x17, 0xb9, 0x0e, 0x2c, 0x1f, 0x3b, 0x86, 0xf9, 0x1a,
	0x73, 0xc3, 0xe3, 0x6d, 0x57, 0x74, 0xb9, 0x96, 0x0c, 0x64, 0x23, 0x79, 0x47, 0x6a, 0x52, 0x97,
	0x7b, 0xd4, 0x69, 0xf5, 0x9b, 0x7a, 0x96, 0x82, 0x0e, 0xa0, 0x91, 0x69, 0xf3, 0x43, 0xb9, 0xf2,
	0x14, 0xb9, 0x4b, 0x99, 0xe8, 0x01, 0x54, 0x4f, 0x64, 0xc2, 0xe5, 0x44, 0x52, 0x49, 0x47, 0x3d,
	0xc2, 0xa1, 0xc7, 0x70, 0x63, 0x48, 0x2d, 0x22, 0x43, 0xf8, 0xe5, 0xe4, 0xac, 0xed, 0xbd, 0xee,
	0x51, 0xd7, 0xb3, 0xad, 0x26, 0x75, 0x5d, 0x62, 0xf2, 0x1e, 0xb5, 0xc8, 0x0b, 0xdb, 0xb5, 0x74,
	0x9f, 0x82, 0x9e, 0x00, 0x8c, 0x4c, 0xbe, 0xfd, 0xe3, 0x20, 0x1c, 0x05, 0x8a, 0xab, 0x02, 0x47,
	0x8f, 0xa1, 0x36, 0x32, 0xf9, 0xa1, 0x1a, 0xca, 0x89, 0xdc, 0x18, 0x8d, 0xbe, 0x01, 0x35, 0xcf,
	0x18, 0x8e, 0x74, 0x83, 0x13, 0x26, 0x63, 0xb9, 0x9a, 0xb4, 0x5b, 0x97, 0xc3, 0x7a, 0x0c, 0x44,
	0x2f, 0x61, 0xcd, 0x23, 0x86, 0x29, 0x76, 0x68, 0xff, 0xdc, 0x4b, 0x3b, 0xbd, 0x3a, 0xc5, 0xe9,
	0x13, 0xb8, 0xa8, 0x0f, 0xab, 0x1e, 0x31, 0x9c, 0x1c, 0xd5, 0xda, 0x14, 0xd5, 0x4b, 0x78, 0xe8,
	0x9b, 0x30, 0xc3, 0xb8, 0xc1, 0x49, 0x03, 0x7c, 0x81, 0xfb, 0x49, 0x81, 0xfd, 0x91, 0x88, 0x9c,
	0xe1, 0x1c, 0x89, 0xa4, 0x0c, 0x02, 0x12, 0xc0, 0xd1, 0x77, 0x61, 0x81, 0x5d, 0xb8, 0xe6, 0x96,
	0x61, 0xbe, 0x3e, 0xa0, 0x22, 0x70, 0x8d, 0xfa, 0x14, 0x0b, 0x52, 0x78, 0xf4, 0x23, 0xb8, 0xcb,
	0x3d, 0xc3, 0x65, 0x07, 0x74, 0x87, 0x39, 0xae, 0xb5, 0xef, 0x8a, 0xb7, 0xbb, 0x94, 0xb1, 0x70,
	0x49, 0x73, 0x53, 0x04, 0x27, 0xd3, 0x85, 0xaf, 0x52, 0x27, 0x6c, 0x28, 0x3c, 0x3f, 0xcd, 0x57,
	0xf9, 0x3c, 0xed, 0xe3, 0x0a, 0xdc, 0x6a, 0x63, 0x9c, 0xfc, 0xe2, 0xf2, 0xaa, 0xdb, 0xde, 0xfb,
	0x9c, 0xbe, 0xf5, 0x3c, 0x84, 0xea, 0xf3, 0xf1, 0x87, 0x22, 0xa8, 0x7c, 0xda, 0xe7, 0x9e, 0x08,
	0x88, 0x9a, 0x50, 0x6f, 0x5d, 0xb8, 0xc6, 0xd0, 0x36, 0x0f, 0x08, 0x0b, 0xcf, 0x9c, 0xb7, 0xd3,
	0x9b, 0x11, 0x1f, 0x29, 0x20, 0x3f, 0xee, 0x2a, 0x0b, 0x7d, 0x1d, 0x6e, 0xb6, 0x87, 0x03, 0xcc,
	0xe9, 0x68, 0xda, 0x97, 0xa0, 0x10, 0x27, 0x28, 0x5d, 0x17, 0x5f, 0xb8, 0x38, 0xac, 0xc6, 0x97,
	0x53, 0x24, 0x0e, 0x3d, 0x81, 0xba, 0x52, 0x11, 0xe5, 0xd6, 0xbd, 0x9d, 0xac, 0x33, 0x0a, 0x40,
	0x57, 0xd1, 0x9a, 0x03, 0x73, 0x61, 0xac, 0xfc, 0x10, 0xfd, 0x00, 0x6e, 0x91, 0xbc, 0xd8, 0xc9,
	0xd8, 0xdc, 0x4f, 0xca, 0x66, 0x71, 0x32, 0x22, 0xf9, 0x22, 0xda, 0x9f, 0x4b, 0x50, 0x0d, 0x69,
	0xe8, 0x29, 0x00, 0x11, 0x7f, 0xf8, 0xe5, 0x24, 0xbf, 0x66, 0xb7, 0xa3, 0x71, 0xa9, 0xab, 0x30,
	0xc4, 0xf1, 0x43, 0x94, 0x2f, 0x89, 0x51, 0x6c, 0x15, 0x0b, 0x95, 0x61, 0x3d, 0x01, 0x4e, 0x90,
	0xc5, 0xf2, 0x2a, 0x59, 0xb2, 0xe2, 0x16, 0x3d, 0x01, 0xd6, 0x7e, 0x5a, 0x86, 0xc5, 0x70, 0xb8,
	0xef, 0xd1, 0x13, 0xdb, 0x21, 0xa8, 0x0f, 0x4b, 0xbe, 0x6d, 0x3d, 0xc2, 0x98, 0x31, 0x20, 0x3b,
	0xee, 0x09, 0x95, 0x6b, 0xba, 0x97, 0xb3, 0x26, 0x05, 0x25, 0x57, 0x96, 0x61, 0xa3, 0x75, 0xa8,
	0x10, 0x16, 0x5e, 0xc2, 0x96, 0x53, 0x22, 0x18, 0x6f, 0x55, 0x7f, 0xfe, 0x49, 0xa3, 0xf4, 0x91,
	0xe0, 0x0a, 0x1c, 0x7a, 0x0c, 0xd5, 0xd0, 0x48, 0xb9, 0x9a, 0x95, 0x9c, 0xd5, 0x28, 0xac, 0x08,
	0x2e, 0x66, 0xb2, 0x89, 0x25, 0x73, 0x34, 0x35, 0xd3, 0x4e, 0xbb, 0xa5, 0xce, 0x64, 0x13, 0xeb,
	0x3b, 0x37, 0xfe, 0xf8, 0xef, 0x46, 0x49, 0xfb, 0x4b, 0x19, 0xa0, 0x8d, 0xb1, 0x4e, 0x0c, 0x4b,
	0x74, 0x1f, 0x3f, 0x2b, 0x81, 0x66, 0x52, 0xd7, 0x1a, 0x9b, 0xdc, 0x76, 0x07, 0xed, 0x0f, 0xc6,
	0xf6, 0x48, 0x34, 0x09, 0x07, 0x44, 0x34, 0x4a, 0x86, 0x23, 0x61, 0xd2, 0x25, 0x5f, 0xcb, 0x14,
	0x95, 0x29, 0x3c, 0xe9, 0xa4, 0x02, 0x33, 0xa0, 0x47, 0x50, 0x1b, 0x9d, 0x1a, 0x8c, 0xf4, 0x7a,
	0x07, 0x7b, 0xf9, 0xfb, 0xbd, 0x1f, 0x0e, 0xeb, 0x31, 0x52, 0xec, 0x22, 0x2f, 0x50, 0xe8, 0xf5,
	0x0e, 0x74, 0xe9, 0xc1, 0xdb, 0xa9, 0x53, 0x2c, 0x06, 0xe8, 0x2a, 0x3a, 0x41, 0x7e, 0xf9, 0xbe,
	0x74, 0xe4, 0x65, 0xe4, 0x97, 0xef, 0xeb, 0x2a, 0x5a, 0xfb, 0xa8, 0x0c, 0xcb, 0xb1, 0x23, 0xc3,
	0x7c, 0x3a, 0x04, 0x14, 0x82, 0x32, 0x19, 0x75, 0x3f, 0x5f, 0x39, 0x93, 0x53, 0x39, 0x0a, 0x57,
	0xcd, 0xaa, 0x67, 0x00, 0x84, 0xb1, 0x30, 0x7a, 0x81, 0x57, 0x6e, 0x25, 0xf3, 0x2a, 0x0c, 0x51,
	0xcc, 0x54, 0x28, 0xd7, 0xcb, 0xad, 0xbf, 0x95, 0x61, 0xbe, 0xcd, 0x98, 0xac, 0x1c, 0x9f, 0xdf,
	0xcf, 0x04, 0xdf, 0x0a, 0x3f, 0xe4, 0x4f, 0x3e, 0x37, 0x94, 0x45, 0xc8, 0x4f, 0xfa, 0xef, 0xc2,
	0x6c, 0xd7, 0xb3, 0x7b, 0xd4, 0x92, 0x2e, 0x2b, 0xd8, 0xc6, 0x49, 0x52, 0xf8, 0x8b, 0xc0, 0x8d,
	0x42, 0xbf, 0x08, 0xcc, 0x14, 0xfa, 0x45, 0x60, 0x08, 0xf3, 0x6d, 0x8c, 0x95, 0xc3, 0xf8, 0xb3,
	0xad, 0xf4, 0x7f, 0x2d, 0x41, 0x2d, 0x9a, 0x0f, 0x3d, 0x87, 0x3a, 0xf3, 0xff, 0x52, 0x6b, 0xfd,
	0xed, 0x3c, 0x8b, 0xd5, 0x62, 0xaf, 0x72, 0xc4, 0x65, 0x85, 0xa8, 0x19, 0x11, 0x75, 0xe5, 0x89,
	0x72, 0x1f, 0x8f, 0xeb, 0x49, 0x78, 0x92, 0x1f, 0x57, 0xfc, 0x46, 0x72, 0x99, 0xf1, 0xb8, 0x9e,
	0x84, 0x6b, 0xbf, 0x28, 0xc3, 0x52, 0x04, 0x08, 0x37, 0x29, 0x86, 0xe5, 0xc0, 0xc6, 0xec, 0x1e,
	0x7d, 0x2b, 0x6f, 0x75, 0xd9, 0x2d, 0x9a, 0xe5, 0x5f, 0x75, 0x87, 0xbe, 0x03, 0xb5, 0xc8, 0x52,
	0xb9, 0xa8, 0x37, 0xf2, 0x16, 0xa5, 0xf0, 0x62, 0xc2, 0xf5, 0xb6, 0xe7, 0xaf, 0xaa, 0xfe, 0x31,
	0x1e, 0x7c, 0x5f, 0xfb, 0xe2, 0x06, 0xf6, 0xc5, 0x0d, 0xec, 0xff, 0x70, 0x03, 0xdb, 0x80, 0x19,
	0x8f, 0x30, 0xc2, 0xe5, 0x0d, 0xec, 0x72, 0x81, 0x00, 0x16, 0xdf, 0xd8, 0xea, 0xff, 0xeb, 0x8d,
	0x6d, 0xee, 0xd3, 0xbe, 0xb1, 0xcd, 0x7f, 0x56, 0x37, 0xb6, 0x85, 0xeb, 0xdd, 0xd8, 0x50, 0x07,
	0x6a, 0x4c, 0x6c, 0xc5, 0x03, 0x7b, 0x48, 0x1a, 0x8b, 0x79, 0x4d, 0xab, 0x14, 0x11, 0x00, 0xc6,
	0x8d, 0xe1, 0x48, 0x2d, 0x26, 0x11, 0x55, 0x7b, 0x06, 0xb3, 0x6d, 0x8c, 0x9b, 0xb8, 0x8b, 0x1e,
	0xc1, 0xac, 0xe9, 0x9d, 0xf5, 0xb9, 0x38, 0x98, 0x2b, 0xd9, 0x56, 0xd4, 0x9f, 0x5d, 0xd1, 0x90,
	0x60, 0x6d, 0x1f, 0x56, 0x85, 0x40, 0x30, 0x19, 0x36, 0x4f, 0x89, 0x20, 0x74, 0x70, 0x73, 0x1b,
	0x3d, 0x82, 0x9b, 0x87, 0x86, 0xd3, 0x6a, 0xe2, 0xae, 0xac, 0x2d, 0xcb, 0x49, 0xc5, 0x26, 0xee,
	0x2a, 0x7a, 0x21, 0x56, 0xfb, 0x7d, 0x09, 0x16, 0xda, 0x8c, 0x49, 0xc5, 0x0e, 0x6e, 0x36, 0xc5,
	0x59, 0x64, 0xc6, 0x8f, 0xf9, 0x67, 0x91, 0x82, 0x0f, 0xcf, 0x22, 0x85, 0x83, 0xbe, 0x0f, 0xab,
	0x24, 0x12, 0x55, 0xcd, 0x94, 0x85, 0xea, 0xed, 0x94, 0x6d, 0x59, 0xa0, 0x7e, 0x89, 0x80, 0xf6,
	0xf7, 0x92, 0xdf, 0x55, 0xcb, 0x21, 0xd4, 0x82, 0x39, 0x39, 0xb1, 0x7a, 0x72, 0xae, 0xe5, 0x5a,
	0xab, 0x1e, 0x9d, 0x09, 0x16, 0x7a, 0x08, 0x33, 0xe6, 0x29, 0x31, 0x5f, 0x4b, 0xf3, 0xee, 0xa6,
	0xe8, 0x62, 0x48, 0xb4, 0xe0, 0xb6, 0xd8, 0x13, 0x4c, 0x0f, 0xb0, 0xe8, 0x05, 0x2c, 0x90, 0x84,
	0xe7, 0xa2, 0x9e, 0x38, 0x71, 0xe2, 0xaa, 0xae, 0x8a, 0x03, 0x90, 0xa2, 0x86, 0x3d, 0xae, 0x7c,
	0xa5, 0xf4, 0xb8, 0xd2, 0xce, 0xa9, 0x3d, 0x6e, 0x33, 0x83, 0x0b, 0x7b, 0xdc, 0xac, 0xc2, 0xf5,
	0x7a, 0x5c, 0x39, 0x43, 0x7e, 0x8f, 0x2b, 0x07, 0x53, 0x3d, 0x6e, 0x18, 0xa5, 0xeb, 0x1c, 0xa2,
	0x5b, 0x1f, 0xc2, 0x32, 0x1d, 0x11, 0xf7, 0x64, 0x78, 0x1c, 0x4f, 0xd5, 0x2f, 0xbd, 0xea, 0x0d,
	0x6c, 0xee, 0x18, 0xc7, 0x42, 0x64, 0x53, 0x8e, 0x6f, 0x8e, 0x98, 0xf8, 0x9b, 0xc5, 0xff, 0x75,
	0x33, 0xa0, 0xeb, 0x72, 0x6c, 0x9d, 0x8e, 0xd8, 0x7a, 0xf4, 0x3e, 0x24, 0x44, 0x82, 0x1f, 0x97,
	0xb3, 0x93, 0x1c, 0xcf, 0xfa, 0xf8, 0x87, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xd3, 0x86, 0x21,
	0x05, 0xfe, 0x23, 0x00, 0x00,
}
