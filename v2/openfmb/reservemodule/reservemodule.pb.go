// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v6.31.1
// source: reservemodule/reservemodule.proto

// OpenFMB Operational Model (61850-CIM) (v2.2.0).eapx
// Thursday, July 24, 2025 8:59:58 PM UTC

// This module is an early alpha release and subject to change. It is NOT part of the gateway test
// procedure for OpenFMB certification.

package reservemodule

import (
	_ "gitlab.com/openfmb/psm/ops/protobuf/go-openfmb-ops-protobuf/v2/openfmb"
	commonmodule "gitlab.com/openfmb/psm/ops/protobuf/go-openfmb-ops-protobuf/v2/openfmb/commonmodule"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// [OpenFMB LN extension] Reserve margin in A, W, VAr and VA.
type ReserveMargin struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	LogicalNode *commonmodule.LogicalNode `protobuf:"bytes,1,opt,name=logicalNode,proto3" json:"logicalNode,omitempty"`
	// Phase to ground/phase to neutral three phase currents.
	A *commonmodule.PMG `protobuf:"bytes,2,opt,name=A,proto3" json:"A,omitempty"`
	// Phase to ground/phase to neutral apparent powers S.
	VA *commonmodule.PMG `protobuf:"bytes,3,opt,name=VA,proto3" json:"VA,omitempty"`
	// Phase to ground/phase to neutral reactive powers Q.
	VAr *commonmodule.PMG `protobuf:"bytes,4,opt,name=VAr,proto3" json:"VAr,omitempty"`
	// Phase to ground/phase to neutral real powers P.
	W             *commonmodule.PMG `protobuf:"bytes,5,opt,name=W,proto3" json:"W,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReserveMargin) Reset() {
	*x = ReserveMargin{}
	mi := &file_reservemodule_reservemodule_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReserveMargin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveMargin) ProtoMessage() {}

func (x *ReserveMargin) ProtoReflect() protoreflect.Message {
	mi := &file_reservemodule_reservemodule_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveMargin.ProtoReflect.Descriptor instead.
func (*ReserveMargin) Descriptor() ([]byte, []int) {
	return file_reservemodule_reservemodule_proto_rawDescGZIP(), []int{0}
}

func (x *ReserveMargin) GetLogicalNode() *commonmodule.LogicalNode {
	if x != nil {
		return x.LogicalNode
	}
	return nil
}

func (x *ReserveMargin) GetA() *commonmodule.PMG {
	if x != nil {
		return x.A
	}
	return nil
}

func (x *ReserveMargin) GetVA() *commonmodule.PMG {
	if x != nil {
		return x.VA
	}
	return nil
}

func (x *ReserveMargin) GetVAr() *commonmodule.PMG {
	if x != nil {
		return x.VAr
	}
	return nil
}

func (x *ReserveMargin) GetW() *commonmodule.PMG {
	if x != nil {
		return x.W
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type ReserveAvailability struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// MISSING DOCUMENTATION!!!
	IncrementalMargin *ReserveMargin `protobuf:"bytes,1,opt,name=incrementalMargin,proto3" json:"incrementalMargin,omitempty"`
	// MISSING DOCUMENTATION!!!
	Margin *ReserveMargin `protobuf:"bytes,2,opt,name=margin,proto3" json:"margin,omitempty"`
	// MISSING DOCUMENTATION!!!
	StandbyMargin *ReserveMargin `protobuf:"bytes,3,opt,name=standbyMargin,proto3" json:"standbyMargin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReserveAvailability) Reset() {
	*x = ReserveAvailability{}
	mi := &file_reservemodule_reservemodule_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReserveAvailability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveAvailability) ProtoMessage() {}

func (x *ReserveAvailability) ProtoReflect() protoreflect.Message {
	mi := &file_reservemodule_reservemodule_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveAvailability.ProtoReflect.Descriptor instead.
func (*ReserveAvailability) Descriptor() ([]byte, []int) {
	return file_reservemodule_reservemodule_proto_rawDescGZIP(), []int{1}
}

func (x *ReserveAvailability) GetIncrementalMargin() *ReserveMargin {
	if x != nil {
		return x.IncrementalMargin
	}
	return nil
}

func (x *ReserveAvailability) GetMargin() *ReserveMargin {
	if x != nil {
		return x.Margin
	}
	return nil
}

func (x *ReserveAvailability) GetStandbyMargin() *ReserveMargin {
	if x != nil {
		return x.StandbyMargin
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type AllocatedMargin struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// MISSING DOCUMENTATION!!!
	RequestID string `protobuf:"bytes,1,opt,name=requestID,proto3" json:"requestID,omitempty"`
	// MISSING DOCUMENTATION!!!
	AllocatedMargin *ReserveMargin `protobuf:"bytes,2,opt,name=allocatedMargin,proto3" json:"allocatedMargin,omitempty"`
	// MISSING DOCUMENTATION!!!
	AllocatedStandbyMargin *ReserveMargin `protobuf:"bytes,3,opt,name=allocatedStandbyMargin,proto3" json:"allocatedStandbyMargin,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *AllocatedMargin) Reset() {
	*x = AllocatedMargin{}
	mi := &file_reservemodule_reservemodule_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllocatedMargin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocatedMargin) ProtoMessage() {}

func (x *AllocatedMargin) ProtoReflect() protoreflect.Message {
	mi := &file_reservemodule_reservemodule_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocatedMargin.ProtoReflect.Descriptor instead.
func (*AllocatedMargin) Descriptor() ([]byte, []int) {
	return file_reservemodule_reservemodule_proto_rawDescGZIP(), []int{2}
}

func (x *AllocatedMargin) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *AllocatedMargin) GetAllocatedMargin() *ReserveMargin {
	if x != nil {
		return x.AllocatedMargin
	}
	return nil
}

func (x *AllocatedMargin) GetAllocatedStandbyMargin() *ReserveMargin {
	if x != nil {
		return x.AllocatedStandbyMargin
	}
	return nil
}

// Reserve availability profile
type ReserveAvailabilityProfile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	ControlMessageInfo *commonmodule.ControlMessageInfo `protobuf:"bytes,1,opt,name=controlMessageInfo,proto3" json:"controlMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	AllocatedMargin *AllocatedMargin `protobuf:"bytes,2,opt,name=allocatedMargin,proto3" json:"allocatedMargin,omitempty"`
	// MISSING DOCUMENTATION!!!
	RequesterCircuitSegmentService *commonmodule.ApplicationSystem `protobuf:"bytes,3,opt,name=requesterCircuitSegmentService,proto3" json:"requesterCircuitSegmentService,omitempty"`
	// MISSING DOCUMENTATION!!!
	ReserveAvailability *ReserveAvailability `protobuf:"bytes,4,opt,name=reserveAvailability,proto3" json:"reserveAvailability,omitempty"`
	// MISSING DOCUMENTATION!!!
	ResponderCircuitSegmentService *commonmodule.ApplicationSystem `protobuf:"bytes,5,opt,name=responderCircuitSegmentService,proto3" json:"responderCircuitSegmentService,omitempty"`
	// MISSING DOCUMENTATION!!!
	TiePoint      *commonmodule.ConductingEquipment `protobuf:"bytes,6,opt,name=tiePoint,proto3" json:"tiePoint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReserveAvailabilityProfile) Reset() {
	*x = ReserveAvailabilityProfile{}
	mi := &file_reservemodule_reservemodule_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReserveAvailabilityProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveAvailabilityProfile) ProtoMessage() {}

func (x *ReserveAvailabilityProfile) ProtoReflect() protoreflect.Message {
	mi := &file_reservemodule_reservemodule_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveAvailabilityProfile.ProtoReflect.Descriptor instead.
func (*ReserveAvailabilityProfile) Descriptor() ([]byte, []int) {
	return file_reservemodule_reservemodule_proto_rawDescGZIP(), []int{3}
}

func (x *ReserveAvailabilityProfile) GetControlMessageInfo() *commonmodule.ControlMessageInfo {
	if x != nil {
		return x.ControlMessageInfo
	}
	return nil
}

func (x *ReserveAvailabilityProfile) GetAllocatedMargin() *AllocatedMargin {
	if x != nil {
		return x.AllocatedMargin
	}
	return nil
}

func (x *ReserveAvailabilityProfile) GetRequesterCircuitSegmentService() *commonmodule.ApplicationSystem {
	if x != nil {
		return x.RequesterCircuitSegmentService
	}
	return nil
}

func (x *ReserveAvailabilityProfile) GetReserveAvailability() *ReserveAvailability {
	if x != nil {
		return x.ReserveAvailability
	}
	return nil
}

func (x *ReserveAvailabilityProfile) GetResponderCircuitSegmentService() *commonmodule.ApplicationSystem {
	if x != nil {
		return x.ResponderCircuitSegmentService
	}
	return nil
}

func (x *ReserveAvailabilityProfile) GetTiePoint() *commonmodule.ConductingEquipment {
	if x != nil {
		return x.TiePoint
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type ReserveRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// MISSING DOCUMENTATION!!!
	RequestID string `protobuf:"bytes,1,opt,name=requestID,proto3" json:"requestID,omitempty"`
	// MISSING DOCUMENTATION!!!
	Margin *ReserveMargin `protobuf:"bytes,2,opt,name=margin,proto3" json:"margin,omitempty"`
	// MISSING DOCUMENTATION!!!
	StandbyMargin *ReserveMargin `protobuf:"bytes,3,opt,name=standbyMargin,proto3" json:"standbyMargin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReserveRequest) Reset() {
	*x = ReserveRequest{}
	mi := &file_reservemodule_reservemodule_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReserveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveRequest) ProtoMessage() {}

func (x *ReserveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reservemodule_reservemodule_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveRequest.ProtoReflect.Descriptor instead.
func (*ReserveRequest) Descriptor() ([]byte, []int) {
	return file_reservemodule_reservemodule_proto_rawDescGZIP(), []int{4}
}

func (x *ReserveRequest) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *ReserveRequest) GetMargin() *ReserveMargin {
	if x != nil {
		return x.Margin
	}
	return nil
}

func (x *ReserveRequest) GetStandbyMargin() *ReserveMargin {
	if x != nil {
		return x.StandbyMargin
	}
	return nil
}

// Reserve availability profile
type ReserveRequestProfile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	ControlMessageInfo *commonmodule.ControlMessageInfo `protobuf:"bytes,1,opt,name=controlMessageInfo,proto3" json:"controlMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	RequesterCircuitSegmentService *commonmodule.ApplicationSystem `protobuf:"bytes,2,opt,name=requesterCircuitSegmentService,proto3" json:"requesterCircuitSegmentService,omitempty"`
	// MISSING DOCUMENTATION!!!
	ReserveRequest *ReserveRequest `protobuf:"bytes,3,opt,name=reserveRequest,proto3" json:"reserveRequest,omitempty"`
	// MISSING DOCUMENTATION!!!
	ResponderCircuitSegmentService *commonmodule.ApplicationSystem `protobuf:"bytes,4,opt,name=responderCircuitSegmentService,proto3" json:"responderCircuitSegmentService,omitempty"`
	// MISSING DOCUMENTATION!!!
	TiePoint      *commonmodule.ConductingEquipment `protobuf:"bytes,5,opt,name=tiePoint,proto3" json:"tiePoint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReserveRequestProfile) Reset() {
	*x = ReserveRequestProfile{}
	mi := &file_reservemodule_reservemodule_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReserveRequestProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveRequestProfile) ProtoMessage() {}

func (x *ReserveRequestProfile) ProtoReflect() protoreflect.Message {
	mi := &file_reservemodule_reservemodule_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveRequestProfile.ProtoReflect.Descriptor instead.
func (*ReserveRequestProfile) Descriptor() ([]byte, []int) {
	return file_reservemodule_reservemodule_proto_rawDescGZIP(), []int{5}
}

func (x *ReserveRequestProfile) GetControlMessageInfo() *commonmodule.ControlMessageInfo {
	if x != nil {
		return x.ControlMessageInfo
	}
	return nil
}

func (x *ReserveRequestProfile) GetRequesterCircuitSegmentService() *commonmodule.ApplicationSystem {
	if x != nil {
		return x.RequesterCircuitSegmentService
	}
	return nil
}

func (x *ReserveRequestProfile) GetReserveRequest() *ReserveRequest {
	if x != nil {
		return x.ReserveRequest
	}
	return nil
}

func (x *ReserveRequestProfile) GetResponderCircuitSegmentService() *commonmodule.ApplicationSystem {
	if x != nil {
		return x.ResponderCircuitSegmentService
	}
	return nil
}

func (x *ReserveRequestProfile) GetTiePoint() *commonmodule.ConductingEquipment {
	if x != nil {
		return x.TiePoint
	}
	return nil
}

var File_reservemodule_reservemodule_proto protoreflect.FileDescriptor

var file_reservemodule_reservemodule_proto_rawDesc = []byte{
	0x0a, 0x21, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x1a, 0x09, 0x75, 0x6d, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdc,
	0x01, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x12, 0x41, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x01, 0x41, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x4d,
	0x47, 0x52, 0x01, 0x41, 0x12, 0x21, 0x0a, 0x02, 0x56, 0x41, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x50, 0x4d, 0x47, 0x52, 0x02, 0x56, 0x41, 0x12, 0x23, 0x0a, 0x03, 0x56, 0x41, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x50, 0x4d, 0x47, 0x52, 0x03, 0x56, 0x41, 0x72, 0x12, 0x1f, 0x0a, 0x01,
	0x57, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x4d, 0x47, 0x52, 0x01, 0x57, 0x22, 0xdb, 0x01,
	0x0a, 0x13, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x11,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x12, 0x34, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52,
	0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x42, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x62, 0x79, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x0d, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x62, 0x79, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x22, 0xd7, 0x01, 0x0a, 0x0f,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12,
	0x26, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x46, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x0f,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12,
	0x54, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x62, 0x79, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x16, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x22, 0xd3, 0x04, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x56, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a, 0x0f,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x71, 0x0a, 0x1e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42,
	0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x1e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x13, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01,
	0x90, 0xb5, 0x18, 0x01, 0x52, 0x13, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x71, 0x0a, 0x1e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x1e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x08,
	0x74, 0x69, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x08, 0x74, 0x69, 0x65,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x3a, 0x04, 0xc0, 0xf3, 0x18, 0x01, 0x22, 0xb2, 0x01, 0x0a, 0x0e,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x42, 0x0a, 0x0d,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x22, 0xf5, 0x03, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x56, 0x0a, 0x12, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x12,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x71, 0x0a, 0x1e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x08, 0x88, 0xb5, 0x18,
	0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x1e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x08, 0x88, 0xb5,
	0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x71, 0x0a, 0x1e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x64, 0x65, 0x72, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42,
	0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x1e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x64, 0x65, 0x72, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x74, 0x69, 0x65,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x08,
	0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x08, 0x74, 0x69, 0x65, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x3a, 0x04, 0xc0, 0xf3, 0x18, 0x01, 0x42, 0x87, 0x01, 0x0a, 0x15, 0x6f, 0x70, 0x65,
	0x6e, 0x66, 0x6d, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x50, 0x01, 0x5a, 0x54, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2f, 0x70, 0x73, 0x6d, 0x2f, 0x6f, 0x70, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f, 0x2d, 0x6f, 0x70, 0x65,
	0x6e, 0x66, 0x6d, 0x62, 0x2d, 0x6f, 0x70, 0x73, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2f, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0xaa, 0x02, 0x15, 0x6f, 0x70, 0x65,
	0x6e, 0x66, 0x6d, 0x62, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_reservemodule_reservemodule_proto_rawDescOnce sync.Once
	file_reservemodule_reservemodule_proto_rawDescData = file_reservemodule_reservemodule_proto_rawDesc
)

func file_reservemodule_reservemodule_proto_rawDescGZIP() []byte {
	file_reservemodule_reservemodule_proto_rawDescOnce.Do(func() {
		file_reservemodule_reservemodule_proto_rawDescData = protoimpl.X.CompressGZIP(file_reservemodule_reservemodule_proto_rawDescData)
	})
	return file_reservemodule_reservemodule_proto_rawDescData
}

var file_reservemodule_reservemodule_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_reservemodule_reservemodule_proto_goTypes = []any{
	(*ReserveMargin)(nil),                    // 0: reservemodule.ReserveMargin
	(*ReserveAvailability)(nil),              // 1: reservemodule.ReserveAvailability
	(*AllocatedMargin)(nil),                  // 2: reservemodule.AllocatedMargin
	(*ReserveAvailabilityProfile)(nil),       // 3: reservemodule.ReserveAvailabilityProfile
	(*ReserveRequest)(nil),                   // 4: reservemodule.ReserveRequest
	(*ReserveRequestProfile)(nil),            // 5: reservemodule.ReserveRequestProfile
	(*commonmodule.LogicalNode)(nil),         // 6: commonmodule.LogicalNode
	(*commonmodule.PMG)(nil),                 // 7: commonmodule.PMG
	(*commonmodule.ControlMessageInfo)(nil),  // 8: commonmodule.ControlMessageInfo
	(*commonmodule.ApplicationSystem)(nil),   // 9: commonmodule.ApplicationSystem
	(*commonmodule.ConductingEquipment)(nil), // 10: commonmodule.ConductingEquipment
}
var file_reservemodule_reservemodule_proto_depIdxs = []int32{
	6,  // 0: reservemodule.ReserveMargin.logicalNode:type_name -> commonmodule.LogicalNode
	7,  // 1: reservemodule.ReserveMargin.A:type_name -> commonmodule.PMG
	7,  // 2: reservemodule.ReserveMargin.VA:type_name -> commonmodule.PMG
	7,  // 3: reservemodule.ReserveMargin.VAr:type_name -> commonmodule.PMG
	7,  // 4: reservemodule.ReserveMargin.W:type_name -> commonmodule.PMG
	0,  // 5: reservemodule.ReserveAvailability.incrementalMargin:type_name -> reservemodule.ReserveMargin
	0,  // 6: reservemodule.ReserveAvailability.margin:type_name -> reservemodule.ReserveMargin
	0,  // 7: reservemodule.ReserveAvailability.standbyMargin:type_name -> reservemodule.ReserveMargin
	0,  // 8: reservemodule.AllocatedMargin.allocatedMargin:type_name -> reservemodule.ReserveMargin
	0,  // 9: reservemodule.AllocatedMargin.allocatedStandbyMargin:type_name -> reservemodule.ReserveMargin
	8,  // 10: reservemodule.ReserveAvailabilityProfile.controlMessageInfo:type_name -> commonmodule.ControlMessageInfo
	2,  // 11: reservemodule.ReserveAvailabilityProfile.allocatedMargin:type_name -> reservemodule.AllocatedMargin
	9,  // 12: reservemodule.ReserveAvailabilityProfile.requesterCircuitSegmentService:type_name -> commonmodule.ApplicationSystem
	1,  // 13: reservemodule.ReserveAvailabilityProfile.reserveAvailability:type_name -> reservemodule.ReserveAvailability
	9,  // 14: reservemodule.ReserveAvailabilityProfile.responderCircuitSegmentService:type_name -> commonmodule.ApplicationSystem
	10, // 15: reservemodule.ReserveAvailabilityProfile.tiePoint:type_name -> commonmodule.ConductingEquipment
	0,  // 16: reservemodule.ReserveRequest.margin:type_name -> reservemodule.ReserveMargin
	0,  // 17: reservemodule.ReserveRequest.standbyMargin:type_name -> reservemodule.ReserveMargin
	8,  // 18: reservemodule.ReserveRequestProfile.controlMessageInfo:type_name -> commonmodule.ControlMessageInfo
	9,  // 19: reservemodule.ReserveRequestProfile.requesterCircuitSegmentService:type_name -> commonmodule.ApplicationSystem
	4,  // 20: reservemodule.ReserveRequestProfile.reserveRequest:type_name -> reservemodule.ReserveRequest
	9,  // 21: reservemodule.ReserveRequestProfile.responderCircuitSegmentService:type_name -> commonmodule.ApplicationSystem
	10, // 22: reservemodule.ReserveRequestProfile.tiePoint:type_name -> commonmodule.ConductingEquipment
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_reservemodule_reservemodule_proto_init() }
func file_reservemodule_reservemodule_proto_init() {
	if File_reservemodule_reservemodule_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_reservemodule_reservemodule_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_reservemodule_reservemodule_proto_goTypes,
		DependencyIndexes: file_reservemodule_reservemodule_proto_depIdxs,
		MessageInfos:      file_reservemodule_reservemodule_proto_msgTypes,
	}.Build()
	File_reservemodule_reservemodule_proto = out.File
	file_reservemodule_reservemodule_proto_rawDesc = nil
	file_reservemodule_reservemodule_proto_goTypes = nil
	file_reservemodule_reservemodule_proto_depIdxs = nil
}
