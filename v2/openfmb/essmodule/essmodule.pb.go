// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v6.31.1
// source: essmodule/essmodule.proto

// OpenFMB Operational Model (61850-CIM) (v2.2.0).eapx
// Thursday, July 24, 2025 8:59:58 PM UTC

package essmodule

import (
	_ "gitlab.com/openfmb/psm/ops/protobuf/go-openfmb-ops-protobuf/v2/openfmb"
	commonmodule "gitlab.com/openfmb/psm/ops/protobuf/go-openfmb-ops-protobuf/v2/openfmb/commonmodule"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MISSING DOCUMENTATION!!!
type ESSCapabilityConfiguration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	SourceCapabilityConfiguration *commonmodule.SourceCapabilityConfiguration `protobuf:"bytes,1,opt,name=sourceCapabilityConfiguration,proto3" json:"sourceCapabilityConfiguration,omitempty"`
	// Apparent Power Charge Maximum
	VAChaRteMax *commonmodule.ASG `protobuf:"bytes,2,opt,name=VAChaRteMax,proto3" json:"VAChaRteMax,omitempty"`
	// Apparent Power Discharge Maximum
	VADisChaRteMax *commonmodule.ASG `protobuf:"bytes,3,opt,name=VADisChaRteMax,proto3" json:"VADisChaRteMax,omitempty"`
	// Active Power Charge Maximum
	WChaRteMax *commonmodule.ASG `protobuf:"bytes,4,opt,name=WChaRteMax,proto3" json:"WChaRteMax,omitempty"`
	// Active Power Discharge Maximum
	WDisChaRteMax *commonmodule.ASG `protobuf:"bytes,5,opt,name=WDisChaRteMax,proto3" json:"WDisChaRteMax,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ESSCapabilityConfiguration) Reset() {
	*x = ESSCapabilityConfiguration{}
	mi := &file_essmodule_essmodule_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ESSCapabilityConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSCapabilityConfiguration) ProtoMessage() {}

func (x *ESSCapabilityConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSCapabilityConfiguration.ProtoReflect.Descriptor instead.
func (*ESSCapabilityConfiguration) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{0}
}

func (x *ESSCapabilityConfiguration) GetSourceCapabilityConfiguration() *commonmodule.SourceCapabilityConfiguration {
	if x != nil {
		return x.SourceCapabilityConfiguration
	}
	return nil
}

func (x *ESSCapabilityConfiguration) GetVAChaRteMax() *commonmodule.ASG {
	if x != nil {
		return x.VAChaRteMax
	}
	return nil
}

func (x *ESSCapabilityConfiguration) GetVADisChaRteMax() *commonmodule.ASG {
	if x != nil {
		return x.VADisChaRteMax
	}
	return nil
}

func (x *ESSCapabilityConfiguration) GetWChaRteMax() *commonmodule.ASG {
	if x != nil {
		return x.WChaRteMax
	}
	return nil
}

func (x *ESSCapabilityConfiguration) GetWDisChaRteMax() *commonmodule.ASG {
	if x != nil {
		return x.WDisChaRteMax
	}
	return nil
}

// Generation capability
type ESSCapabilityOverride struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	NameplateValue *commonmodule.NameplateValue `protobuf:"bytes,1,opt,name=nameplateValue,proto3" json:"nameplateValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	EssCapabilityConfiguration *ESSCapabilityConfiguration `protobuf:"bytes,2,opt,name=essCapabilityConfiguration,proto3" json:"essCapabilityConfiguration,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *ESSCapabilityOverride) Reset() {
	*x = ESSCapabilityOverride{}
	mi := &file_essmodule_essmodule_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ESSCapabilityOverride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSCapabilityOverride) ProtoMessage() {}

func (x *ESSCapabilityOverride) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSCapabilityOverride.ProtoReflect.Descriptor instead.
func (*ESSCapabilityOverride) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{1}
}

func (x *ESSCapabilityOverride) GetNameplateValue() *commonmodule.NameplateValue {
	if x != nil {
		return x.NameplateValue
	}
	return nil
}

func (x *ESSCapabilityOverride) GetEssCapabilityConfiguration() *ESSCapabilityConfiguration {
	if x != nil {
		return x.EssCapabilityConfiguration
	}
	return nil
}

// ESS control profile
type ESSCapabilityOverrideProfile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	CapabilityMessageInfo *commonmodule.CapabilityMessageInfo `protobuf:"bytes,1,opt,name=capabilityMessageInfo,proto3" json:"capabilityMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	Ess *commonmodule.ESS `protobuf:"bytes,2,opt,name=ess,proto3" json:"ess,omitempty"`
	// MISSING DOCUMENTATION!!!
	EssCapabilityOverride *ESSCapabilityOverride `protobuf:"bytes,3,opt,name=essCapabilityOverride,proto3" json:"essCapabilityOverride,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ESSCapabilityOverrideProfile) Reset() {
	*x = ESSCapabilityOverrideProfile{}
	mi := &file_essmodule_essmodule_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ESSCapabilityOverrideProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSCapabilityOverrideProfile) ProtoMessage() {}

func (x *ESSCapabilityOverrideProfile) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSCapabilityOverrideProfile.ProtoReflect.Descriptor instead.
func (*ESSCapabilityOverrideProfile) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{2}
}

func (x *ESSCapabilityOverrideProfile) GetCapabilityMessageInfo() *commonmodule.CapabilityMessageInfo {
	if x != nil {
		return x.CapabilityMessageInfo
	}
	return nil
}

func (x *ESSCapabilityOverrideProfile) GetEss() *commonmodule.ESS {
	if x != nil {
		return x.Ess
	}
	return nil
}

func (x *ESSCapabilityOverrideProfile) GetEssCapabilityOverride() *ESSCapabilityOverride {
	if x != nil {
		return x.EssCapabilityOverride
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type ESSCapabilityRatings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	SourceCapabilityRatings *commonmodule.SourceCapabilityRatings `protobuf:"bytes,1,opt,name=sourceCapabilityRatings,proto3" json:"sourceCapabilityRatings,omitempty"`
	// Apparent Power Charge Maximum Rating
	VAChaRteMaxRtg *commonmodule.ASG `protobuf:"bytes,2,opt,name=VAChaRteMaxRtg,proto3" json:"VAChaRteMaxRtg,omitempty"`
	// Apparent Power Discharge Maximum Rating
	VADisChaRteMaxRtg *commonmodule.ASG `protobuf:"bytes,3,opt,name=VADisChaRteMaxRtg,proto3" json:"VADisChaRteMaxRtg,omitempty"`
	// Active Power Charge Maximum Rating
	WChaRteMaxRtg *commonmodule.ASG `protobuf:"bytes,4,opt,name=WChaRteMaxRtg,proto3" json:"WChaRteMaxRtg,omitempty"`
	// Active Power Discharge Maximum Rating
	WDisChaRteMaxRtg *commonmodule.ASG `protobuf:"bytes,5,opt,name=WDisChaRteMaxRtg,proto3" json:"WDisChaRteMaxRtg,omitempty"`
	// Energy rating of the DER storage.
	WHRtg         *commonmodule.ASG `protobuf:"bytes,6,opt,name=WHRtg,proto3" json:"WHRtg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ESSCapabilityRatings) Reset() {
	*x = ESSCapabilityRatings{}
	mi := &file_essmodule_essmodule_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ESSCapabilityRatings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSCapabilityRatings) ProtoMessage() {}

func (x *ESSCapabilityRatings) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSCapabilityRatings.ProtoReflect.Descriptor instead.
func (*ESSCapabilityRatings) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{3}
}

func (x *ESSCapabilityRatings) GetSourceCapabilityRatings() *commonmodule.SourceCapabilityRatings {
	if x != nil {
		return x.SourceCapabilityRatings
	}
	return nil
}

func (x *ESSCapabilityRatings) GetVAChaRteMaxRtg() *commonmodule.ASG {
	if x != nil {
		return x.VAChaRteMaxRtg
	}
	return nil
}

func (x *ESSCapabilityRatings) GetVADisChaRteMaxRtg() *commonmodule.ASG {
	if x != nil {
		return x.VADisChaRteMaxRtg
	}
	return nil
}

func (x *ESSCapabilityRatings) GetWChaRteMaxRtg() *commonmodule.ASG {
	if x != nil {
		return x.WChaRteMaxRtg
	}
	return nil
}

func (x *ESSCapabilityRatings) GetWDisChaRteMaxRtg() *commonmodule.ASG {
	if x != nil {
		return x.WDisChaRteMaxRtg
	}
	return nil
}

func (x *ESSCapabilityRatings) GetWHRtg() *commonmodule.ASG {
	if x != nil {
		return x.WHRtg
	}
	return nil
}

// Generation capability
type ESSCapability struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	NameplateValue *commonmodule.NameplateValue `protobuf:"bytes,1,opt,name=nameplateValue,proto3" json:"nameplateValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	EssCapabilityRatings *ESSCapabilityRatings `protobuf:"bytes,2,opt,name=essCapabilityRatings,proto3" json:"essCapabilityRatings,omitempty"`
	// MISSING DOCUMENTATION!!!
	EssCapabilityConfiguration *ESSCapabilityConfiguration `protobuf:"bytes,3,opt,name=essCapabilityConfiguration,proto3" json:"essCapabilityConfiguration,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *ESSCapability) Reset() {
	*x = ESSCapability{}
	mi := &file_essmodule_essmodule_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ESSCapability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSCapability) ProtoMessage() {}

func (x *ESSCapability) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSCapability.ProtoReflect.Descriptor instead.
func (*ESSCapability) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{4}
}

func (x *ESSCapability) GetNameplateValue() *commonmodule.NameplateValue {
	if x != nil {
		return x.NameplateValue
	}
	return nil
}

func (x *ESSCapability) GetEssCapabilityRatings() *ESSCapabilityRatings {
	if x != nil {
		return x.EssCapabilityRatings
	}
	return nil
}

func (x *ESSCapability) GetEssCapabilityConfiguration() *ESSCapabilityConfiguration {
	if x != nil {
		return x.EssCapabilityConfiguration
	}
	return nil
}

// ESS control profile
type ESSCapabilityProfile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	CapabilityMessageInfo *commonmodule.CapabilityMessageInfo `protobuf:"bytes,1,opt,name=capabilityMessageInfo,proto3" json:"capabilityMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	Ess *commonmodule.ESS `protobuf:"bytes,2,opt,name=ess,proto3" json:"ess,omitempty"`
	// MISSING DOCUMENTATION!!!
	EssCapability *ESSCapability `protobuf:"bytes,3,opt,name=essCapability,proto3" json:"essCapability,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ESSCapabilityProfile) Reset() {
	*x = ESSCapabilityProfile{}
	mi := &file_essmodule_essmodule_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ESSCapabilityProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSCapabilityProfile) ProtoMessage() {}

func (x *ESSCapabilityProfile) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSCapabilityProfile.ProtoReflect.Descriptor instead.
func (*ESSCapabilityProfile) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{5}
}

func (x *ESSCapabilityProfile) GetCapabilityMessageInfo() *commonmodule.CapabilityMessageInfo {
	if x != nil {
		return x.CapabilityMessageInfo
	}
	return nil
}

func (x *ESSCapabilityProfile) GetEss() *commonmodule.ESS {
	if x != nil {
		return x.Ess
	}
	return nil
}

func (x *ESSCapabilityProfile) GetEssCapability() *ESSCapability {
	if x != nil {
		return x.EssCapability
	}
	return nil
}

// ESS inverter high level functions.
type ESSFunction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ESS inverter high level function to reduce (smooth) charging or discharging rate of change.
	CapacityFirming *commonmodule.CapacityFirming `protobuf:"bytes,1,opt,name=capacityFirming,proto3" json:"capacityFirming,omitempty"`
	// ESS inverter high level function to maintain frequency within dead bands.
	FrequencyRegulation *commonmodule.FrequencyRegulation `protobuf:"bytes,2,opt,name=frequencyRegulation,proto3" json:"frequencyRegulation,omitempty"`
	// ESS inverter high level function to maintain power level by charging or discharging
	PeakShaving *commonmodule.PeakShaving `protobuf:"bytes,3,opt,name=peakShaving,proto3" json:"peakShaving,omitempty"`
	// ESS inverter high level function to shut down ESS if SOC exceeds high or low limits.
	SocLimit *commonmodule.SocLimit `protobuf:"bytes,4,opt,name=socLimit,proto3" json:"socLimit,omitempty"`
	// ESS inverter high level function to maintain SOC within dead bands
	SocManagement *commonmodule.SOCManagement `protobuf:"bytes,5,opt,name=socManagement,proto3" json:"socManagement,omitempty"`
	// ESS inverter high level function to maintain voltage within droop dead bands.
	VoltageDroop *commonmodule.VoltageDroop `protobuf:"bytes,6,opt,name=voltageDroop,proto3" json:"voltageDroop,omitempty"`
	// ESS inverter high level function to maintain voltage within dead bands.
	VoltagePI     *commonmodule.VoltagePI `protobuf:"bytes,7,opt,name=voltagePI,proto3" json:"voltagePI,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ESSFunction) Reset() {
	*x = ESSFunction{}
	mi := &file_essmodule_essmodule_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ESSFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSFunction) ProtoMessage() {}

func (x *ESSFunction) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSFunction.ProtoReflect.Descriptor instead.
func (*ESSFunction) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{6}
}

func (x *ESSFunction) GetCapacityFirming() *commonmodule.CapacityFirming {
	if x != nil {
		return x.CapacityFirming
	}
	return nil
}

func (x *ESSFunction) GetFrequencyRegulation() *commonmodule.FrequencyRegulation {
	if x != nil {
		return x.FrequencyRegulation
	}
	return nil
}

func (x *ESSFunction) GetPeakShaving() *commonmodule.PeakShaving {
	if x != nil {
		return x.PeakShaving
	}
	return nil
}

func (x *ESSFunction) GetSocLimit() *commonmodule.SocLimit {
	if x != nil {
		return x.SocLimit
	}
	return nil
}

func (x *ESSFunction) GetSocManagement() *commonmodule.SOCManagement {
	if x != nil {
		return x.SocManagement
	}
	return nil
}

func (x *ESSFunction) GetVoltageDroop() *commonmodule.VoltageDroop {
	if x != nil {
		return x.VoltageDroop
	}
	return nil
}

func (x *ESSFunction) GetVoltagePI() *commonmodule.VoltagePI {
	if x != nil {
		return x.VoltagePI
	}
	return nil
}

// Point definition (Point)
type ESSPoint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Black start enable
	BlackStartEnabled *commonmodule.ControlSPC `protobuf:"bytes,1,opt,name=blackStartEnabled,proto3" json:"blackStartEnabled,omitempty"`
	// ESS function parameter
	Function *ESSFunction `protobuf:"bytes,3,opt,name=function,proto3" json:"function,omitempty"`
	// Grid connect mode
	Mode *commonmodule.ENG_GridConnectModeKind `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"`
	// Ramp rates
	RampRates *commonmodule.RampRate `protobuf:"bytes,7,opt,name=rampRates,proto3" json:"rampRates,omitempty"`
	// Reset device
	Reset_ *commonmodule.ControlSPC `protobuf:"bytes,10,opt,name=reset,proto3" json:"reset,omitempty"`
	// ESS state
	State *commonmodule.Optional_StateKind `protobuf:"bytes,11,opt,name=state,proto3" json:"state,omitempty"`
	// Transition to island on grid loss enable
	TransToIslndOnGridLossEnabled *commonmodule.ControlSPC `protobuf:"bytes,13,opt,name=transToIslndOnGridLossEnabled,proto3" json:"transToIslndOnGridLossEnabled,omitempty"`
	// MISSING DOCUMENTATION!!!
	EnterServiceOperation *commonmodule.EnterServiceAPC `protobuf:"bytes,16,opt,name=enterServiceOperation,proto3" json:"enterServiceOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	HzWOperation *commonmodule.HzWAPC `protobuf:"bytes,17,opt,name=hzWOperation,proto3" json:"hzWOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	LimitWOperation *commonmodule.LimitWAPC `protobuf:"bytes,18,opt,name=limitWOperation,proto3" json:"limitWOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	PFOperation *commonmodule.PFSPC `protobuf:"bytes,19,opt,name=pFOperation,proto3" json:"pFOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	TmHzTripOperation *commonmodule.TmHzCSG `protobuf:"bytes,20,opt,name=tmHzTripOperation,proto3" json:"tmHzTripOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	TmVoltTripOperation *commonmodule.TmVoltCSG `protobuf:"bytes,21,opt,name=tmVoltTripOperation,proto3" json:"tmVoltTripOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	VArOperation *commonmodule.VarSPC `protobuf:"bytes,22,opt,name=vArOperation,proto3" json:"vArOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	VoltVarOperation *commonmodule.VoltVarCSG `protobuf:"bytes,23,opt,name=voltVarOperation,proto3" json:"voltVarOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	VoltWOperation *commonmodule.VoltWCSG `protobuf:"bytes,24,opt,name=voltWOperation,proto3" json:"voltWOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	WVarOperation *commonmodule.WVarCSG `protobuf:"bytes,25,opt,name=wVarOperation,proto3" json:"wVarOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	WOperation    *commonmodule.WSPC `protobuf:"bytes,26,opt,name=wOperation,proto3" json:"wOperation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ESSPoint) Reset() {
	*x = ESSPoint{}
	mi := &file_essmodule_essmodule_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ESSPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSPoint) ProtoMessage() {}

func (x *ESSPoint) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSPoint.ProtoReflect.Descriptor instead.
func (*ESSPoint) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{7}
}

func (x *ESSPoint) GetBlackStartEnabled() *commonmodule.ControlSPC {
	if x != nil {
		return x.BlackStartEnabled
	}
	return nil
}

func (x *ESSPoint) GetFunction() *ESSFunction {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *ESSPoint) GetMode() *commonmodule.ENG_GridConnectModeKind {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *ESSPoint) GetRampRates() *commonmodule.RampRate {
	if x != nil {
		return x.RampRates
	}
	return nil
}

func (x *ESSPoint) GetReset_() *commonmodule.ControlSPC {
	if x != nil {
		return x.Reset_
	}
	return nil
}

func (x *ESSPoint) GetState() *commonmodule.Optional_StateKind {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *ESSPoint) GetTransToIslndOnGridLossEnabled() *commonmodule.ControlSPC {
	if x != nil {
		return x.TransToIslndOnGridLossEnabled
	}
	return nil
}

func (x *ESSPoint) GetEnterServiceOperation() *commonmodule.EnterServiceAPC {
	if x != nil {
		return x.EnterServiceOperation
	}
	return nil
}

func (x *ESSPoint) GetHzWOperation() *commonmodule.HzWAPC {
	if x != nil {
		return x.HzWOperation
	}
	return nil
}

func (x *ESSPoint) GetLimitWOperation() *commonmodule.LimitWAPC {
	if x != nil {
		return x.LimitWOperation
	}
	return nil
}

func (x *ESSPoint) GetPFOperation() *commonmodule.PFSPC {
	if x != nil {
		return x.PFOperation
	}
	return nil
}

func (x *ESSPoint) GetTmHzTripOperation() *commonmodule.TmHzCSG {
	if x != nil {
		return x.TmHzTripOperation
	}
	return nil
}

func (x *ESSPoint) GetTmVoltTripOperation() *commonmodule.TmVoltCSG {
	if x != nil {
		return x.TmVoltTripOperation
	}
	return nil
}

func (x *ESSPoint) GetVArOperation() *commonmodule.VarSPC {
	if x != nil {
		return x.VArOperation
	}
	return nil
}

func (x *ESSPoint) GetVoltVarOperation() *commonmodule.VoltVarCSG {
	if x != nil {
		return x.VoltVarOperation
	}
	return nil
}

func (x *ESSPoint) GetVoltWOperation() *commonmodule.VoltWCSG {
	if x != nil {
		return x.VoltWOperation
	}
	return nil
}

func (x *ESSPoint) GetWVarOperation() *commonmodule.WVarCSG {
	if x != nil {
		return x.WVarOperation
	}
	return nil
}

func (x *ESSPoint) GetWOperation() *commonmodule.WSPC {
	if x != nil {
		return x.WOperation
	}
	return nil
}

// Curve shape setting (FC=SP) (CSG_SP)
type ESSCurvePoint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The array with the points specifying a curve shape.
	Control *ESSPoint `protobuf:"bytes,1,opt,name=control,proto3" json:"control,omitempty"`
	// Start time
	StartTime     *commonmodule.ControlTimestamp `protobuf:"bytes,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ESSCurvePoint) Reset() {
	*x = ESSCurvePoint{}
	mi := &file_essmodule_essmodule_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ESSCurvePoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSCurvePoint) ProtoMessage() {}

func (x *ESSCurvePoint) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSCurvePoint.ProtoReflect.Descriptor instead.
func (*ESSCurvePoint) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{8}
}

func (x *ESSCurvePoint) GetControl() *ESSPoint {
	if x != nil {
		return x.Control
	}
	return nil
}

func (x *ESSCurvePoint) GetStartTime() *commonmodule.ControlTimestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

// Curve shape setting (FC=SP) (CSG_SP)
type ESSCSG struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The array with the points specifying a curve shape.
	CrvPts        []*ESSCurvePoint `protobuf:"bytes,1,rep,name=crvPts,proto3" json:"crvPts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ESSCSG) Reset() {
	*x = ESSCSG{}
	mi := &file_essmodule_essmodule_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ESSCSG) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSCSG) ProtoMessage() {}

func (x *ESSCSG) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSCSG.ProtoReflect.Descriptor instead.
func (*ESSCSG) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{9}
}

func (x *ESSCSG) GetCrvPts() []*ESSCurvePoint {
	if x != nil {
		return x.CrvPts
	}
	return nil
}

// OpenFMB specialization for control schedule using:  LN: Schedule   Name: FSCH
type ESSControlScheduleFSCH struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Discrete value in ESSCSG type
	ValDCSG       *ESSCSG `protobuf:"bytes,1,opt,name=ValDCSG,proto3" json:"ValDCSG,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ESSControlScheduleFSCH) Reset() {
	*x = ESSControlScheduleFSCH{}
	mi := &file_essmodule_essmodule_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ESSControlScheduleFSCH) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSControlScheduleFSCH) ProtoMessage() {}

func (x *ESSControlScheduleFSCH) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSControlScheduleFSCH.ProtoReflect.Descriptor instead.
func (*ESSControlScheduleFSCH) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{10}
}

func (x *ESSControlScheduleFSCH) GetValDCSG() *ESSCSG {
	if x != nil {
		return x.ValDCSG
	}
	return nil
}

// Specialized 61850 FSCC class.  LN: Schedule controller   Name: FSCC
type EssControlFSCC struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	ControlFSCC *commonmodule.ControlFSCC `protobuf:"bytes,1,opt,name=controlFSCC,proto3" json:"controlFSCC,omitempty"`
	// MISSING DOCUMENTATION!!!
	EssControlScheduleFSCH *ESSControlScheduleFSCH `protobuf:"bytes,2,opt,name=essControlScheduleFSCH,proto3" json:"essControlScheduleFSCH,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *EssControlFSCC) Reset() {
	*x = EssControlFSCC{}
	mi := &file_essmodule_essmodule_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EssControlFSCC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EssControlFSCC) ProtoMessage() {}

func (x *EssControlFSCC) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EssControlFSCC.ProtoReflect.Descriptor instead.
func (*EssControlFSCC) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{11}
}

func (x *EssControlFSCC) GetControlFSCC() *commonmodule.ControlFSCC {
	if x != nil {
		return x.ControlFSCC
	}
	return nil
}

func (x *EssControlFSCC) GetEssControlScheduleFSCH() *ESSControlScheduleFSCH {
	if x != nil {
		return x.EssControlScheduleFSCH
	}
	return nil
}

// ESS control class
type ESSControl struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	ControlValue *commonmodule.ControlValue `protobuf:"bytes,1,opt,name=controlValue,proto3" json:"controlValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	Check *commonmodule.CheckConditions `protobuf:"bytes,2,opt,name=check,proto3" json:"check,omitempty"`
	// MISSING DOCUMENTATION!!!
	EssControlFSCC *EssControlFSCC `protobuf:"bytes,3,opt,name=essControlFSCC,proto3" json:"essControlFSCC,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ESSControl) Reset() {
	*x = ESSControl{}
	mi := &file_essmodule_essmodule_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ESSControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSControl) ProtoMessage() {}

func (x *ESSControl) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSControl.ProtoReflect.Descriptor instead.
func (*ESSControl) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{12}
}

func (x *ESSControl) GetControlValue() *commonmodule.ControlValue {
	if x != nil {
		return x.ControlValue
	}
	return nil
}

func (x *ESSControl) GetCheck() *commonmodule.CheckConditions {
	if x != nil {
		return x.Check
	}
	return nil
}

func (x *ESSControl) GetEssControlFSCC() *EssControlFSCC {
	if x != nil {
		return x.EssControlFSCC
	}
	return nil
}

// ESS control profile
type ESSControlProfile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	ControlMessageInfo *commonmodule.ControlMessageInfo `protobuf:"bytes,1,opt,name=controlMessageInfo,proto3" json:"controlMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	Ess *commonmodule.ESS `protobuf:"bytes,2,opt,name=ess,proto3" json:"ess,omitempty"`
	// MISSING DOCUMENTATION!!!
	EssControl    *ESSControl `protobuf:"bytes,3,opt,name=essControl,proto3" json:"essControl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ESSControlProfile) Reset() {
	*x = ESSControlProfile{}
	mi := &file_essmodule_essmodule_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ESSControlProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSControlProfile) ProtoMessage() {}

func (x *ESSControlProfile) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSControlProfile.ProtoReflect.Descriptor instead.
func (*ESSControlProfile) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{13}
}

func (x *ESSControlProfile) GetControlMessageInfo() *commonmodule.ControlMessageInfo {
	if x != nil {
		return x.ControlMessageInfo
	}
	return nil
}

func (x *ESSControlProfile) GetEss() *commonmodule.ESS {
	if x != nil {
		return x.Ess
	}
	return nil
}

func (x *ESSControlProfile) GetEssControl() *ESSControl {
	if x != nil {
		return x.EssControl
	}
	return nil
}

// OpenFMB specialization for cap bank discrete control:
type ESSDiscreteControlDBAT struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	LogicalNodeForControl *commonmodule.LogicalNodeForControl `protobuf:"bytes,1,opt,name=logicalNodeForControl,proto3" json:"logicalNodeForControl,omitempty"`
	// MISSING DOCUMENTATION!!!
	Control       *ESSPoint `protobuf:"bytes,2,opt,name=control,proto3" json:"control,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ESSDiscreteControlDBAT) Reset() {
	*x = ESSDiscreteControlDBAT{}
	mi := &file_essmodule_essmodule_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ESSDiscreteControlDBAT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSDiscreteControlDBAT) ProtoMessage() {}

func (x *ESSDiscreteControlDBAT) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSDiscreteControlDBAT.ProtoReflect.Descriptor instead.
func (*ESSDiscreteControlDBAT) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{14}
}

func (x *ESSDiscreteControlDBAT) GetLogicalNodeForControl() *commonmodule.LogicalNodeForControl {
	if x != nil {
		return x.LogicalNodeForControl
	}
	return nil
}

func (x *ESSDiscreteControlDBAT) GetControl() *ESSPoint {
	if x != nil {
		return x.Control
	}
	return nil
}

// Cap bank discrete control
type ESSDiscreteControl struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	ControlValue *commonmodule.ControlValue `protobuf:"bytes,1,opt,name=controlValue,proto3" json:"controlValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	Check *commonmodule.CheckConditions `protobuf:"bytes,2,opt,name=check,proto3" json:"check,omitempty"`
	// MISSING DOCUMENTATION!!!
	EssDiscreteControlDBAT *ESSDiscreteControlDBAT `protobuf:"bytes,3,opt,name=essDiscreteControlDBAT,proto3" json:"essDiscreteControlDBAT,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ESSDiscreteControl) Reset() {
	*x = ESSDiscreteControl{}
	mi := &file_essmodule_essmodule_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ESSDiscreteControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSDiscreteControl) ProtoMessage() {}

func (x *ESSDiscreteControl) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSDiscreteControl.ProtoReflect.Descriptor instead.
func (*ESSDiscreteControl) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{15}
}

func (x *ESSDiscreteControl) GetControlValue() *commonmodule.ControlValue {
	if x != nil {
		return x.ControlValue
	}
	return nil
}

func (x *ESSDiscreteControl) GetCheck() *commonmodule.CheckConditions {
	if x != nil {
		return x.Check
	}
	return nil
}

func (x *ESSDiscreteControl) GetEssDiscreteControlDBAT() *ESSDiscreteControlDBAT {
	if x != nil {
		return x.EssDiscreteControlDBAT
	}
	return nil
}

// Cap bank discrete control profile.  Instructs an end device (or an end device group) to perform
// a specified action.
type ESSDiscreteControlProfile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	ControlMessageInfo *commonmodule.ControlMessageInfo `protobuf:"bytes,1,opt,name=controlMessageInfo,proto3" json:"controlMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	Ess *commonmodule.ESS `protobuf:"bytes,2,opt,name=ess,proto3" json:"ess,omitempty"`
	// MISSING DOCUMENTATION!!!
	EssDiscreteControl *ESSDiscreteControl `protobuf:"bytes,3,opt,name=essDiscreteControl,proto3" json:"essDiscreteControl,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ESSDiscreteControlProfile) Reset() {
	*x = ESSDiscreteControlProfile{}
	mi := &file_essmodule_essmodule_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ESSDiscreteControlProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSDiscreteControlProfile) ProtoMessage() {}

func (x *ESSDiscreteControlProfile) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSDiscreteControlProfile.ProtoReflect.Descriptor instead.
func (*ESSDiscreteControlProfile) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{16}
}

func (x *ESSDiscreteControlProfile) GetControlMessageInfo() *commonmodule.ControlMessageInfo {
	if x != nil {
		return x.ControlMessageInfo
	}
	return nil
}

func (x *ESSDiscreteControlProfile) GetEss() *commonmodule.ESS {
	if x != nil {
		return x.Ess
	}
	return nil
}

func (x *ESSDiscreteControlProfile) GetEssDiscreteControl() *ESSDiscreteControl {
	if x != nil {
		return x.EssDiscreteControl
	}
	return nil
}

// Specialized 61850 ZBAT class  LN: Battery   Name: ZBAT
type EssEventZBAT struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	LogicalNodeForEventAndStatus *commonmodule.LogicalNodeForEventAndStatus `protobuf:"bytes,1,opt,name=logicalNodeForEventAndStatus,proto3" json:"logicalNodeForEventAndStatus,omitempty"`
	// If true, the battery is in overcharge (voltage or current) condition.
	BatHi *commonmodule.StatusSPS `protobuf:"bytes,2,opt,name=BatHi,proto3" json:"BatHi,omitempty"`
	// If true, the battery voltage or charge has dropped below a pre-set level.
	BatLo *commonmodule.StatusSPS `protobuf:"bytes,3,opt,name=BatLo,proto3" json:"BatLo,omitempty"`
	// MISSING DOCUMENTATION!!!
	BatSt *commonmodule.StatusSPS `protobuf:"bytes,4,opt,name=BatSt,proto3" json:"BatSt,omitempty"`
	// State of charge (in percentage)
	Soc *commonmodule.MV `protobuf:"bytes,5,opt,name=Soc,proto3" json:"Soc,omitempty"`
	// If stVal TRUE, the device is in standby.
	Stdby *commonmodule.StatusSPS `protobuf:"bytes,6,opt,name=Stdby,proto3" json:"Stdby,omitempty"`
	// State of health of the DER storage.
	SoH *commonmodule.MV `protobuf:"bytes,7,opt,name=SoH,proto3" json:"SoH,omitempty"`
	// Energy available of the DER storage (WHAvail = WHRtg * SoC * SoH)
	WHAvail       *commonmodule.MV `protobuf:"bytes,8,opt,name=WHAvail,proto3" json:"WHAvail,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EssEventZBAT) Reset() {
	*x = EssEventZBAT{}
	mi := &file_essmodule_essmodule_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EssEventZBAT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EssEventZBAT) ProtoMessage() {}

func (x *EssEventZBAT) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EssEventZBAT.ProtoReflect.Descriptor instead.
func (*EssEventZBAT) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{17}
}

func (x *EssEventZBAT) GetLogicalNodeForEventAndStatus() *commonmodule.LogicalNodeForEventAndStatus {
	if x != nil {
		return x.LogicalNodeForEventAndStatus
	}
	return nil
}

func (x *EssEventZBAT) GetBatHi() *commonmodule.StatusSPS {
	if x != nil {
		return x.BatHi
	}
	return nil
}

func (x *EssEventZBAT) GetBatLo() *commonmodule.StatusSPS {
	if x != nil {
		return x.BatLo
	}
	return nil
}

func (x *EssEventZBAT) GetBatSt() *commonmodule.StatusSPS {
	if x != nil {
		return x.BatSt
	}
	return nil
}

func (x *EssEventZBAT) GetSoc() *commonmodule.MV {
	if x != nil {
		return x.Soc
	}
	return nil
}

func (x *EssEventZBAT) GetStdby() *commonmodule.StatusSPS {
	if x != nil {
		return x.Stdby
	}
	return nil
}

func (x *EssEventZBAT) GetSoH() *commonmodule.MV {
	if x != nil {
		return x.SoH
	}
	return nil
}

func (x *EssEventZBAT) GetWHAvail() *commonmodule.MV {
	if x != nil {
		return x.WHAvail
	}
	return nil
}

// Point definition (Point)
type ESSPointStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Black start enable
	BlackStartEnabled *commonmodule.StatusSPS `protobuf:"bytes,1,opt,name=blackStartEnabled,proto3" json:"blackStartEnabled,omitempty"`
	// Enable frequency set point
	FrequencySetPointEnabled *commonmodule.StatusSPS `protobuf:"bytes,2,opt,name=frequencySetPointEnabled,proto3" json:"frequencySetPointEnabled,omitempty"`
	// ESS function parameter
	Function *ESSFunction `protobuf:"bytes,3,opt,name=function,proto3" json:"function,omitempty"`
	// Grid connect mode
	Mode *commonmodule.ENG_GridConnectModeKind `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"`
	// MISSING DOCUMENTATION!!!
	PctHzDroop *wrapperspb.FloatValue `protobuf:"bytes,5,opt,name=pctHzDroop,proto3" json:"pctHzDroop,omitempty"`
	// MISSING DOCUMENTATION!!!
	PctVDroop *wrapperspb.FloatValue `protobuf:"bytes,6,opt,name=pctVDroop,proto3" json:"pctVDroop,omitempty"`
	// Ramp rates
	RampRates *commonmodule.RampRate `protobuf:"bytes,7,opt,name=rampRates,proto3" json:"rampRates,omitempty"`
	// Enable reactive power set point
	ReactivePwrSetPointEnabled *commonmodule.StatusSPS `protobuf:"bytes,8,opt,name=reactivePwrSetPointEnabled,proto3" json:"reactivePwrSetPointEnabled,omitempty"`
	// Enable real power set point
	RealPwrSetPointEnabled *commonmodule.StatusSPS `protobuf:"bytes,9,opt,name=realPwrSetPointEnabled,proto3" json:"realPwrSetPointEnabled,omitempty"`
	// ESS state
	State *commonmodule.Optional_StateKind `protobuf:"bytes,10,opt,name=state,proto3" json:"state,omitempty"`
	// Synchronize back to grid
	SyncBackToGrid *commonmodule.StatusSPS `protobuf:"bytes,11,opt,name=syncBackToGrid,proto3" json:"syncBackToGrid,omitempty"`
	// Transition to island on grid loss enable
	TransToIslndOnGridLossEnabled *commonmodule.StatusSPS `protobuf:"bytes,12,opt,name=transToIslndOnGridLossEnabled,proto3" json:"transToIslndOnGridLossEnabled,omitempty"`
	// Enable voltage set point
	VoltageSetPointEnabled *commonmodule.StatusSPS `protobuf:"bytes,13,opt,name=voltageSetPointEnabled,proto3" json:"voltageSetPointEnabled,omitempty"`
	// MISSING DOCUMENTATION!!!
	EnterServiceOperation *commonmodule.EnterServiceAPC `protobuf:"bytes,14,opt,name=enterServiceOperation,proto3" json:"enterServiceOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	HzWOperation *commonmodule.HzWAPC `protobuf:"bytes,15,opt,name=hzWOperation,proto3" json:"hzWOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	LimitWOperation *commonmodule.LimitWAPC `protobuf:"bytes,16,opt,name=limitWOperation,proto3" json:"limitWOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	PFOperation *commonmodule.PFSPC `protobuf:"bytes,17,opt,name=pFOperation,proto3" json:"pFOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	TmHzTripOperation *commonmodule.TmHzCSG `protobuf:"bytes,18,opt,name=tmHzTripOperation,proto3" json:"tmHzTripOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	TmVoltTripOperation *commonmodule.TmVoltCSG `protobuf:"bytes,19,opt,name=tmVoltTripOperation,proto3" json:"tmVoltTripOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	VArOperation *commonmodule.VarSPC `protobuf:"bytes,20,opt,name=vArOperation,proto3" json:"vArOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	VoltVarOperation *commonmodule.VoltVarCSG `protobuf:"bytes,21,opt,name=voltVarOperation,proto3" json:"voltVarOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	VoltWOperation *commonmodule.VoltWCSG `protobuf:"bytes,22,opt,name=voltWOperation,proto3" json:"voltWOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	WVarOperation *commonmodule.WVarCSG `protobuf:"bytes,23,opt,name=wVarOperation,proto3" json:"wVarOperation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ESSPointStatus) Reset() {
	*x = ESSPointStatus{}
	mi := &file_essmodule_essmodule_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ESSPointStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSPointStatus) ProtoMessage() {}

func (x *ESSPointStatus) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSPointStatus.ProtoReflect.Descriptor instead.
func (*ESSPointStatus) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{18}
}

func (x *ESSPointStatus) GetBlackStartEnabled() *commonmodule.StatusSPS {
	if x != nil {
		return x.BlackStartEnabled
	}
	return nil
}

func (x *ESSPointStatus) GetFrequencySetPointEnabled() *commonmodule.StatusSPS {
	if x != nil {
		return x.FrequencySetPointEnabled
	}
	return nil
}

func (x *ESSPointStatus) GetFunction() *ESSFunction {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *ESSPointStatus) GetMode() *commonmodule.ENG_GridConnectModeKind {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *ESSPointStatus) GetPctHzDroop() *wrapperspb.FloatValue {
	if x != nil {
		return x.PctHzDroop
	}
	return nil
}

func (x *ESSPointStatus) GetPctVDroop() *wrapperspb.FloatValue {
	if x != nil {
		return x.PctVDroop
	}
	return nil
}

func (x *ESSPointStatus) GetRampRates() *commonmodule.RampRate {
	if x != nil {
		return x.RampRates
	}
	return nil
}

func (x *ESSPointStatus) GetReactivePwrSetPointEnabled() *commonmodule.StatusSPS {
	if x != nil {
		return x.ReactivePwrSetPointEnabled
	}
	return nil
}

func (x *ESSPointStatus) GetRealPwrSetPointEnabled() *commonmodule.StatusSPS {
	if x != nil {
		return x.RealPwrSetPointEnabled
	}
	return nil
}

func (x *ESSPointStatus) GetState() *commonmodule.Optional_StateKind {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *ESSPointStatus) GetSyncBackToGrid() *commonmodule.StatusSPS {
	if x != nil {
		return x.SyncBackToGrid
	}
	return nil
}

func (x *ESSPointStatus) GetTransToIslndOnGridLossEnabled() *commonmodule.StatusSPS {
	if x != nil {
		return x.TransToIslndOnGridLossEnabled
	}
	return nil
}

func (x *ESSPointStatus) GetVoltageSetPointEnabled() *commonmodule.StatusSPS {
	if x != nil {
		return x.VoltageSetPointEnabled
	}
	return nil
}

func (x *ESSPointStatus) GetEnterServiceOperation() *commonmodule.EnterServiceAPC {
	if x != nil {
		return x.EnterServiceOperation
	}
	return nil
}

func (x *ESSPointStatus) GetHzWOperation() *commonmodule.HzWAPC {
	if x != nil {
		return x.HzWOperation
	}
	return nil
}

func (x *ESSPointStatus) GetLimitWOperation() *commonmodule.LimitWAPC {
	if x != nil {
		return x.LimitWOperation
	}
	return nil
}

func (x *ESSPointStatus) GetPFOperation() *commonmodule.PFSPC {
	if x != nil {
		return x.PFOperation
	}
	return nil
}

func (x *ESSPointStatus) GetTmHzTripOperation() *commonmodule.TmHzCSG {
	if x != nil {
		return x.TmHzTripOperation
	}
	return nil
}

func (x *ESSPointStatus) GetTmVoltTripOperation() *commonmodule.TmVoltCSG {
	if x != nil {
		return x.TmVoltTripOperation
	}
	return nil
}

func (x *ESSPointStatus) GetVArOperation() *commonmodule.VarSPC {
	if x != nil {
		return x.VArOperation
	}
	return nil
}

func (x *ESSPointStatus) GetVoltVarOperation() *commonmodule.VoltVarCSG {
	if x != nil {
		return x.VoltVarOperation
	}
	return nil
}

func (x *ESSPointStatus) GetVoltWOperation() *commonmodule.VoltWCSG {
	if x != nil {
		return x.VoltWOperation
	}
	return nil
}

func (x *ESSPointStatus) GetWVarOperation() *commonmodule.WVarCSG {
	if x != nil {
		return x.WVarOperation
	}
	return nil
}

// Specialized 61850 ZGEN class
type ESSEventAndStatusZGEN struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	LogicalNodeForEventAndStatus *commonmodule.LogicalNodeForEventAndStatus `protobuf:"bytes,1,opt,name=logicalNodeForEventAndStatus,proto3" json:"logicalNodeForEventAndStatus,omitempty"`
	// DC Power On/Off Status; True = DC power on
	AuxPwrSt *commonmodule.StatusSPS `protobuf:"bytes,2,opt,name=AuxPwrSt,proto3" json:"AuxPwrSt,omitempty"`
	// MISSING DOCUMENTATION!!!
	DynamicTest *commonmodule.ENS_DynamicTestKind `protobuf:"bytes,3,opt,name=DynamicTest,proto3" json:"DynamicTest,omitempty"`
	// Emergency stop
	EmgStop *commonmodule.StatusSPS `protobuf:"bytes,4,opt,name=EmgStop,proto3" json:"EmgStop,omitempty"`
	// Generator is synchronized to EPS, or not; True = Synchronized
	GnSynSt *commonmodule.StatusSPS `protobuf:"bytes,5,opt,name=GnSynSt,proto3" json:"GnSynSt,omitempty"`
	// DC Power On/Off Status; True = DC power on
	Alrm *commonmodule.Optional_AlrmKind `protobuf:"bytes,6,opt,name=Alrm,proto3" json:"Alrm,omitempty"`
	// Point status
	PointStatus   *ESSPointStatus `protobuf:"bytes,7,opt,name=PointStatus,proto3" json:"PointStatus,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ESSEventAndStatusZGEN) Reset() {
	*x = ESSEventAndStatusZGEN{}
	mi := &file_essmodule_essmodule_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ESSEventAndStatusZGEN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSEventAndStatusZGEN) ProtoMessage() {}

func (x *ESSEventAndStatusZGEN) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSEventAndStatusZGEN.ProtoReflect.Descriptor instead.
func (*ESSEventAndStatusZGEN) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{19}
}

func (x *ESSEventAndStatusZGEN) GetLogicalNodeForEventAndStatus() *commonmodule.LogicalNodeForEventAndStatus {
	if x != nil {
		return x.LogicalNodeForEventAndStatus
	}
	return nil
}

func (x *ESSEventAndStatusZGEN) GetAuxPwrSt() *commonmodule.StatusSPS {
	if x != nil {
		return x.AuxPwrSt
	}
	return nil
}

func (x *ESSEventAndStatusZGEN) GetDynamicTest() *commonmodule.ENS_DynamicTestKind {
	if x != nil {
		return x.DynamicTest
	}
	return nil
}

func (x *ESSEventAndStatusZGEN) GetEmgStop() *commonmodule.StatusSPS {
	if x != nil {
		return x.EmgStop
	}
	return nil
}

func (x *ESSEventAndStatusZGEN) GetGnSynSt() *commonmodule.StatusSPS {
	if x != nil {
		return x.GnSynSt
	}
	return nil
}

func (x *ESSEventAndStatusZGEN) GetAlrm() *commonmodule.Optional_AlrmKind {
	if x != nil {
		return x.Alrm
	}
	return nil
}

func (x *ESSEventAndStatusZGEN) GetPointStatus() *ESSPointStatus {
	if x != nil {
		return x.PointStatus
	}
	return nil
}

// Specialized 61850 ZGEN class for ESS event profile
type ESSEventZGEN struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	ESSEventAndStatusZGEN *ESSEventAndStatusZGEN `protobuf:"bytes,1,opt,name=eSSEventAndStatusZGEN,proto3" json:"eSSEventAndStatusZGEN,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ESSEventZGEN) Reset() {
	*x = ESSEventZGEN{}
	mi := &file_essmodule_essmodule_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ESSEventZGEN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSEventZGEN) ProtoMessage() {}

func (x *ESSEventZGEN) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSEventZGEN.ProtoReflect.Descriptor instead.
func (*ESSEventZGEN) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{20}
}

func (x *ESSEventZGEN) GetESSEventAndStatusZGEN() *ESSEventAndStatusZGEN {
	if x != nil {
		return x.ESSEventAndStatusZGEN
	}
	return nil
}

// ESS event
type ESSEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	EventValue *commonmodule.EventValue `protobuf:"bytes,1,opt,name=eventValue,proto3" json:"eventValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	EssEventZBAT *EssEventZBAT `protobuf:"bytes,2,opt,name=essEventZBAT,proto3" json:"essEventZBAT,omitempty"`
	// MISSING DOCUMENTATION!!!
	EssEventZGEN  *ESSEventZGEN `protobuf:"bytes,3,opt,name=essEventZGEN,proto3" json:"essEventZGEN,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ESSEvent) Reset() {
	*x = ESSEvent{}
	mi := &file_essmodule_essmodule_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ESSEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSEvent) ProtoMessage() {}

func (x *ESSEvent) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSEvent.ProtoReflect.Descriptor instead.
func (*ESSEvent) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{21}
}

func (x *ESSEvent) GetEventValue() *commonmodule.EventValue {
	if x != nil {
		return x.EventValue
	}
	return nil
}

func (x *ESSEvent) GetEssEventZBAT() *EssEventZBAT {
	if x != nil {
		return x.EssEventZBAT
	}
	return nil
}

func (x *ESSEvent) GetEssEventZGEN() *ESSEventZGEN {
	if x != nil {
		return x.EssEventZGEN
	}
	return nil
}

// ESS event profile
type ESSEventProfile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	EventMessageInfo *commonmodule.EventMessageInfo `protobuf:"bytes,1,opt,name=eventMessageInfo,proto3" json:"eventMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	Ess *commonmodule.ESS `protobuf:"bytes,2,opt,name=ess,proto3" json:"ess,omitempty"`
	// MISSING DOCUMENTATION!!!
	EssEvent      *ESSEvent `protobuf:"bytes,3,opt,name=essEvent,proto3" json:"essEvent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ESSEventProfile) Reset() {
	*x = ESSEventProfile{}
	mi := &file_essmodule_essmodule_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ESSEventProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSEventProfile) ProtoMessage() {}

func (x *ESSEventProfile) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSEventProfile.ProtoReflect.Descriptor instead.
func (*ESSEventProfile) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{22}
}

func (x *ESSEventProfile) GetEventMessageInfo() *commonmodule.EventMessageInfo {
	if x != nil {
		return x.EventMessageInfo
	}
	return nil
}

func (x *ESSEventProfile) GetEss() *commonmodule.ESS {
	if x != nil {
		return x.Ess
	}
	return nil
}

func (x *ESSEventProfile) GetEssEvent() *ESSEvent {
	if x != nil {
		return x.EssEvent
	}
	return nil
}

// ESS reading value
type ESSReading struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	ConductingEquipmentTerminalReading *commonmodule.ConductingEquipmentTerminalReading `protobuf:"bytes,1,opt,name=conductingEquipmentTerminalReading,proto3" json:"conductingEquipmentTerminalReading,omitempty"`
	// MISSING DOCUMENTATION!!!
	PhaseMMTN *commonmodule.PhaseMMTN `protobuf:"bytes,2,opt,name=phaseMMTN,proto3" json:"phaseMMTN,omitempty"`
	// MISSING DOCUMENTATION!!!
	ReadingMMTR *commonmodule.ReadingMMTR `protobuf:"bytes,3,opt,name=readingMMTR,proto3" json:"readingMMTR,omitempty"`
	// MISSING DOCUMENTATION!!!
	ReadingMMXU *commonmodule.ReadingMMXU `protobuf:"bytes,4,opt,name=readingMMXU,proto3" json:"readingMMXU,omitempty"`
	// MISSING DOCUMENTATION!!!
	ReadingMMDC   *commonmodule.ReadingMMDC `protobuf:"bytes,5,opt,name=readingMMDC,proto3" json:"readingMMDC,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ESSReading) Reset() {
	*x = ESSReading{}
	mi := &file_essmodule_essmodule_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ESSReading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSReading) ProtoMessage() {}

func (x *ESSReading) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSReading.ProtoReflect.Descriptor instead.
func (*ESSReading) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{23}
}

func (x *ESSReading) GetConductingEquipmentTerminalReading() *commonmodule.ConductingEquipmentTerminalReading {
	if x != nil {
		return x.ConductingEquipmentTerminalReading
	}
	return nil
}

func (x *ESSReading) GetPhaseMMTN() *commonmodule.PhaseMMTN {
	if x != nil {
		return x.PhaseMMTN
	}
	return nil
}

func (x *ESSReading) GetReadingMMTR() *commonmodule.ReadingMMTR {
	if x != nil {
		return x.ReadingMMTR
	}
	return nil
}

func (x *ESSReading) GetReadingMMXU() *commonmodule.ReadingMMXU {
	if x != nil {
		return x.ReadingMMXU
	}
	return nil
}

func (x *ESSReading) GetReadingMMDC() *commonmodule.ReadingMMDC {
	if x != nil {
		return x.ReadingMMDC
	}
	return nil
}

// ESS reading profile
type ESSReadingProfile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	ReadingMessageInfo *commonmodule.ReadingMessageInfo `protobuf:"bytes,1,opt,name=readingMessageInfo,proto3" json:"readingMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	Ess *commonmodule.ESS `protobuf:"bytes,2,opt,name=ess,proto3" json:"ess,omitempty"`
	// MISSING DOCUMENTATION!!!
	EssReading    *ESSReading `protobuf:"bytes,3,opt,name=essReading,proto3" json:"essReading,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ESSReadingProfile) Reset() {
	*x = ESSReadingProfile{}
	mi := &file_essmodule_essmodule_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ESSReadingProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSReadingProfile) ProtoMessage() {}

func (x *ESSReadingProfile) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSReadingProfile.ProtoReflect.Descriptor instead.
func (*ESSReadingProfile) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{24}
}

func (x *ESSReadingProfile) GetReadingMessageInfo() *commonmodule.ReadingMessageInfo {
	if x != nil {
		return x.ReadingMessageInfo
	}
	return nil
}

func (x *ESSReadingProfile) GetEss() *commonmodule.ESS {
	if x != nil {
		return x.Ess
	}
	return nil
}

func (x *ESSReadingProfile) GetEssReading() *ESSReading {
	if x != nil {
		return x.EssReading
	}
	return nil
}

// Specialized 61850 ZBAT
type EssStatusZBAT struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	LogicalNodeForEventAndStatus *commonmodule.LogicalNodeForEventAndStatus `protobuf:"bytes,1,opt,name=logicalNodeForEventAndStatus,proto3" json:"logicalNodeForEventAndStatus,omitempty"`
	// Battery system status &ndash; True: on
	BatSt *commonmodule.StatusSPS `protobuf:"bytes,2,opt,name=BatSt,proto3" json:"BatSt,omitempty"`
	// MISSING DOCUMENTATION!!!
	GriMod *commonmodule.ENG_GridConnectModeKind `protobuf:"bytes,3,opt,name=GriMod,proto3" json:"GriMod,omitempty"`
	// State of charge (in percentage)
	Soc *commonmodule.MV `protobuf:"bytes,4,opt,name=Soc,proto3" json:"Soc,omitempty"`
	// MISSING DOCUMENTATION!!!
	Stdby *commonmodule.StatusSPS `protobuf:"bytes,5,opt,name=Stdby,proto3" json:"Stdby,omitempty"`
	// State of health of the DER storage.
	SoH *commonmodule.MV `protobuf:"bytes,6,opt,name=SoH,proto3" json:"SoH,omitempty"`
	// Energy available of the DER storage (WHAvail = WHRtg * SoC * SoH)
	WHAvail       *commonmodule.MV `protobuf:"bytes,7,opt,name=WHAvail,proto3" json:"WHAvail,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EssStatusZBAT) Reset() {
	*x = EssStatusZBAT{}
	mi := &file_essmodule_essmodule_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EssStatusZBAT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EssStatusZBAT) ProtoMessage() {}

func (x *EssStatusZBAT) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EssStatusZBAT.ProtoReflect.Descriptor instead.
func (*EssStatusZBAT) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{25}
}

func (x *EssStatusZBAT) GetLogicalNodeForEventAndStatus() *commonmodule.LogicalNodeForEventAndStatus {
	if x != nil {
		return x.LogicalNodeForEventAndStatus
	}
	return nil
}

func (x *EssStatusZBAT) GetBatSt() *commonmodule.StatusSPS {
	if x != nil {
		return x.BatSt
	}
	return nil
}

func (x *EssStatusZBAT) GetGriMod() *commonmodule.ENG_GridConnectModeKind {
	if x != nil {
		return x.GriMod
	}
	return nil
}

func (x *EssStatusZBAT) GetSoc() *commonmodule.MV {
	if x != nil {
		return x.Soc
	}
	return nil
}

func (x *EssStatusZBAT) GetStdby() *commonmodule.StatusSPS {
	if x != nil {
		return x.Stdby
	}
	return nil
}

func (x *EssStatusZBAT) GetSoH() *commonmodule.MV {
	if x != nil {
		return x.SoH
	}
	return nil
}

func (x *EssStatusZBAT) GetWHAvail() *commonmodule.MV {
	if x != nil {
		return x.WHAvail
	}
	return nil
}

// Specialized 61850 ZGEN class
type ESSStatusZGEN struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	ESSEventAndStatusZGEN *ESSEventAndStatusZGEN `protobuf:"bytes,1,opt,name=eSSEventAndStatusZGEN,proto3" json:"eSSEventAndStatusZGEN,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ESSStatusZGEN) Reset() {
	*x = ESSStatusZGEN{}
	mi := &file_essmodule_essmodule_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ESSStatusZGEN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSStatusZGEN) ProtoMessage() {}

func (x *ESSStatusZGEN) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSStatusZGEN.ProtoReflect.Descriptor instead.
func (*ESSStatusZGEN) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{26}
}

func (x *ESSStatusZGEN) GetESSEventAndStatusZGEN() *ESSEventAndStatusZGEN {
	if x != nil {
		return x.ESSEventAndStatusZGEN
	}
	return nil
}

// ESS status
type ESSStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	StatusValue *commonmodule.StatusValue `protobuf:"bytes,1,opt,name=statusValue,proto3" json:"statusValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	EssStatusZBAT *EssStatusZBAT `protobuf:"bytes,2,opt,name=essStatusZBAT,proto3" json:"essStatusZBAT,omitempty"`
	// MISSING DOCUMENTATION!!!
	EssStatusZGEN *ESSStatusZGEN `protobuf:"bytes,3,opt,name=essStatusZGEN,proto3" json:"essStatusZGEN,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ESSStatus) Reset() {
	*x = ESSStatus{}
	mi := &file_essmodule_essmodule_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ESSStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSStatus) ProtoMessage() {}

func (x *ESSStatus) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSStatus.ProtoReflect.Descriptor instead.
func (*ESSStatus) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{27}
}

func (x *ESSStatus) GetStatusValue() *commonmodule.StatusValue {
	if x != nil {
		return x.StatusValue
	}
	return nil
}

func (x *ESSStatus) GetEssStatusZBAT() *EssStatusZBAT {
	if x != nil {
		return x.EssStatusZBAT
	}
	return nil
}

func (x *ESSStatus) GetEssStatusZGEN() *ESSStatusZGEN {
	if x != nil {
		return x.EssStatusZGEN
	}
	return nil
}

// ESS status profile
type ESSStatusProfile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	StatusMessageInfo *commonmodule.StatusMessageInfo `protobuf:"bytes,1,opt,name=statusMessageInfo,proto3" json:"statusMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	Ess *commonmodule.ESS `protobuf:"bytes,2,opt,name=ess,proto3" json:"ess,omitempty"`
	// MISSING DOCUMENTATION!!!
	EssStatus     *ESSStatus `protobuf:"bytes,3,opt,name=essStatus,proto3" json:"essStatus,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ESSStatusProfile) Reset() {
	*x = ESSStatusProfile{}
	mi := &file_essmodule_essmodule_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ESSStatusProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSStatusProfile) ProtoMessage() {}

func (x *ESSStatusProfile) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSStatusProfile.ProtoReflect.Descriptor instead.
func (*ESSStatusProfile) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{28}
}

func (x *ESSStatusProfile) GetStatusMessageInfo() *commonmodule.StatusMessageInfo {
	if x != nil {
		return x.StatusMessageInfo
	}
	return nil
}

func (x *ESSStatusProfile) GetEss() *commonmodule.ESS {
	if x != nil {
		return x.Ess
	}
	return nil
}

func (x *ESSStatusProfile) GetEssStatus() *ESSStatus {
	if x != nil {
		return x.EssStatus
	}
	return nil
}

var File_essmodule_essmodule_proto protoreflect.FileDescriptor

var file_essmodule_essmodule_proto_rawDesc = []byte{
	0x0a, 0x19, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x65, 0x73, 0x73, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x65, 0x73, 0x73,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x1a, 0x09, 0x75, 0x6d, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xf1, 0x02, 0x0a, 0x1a, 0x45, 0x53, 0x53, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x77, 0x0a, 0x1d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x1d, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0b, 0x56, 0x41,
	0x43, 0x68, 0x61, 0x52, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41,
	0x53, 0x47, 0x52, 0x0b, 0x56, 0x41, 0x43, 0x68, 0x61, 0x52, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x12,
	0x39, 0x0a, 0x0e, 0x56, 0x41, 0x44, 0x69, 0x73, 0x43, 0x68, 0x61, 0x52, 0x74, 0x65, 0x4d, 0x61,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53, 0x47, 0x52, 0x0e, 0x56, 0x41, 0x44, 0x69,
	0x73, 0x43, 0x68, 0x61, 0x52, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x31, 0x0a, 0x0a, 0x57, 0x43,
	0x68, 0x61, 0x52, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53,
	0x47, 0x52, 0x0a, 0x57, 0x43, 0x68, 0x61, 0x52, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x37, 0x0a,
	0x0d, 0x57, 0x44, 0x69, 0x73, 0x43, 0x68, 0x61, 0x52, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53, 0x47, 0x52, 0x0d, 0x57, 0x44, 0x69, 0x73, 0x43, 0x68, 0x61,
	0x52, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x22, 0xd4, 0x01, 0x0a, 0x15, 0x45, 0x53, 0x53, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x12, 0x4a, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0e, 0x6e, 0x61,
	0x6d, 0x65, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x6f, 0x0a, 0x1a,
	0x65, 0x73, 0x73, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x53, 0x53,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18,
	0x01, 0x52, 0x1a, 0x65, 0x73, 0x73, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x96, 0x02,
	0x0a, 0x1c, 0x45, 0x53, 0x53, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x5f,
	0x0a, 0x15, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x15, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2d, 0x0a, 0x03, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x53, 0x53, 0x42,
	0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x03, 0x65, 0x73, 0x73, 0x12, 0x60,
	0x0a, 0x15, 0x65, 0x73, 0x73, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x53, 0x53, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x42,
	0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x15, 0x65, 0x73, 0x73, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x3a, 0x04, 0xc0, 0xf3, 0x18, 0x01, 0x22, 0xcc, 0x03, 0x0a, 0x14, 0x45, 0x53, 0x53, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x65, 0x0a, 0x17, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x17, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x56, 0x41, 0x43, 0x68, 0x61, 0x52,
	0x74, 0x65, 0x4d, 0x61, 0x78, 0x52, 0x74, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53,
	0x47, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0e, 0x56, 0x41, 0x43,
	0x68, 0x61, 0x52, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x52, 0x74, 0x67, 0x12, 0x49, 0x0a, 0x11, 0x56,
	0x41, 0x44, 0x69, 0x73, 0x43, 0x68, 0x61, 0x52, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x52, 0x74, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53, 0x47, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90,
	0xb5, 0x18, 0x01, 0x52, 0x11, 0x56, 0x41, 0x44, 0x69, 0x73, 0x43, 0x68, 0x61, 0x52, 0x74, 0x65,
	0x4d, 0x61, 0x78, 0x52, 0x74, 0x67, 0x12, 0x41, 0x0a, 0x0d, 0x57, 0x43, 0x68, 0x61, 0x52, 0x74,
	0x65, 0x4d, 0x61, 0x78, 0x52, 0x74, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53, 0x47,
	0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0d, 0x57, 0x43, 0x68, 0x61,
	0x52, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x52, 0x74, 0x67, 0x12, 0x47, 0x0a, 0x10, 0x57, 0x44, 0x69,
	0x73, 0x43, 0x68, 0x61, 0x52, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x52, 0x74, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x41, 0x53, 0x47, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01,
	0x52, 0x10, 0x57, 0x44, 0x69, 0x73, 0x43, 0x68, 0x61, 0x52, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x52,
	0x74, 0x67, 0x12, 0x31, 0x0a, 0x05, 0x57, 0x48, 0x52, 0x74, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x41, 0x53, 0x47, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x05,
	0x57, 0x48, 0x52, 0x74, 0x67, 0x22, 0xa1, 0x02, 0x0a, 0x0d, 0x45, 0x53, 0x53, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x01, 0x52, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x65, 0x73, 0x73, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x53,
	0x53, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x14, 0x65, 0x73,
	0x73, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x65, 0x0a, 0x1a, 0x65, 0x73, 0x73, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x45, 0x53, 0x53, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x65,
	0x73, 0x73, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf6, 0x01, 0x0a, 0x14, 0x45, 0x53,
	0x53, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x5f, 0x0a, 0x15, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x15, 0x63, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x03, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x45, 0x53, 0x53, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x03, 0x65,
	0x73, 0x73, 0x12, 0x48, 0x0a, 0x0d, 0x65, 0x73, 0x73, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x73, 0x73, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x53, 0x53, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0d, 0x65,
	0x73, 0x73, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x3a, 0x04, 0xc0, 0xf3,
	0x18, 0x01, 0x22, 0xd6, 0x03, 0x0a, 0x0b, 0x45, 0x53, 0x53, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x46, 0x69,
	0x72, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x46, 0x69, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x46, 0x69, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x53, 0x0a, 0x13, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3b, 0x0a, 0x0b, 0x70, 0x65, 0x61, 0x6b, 0x53, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x65, 0x61, 0x6b, 0x53, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67,
	0x52, 0x0b, 0x70, 0x65, 0x61, 0x6b, 0x53, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a,
	0x08, 0x73, 0x6f, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53,
	0x6f, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x08, 0x73, 0x6f, 0x63, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x6f, 0x63, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x4f, 0x43, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x73, 0x6f, 0x63, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x44,
	0x72, 0x6f, 0x6f, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x44, 0x72, 0x6f, 0x6f, 0x70, 0x52, 0x0c, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x44,
	0x72, 0x6f, 0x6f, 0x70, 0x12, 0x35, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x50,
	0x49, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x50, 0x49,
	0x52, 0x09, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x50, 0x49, 0x22, 0xb9, 0x09, 0x0a, 0x08,
	0x45, 0x53, 0x53, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x62, 0x6c, 0x61, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x50, 0x43, 0x52, 0x11, 0x62,
	0x6c, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x32, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45,
	0x53, 0x53, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x45, 0x4e, 0x47, 0x5f, 0x47, 0x72, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12,
	0x34, 0x0a, 0x09, 0x72, 0x61, 0x6d, 0x70, 0x52, 0x61, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x52, 0x61, 0x6d, 0x70, 0x52, 0x61, 0x74, 0x65, 0x52, 0x09, 0x72, 0x61, 0x6d, 0x70,
	0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x50, 0x43, 0x52, 0x05,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5e, 0x0a,
	0x1d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x6f, 0x49, 0x73, 0x6c, 0x6e, 0x64, 0x4f, 0x6e, 0x47,
	0x72, 0x69, 0x64, 0x4c, 0x6f, 0x73, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x50, 0x43, 0x52, 0x1d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x6f, 0x49, 0x73, 0x6c, 0x6e, 0x64, 0x4f, 0x6e, 0x47, 0x72,
	0x69, 0x64, 0x4c, 0x6f, 0x73, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x53, 0x0a,
	0x15, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x50, 0x43, 0x52, 0x15, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0c, 0x68, 0x7a, 0x57, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x48, 0x7a, 0x57, 0x41, 0x50, 0x43, 0x52, 0x0c,
	0x68, 0x7a, 0x57, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x57, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x57, 0x41, 0x50, 0x43, 0x52, 0x0f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x57, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x35, 0x0a, 0x0b, 0x70, 0x46, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x50, 0x46, 0x53, 0x50, 0x43, 0x52, 0x0b, 0x70, 0x46, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x11, 0x74, 0x6d, 0x48, 0x7a, 0x54, 0x72,
	0x69, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x54, 0x6d, 0x48, 0x7a, 0x43, 0x53, 0x47, 0x52, 0x11, 0x74, 0x6d, 0x48, 0x7a, 0x54, 0x72,
	0x69, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x13, 0x74,
	0x6d, 0x56, 0x6f, 0x6c, 0x74, 0x54, 0x72, 0x69, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x6d, 0x56, 0x6f, 0x6c, 0x74, 0x43, 0x53,
	0x47, 0x52, 0x13, 0x74, 0x6d, 0x56, 0x6f, 0x6c, 0x74, 0x54, 0x72, 0x69, 0x70, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0c, 0x76, 0x41, 0x72, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x53,
	0x50, 0x43, 0x52, 0x0c, 0x76, 0x41, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x44, 0x0a, 0x10, 0x76, 0x6f, 0x6c, 0x74, 0x56, 0x61, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x56, 0x6f, 0x6c, 0x74, 0x56, 0x61,
	0x72, 0x43, 0x53, 0x47, 0x52, 0x10, 0x76, 0x6f, 0x6c, 0x74, 0x56, 0x61, 0x72, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0e, 0x76, 0x6f, 0x6c, 0x74, 0x57, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x56, 0x6f,
	0x6c, 0x74, 0x57, 0x43, 0x53, 0x47, 0x52, 0x0e, 0x76, 0x6f, 0x6c, 0x74, 0x57, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0d, 0x77, 0x56, 0x61, 0x72, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x57, 0x56, 0x61,
	0x72, 0x43, 0x53, 0x47, 0x52, 0x0d, 0x77, 0x56, 0x61, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x0a, 0x77, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x57, 0x53, 0x50, 0x43, 0x52, 0x0a, 0x77, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08,
	0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x4a,
	0x04, 0x08, 0x09, 0x10, 0x0a, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x0d, 0x4a, 0x04, 0x08, 0x0e, 0x10,
	0x0f, 0x4a, 0x04, 0x08, 0x0f, 0x10, 0x10, 0x22, 0x90, 0x01, 0x0a, 0x0d, 0x45, 0x53, 0x53, 0x43,
	0x75, 0x72, 0x76, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x73, 0x73,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x53, 0x53, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42,
	0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x12, 0x46, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x44, 0x0a, 0x06, 0x45, 0x53,
	0x53, 0x43, 0x53, 0x47, 0x12, 0x3a, 0x0a, 0x06, 0x63, 0x72, 0x76, 0x50, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x45, 0x53, 0x53, 0x43, 0x75, 0x72, 0x76, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x08,
	0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x06, 0x63, 0x72, 0x76, 0x50, 0x74, 0x73,
	0x22, 0x4f, 0x0a, 0x16, 0x45, 0x53, 0x53, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x53, 0x43, 0x48, 0x12, 0x35, 0x0a, 0x07, 0x56, 0x61,
	0x6c, 0x44, 0x43, 0x53, 0x47, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x73,
	0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x53, 0x53, 0x43, 0x53, 0x47, 0x42, 0x08,
	0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x07, 0x56, 0x61, 0x6c, 0x44, 0x43, 0x53,
	0x47, 0x22, 0xae, 0x01, 0x0a, 0x0e, 0x45, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x46, 0x53, 0x43, 0x43, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46,
	0x53, 0x43, 0x43, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x46, 0x53, 0x43, 0x43, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x46, 0x53, 0x43, 0x43, 0x12, 0x59, 0x0a, 0x16, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x53, 0x43,
	0x48, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x45, 0x53, 0x53, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x53, 0x43, 0x48, 0x52, 0x16, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x53,
	0x43, 0x48, 0x22, 0xca, 0x01, 0x0a, 0x0a, 0x45, 0x53, 0x53, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x41, 0x0a, 0x0e,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x53, 0x43, 0x43, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x45, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x53, 0x43, 0x43, 0x52,
	0x0e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x53, 0x43, 0x43, 0x22,
	0xe1, 0x01, 0x0a, 0x11, 0x45, 0x53, 0x53, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x56, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a,
	0x03, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x53, 0x53, 0x42, 0x08, 0x88,
	0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x03, 0x65, 0x73, 0x73, 0x12, 0x3f, 0x0a, 0x0a,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x53, 0x53,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18,
	0x01, 0x52, 0x0a, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x3a, 0x04, 0xc0,
	0xf3, 0x18, 0x01, 0x22, 0xa8, 0x01, 0x0a, 0x16, 0x45, 0x53, 0x53, 0x44, 0x69, 0x73, 0x63, 0x72,
	0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x42, 0x41, 0x54, 0x12, 0x5f,
	0x0a, 0x15, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x15, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12,
	0x2d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x53, 0x53,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x22, 0xea,
	0x01, 0x0a, 0x12, 0x45, 0x53, 0x53, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x12, 0x59, 0x0a, 0x16, 0x65, 0x73, 0x73, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x42, 0x41, 0x54, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x53, 0x53,
	0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44,
	0x42, 0x41, 0x54, 0x52, 0x16, 0x65, 0x73, 0x73, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x42, 0x41, 0x54, 0x22, 0x81, 0x02, 0x0a, 0x19,
	0x45, 0x53, 0x53, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x56, 0x0a, 0x12, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x12, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2d, 0x0a, 0x03, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x53,
	0x53, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x03, 0x65, 0x73, 0x73,
	0x12, 0x57, 0x0a, 0x12, 0x65, 0x73, 0x73, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65,
	0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x53, 0x53, 0x44, 0x69, 0x73, 0x63,
	0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x08, 0x88, 0xb5, 0x18,
	0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x12, 0x65, 0x73, 0x73, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x3a, 0x04, 0xc0, 0xf3, 0x18, 0x01, 0x22,
	0xb4, 0x03, 0x0a, 0x0c, 0x45, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5a, 0x42, 0x41, 0x54,
	0x12, 0x74, 0x0a, 0x1c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46,
	0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64,
	0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x1c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x42, 0x61, 0x74, 0x48, 0x69, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x05,
	0x42, 0x61, 0x74, 0x48, 0x69, 0x12, 0x2d, 0x0a, 0x05, 0x42, 0x61, 0x74, 0x4c, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x05, 0x42,
	0x61, 0x74, 0x4c, 0x6f, 0x12, 0x2d, 0x0a, 0x05, 0x42, 0x61, 0x74, 0x53, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x05, 0x42, 0x61,
	0x74, 0x53, 0x74, 0x12, 0x22, 0x0a, 0x03, 0x53, 0x6f, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x4d, 0x56, 0x52, 0x03, 0x53, 0x6f, 0x63, 0x12, 0x2d, 0x0a, 0x05, 0x53, 0x74, 0x64, 0x62, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52,
	0x05, 0x53, 0x74, 0x64, 0x62, 0x79, 0x12, 0x22, 0x0a, 0x03, 0x53, 0x6f, 0x48, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x4d, 0x56, 0x52, 0x03, 0x53, 0x6f, 0x48, 0x12, 0x2a, 0x0a, 0x07, 0x57, 0x48,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4d, 0x56, 0x52, 0x07, 0x57,
	0x48, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x22, 0xb2, 0x0c, 0x0a, 0x0e, 0x45, 0x53, 0x53, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x11, 0x62, 0x6c, 0x61,
	0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x11, 0x62,
	0x6c, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x53, 0x0a, 0x18, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x18, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x45, 0x53, 0x53, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x4e, 0x47, 0x5f, 0x47, 0x72, 0x69, 0x64, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x63, 0x74, 0x48, 0x7a, 0x44, 0x72, 0x6f,
	0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x70, 0x63, 0x74, 0x48, 0x7a, 0x44, 0x72, 0x6f, 0x6f,
	0x70, 0x12, 0x39, 0x0a, 0x09, 0x70, 0x63, 0x74, 0x56, 0x44, 0x72, 0x6f, 0x6f, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x70, 0x63, 0x74, 0x56, 0x44, 0x72, 0x6f, 0x6f, 0x70, 0x12, 0x34, 0x0a, 0x09,
	0x72, 0x61, 0x6d, 0x70, 0x52, 0x61, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52,
	0x61, 0x6d, 0x70, 0x52, 0x61, 0x74, 0x65, 0x52, 0x09, 0x72, 0x61, 0x6d, 0x70, 0x52, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x57, 0x0a, 0x1a, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x77,
	0x72, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52,
	0x1a, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x77, 0x72, 0x53, 0x65, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x16, 0x72,
	0x65, 0x61, 0x6c, 0x50, 0x77, 0x72, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x53, 0x50, 0x53, 0x52, 0x16, 0x72, 0x65, 0x61, 0x6c, 0x50, 0x77, 0x72, 0x53, 0x65, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x73, 0x79, 0x6e, 0x63, 0x42, 0x61, 0x63, 0x6b,
	0x54, 0x6f, 0x47, 0x72, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x0e, 0x73, 0x79, 0x6e, 0x63, 0x42, 0x61, 0x63, 0x6b, 0x54,
	0x6f, 0x47, 0x72, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x1d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x6f,
	0x49, 0x73, 0x6c, 0x6e, 0x64, 0x4f, 0x6e, 0x47, 0x72, 0x69, 0x64, 0x4c, 0x6f, 0x73, 0x73, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x1d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x6f, 0x49, 0x73,
	0x6c, 0x6e, 0x64, 0x4f, 0x6e, 0x47, 0x72, 0x69, 0x64, 0x4c, 0x6f, 0x73, 0x73, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x16, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x16, 0x76,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x15, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x50, 0x43, 0x52, 0x15, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0c, 0x68, 0x7a,
	0x57, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x48, 0x7a, 0x57, 0x41, 0x50, 0x43, 0x52, 0x0c, 0x68, 0x7a, 0x57, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x57, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x57, 0x41, 0x50, 0x43, 0x52, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x57, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0b, 0x70, 0x46, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x46, 0x53, 0x50,
	0x43, 0x52, 0x0b, 0x70, 0x46, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43,
	0x0a, 0x11, 0x74, 0x6d, 0x48, 0x7a, 0x54, 0x72, 0x69, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x6d, 0x48, 0x7a, 0x43, 0x53, 0x47,
	0x52, 0x11, 0x74, 0x6d, 0x48, 0x7a, 0x54, 0x72, 0x69, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x13, 0x74, 0x6d, 0x56, 0x6f, 0x6c, 0x74, 0x54, 0x72, 0x69,
	0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x54, 0x6d, 0x56, 0x6f, 0x6c, 0x74, 0x43, 0x53, 0x47, 0x52, 0x13, 0x74, 0x6d, 0x56, 0x6f, 0x6c,
	0x74, 0x54, 0x72, 0x69, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38,
	0x0a, 0x0c, 0x76, 0x41, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x53, 0x50, 0x43, 0x52, 0x0c, 0x76, 0x41, 0x72, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x10, 0x76, 0x6f, 0x6c, 0x74,
	0x56, 0x61, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x56, 0x6f, 0x6c, 0x74, 0x56, 0x61, 0x72, 0x43, 0x53, 0x47, 0x52, 0x10, 0x76, 0x6f,
	0x6c, 0x74, 0x56, 0x61, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e,
	0x0a, 0x0e, 0x76, 0x6f, 0x6c, 0x74, 0x57, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x56, 0x6f, 0x6c, 0x74, 0x57, 0x43, 0x53, 0x47, 0x52, 0x0e,
	0x76, 0x6f, 0x6c, 0x74, 0x57, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b,
	0x0a, 0x0d, 0x77, 0x56, 0x61, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x57, 0x56, 0x61, 0x72, 0x43, 0x53, 0x47, 0x52, 0x0d, 0x77, 0x56,
	0x61, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xdf, 0x03, 0x0a, 0x15,
	0x45, 0x53, 0x53, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5a, 0x47, 0x45, 0x4e, 0x12, 0x74, 0x0a, 0x1c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x1c, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x41,
	0x75, 0x78, 0x50, 0x77, 0x72, 0x53, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x08, 0x41, 0x75, 0x78, 0x50, 0x77, 0x72, 0x53, 0x74,
	0x12, 0x43, 0x0a, 0x0b, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x4e, 0x53, 0x5f, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x54, 0x65, 0x73, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0b, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x54, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x45, 0x6d, 0x67, 0x53, 0x74, 0x6f, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52,
	0x07, 0x45, 0x6d, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x31, 0x0a, 0x07, 0x47, 0x6e, 0x53, 0x79,
	0x6e, 0x53, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53,
	0x50, 0x53, 0x52, 0x07, 0x47, 0x6e, 0x53, 0x79, 0x6e, 0x53, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x41,
	0x6c, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x41, 0x6c, 0x72, 0x6d, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x41, 0x6c, 0x72, 0x6d,
	0x12, 0x3b, 0x0a, 0x0b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x45, 0x53, 0x53, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6c, 0x0a,
	0x0c, 0x45, 0x53, 0x53, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5a, 0x47, 0x45, 0x4e, 0x12, 0x5c, 0x0a,
	0x15, 0x65, 0x53, 0x53, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65,
	0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x53, 0x53, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x01, 0x52, 0x15, 0x65, 0x53, 0x53, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e, 0x22, 0xc4, 0x01, 0x0a, 0x08,
	0x45, 0x53, 0x53, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x65, 0x73, 0x73, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x5a, 0x42, 0x41, 0x54, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x73, 0x73, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x5a, 0x42, 0x41, 0x54, 0x52, 0x0c, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x5a, 0x42, 0x41, 0x54, 0x12, 0x3b, 0x0a, 0x0c, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x5a, 0x47, 0x45, 0x4e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x73,
	0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x53, 0x53, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x5a, 0x47, 0x45, 0x4e, 0x52, 0x0c, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5a, 0x47,
	0x45, 0x4e, 0x22, 0xd3, 0x01, 0x0a, 0x0f, 0x45, 0x53, 0x53, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x50, 0x0a, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x03, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x53, 0x53, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5,
	0x18, 0x01, 0x52, 0x03, 0x65, 0x73, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x65, 0x73, 0x73, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x73, 0x73, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x53, 0x53, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x08,
	0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x08, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x3a, 0x04, 0xc0, 0xf3, 0x18, 0x01, 0x22, 0x83, 0x03, 0x0a, 0x0a, 0x45, 0x53, 0x53,
	0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x86, 0x01, 0x0a, 0x22, 0x63, 0x6f, 0x6e, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x52,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x22, 0x63, 0x6f,
	0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x35, 0x0a, 0x09, 0x70, 0x68, 0x61, 0x73, 0x65, 0x4d, 0x4d, 0x54, 0x4e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x4d, 0x4d, 0x54, 0x4e, 0x52, 0x09, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x4d, 0x4d, 0x54, 0x4e, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x4d, 0x4d, 0x54, 0x52, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x54, 0x52, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x4d, 0x4d, 0x54, 0x52, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d,
	0x4d, 0x58, 0x55, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x4d, 0x4d, 0x58, 0x55, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x58,
	0x55, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x44, 0x43,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x44,
	0x43, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x44, 0x43, 0x22, 0xe1,
	0x01, 0x0a, 0x11, 0x45, 0x53, 0x53, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x56, 0x0a, 0x12, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x12, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x03,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x53, 0x53, 0x42, 0x08, 0x88, 0xb5,
	0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x03, 0x65, 0x73, 0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x53, 0x53, 0x52,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01,
	0x52, 0x0a, 0x65, 0x73, 0x73, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x04, 0xc0, 0xf3,
	0x18, 0x01, 0x22, 0x96, 0x03, 0x0a, 0x0d, 0x45, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5a, 0x42, 0x41, 0x54, 0x12, 0x74, 0x0a, 0x1c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e,
	0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x1c, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x42, 0x61,
	0x74, 0x53, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53,
	0x50, 0x53, 0x52, 0x05, 0x42, 0x61, 0x74, 0x53, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x47, 0x72, 0x69,
	0x4d, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x4e, 0x47, 0x5f, 0x47, 0x72, 0x69,
	0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64,
	0x52, 0x06, 0x47, 0x72, 0x69, 0x4d, 0x6f, 0x64, 0x12, 0x22, 0x0a, 0x03, 0x53, 0x6f, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4d, 0x56, 0x52, 0x03, 0x53, 0x6f, 0x63, 0x12, 0x2d, 0x0a, 0x05,
	0x53, 0x74, 0x64, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x53, 0x50, 0x53, 0x52, 0x05, 0x53, 0x74, 0x64, 0x62, 0x79, 0x12, 0x22, 0x0a, 0x03, 0x53,
	0x6f, 0x48, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4d, 0x56, 0x52, 0x03, 0x53, 0x6f, 0x48, 0x12,
	0x2a, 0x0a, 0x07, 0x57, 0x48, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x4d, 0x56, 0x52, 0x07, 0x57, 0x48, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x22, 0x6d, 0x0a, 0x0d, 0x45,
	0x53, 0x53, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e, 0x12, 0x5c, 0x0a, 0x15,
	0x65, 0x53, 0x53, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5a, 0x47, 0x45, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x73,
	0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x53, 0x53, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x01, 0x52, 0x15, 0x65, 0x53, 0x53, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e, 0x22, 0xce, 0x01, 0x0a, 0x09, 0x45,
	0x53, 0x53, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x65,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x42, 0x41, 0x54, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x42, 0x41, 0x54, 0x52, 0x0d, 0x65, 0x73,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x42, 0x41, 0x54, 0x12, 0x3e, 0x0a, 0x0d, 0x65,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45,
	0x53, 0x53, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e, 0x52, 0x0d, 0x65, 0x73,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e, 0x22, 0xda, 0x01, 0x0a, 0x10,
	0x45, 0x53, 0x53, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x53, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x01, 0x52, 0x11, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x03, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x45, 0x53, 0x53, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52,
	0x03, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x45, 0x53, 0x53, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0x88,
	0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x09, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x3a, 0x04, 0xc0, 0xf3, 0x18, 0x01, 0x42, 0x7b, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x6e,
	0x66, 0x6d, 0x62, 0x2e, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x01, 0x5a,
	0x50, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
	0x66, 0x6d, 0x62, 0x2f, 0x70, 0x73, 0x6d, 0x2f, 0x6f, 0x70, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2d,
	0x6f, 0x70, 0x73, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x32, 0x2f,
	0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2f, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0xaa, 0x02, 0x11, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2e, 0x65, 0x73, 0x73, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_essmodule_essmodule_proto_rawDescOnce sync.Once
	file_essmodule_essmodule_proto_rawDescData = file_essmodule_essmodule_proto_rawDesc
)

func file_essmodule_essmodule_proto_rawDescGZIP() []byte {
	file_essmodule_essmodule_proto_rawDescOnce.Do(func() {
		file_essmodule_essmodule_proto_rawDescData = protoimpl.X.CompressGZIP(file_essmodule_essmodule_proto_rawDescData)
	})
	return file_essmodule_essmodule_proto_rawDescData
}

var file_essmodule_essmodule_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_essmodule_essmodule_proto_goTypes = []any{
	(*ESSCapabilityConfiguration)(nil),                      // 0: essmodule.ESSCapabilityConfiguration
	(*ESSCapabilityOverride)(nil),                           // 1: essmodule.ESSCapabilityOverride
	(*ESSCapabilityOverrideProfile)(nil),                    // 2: essmodule.ESSCapabilityOverrideProfile
	(*ESSCapabilityRatings)(nil),                            // 3: essmodule.ESSCapabilityRatings
	(*ESSCapability)(nil),                                   // 4: essmodule.ESSCapability
	(*ESSCapabilityProfile)(nil),                            // 5: essmodule.ESSCapabilityProfile
	(*ESSFunction)(nil),                                     // 6: essmodule.ESSFunction
	(*ESSPoint)(nil),                                        // 7: essmodule.ESSPoint
	(*ESSCurvePoint)(nil),                                   // 8: essmodule.ESSCurvePoint
	(*ESSCSG)(nil),                                          // 9: essmodule.ESSCSG
	(*ESSControlScheduleFSCH)(nil),                          // 10: essmodule.ESSControlScheduleFSCH
	(*EssControlFSCC)(nil),                                  // 11: essmodule.EssControlFSCC
	(*ESSControl)(nil),                                      // 12: essmodule.ESSControl
	(*ESSControlProfile)(nil),                               // 13: essmodule.ESSControlProfile
	(*ESSDiscreteControlDBAT)(nil),                          // 14: essmodule.ESSDiscreteControlDBAT
	(*ESSDiscreteControl)(nil),                              // 15: essmodule.ESSDiscreteControl
	(*ESSDiscreteControlProfile)(nil),                       // 16: essmodule.ESSDiscreteControlProfile
	(*EssEventZBAT)(nil),                                    // 17: essmodule.EssEventZBAT
	(*ESSPointStatus)(nil),                                  // 18: essmodule.ESSPointStatus
	(*ESSEventAndStatusZGEN)(nil),                           // 19: essmodule.ESSEventAndStatusZGEN
	(*ESSEventZGEN)(nil),                                    // 20: essmodule.ESSEventZGEN
	(*ESSEvent)(nil),                                        // 21: essmodule.ESSEvent
	(*ESSEventProfile)(nil),                                 // 22: essmodule.ESSEventProfile
	(*ESSReading)(nil),                                      // 23: essmodule.ESSReading
	(*ESSReadingProfile)(nil),                               // 24: essmodule.ESSReadingProfile
	(*EssStatusZBAT)(nil),                                   // 25: essmodule.EssStatusZBAT
	(*ESSStatusZGEN)(nil),                                   // 26: essmodule.ESSStatusZGEN
	(*ESSStatus)(nil),                                       // 27: essmodule.ESSStatus
	(*ESSStatusProfile)(nil),                                // 28: essmodule.ESSStatusProfile
	(*commonmodule.SourceCapabilityConfiguration)(nil),      // 29: commonmodule.SourceCapabilityConfiguration
	(*commonmodule.ASG)(nil),                                // 30: commonmodule.ASG
	(*commonmodule.NameplateValue)(nil),                     // 31: commonmodule.NameplateValue
	(*commonmodule.CapabilityMessageInfo)(nil),              // 32: commonmodule.CapabilityMessageInfo
	(*commonmodule.ESS)(nil),                                // 33: commonmodule.ESS
	(*commonmodule.SourceCapabilityRatings)(nil),            // 34: commonmodule.SourceCapabilityRatings
	(*commonmodule.CapacityFirming)(nil),                    // 35: commonmodule.CapacityFirming
	(*commonmodule.FrequencyRegulation)(nil),                // 36: commonmodule.FrequencyRegulation
	(*commonmodule.PeakShaving)(nil),                        // 37: commonmodule.PeakShaving
	(*commonmodule.SocLimit)(nil),                           // 38: commonmodule.SocLimit
	(*commonmodule.SOCManagement)(nil),                      // 39: commonmodule.SOCManagement
	(*commonmodule.VoltageDroop)(nil),                       // 40: commonmodule.VoltageDroop
	(*commonmodule.VoltagePI)(nil),                          // 41: commonmodule.VoltagePI
	(*commonmodule.ControlSPC)(nil),                         // 42: commonmodule.ControlSPC
	(*commonmodule.ENG_GridConnectModeKind)(nil),            // 43: commonmodule.ENG_GridConnectModeKind
	(*commonmodule.RampRate)(nil),                           // 44: commonmodule.RampRate
	(*commonmodule.Optional_StateKind)(nil),                 // 45: commonmodule.Optional_StateKind
	(*commonmodule.EnterServiceAPC)(nil),                    // 46: commonmodule.EnterServiceAPC
	(*commonmodule.HzWAPC)(nil),                             // 47: commonmodule.HzWAPC
	(*commonmodule.LimitWAPC)(nil),                          // 48: commonmodule.LimitWAPC
	(*commonmodule.PFSPC)(nil),                              // 49: commonmodule.PFSPC
	(*commonmodule.TmHzCSG)(nil),                            // 50: commonmodule.TmHzCSG
	(*commonmodule.TmVoltCSG)(nil),                          // 51: commonmodule.TmVoltCSG
	(*commonmodule.VarSPC)(nil),                             // 52: commonmodule.VarSPC
	(*commonmodule.VoltVarCSG)(nil),                         // 53: commonmodule.VoltVarCSG
	(*commonmodule.VoltWCSG)(nil),                           // 54: commonmodule.VoltWCSG
	(*commonmodule.WVarCSG)(nil),                            // 55: commonmodule.WVarCSG
	(*commonmodule.WSPC)(nil),                               // 56: commonmodule.WSPC
	(*commonmodule.ControlTimestamp)(nil),                   // 57: commonmodule.ControlTimestamp
	(*commonmodule.ControlFSCC)(nil),                        // 58: commonmodule.ControlFSCC
	(*commonmodule.ControlValue)(nil),                       // 59: commonmodule.ControlValue
	(*commonmodule.CheckConditions)(nil),                    // 60: commonmodule.CheckConditions
	(*commonmodule.ControlMessageInfo)(nil),                 // 61: commonmodule.ControlMessageInfo
	(*commonmodule.LogicalNodeForControl)(nil),              // 62: commonmodule.LogicalNodeForControl
	(*commonmodule.LogicalNodeForEventAndStatus)(nil),       // 63: commonmodule.LogicalNodeForEventAndStatus
	(*commonmodule.StatusSPS)(nil),                          // 64: commonmodule.StatusSPS
	(*commonmodule.MV)(nil),                                 // 65: commonmodule.MV
	(*wrapperspb.FloatValue)(nil),                           // 66: google.protobuf.FloatValue
	(*commonmodule.ENS_DynamicTestKind)(nil),                // 67: commonmodule.ENS_DynamicTestKind
	(*commonmodule.Optional_AlrmKind)(nil),                  // 68: commonmodule.Optional_AlrmKind
	(*commonmodule.EventValue)(nil),                         // 69: commonmodule.EventValue
	(*commonmodule.EventMessageInfo)(nil),                   // 70: commonmodule.EventMessageInfo
	(*commonmodule.ConductingEquipmentTerminalReading)(nil), // 71: commonmodule.ConductingEquipmentTerminalReading
	(*commonmodule.PhaseMMTN)(nil),                          // 72: commonmodule.PhaseMMTN
	(*commonmodule.ReadingMMTR)(nil),                        // 73: commonmodule.ReadingMMTR
	(*commonmodule.ReadingMMXU)(nil),                        // 74: commonmodule.ReadingMMXU
	(*commonmodule.ReadingMMDC)(nil),                        // 75: commonmodule.ReadingMMDC
	(*commonmodule.ReadingMessageInfo)(nil),                 // 76: commonmodule.ReadingMessageInfo
	(*commonmodule.StatusValue)(nil),                        // 77: commonmodule.StatusValue
	(*commonmodule.StatusMessageInfo)(nil),                  // 78: commonmodule.StatusMessageInfo
}
var file_essmodule_essmodule_proto_depIdxs = []int32{
	29,  // 0: essmodule.ESSCapabilityConfiguration.sourceCapabilityConfiguration:type_name -> commonmodule.SourceCapabilityConfiguration
	30,  // 1: essmodule.ESSCapabilityConfiguration.VAChaRteMax:type_name -> commonmodule.ASG
	30,  // 2: essmodule.ESSCapabilityConfiguration.VADisChaRteMax:type_name -> commonmodule.ASG
	30,  // 3: essmodule.ESSCapabilityConfiguration.WChaRteMax:type_name -> commonmodule.ASG
	30,  // 4: essmodule.ESSCapabilityConfiguration.WDisChaRteMax:type_name -> commonmodule.ASG
	31,  // 5: essmodule.ESSCapabilityOverride.nameplateValue:type_name -> commonmodule.NameplateValue
	0,   // 6: essmodule.ESSCapabilityOverride.essCapabilityConfiguration:type_name -> essmodule.ESSCapabilityConfiguration
	32,  // 7: essmodule.ESSCapabilityOverrideProfile.capabilityMessageInfo:type_name -> commonmodule.CapabilityMessageInfo
	33,  // 8: essmodule.ESSCapabilityOverrideProfile.ess:type_name -> commonmodule.ESS
	1,   // 9: essmodule.ESSCapabilityOverrideProfile.essCapabilityOverride:type_name -> essmodule.ESSCapabilityOverride
	34,  // 10: essmodule.ESSCapabilityRatings.sourceCapabilityRatings:type_name -> commonmodule.SourceCapabilityRatings
	30,  // 11: essmodule.ESSCapabilityRatings.VAChaRteMaxRtg:type_name -> commonmodule.ASG
	30,  // 12: essmodule.ESSCapabilityRatings.VADisChaRteMaxRtg:type_name -> commonmodule.ASG
	30,  // 13: essmodule.ESSCapabilityRatings.WChaRteMaxRtg:type_name -> commonmodule.ASG
	30,  // 14: essmodule.ESSCapabilityRatings.WDisChaRteMaxRtg:type_name -> commonmodule.ASG
	30,  // 15: essmodule.ESSCapabilityRatings.WHRtg:type_name -> commonmodule.ASG
	31,  // 16: essmodule.ESSCapability.nameplateValue:type_name -> commonmodule.NameplateValue
	3,   // 17: essmodule.ESSCapability.essCapabilityRatings:type_name -> essmodule.ESSCapabilityRatings
	0,   // 18: essmodule.ESSCapability.essCapabilityConfiguration:type_name -> essmodule.ESSCapabilityConfiguration
	32,  // 19: essmodule.ESSCapabilityProfile.capabilityMessageInfo:type_name -> commonmodule.CapabilityMessageInfo
	33,  // 20: essmodule.ESSCapabilityProfile.ess:type_name -> commonmodule.ESS
	4,   // 21: essmodule.ESSCapabilityProfile.essCapability:type_name -> essmodule.ESSCapability
	35,  // 22: essmodule.ESSFunction.capacityFirming:type_name -> commonmodule.CapacityFirming
	36,  // 23: essmodule.ESSFunction.frequencyRegulation:type_name -> commonmodule.FrequencyRegulation
	37,  // 24: essmodule.ESSFunction.peakShaving:type_name -> commonmodule.PeakShaving
	38,  // 25: essmodule.ESSFunction.socLimit:type_name -> commonmodule.SocLimit
	39,  // 26: essmodule.ESSFunction.socManagement:type_name -> commonmodule.SOCManagement
	40,  // 27: essmodule.ESSFunction.voltageDroop:type_name -> commonmodule.VoltageDroop
	41,  // 28: essmodule.ESSFunction.voltagePI:type_name -> commonmodule.VoltagePI
	42,  // 29: essmodule.ESSPoint.blackStartEnabled:type_name -> commonmodule.ControlSPC
	6,   // 30: essmodule.ESSPoint.function:type_name -> essmodule.ESSFunction
	43,  // 31: essmodule.ESSPoint.mode:type_name -> commonmodule.ENG_GridConnectModeKind
	44,  // 32: essmodule.ESSPoint.rampRates:type_name -> commonmodule.RampRate
	42,  // 33: essmodule.ESSPoint.reset:type_name -> commonmodule.ControlSPC
	45,  // 34: essmodule.ESSPoint.state:type_name -> commonmodule.Optional_StateKind
	42,  // 35: essmodule.ESSPoint.transToIslndOnGridLossEnabled:type_name -> commonmodule.ControlSPC
	46,  // 36: essmodule.ESSPoint.enterServiceOperation:type_name -> commonmodule.EnterServiceAPC
	47,  // 37: essmodule.ESSPoint.hzWOperation:type_name -> commonmodule.HzWAPC
	48,  // 38: essmodule.ESSPoint.limitWOperation:type_name -> commonmodule.LimitWAPC
	49,  // 39: essmodule.ESSPoint.pFOperation:type_name -> commonmodule.PFSPC
	50,  // 40: essmodule.ESSPoint.tmHzTripOperation:type_name -> commonmodule.TmHzCSG
	51,  // 41: essmodule.ESSPoint.tmVoltTripOperation:type_name -> commonmodule.TmVoltCSG
	52,  // 42: essmodule.ESSPoint.vArOperation:type_name -> commonmodule.VarSPC
	53,  // 43: essmodule.ESSPoint.voltVarOperation:type_name -> commonmodule.VoltVarCSG
	54,  // 44: essmodule.ESSPoint.voltWOperation:type_name -> commonmodule.VoltWCSG
	55,  // 45: essmodule.ESSPoint.wVarOperation:type_name -> commonmodule.WVarCSG
	56,  // 46: essmodule.ESSPoint.wOperation:type_name -> commonmodule.WSPC
	7,   // 47: essmodule.ESSCurvePoint.control:type_name -> essmodule.ESSPoint
	57,  // 48: essmodule.ESSCurvePoint.startTime:type_name -> commonmodule.ControlTimestamp
	8,   // 49: essmodule.ESSCSG.crvPts:type_name -> essmodule.ESSCurvePoint
	9,   // 50: essmodule.ESSControlScheduleFSCH.ValDCSG:type_name -> essmodule.ESSCSG
	58,  // 51: essmodule.EssControlFSCC.controlFSCC:type_name -> commonmodule.ControlFSCC
	10,  // 52: essmodule.EssControlFSCC.essControlScheduleFSCH:type_name -> essmodule.ESSControlScheduleFSCH
	59,  // 53: essmodule.ESSControl.controlValue:type_name -> commonmodule.ControlValue
	60,  // 54: essmodule.ESSControl.check:type_name -> commonmodule.CheckConditions
	11,  // 55: essmodule.ESSControl.essControlFSCC:type_name -> essmodule.EssControlFSCC
	61,  // 56: essmodule.ESSControlProfile.controlMessageInfo:type_name -> commonmodule.ControlMessageInfo
	33,  // 57: essmodule.ESSControlProfile.ess:type_name -> commonmodule.ESS
	12,  // 58: essmodule.ESSControlProfile.essControl:type_name -> essmodule.ESSControl
	62,  // 59: essmodule.ESSDiscreteControlDBAT.logicalNodeForControl:type_name -> commonmodule.LogicalNodeForControl
	7,   // 60: essmodule.ESSDiscreteControlDBAT.control:type_name -> essmodule.ESSPoint
	59,  // 61: essmodule.ESSDiscreteControl.controlValue:type_name -> commonmodule.ControlValue
	60,  // 62: essmodule.ESSDiscreteControl.check:type_name -> commonmodule.CheckConditions
	14,  // 63: essmodule.ESSDiscreteControl.essDiscreteControlDBAT:type_name -> essmodule.ESSDiscreteControlDBAT
	61,  // 64: essmodule.ESSDiscreteControlProfile.controlMessageInfo:type_name -> commonmodule.ControlMessageInfo
	33,  // 65: essmodule.ESSDiscreteControlProfile.ess:type_name -> commonmodule.ESS
	15,  // 66: essmodule.ESSDiscreteControlProfile.essDiscreteControl:type_name -> essmodule.ESSDiscreteControl
	63,  // 67: essmodule.EssEventZBAT.logicalNodeForEventAndStatus:type_name -> commonmodule.LogicalNodeForEventAndStatus
	64,  // 68: essmodule.EssEventZBAT.BatHi:type_name -> commonmodule.StatusSPS
	64,  // 69: essmodule.EssEventZBAT.BatLo:type_name -> commonmodule.StatusSPS
	64,  // 70: essmodule.EssEventZBAT.BatSt:type_name -> commonmodule.StatusSPS
	65,  // 71: essmodule.EssEventZBAT.Soc:type_name -> commonmodule.MV
	64,  // 72: essmodule.EssEventZBAT.Stdby:type_name -> commonmodule.StatusSPS
	65,  // 73: essmodule.EssEventZBAT.SoH:type_name -> commonmodule.MV
	65,  // 74: essmodule.EssEventZBAT.WHAvail:type_name -> commonmodule.MV
	64,  // 75: essmodule.ESSPointStatus.blackStartEnabled:type_name -> commonmodule.StatusSPS
	64,  // 76: essmodule.ESSPointStatus.frequencySetPointEnabled:type_name -> commonmodule.StatusSPS
	6,   // 77: essmodule.ESSPointStatus.function:type_name -> essmodule.ESSFunction
	43,  // 78: essmodule.ESSPointStatus.mode:type_name -> commonmodule.ENG_GridConnectModeKind
	66,  // 79: essmodule.ESSPointStatus.pctHzDroop:type_name -> google.protobuf.FloatValue
	66,  // 80: essmodule.ESSPointStatus.pctVDroop:type_name -> google.protobuf.FloatValue
	44,  // 81: essmodule.ESSPointStatus.rampRates:type_name -> commonmodule.RampRate
	64,  // 82: essmodule.ESSPointStatus.reactivePwrSetPointEnabled:type_name -> commonmodule.StatusSPS
	64,  // 83: essmodule.ESSPointStatus.realPwrSetPointEnabled:type_name -> commonmodule.StatusSPS
	45,  // 84: essmodule.ESSPointStatus.state:type_name -> commonmodule.Optional_StateKind
	64,  // 85: essmodule.ESSPointStatus.syncBackToGrid:type_name -> commonmodule.StatusSPS
	64,  // 86: essmodule.ESSPointStatus.transToIslndOnGridLossEnabled:type_name -> commonmodule.StatusSPS
	64,  // 87: essmodule.ESSPointStatus.voltageSetPointEnabled:type_name -> commonmodule.StatusSPS
	46,  // 88: essmodule.ESSPointStatus.enterServiceOperation:type_name -> commonmodule.EnterServiceAPC
	47,  // 89: essmodule.ESSPointStatus.hzWOperation:type_name -> commonmodule.HzWAPC
	48,  // 90: essmodule.ESSPointStatus.limitWOperation:type_name -> commonmodule.LimitWAPC
	49,  // 91: essmodule.ESSPointStatus.pFOperation:type_name -> commonmodule.PFSPC
	50,  // 92: essmodule.ESSPointStatus.tmHzTripOperation:type_name -> commonmodule.TmHzCSG
	51,  // 93: essmodule.ESSPointStatus.tmVoltTripOperation:type_name -> commonmodule.TmVoltCSG
	52,  // 94: essmodule.ESSPointStatus.vArOperation:type_name -> commonmodule.VarSPC
	53,  // 95: essmodule.ESSPointStatus.voltVarOperation:type_name -> commonmodule.VoltVarCSG
	54,  // 96: essmodule.ESSPointStatus.voltWOperation:type_name -> commonmodule.VoltWCSG
	55,  // 97: essmodule.ESSPointStatus.wVarOperation:type_name -> commonmodule.WVarCSG
	63,  // 98: essmodule.ESSEventAndStatusZGEN.logicalNodeForEventAndStatus:type_name -> commonmodule.LogicalNodeForEventAndStatus
	64,  // 99: essmodule.ESSEventAndStatusZGEN.AuxPwrSt:type_name -> commonmodule.StatusSPS
	67,  // 100: essmodule.ESSEventAndStatusZGEN.DynamicTest:type_name -> commonmodule.ENS_DynamicTestKind
	64,  // 101: essmodule.ESSEventAndStatusZGEN.EmgStop:type_name -> commonmodule.StatusSPS
	64,  // 102: essmodule.ESSEventAndStatusZGEN.GnSynSt:type_name -> commonmodule.StatusSPS
	68,  // 103: essmodule.ESSEventAndStatusZGEN.Alrm:type_name -> commonmodule.Optional_AlrmKind
	18,  // 104: essmodule.ESSEventAndStatusZGEN.PointStatus:type_name -> essmodule.ESSPointStatus
	19,  // 105: essmodule.ESSEventZGEN.eSSEventAndStatusZGEN:type_name -> essmodule.ESSEventAndStatusZGEN
	69,  // 106: essmodule.ESSEvent.eventValue:type_name -> commonmodule.EventValue
	17,  // 107: essmodule.ESSEvent.essEventZBAT:type_name -> essmodule.EssEventZBAT
	20,  // 108: essmodule.ESSEvent.essEventZGEN:type_name -> essmodule.ESSEventZGEN
	70,  // 109: essmodule.ESSEventProfile.eventMessageInfo:type_name -> commonmodule.EventMessageInfo
	33,  // 110: essmodule.ESSEventProfile.ess:type_name -> commonmodule.ESS
	21,  // 111: essmodule.ESSEventProfile.essEvent:type_name -> essmodule.ESSEvent
	71,  // 112: essmodule.ESSReading.conductingEquipmentTerminalReading:type_name -> commonmodule.ConductingEquipmentTerminalReading
	72,  // 113: essmodule.ESSReading.phaseMMTN:type_name -> commonmodule.PhaseMMTN
	73,  // 114: essmodule.ESSReading.readingMMTR:type_name -> commonmodule.ReadingMMTR
	74,  // 115: essmodule.ESSReading.readingMMXU:type_name -> commonmodule.ReadingMMXU
	75,  // 116: essmodule.ESSReading.readingMMDC:type_name -> commonmodule.ReadingMMDC
	76,  // 117: essmodule.ESSReadingProfile.readingMessageInfo:type_name -> commonmodule.ReadingMessageInfo
	33,  // 118: essmodule.ESSReadingProfile.ess:type_name -> commonmodule.ESS
	23,  // 119: essmodule.ESSReadingProfile.essReading:type_name -> essmodule.ESSReading
	63,  // 120: essmodule.EssStatusZBAT.logicalNodeForEventAndStatus:type_name -> commonmodule.LogicalNodeForEventAndStatus
	64,  // 121: essmodule.EssStatusZBAT.BatSt:type_name -> commonmodule.StatusSPS
	43,  // 122: essmodule.EssStatusZBAT.GriMod:type_name -> commonmodule.ENG_GridConnectModeKind
	65,  // 123: essmodule.EssStatusZBAT.Soc:type_name -> commonmodule.MV
	64,  // 124: essmodule.EssStatusZBAT.Stdby:type_name -> commonmodule.StatusSPS
	65,  // 125: essmodule.EssStatusZBAT.SoH:type_name -> commonmodule.MV
	65,  // 126: essmodule.EssStatusZBAT.WHAvail:type_name -> commonmodule.MV
	19,  // 127: essmodule.ESSStatusZGEN.eSSEventAndStatusZGEN:type_name -> essmodule.ESSEventAndStatusZGEN
	77,  // 128: essmodule.ESSStatus.statusValue:type_name -> commonmodule.StatusValue
	25,  // 129: essmodule.ESSStatus.essStatusZBAT:type_name -> essmodule.EssStatusZBAT
	26,  // 130: essmodule.ESSStatus.essStatusZGEN:type_name -> essmodule.ESSStatusZGEN
	78,  // 131: essmodule.ESSStatusProfile.statusMessageInfo:type_name -> commonmodule.StatusMessageInfo
	33,  // 132: essmodule.ESSStatusProfile.ess:type_name -> commonmodule.ESS
	27,  // 133: essmodule.ESSStatusProfile.essStatus:type_name -> essmodule.ESSStatus
	134, // [134:134] is the sub-list for method output_type
	134, // [134:134] is the sub-list for method input_type
	134, // [134:134] is the sub-list for extension type_name
	134, // [134:134] is the sub-list for extension extendee
	0,   // [0:134] is the sub-list for field type_name
}

func init() { file_essmodule_essmodule_proto_init() }
func file_essmodule_essmodule_proto_init() {
	if File_essmodule_essmodule_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_essmodule_essmodule_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_essmodule_essmodule_proto_goTypes,
		DependencyIndexes: file_essmodule_essmodule_proto_depIdxs,
		MessageInfos:      file_essmodule_essmodule_proto_msgTypes,
	}.Build()
	File_essmodule_essmodule_proto = out.File
	file_essmodule_essmodule_proto_rawDesc = nil
	file_essmodule_essmodule_proto_goTypes = nil
	file_essmodule_essmodule_proto_depIdxs = nil
}
