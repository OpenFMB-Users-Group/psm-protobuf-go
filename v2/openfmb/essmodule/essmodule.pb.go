// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.6
// source: essmodule/essmodule.proto

// OpenFMB Operational Model (61850-CIM) (v2.0.0).eap
// Tuesday, April 27, 2021 7:07:08 PM UTC

package essmodule

import (
	_ "gitlab.com/openfmb/psm/ops/protobuf/go-openfmb-ops-protobuf/v2/openfmb"
	commonmodule "gitlab.com/openfmb/psm/ops/protobuf/go-openfmb-ops-protobuf/v2/openfmb/commonmodule"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Specialized 61850 ZBAT class  LN: Battery   Name: ZBAT
type EssEventZBAT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	LogicalNodeForEventAndStatus *commonmodule.LogicalNodeForEventAndStatus `protobuf:"bytes,1,opt,name=logicalNodeForEventAndStatus,proto3" json:"logicalNodeForEventAndStatus,omitempty"`
	// If true, the battery is in overcharge (voltage or current) condition.
	BatHi *commonmodule.StatusSPS `protobuf:"bytes,2,opt,name=BatHi,proto3" json:"BatHi,omitempty"`
	// If true, the battery voltage or charge has dropped below a pre-set level.
	BatLo *commonmodule.StatusSPS `protobuf:"bytes,3,opt,name=BatLo,proto3" json:"BatLo,omitempty"`
	// MISSING DOCUMENTATION!!!
	BatSt *commonmodule.StatusSPS `protobuf:"bytes,4,opt,name=BatSt,proto3" json:"BatSt,omitempty"`
	// State of charge (in percentage)
	Soc *commonmodule.MV `protobuf:"bytes,5,opt,name=Soc,proto3" json:"Soc,omitempty"`
	// If stVal TRUE, the device is in standby.
	Stdby *commonmodule.StatusSPS `protobuf:"bytes,6,opt,name=Stdby,proto3" json:"Stdby,omitempty"`
}

func (x *EssEventZBAT) Reset() {
	*x = EssEventZBAT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_essmodule_essmodule_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EssEventZBAT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EssEventZBAT) ProtoMessage() {}

func (x *EssEventZBAT) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EssEventZBAT.ProtoReflect.Descriptor instead.
func (*EssEventZBAT) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{0}
}

func (x *EssEventZBAT) GetLogicalNodeForEventAndStatus() *commonmodule.LogicalNodeForEventAndStatus {
	if x != nil {
		return x.LogicalNodeForEventAndStatus
	}
	return nil
}

func (x *EssEventZBAT) GetBatHi() *commonmodule.StatusSPS {
	if x != nil {
		return x.BatHi
	}
	return nil
}

func (x *EssEventZBAT) GetBatLo() *commonmodule.StatusSPS {
	if x != nil {
		return x.BatLo
	}
	return nil
}

func (x *EssEventZBAT) GetBatSt() *commonmodule.StatusSPS {
	if x != nil {
		return x.BatSt
	}
	return nil
}

func (x *EssEventZBAT) GetSoc() *commonmodule.MV {
	if x != nil {
		return x.Soc
	}
	return nil
}

func (x *EssEventZBAT) GetStdby() *commonmodule.StatusSPS {
	if x != nil {
		return x.Stdby
	}
	return nil
}

// ESS inverter high level function to maintain frequency within dead bands.
type FrequencyRegulation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uint/0.01Hz  Frequency regulation is performed when the grid frequency goes beyond the dead
	// bands. The dead bands are defined as follows: Upper DB = frequency set point + dead band plus Lower
	// DB = frequency set point – dead band minus
	FrequencyDeadBandMinus *wrapperspb.FloatValue `protobuf:"bytes,1,opt,name=frequencyDeadBandMinus,proto3" json:"frequencyDeadBandMinus,omitempty"`
	// uint/0.01Hz  Frequency regulation is performed when the grid frequency goes beyond the dead
	// bands. The dead bands are defined as follows: Upper DB = frequency set point + dead band plus Lower
	// DB = frequency set point – dead band minus
	FrequencyDeadBandPlus *wrapperspb.FloatValue `protobuf:"bytes,2,opt,name=frequencyDeadBandPlus,proto3" json:"frequencyDeadBandPlus,omitempty"`
	// Control value (TRUE or FALSE)
	FrequencyRegulationCtl *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=frequencyRegulationCtl,proto3" json:"frequencyRegulationCtl,omitempty"`
	// uint/0.01Hz  Target frequency
	FrequencySetPoint *wrapperspb.FloatValue `protobuf:"bytes,4,opt,name=frequencySetPoint,proto3" json:"frequencySetPoint,omitempty"`
	// uint/0.01Hz  Other modes of operation, such as peak shaving, smoothing or SOC management may
	// operate if the grid frequency is within the stable band. Upper stable band = frequency set point +
	// band plus Lower stable band = frequency set point – band minus
	GridFrequencyStableBandMinus *wrapperspb.FloatValue `protobuf:"bytes,5,opt,name=gridFrequencyStableBandMinus,proto3" json:"gridFrequencyStableBandMinus,omitempty"`
	// uint/0.01Hz  Other modes of operation, such as peak shaving, smoothing or SOC management may
	// operate if the grid frequency is within the stable band. Upper stable band = frequency set point +
	// band plus Lower stable band = frequency set point – band minus
	GridFrequencyStableBandPlus *wrapperspb.FloatValue `protobuf:"bytes,6,opt,name=gridFrequencyStableBandPlus,proto3" json:"gridFrequencyStableBandPlus,omitempty"`
	// uint/0.1%  The droops define the reaction of the PCS to under/over frequency events. A droop of
	// 1% means that the PCS will output 100% power if the frequency is 1% of the nominal frequency away
	// from the upper or lower dead band. The minimum droop value possible is 0.8%.
	OverFrequencyDroop *wrapperspb.FloatValue `protobuf:"bytes,7,opt,name=overFrequencyDroop,proto3" json:"overFrequencyDroop,omitempty"`
	// uint/0.1%  The droops define the reaction of the PCS to under/over voltage events. A droop of 1%
	// means that the PCS will output 100% power if the voltage is 1% of the nominal voltage away from the
	// upper or lower dead band. The minimum droop value possible is 0.8%.
	UnderFrequencyDroop *wrapperspb.FloatValue `protobuf:"bytes,8,opt,name=underFrequencyDroop,proto3" json:"underFrequencyDroop,omitempty"`
}

func (x *FrequencyRegulation) Reset() {
	*x = FrequencyRegulation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_essmodule_essmodule_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrequencyRegulation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrequencyRegulation) ProtoMessage() {}

func (x *FrequencyRegulation) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrequencyRegulation.ProtoReflect.Descriptor instead.
func (*FrequencyRegulation) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{1}
}

func (x *FrequencyRegulation) GetFrequencyDeadBandMinus() *wrapperspb.FloatValue {
	if x != nil {
		return x.FrequencyDeadBandMinus
	}
	return nil
}

func (x *FrequencyRegulation) GetFrequencyDeadBandPlus() *wrapperspb.FloatValue {
	if x != nil {
		return x.FrequencyDeadBandPlus
	}
	return nil
}

func (x *FrequencyRegulation) GetFrequencyRegulationCtl() *wrapperspb.BoolValue {
	if x != nil {
		return x.FrequencyRegulationCtl
	}
	return nil
}

func (x *FrequencyRegulation) GetFrequencySetPoint() *wrapperspb.FloatValue {
	if x != nil {
		return x.FrequencySetPoint
	}
	return nil
}

func (x *FrequencyRegulation) GetGridFrequencyStableBandMinus() *wrapperspb.FloatValue {
	if x != nil {
		return x.GridFrequencyStableBandMinus
	}
	return nil
}

func (x *FrequencyRegulation) GetGridFrequencyStableBandPlus() *wrapperspb.FloatValue {
	if x != nil {
		return x.GridFrequencyStableBandPlus
	}
	return nil
}

func (x *FrequencyRegulation) GetOverFrequencyDroop() *wrapperspb.FloatValue {
	if x != nil {
		return x.OverFrequencyDroop
	}
	return nil
}

func (x *FrequencyRegulation) GetUnderFrequencyDroop() *wrapperspb.FloatValue {
	if x != nil {
		return x.UnderFrequencyDroop
	}
	return nil
}

// ESS inverter high level function to maintain power level by charging or discharging
type PeakShaving struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uint/1kW  If the supervised power goes below this limit, the ESS will charge to maintain this limit.
	BaseShavingLimit *wrapperspb.FloatValue `protobuf:"bytes,1,opt,name=baseShavingLimit,proto3" json:"baseShavingLimit,omitempty"`
	// Control value (TRUE or FALSE)
	PeakShavingCtl *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=peakShavingCtl,proto3" json:"peakShavingCtl,omitempty"`
	// uint/1kW  If the supervised power goes above this limit, the ESS will discharge to maintain this
	// limit.
	PeakShavingLimit *wrapperspb.FloatValue `protobuf:"bytes,3,opt,name=peakShavingLimit,proto3" json:"peakShavingLimit,omitempty"`
	// uint/1kW  If the supervised power is between the band defined by these two limits then SOC
	// management is allowed.
	SocManagementAllowedHighLimit *wrapperspb.FloatValue `protobuf:"bytes,4,opt,name=socManagementAllowedHighLimit,proto3" json:"socManagementAllowedHighLimit,omitempty"`
	// uint/1kW  If the supervised power is between the band defined by these two limits then SOC
	// management is allowed.
	SocManagementAllowedLowLimit *wrapperspb.FloatValue `protobuf:"bytes,5,opt,name=socManagementAllowedLowLimit,proto3" json:"socManagementAllowedLowLimit,omitempty"`
}

func (x *PeakShaving) Reset() {
	*x = PeakShaving{}
	if protoimpl.UnsafeEnabled {
		mi := &file_essmodule_essmodule_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeakShaving) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeakShaving) ProtoMessage() {}

func (x *PeakShaving) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeakShaving.ProtoReflect.Descriptor instead.
func (*PeakShaving) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{2}
}

func (x *PeakShaving) GetBaseShavingLimit() *wrapperspb.FloatValue {
	if x != nil {
		return x.BaseShavingLimit
	}
	return nil
}

func (x *PeakShaving) GetPeakShavingCtl() *wrapperspb.BoolValue {
	if x != nil {
		return x.PeakShavingCtl
	}
	return nil
}

func (x *PeakShaving) GetPeakShavingLimit() *wrapperspb.FloatValue {
	if x != nil {
		return x.PeakShavingLimit
	}
	return nil
}

func (x *PeakShaving) GetSocManagementAllowedHighLimit() *wrapperspb.FloatValue {
	if x != nil {
		return x.SocManagementAllowedHighLimit
	}
	return nil
}

func (x *PeakShaving) GetSocManagementAllowedLowLimit() *wrapperspb.FloatValue {
	if x != nil {
		return x.SocManagementAllowedLowLimit
	}
	return nil
}

// ESS inverter high level function to shut down ESS if SOC exceeds high or low limits.
type SocLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uint/1%  These limits define the operational range of the battery. If a lineup reaches the SOC
	// high limit, the inverter’s output is reduced to 0. Charging is then blocked until the hysteresis is
	// overcome. The same logic applies to the SOC low limit, except that after the ramp down is complete,
	// discharging is blocked until the hysteresis is overcome.
	SocHighLimit *wrapperspb.FloatValue `protobuf:"bytes,1,opt,name=socHighLimit,proto3" json:"socHighLimit,omitempty"`
	// uint/1%  These limits define the operational range of the battery. If a lineup reaches the SOC
	// high limit, the inverter’s output is reduced to 0. Charging is then blocked until the hysteresis is
	// overcome. The same logic applies to the SOC low limit, except that after the ramp down is complete,
	// discharging is blocked until the hysteresis is overcome.
	SocHighLimitHysteresis *wrapperspb.FloatValue `protobuf:"bytes,2,opt,name=socHighLimitHysteresis,proto3" json:"socHighLimitHysteresis,omitempty"`
	// Control value (TRUE or FALSE)
	SocLimitCtl *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=socLimitCtl,proto3" json:"socLimitCtl,omitempty"`
	// uint/1%  These limits define the operational range of the battery. If a lineup reaches the SOC
	// high limit, the inverter’s output is reduced to 0. Charging is then blocked until the hysteresis is
	// overcome. The same logic applies to the SOC low limit, except that after the ramp down is complete,
	// discharging is blocked until the hysteresis is overcome.
	SocLowLimit *wrapperspb.FloatValue `protobuf:"bytes,4,opt,name=socLowLimit,proto3" json:"socLowLimit,omitempty"`
	// uint/1%  These hysteresis define the release conditions for the block charge or discharge
	// initiated by the SOC limits.For example, assume a SOC low limit of 10% and a SOC low limit
	// hysteresis of 2% and that discharging is blocked because the batteries SOC reached the SOC low
	// limit, discharging will only be allowed again after the battery’s SOC reaches 13%.
	SocLowLimitHysteresis *wrapperspb.FloatValue `protobuf:"bytes,5,opt,name=socLowLimitHysteresis,proto3" json:"socLowLimitHysteresis,omitempty"`
}

func (x *SocLimit) Reset() {
	*x = SocLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_essmodule_essmodule_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocLimit) ProtoMessage() {}

func (x *SocLimit) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocLimit.ProtoReflect.Descriptor instead.
func (*SocLimit) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{3}
}

func (x *SocLimit) GetSocHighLimit() *wrapperspb.FloatValue {
	if x != nil {
		return x.SocHighLimit
	}
	return nil
}

func (x *SocLimit) GetSocHighLimitHysteresis() *wrapperspb.FloatValue {
	if x != nil {
		return x.SocHighLimitHysteresis
	}
	return nil
}

func (x *SocLimit) GetSocLimitCtl() *wrapperspb.BoolValue {
	if x != nil {
		return x.SocLimitCtl
	}
	return nil
}

func (x *SocLimit) GetSocLowLimit() *wrapperspb.FloatValue {
	if x != nil {
		return x.SocLowLimit
	}
	return nil
}

func (x *SocLimit) GetSocLowLimitHysteresis() *wrapperspb.FloatValue {
	if x != nil {
		return x.SocLowLimitHysteresis
	}
	return nil
}

// ESS inverter high level function to maintain SOC within dead bands
type SOCManagement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uint/1%  Define a dead band (DB) around the SOC set point. When the battery SOC goes outside the
	// dead band, the SOC management executes and bring the SOC back to the set point. Upper DB = set point
	// + dead band plus Lower DB = set point – dead band minus
	SocDeadBandMinus *wrapperspb.FloatValue `protobuf:"bytes,1,opt,name=socDeadBandMinus,proto3" json:"socDeadBandMinus,omitempty"`
	// uint/1%  Define a dead band (DB) around the SOC set point. When the battery SOC goes outside the
	// dead band, the SOC management executes and bring the SOC back to the set point. Upper DB = set point
	// + dead band plus Lower DB = set point – dead band minus
	SocDeadBandPlus *wrapperspb.FloatValue `protobuf:"bytes,2,opt,name=socDeadBandPlus,proto3" json:"socDeadBandPlus,omitempty"`
	// Control value (TRUE or FALSE)
	SocManagementCtl *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=socManagementCtl,proto3" json:"socManagementCtl,omitempty"`
	// uint/1kW  Set point used for SOC maintenance
	SocPowerSetPoint *wrapperspb.FloatValue `protobuf:"bytes,4,opt,name=socPowerSetPoint,proto3" json:"socPowerSetPoint,omitempty"`
	// uint/1%  SOC Target in percentage (%).
	SocSetPoint *wrapperspb.FloatValue `protobuf:"bytes,5,opt,name=socSetPoint,proto3" json:"socSetPoint,omitempty"`
}

func (x *SOCManagement) Reset() {
	*x = SOCManagement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_essmodule_essmodule_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SOCManagement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SOCManagement) ProtoMessage() {}

func (x *SOCManagement) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SOCManagement.ProtoReflect.Descriptor instead.
func (*SOCManagement) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{4}
}

func (x *SOCManagement) GetSocDeadBandMinus() *wrapperspb.FloatValue {
	if x != nil {
		return x.SocDeadBandMinus
	}
	return nil
}

func (x *SOCManagement) GetSocDeadBandPlus() *wrapperspb.FloatValue {
	if x != nil {
		return x.SocDeadBandPlus
	}
	return nil
}

func (x *SOCManagement) GetSocManagementCtl() *wrapperspb.BoolValue {
	if x != nil {
		return x.SocManagementCtl
	}
	return nil
}

func (x *SOCManagement) GetSocPowerSetPoint() *wrapperspb.FloatValue {
	if x != nil {
		return x.SocPowerSetPoint
	}
	return nil
}

func (x *SOCManagement) GetSocSetPoint() *wrapperspb.FloatValue {
	if x != nil {
		return x.SocSetPoint
	}
	return nil
}

// Voltage regulation function
type VoltageRegulation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uint/0.1%  The droops define the reaction of the PCS to under/over voltage events. A droop of 1%
	// means that the PCS will output 100% power if the voltage is 1% of the nominal voltage away from the
	// upper or lower dead band. The minimum droop value possible is 0.8%.
	OverVoltageDroop *wrapperspb.FloatValue `protobuf:"bytes,1,opt,name=overVoltageDroop,proto3" json:"overVoltageDroop,omitempty"`
	// uint/0.1%  The droops define the reaction of the PCS to under/over voltage events. A droop of 1%
	// means that the PCS will output 100% power if the voltage is 1% of the nominal voltage away from the
	// upper or lower dead band. The minimum droop value possible is 0.8%.
	UnderVoltageDroop *wrapperspb.FloatValue `protobuf:"bytes,2,opt,name=underVoltageDroop,proto3" json:"underVoltageDroop,omitempty"`
	// uint/0.1V  Voltage regulation is performed when the grid voltage goes beyond the dead bands. The
	// dead bands are defined as follows: Upper DB = voltage set point + dead band plus Lower DB = voltage
	// set point – dead band minus
	VoltageDeadBandMinus *wrapperspb.FloatValue `protobuf:"bytes,3,opt,name=voltageDeadBandMinus,proto3" json:"voltageDeadBandMinus,omitempty"`
	// uint/0.1V  Voltage regulation is performed when the grid voltage goes beyond the dead bands. The
	// dead bands are defined as follows: Upper DB = voltage set point + dead band plus Lower DB = voltage
	// set point – dead band minus
	VoltageDeadBandPlus *wrapperspb.FloatValue `protobuf:"bytes,4,opt,name=voltageDeadBandPlus,proto3" json:"voltageDeadBandPlus,omitempty"`
	// uint/0.1V  Other modes of operation, such as peak shaving, smoothing or SOC management may
	// operate if the grid frequency is within the stable band. Upper stable band = frequency set point +
	// band plus Lower stable band = frequency set point – band minus
	VoltageSetPoint *wrapperspb.FloatValue `protobuf:"bytes,5,opt,name=voltageSetPoint,proto3" json:"voltageSetPoint,omitempty"`
}

func (x *VoltageRegulation) Reset() {
	*x = VoltageRegulation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_essmodule_essmodule_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoltageRegulation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoltageRegulation) ProtoMessage() {}

func (x *VoltageRegulation) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoltageRegulation.ProtoReflect.Descriptor instead.
func (*VoltageRegulation) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{5}
}

func (x *VoltageRegulation) GetOverVoltageDroop() *wrapperspb.FloatValue {
	if x != nil {
		return x.OverVoltageDroop
	}
	return nil
}

func (x *VoltageRegulation) GetUnderVoltageDroop() *wrapperspb.FloatValue {
	if x != nil {
		return x.UnderVoltageDroop
	}
	return nil
}

func (x *VoltageRegulation) GetVoltageDeadBandMinus() *wrapperspb.FloatValue {
	if x != nil {
		return x.VoltageDeadBandMinus
	}
	return nil
}

func (x *VoltageRegulation) GetVoltageDeadBandPlus() *wrapperspb.FloatValue {
	if x != nil {
		return x.VoltageDeadBandPlus
	}
	return nil
}

func (x *VoltageRegulation) GetVoltageSetPoint() *wrapperspb.FloatValue {
	if x != nil {
		return x.VoltageSetPoint
	}
	return nil
}

// ESS inverter high level function to maintain voltage within droop dead bands.
type VoltageDroop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Control value (TRUE or FALSE)
	VoltageDroopCtl *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=voltageDroopCtl,proto3" json:"voltageDroopCtl,omitempty"`
	// Voltage regulation
	VoltageRegulation *VoltageRegulation `protobuf:"bytes,2,opt,name=voltageRegulation,proto3" json:"voltageRegulation,omitempty"`
}

func (x *VoltageDroop) Reset() {
	*x = VoltageDroop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_essmodule_essmodule_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoltageDroop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoltageDroop) ProtoMessage() {}

func (x *VoltageDroop) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoltageDroop.ProtoReflect.Descriptor instead.
func (*VoltageDroop) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{6}
}

func (x *VoltageDroop) GetVoltageDroopCtl() *wrapperspb.BoolValue {
	if x != nil {
		return x.VoltageDroopCtl
	}
	return nil
}

func (x *VoltageDroop) GetVoltageRegulation() *VoltageRegulation {
	if x != nil {
		return x.VoltageRegulation
	}
	return nil
}

// ESS inverter high level function to maintain voltage within dead bands.
type VoltagePI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Control value (TRUE or FALSE)
	VoltagePICtl *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=voltagePICtl,proto3" json:"voltagePICtl,omitempty"`
	// Voltage regulation
	VoltageRegulation *VoltageRegulation `protobuf:"bytes,2,opt,name=voltageRegulation,proto3" json:"voltageRegulation,omitempty"`
}

func (x *VoltagePI) Reset() {
	*x = VoltagePI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_essmodule_essmodule_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoltagePI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoltagePI) ProtoMessage() {}

func (x *VoltagePI) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoltagePI.ProtoReflect.Descriptor instead.
func (*VoltagePI) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{7}
}

func (x *VoltagePI) GetVoltagePICtl() *wrapperspb.BoolValue {
	if x != nil {
		return x.VoltagePICtl
	}
	return nil
}

func (x *VoltagePI) GetVoltageRegulation() *VoltageRegulation {
	if x != nil {
		return x.VoltageRegulation
	}
	return nil
}

// ESS inverter high level function to reduce (smooth) charging or discharging rate of change.
type CapacityFirming struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Control value (TRUE or FALSE)
	CapacityFirmingCtl *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=capacityFirmingCtl,proto3" json:"capacityFirmingCtl,omitempty"`
	// uint/1kW/min  If the supervised power increases at a rate higher that the rate defined by these
	// limits, the ESS will discharge/charge at an opposite dp/dt to reduce (smooth) the rate of change at
	// the PCC
	LimitNegativeDpDt *wrapperspb.FloatValue `protobuf:"bytes,2,opt,name=limitNegative_dp_dt,json=limitNegativeDpDt,proto3" json:"limitNegative_dp_dt,omitempty"`
	// uint/1kW/min  If the supervised power increases at a rate higher that the rate defined by these
	// limits, the ESS will discharge/charge at an opposite dp/dt to reduce (smooth) the rate of change at
	// the PCC
	LimitPositiveDpDt *wrapperspb.FloatValue `protobuf:"bytes,3,opt,name=limitPositive_dp_dt,json=limitPositiveDpDt,proto3" json:"limitPositive_dp_dt,omitempty"`
}

func (x *CapacityFirming) Reset() {
	*x = CapacityFirming{}
	if protoimpl.UnsafeEnabled {
		mi := &file_essmodule_essmodule_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapacityFirming) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapacityFirming) ProtoMessage() {}

func (x *CapacityFirming) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapacityFirming.ProtoReflect.Descriptor instead.
func (*CapacityFirming) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{8}
}

func (x *CapacityFirming) GetCapacityFirmingCtl() *wrapperspb.BoolValue {
	if x != nil {
		return x.CapacityFirmingCtl
	}
	return nil
}

func (x *CapacityFirming) GetLimitNegativeDpDt() *wrapperspb.FloatValue {
	if x != nil {
		return x.LimitNegativeDpDt
	}
	return nil
}

func (x *CapacityFirming) GetLimitPositiveDpDt() *wrapperspb.FloatValue {
	if x != nil {
		return x.LimitPositiveDpDt
	}
	return nil
}

// ESS inverter high level functions.
type ESSFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ESS inverter high level function to reduce (smooth) charging or discharging rate of change.
	CapacityFirming *CapacityFirming `protobuf:"bytes,1,opt,name=capacityFirming,proto3" json:"capacityFirming,omitempty"`
	// ESS inverter high level function to maintain frequency within dead bands.
	FrequencyRegulation *FrequencyRegulation `protobuf:"bytes,2,opt,name=frequencyRegulation,proto3" json:"frequencyRegulation,omitempty"`
	// ESS inverter high level function to maintain power level by charging or discharging
	PeakShaving *PeakShaving `protobuf:"bytes,3,opt,name=peakShaving,proto3" json:"peakShaving,omitempty"`
	// ESS inverter high level function to shut down ESS if SOC exceeds high or low limits.
	SocLimit *SocLimit `protobuf:"bytes,4,opt,name=socLimit,proto3" json:"socLimit,omitempty"`
	// ESS inverter high level function to maintain SOC within dead bands
	SocManagement *SOCManagement `protobuf:"bytes,5,opt,name=socManagement,proto3" json:"socManagement,omitempty"`
	// ESS inverter high level function to maintain voltage within droop dead bands.
	VoltageDroop *VoltageDroop `protobuf:"bytes,6,opt,name=voltageDroop,proto3" json:"voltageDroop,omitempty"`
	// ESS inverter high level function to maintain voltage within dead bands.
	VoltagePI *VoltagePI `protobuf:"bytes,7,opt,name=voltagePI,proto3" json:"voltagePI,omitempty"`
}

func (x *ESSFunction) Reset() {
	*x = ESSFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_essmodule_essmodule_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ESSFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSFunction) ProtoMessage() {}

func (x *ESSFunction) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSFunction.ProtoReflect.Descriptor instead.
func (*ESSFunction) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{9}
}

func (x *ESSFunction) GetCapacityFirming() *CapacityFirming {
	if x != nil {
		return x.CapacityFirming
	}
	return nil
}

func (x *ESSFunction) GetFrequencyRegulation() *FrequencyRegulation {
	if x != nil {
		return x.FrequencyRegulation
	}
	return nil
}

func (x *ESSFunction) GetPeakShaving() *PeakShaving {
	if x != nil {
		return x.PeakShaving
	}
	return nil
}

func (x *ESSFunction) GetSocLimit() *SocLimit {
	if x != nil {
		return x.SocLimit
	}
	return nil
}

func (x *ESSFunction) GetSocManagement() *SOCManagement {
	if x != nil {
		return x.SocManagement
	}
	return nil
}

func (x *ESSFunction) GetVoltageDroop() *VoltageDroop {
	if x != nil {
		return x.VoltageDroop
	}
	return nil
}

func (x *ESSFunction) GetVoltagePI() *VoltagePI {
	if x != nil {
		return x.VoltagePI
	}
	return nil
}

// Point definition (Point)
type ESSPointStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Black start enable
	BlackStartEnabled *commonmodule.StatusSPS `protobuf:"bytes,1,opt,name=blackStartEnabled,proto3" json:"blackStartEnabled,omitempty"`
	// Enable frequency set point
	FrequencySetPointEnabled *commonmodule.StatusSPS `protobuf:"bytes,2,opt,name=frequencySetPointEnabled,proto3" json:"frequencySetPointEnabled,omitempty"`
	// ESS function parameter
	Function *ESSFunction `protobuf:"bytes,3,opt,name=function,proto3" json:"function,omitempty"`
	// Grid connect mode
	Mode *commonmodule.ENG_GridConnectModeKind `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"`
	// Black start enable
	PctHzDroop *wrapperspb.FloatValue `protobuf:"bytes,5,opt,name=pctHzDroop,proto3" json:"pctHzDroop,omitempty"`
	// Black start enable
	PctVDroop *wrapperspb.FloatValue `protobuf:"bytes,6,opt,name=pctVDroop,proto3" json:"pctVDroop,omitempty"`
	// Ramp rates
	RampRates *commonmodule.RampRate `protobuf:"bytes,7,opt,name=rampRates,proto3" json:"rampRates,omitempty"`
	// Enable reactive power set point
	ReactivePwrSetPointEnabled *commonmodule.StatusSPS `protobuf:"bytes,8,opt,name=reactivePwrSetPointEnabled,proto3" json:"reactivePwrSetPointEnabled,omitempty"`
	// Enable real power set point
	RealPwrSetPointEnabled *commonmodule.StatusSPS `protobuf:"bytes,9,opt,name=realPwrSetPointEnabled,proto3" json:"realPwrSetPointEnabled,omitempty"`
	// ESS state
	State *commonmodule.Optional_StateKind `protobuf:"bytes,10,opt,name=state,proto3" json:"state,omitempty"`
	// Synchronize back to grid
	SyncBackToGrid *commonmodule.StatusSPS `protobuf:"bytes,11,opt,name=syncBackToGrid,proto3" json:"syncBackToGrid,omitempty"`
	// Transition to island on grid loss enable
	TransToIslndOnGridLossEnabled *commonmodule.StatusSPS `protobuf:"bytes,12,opt,name=transToIslndOnGridLossEnabled,proto3" json:"transToIslndOnGridLossEnabled,omitempty"`
	// Enable voltage set point
	VoltageSetPointEnabled *commonmodule.StatusSPS `protobuf:"bytes,13,opt,name=voltageSetPointEnabled,proto3" json:"voltageSetPointEnabled,omitempty"`
}

func (x *ESSPointStatus) Reset() {
	*x = ESSPointStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_essmodule_essmodule_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ESSPointStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSPointStatus) ProtoMessage() {}

func (x *ESSPointStatus) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSPointStatus.ProtoReflect.Descriptor instead.
func (*ESSPointStatus) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{10}
}

func (x *ESSPointStatus) GetBlackStartEnabled() *commonmodule.StatusSPS {
	if x != nil {
		return x.BlackStartEnabled
	}
	return nil
}

func (x *ESSPointStatus) GetFrequencySetPointEnabled() *commonmodule.StatusSPS {
	if x != nil {
		return x.FrequencySetPointEnabled
	}
	return nil
}

func (x *ESSPointStatus) GetFunction() *ESSFunction {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *ESSPointStatus) GetMode() *commonmodule.ENG_GridConnectModeKind {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *ESSPointStatus) GetPctHzDroop() *wrapperspb.FloatValue {
	if x != nil {
		return x.PctHzDroop
	}
	return nil
}

func (x *ESSPointStatus) GetPctVDroop() *wrapperspb.FloatValue {
	if x != nil {
		return x.PctVDroop
	}
	return nil
}

func (x *ESSPointStatus) GetRampRates() *commonmodule.RampRate {
	if x != nil {
		return x.RampRates
	}
	return nil
}

func (x *ESSPointStatus) GetReactivePwrSetPointEnabled() *commonmodule.StatusSPS {
	if x != nil {
		return x.ReactivePwrSetPointEnabled
	}
	return nil
}

func (x *ESSPointStatus) GetRealPwrSetPointEnabled() *commonmodule.StatusSPS {
	if x != nil {
		return x.RealPwrSetPointEnabled
	}
	return nil
}

func (x *ESSPointStatus) GetState() *commonmodule.Optional_StateKind {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *ESSPointStatus) GetSyncBackToGrid() *commonmodule.StatusSPS {
	if x != nil {
		return x.SyncBackToGrid
	}
	return nil
}

func (x *ESSPointStatus) GetTransToIslndOnGridLossEnabled() *commonmodule.StatusSPS {
	if x != nil {
		return x.TransToIslndOnGridLossEnabled
	}
	return nil
}

func (x *ESSPointStatus) GetVoltageSetPointEnabled() *commonmodule.StatusSPS {
	if x != nil {
		return x.VoltageSetPointEnabled
	}
	return nil
}

// Specialized 61850 ZGEN class
type ESSEventAndStatusZGEN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	LogicalNodeForEventAndStatus *commonmodule.LogicalNodeForEventAndStatus `protobuf:"bytes,1,opt,name=logicalNodeForEventAndStatus,proto3" json:"logicalNodeForEventAndStatus,omitempty"`
	// DC Power On/Off Status; True = DC power on
	AuxPwrSt *commonmodule.StatusSPS `protobuf:"bytes,2,opt,name=AuxPwrSt,proto3" json:"AuxPwrSt,omitempty"`
	// MISSING DOCUMENTATION!!!
	DynamicTest *commonmodule.ENS_DynamicTestKind `protobuf:"bytes,3,opt,name=DynamicTest,proto3" json:"DynamicTest,omitempty"`
	// Emergency stop
	EmgStop *commonmodule.StatusSPS `protobuf:"bytes,4,opt,name=EmgStop,proto3" json:"EmgStop,omitempty"`
	// Generator is synchronized to EPS, or not; True = Synchronized
	GnSynSt *commonmodule.StatusSPS `protobuf:"bytes,5,opt,name=GnSynSt,proto3" json:"GnSynSt,omitempty"`
	// Point status
	PointStatus *ESSPointStatus `protobuf:"bytes,6,opt,name=PointStatus,proto3" json:"PointStatus,omitempty"`
}

func (x *ESSEventAndStatusZGEN) Reset() {
	*x = ESSEventAndStatusZGEN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_essmodule_essmodule_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ESSEventAndStatusZGEN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSEventAndStatusZGEN) ProtoMessage() {}

func (x *ESSEventAndStatusZGEN) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSEventAndStatusZGEN.ProtoReflect.Descriptor instead.
func (*ESSEventAndStatusZGEN) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{11}
}

func (x *ESSEventAndStatusZGEN) GetLogicalNodeForEventAndStatus() *commonmodule.LogicalNodeForEventAndStatus {
	if x != nil {
		return x.LogicalNodeForEventAndStatus
	}
	return nil
}

func (x *ESSEventAndStatusZGEN) GetAuxPwrSt() *commonmodule.StatusSPS {
	if x != nil {
		return x.AuxPwrSt
	}
	return nil
}

func (x *ESSEventAndStatusZGEN) GetDynamicTest() *commonmodule.ENS_DynamicTestKind {
	if x != nil {
		return x.DynamicTest
	}
	return nil
}

func (x *ESSEventAndStatusZGEN) GetEmgStop() *commonmodule.StatusSPS {
	if x != nil {
		return x.EmgStop
	}
	return nil
}

func (x *ESSEventAndStatusZGEN) GetGnSynSt() *commonmodule.StatusSPS {
	if x != nil {
		return x.GnSynSt
	}
	return nil
}

func (x *ESSEventAndStatusZGEN) GetPointStatus() *ESSPointStatus {
	if x != nil {
		return x.PointStatus
	}
	return nil
}

// Specialized 61850 ZGEN class for ESS event profile
type ESSEventZGEN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ESSEventAndStatusZGEN *ESSEventAndStatusZGEN `protobuf:"bytes,1,opt,name=eSSEventAndStatusZGEN,proto3" json:"eSSEventAndStatusZGEN,omitempty"`
}

func (x *ESSEventZGEN) Reset() {
	*x = ESSEventZGEN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_essmodule_essmodule_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ESSEventZGEN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSEventZGEN) ProtoMessage() {}

func (x *ESSEventZGEN) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSEventZGEN.ProtoReflect.Descriptor instead.
func (*ESSEventZGEN) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{12}
}

func (x *ESSEventZGEN) GetESSEventAndStatusZGEN() *ESSEventAndStatusZGEN {
	if x != nil {
		return x.ESSEventAndStatusZGEN
	}
	return nil
}

// ESS event
type ESSEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	EventValue *commonmodule.EventValue `protobuf:"bytes,1,opt,name=eventValue,proto3" json:"eventValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	EssEventZBAT *EssEventZBAT `protobuf:"bytes,2,opt,name=essEventZBAT,proto3" json:"essEventZBAT,omitempty"`
	// MISSING DOCUMENTATION!!!
	EssEventZGEN *ESSEventZGEN `protobuf:"bytes,3,opt,name=essEventZGEN,proto3" json:"essEventZGEN,omitempty"`
}

func (x *ESSEvent) Reset() {
	*x = ESSEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_essmodule_essmodule_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ESSEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSEvent) ProtoMessage() {}

func (x *ESSEvent) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSEvent.ProtoReflect.Descriptor instead.
func (*ESSEvent) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{13}
}

func (x *ESSEvent) GetEventValue() *commonmodule.EventValue {
	if x != nil {
		return x.EventValue
	}
	return nil
}

func (x *ESSEvent) GetEssEventZBAT() *EssEventZBAT {
	if x != nil {
		return x.EssEventZBAT
	}
	return nil
}

func (x *ESSEvent) GetEssEventZGEN() *ESSEventZGEN {
	if x != nil {
		return x.EssEventZGEN
	}
	return nil
}

// ESS event profile
type ESSEventProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	EventMessageInfo *commonmodule.EventMessageInfo `protobuf:"bytes,1,opt,name=eventMessageInfo,proto3" json:"eventMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	Ess *commonmodule.ESS `protobuf:"bytes,2,opt,name=ess,proto3" json:"ess,omitempty"`
	// MISSING DOCUMENTATION!!!
	EssEvent *ESSEvent `protobuf:"bytes,3,opt,name=essEvent,proto3" json:"essEvent,omitempty"`
}

func (x *ESSEventProfile) Reset() {
	*x = ESSEventProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_essmodule_essmodule_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ESSEventProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSEventProfile) ProtoMessage() {}

func (x *ESSEventProfile) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSEventProfile.ProtoReflect.Descriptor instead.
func (*ESSEventProfile) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{14}
}

func (x *ESSEventProfile) GetEventMessageInfo() *commonmodule.EventMessageInfo {
	if x != nil {
		return x.EventMessageInfo
	}
	return nil
}

func (x *ESSEventProfile) GetEss() *commonmodule.ESS {
	if x != nil {
		return x.Ess
	}
	return nil
}

func (x *ESSEventProfile) GetEssEvent() *ESSEvent {
	if x != nil {
		return x.EssEvent
	}
	return nil
}

// ESS reading value
type ESSReading struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ConductingEquipmentTerminalReading *commonmodule.ConductingEquipmentTerminalReading `protobuf:"bytes,1,opt,name=conductingEquipmentTerminalReading,proto3" json:"conductingEquipmentTerminalReading,omitempty"`
	// MISSING DOCUMENTATION!!!
	PhaseMMTN *commonmodule.PhaseMMTN `protobuf:"bytes,2,opt,name=phaseMMTN,proto3" json:"phaseMMTN,omitempty"`
	// MISSING DOCUMENTATION!!!
	ReadingMMTR *commonmodule.ReadingMMTR `protobuf:"bytes,3,opt,name=readingMMTR,proto3" json:"readingMMTR,omitempty"`
	// MISSING DOCUMENTATION!!!
	ReadingMMXU *commonmodule.ReadingMMXU `protobuf:"bytes,4,opt,name=readingMMXU,proto3" json:"readingMMXU,omitempty"`
}

func (x *ESSReading) Reset() {
	*x = ESSReading{}
	if protoimpl.UnsafeEnabled {
		mi := &file_essmodule_essmodule_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ESSReading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSReading) ProtoMessage() {}

func (x *ESSReading) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSReading.ProtoReflect.Descriptor instead.
func (*ESSReading) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{15}
}

func (x *ESSReading) GetConductingEquipmentTerminalReading() *commonmodule.ConductingEquipmentTerminalReading {
	if x != nil {
		return x.ConductingEquipmentTerminalReading
	}
	return nil
}

func (x *ESSReading) GetPhaseMMTN() *commonmodule.PhaseMMTN {
	if x != nil {
		return x.PhaseMMTN
	}
	return nil
}

func (x *ESSReading) GetReadingMMTR() *commonmodule.ReadingMMTR {
	if x != nil {
		return x.ReadingMMTR
	}
	return nil
}

func (x *ESSReading) GetReadingMMXU() *commonmodule.ReadingMMXU {
	if x != nil {
		return x.ReadingMMXU
	}
	return nil
}

// ESS reading profile
type ESSReadingProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ReadingMessageInfo *commonmodule.ReadingMessageInfo `protobuf:"bytes,1,opt,name=readingMessageInfo,proto3" json:"readingMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	Ess *commonmodule.ESS `protobuf:"bytes,2,opt,name=ess,proto3" json:"ess,omitempty"`
	// MISSING DOCUMENTATION!!!
	EssReading *ESSReading `protobuf:"bytes,3,opt,name=essReading,proto3" json:"essReading,omitempty"`
}

func (x *ESSReadingProfile) Reset() {
	*x = ESSReadingProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_essmodule_essmodule_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ESSReadingProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSReadingProfile) ProtoMessage() {}

func (x *ESSReadingProfile) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSReadingProfile.ProtoReflect.Descriptor instead.
func (*ESSReadingProfile) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{16}
}

func (x *ESSReadingProfile) GetReadingMessageInfo() *commonmodule.ReadingMessageInfo {
	if x != nil {
		return x.ReadingMessageInfo
	}
	return nil
}

func (x *ESSReadingProfile) GetEss() *commonmodule.ESS {
	if x != nil {
		return x.Ess
	}
	return nil
}

func (x *ESSReadingProfile) GetEssReading() *ESSReading {
	if x != nil {
		return x.EssReading
	}
	return nil
}

// Specialized 61850 ZBAT
type EssStatusZBAT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	LogicalNodeForEventAndStatus *commonmodule.LogicalNodeForEventAndStatus `protobuf:"bytes,1,opt,name=logicalNodeForEventAndStatus,proto3" json:"logicalNodeForEventAndStatus,omitempty"`
	// Battery system status &ndash; True: on
	BatSt *commonmodule.StatusSPS `protobuf:"bytes,2,opt,name=BatSt,proto3" json:"BatSt,omitempty"`
	// MISSING DOCUMENTATION!!!
	GriMod *commonmodule.ENG_GridConnectModeKind `protobuf:"bytes,3,opt,name=GriMod,proto3" json:"GriMod,omitempty"`
	// State of charge (in percentage)
	Soc *commonmodule.MV `protobuf:"bytes,4,opt,name=Soc,proto3" json:"Soc,omitempty"`
	// MISSING DOCUMENTATION!!!
	Stdby *commonmodule.StatusSPS `protobuf:"bytes,5,opt,name=Stdby,proto3" json:"Stdby,omitempty"`
}

func (x *EssStatusZBAT) Reset() {
	*x = EssStatusZBAT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_essmodule_essmodule_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EssStatusZBAT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EssStatusZBAT) ProtoMessage() {}

func (x *EssStatusZBAT) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EssStatusZBAT.ProtoReflect.Descriptor instead.
func (*EssStatusZBAT) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{17}
}

func (x *EssStatusZBAT) GetLogicalNodeForEventAndStatus() *commonmodule.LogicalNodeForEventAndStatus {
	if x != nil {
		return x.LogicalNodeForEventAndStatus
	}
	return nil
}

func (x *EssStatusZBAT) GetBatSt() *commonmodule.StatusSPS {
	if x != nil {
		return x.BatSt
	}
	return nil
}

func (x *EssStatusZBAT) GetGriMod() *commonmodule.ENG_GridConnectModeKind {
	if x != nil {
		return x.GriMod
	}
	return nil
}

func (x *EssStatusZBAT) GetSoc() *commonmodule.MV {
	if x != nil {
		return x.Soc
	}
	return nil
}

func (x *EssStatusZBAT) GetStdby() *commonmodule.StatusSPS {
	if x != nil {
		return x.Stdby
	}
	return nil
}

// Specialized 61850 ZGEN class
type ESSStatusZGEN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ESSEventAndStatusZGEN *ESSEventAndStatusZGEN `protobuf:"bytes,1,opt,name=eSSEventAndStatusZGEN,proto3" json:"eSSEventAndStatusZGEN,omitempty"`
}

func (x *ESSStatusZGEN) Reset() {
	*x = ESSStatusZGEN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_essmodule_essmodule_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ESSStatusZGEN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSStatusZGEN) ProtoMessage() {}

func (x *ESSStatusZGEN) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSStatusZGEN.ProtoReflect.Descriptor instead.
func (*ESSStatusZGEN) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{18}
}

func (x *ESSStatusZGEN) GetESSEventAndStatusZGEN() *ESSEventAndStatusZGEN {
	if x != nil {
		return x.ESSEventAndStatusZGEN
	}
	return nil
}

// ESS status
type ESSStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	StatusValue *commonmodule.StatusValue `protobuf:"bytes,1,opt,name=statusValue,proto3" json:"statusValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	EssStatusZBAT *EssStatusZBAT `protobuf:"bytes,2,opt,name=essStatusZBAT,proto3" json:"essStatusZBAT,omitempty"`
	// MISSING DOCUMENTATION!!!
	EssStatusZGEN *ESSStatusZGEN `protobuf:"bytes,3,opt,name=essStatusZGEN,proto3" json:"essStatusZGEN,omitempty"`
}

func (x *ESSStatus) Reset() {
	*x = ESSStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_essmodule_essmodule_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ESSStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSStatus) ProtoMessage() {}

func (x *ESSStatus) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSStatus.ProtoReflect.Descriptor instead.
func (*ESSStatus) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{19}
}

func (x *ESSStatus) GetStatusValue() *commonmodule.StatusValue {
	if x != nil {
		return x.StatusValue
	}
	return nil
}

func (x *ESSStatus) GetEssStatusZBAT() *EssStatusZBAT {
	if x != nil {
		return x.EssStatusZBAT
	}
	return nil
}

func (x *ESSStatus) GetEssStatusZGEN() *ESSStatusZGEN {
	if x != nil {
		return x.EssStatusZGEN
	}
	return nil
}

// ESS status profile
type ESSStatusProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	StatusMessageInfo *commonmodule.StatusMessageInfo `protobuf:"bytes,1,opt,name=statusMessageInfo,proto3" json:"statusMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	Ess *commonmodule.ESS `protobuf:"bytes,2,opt,name=ess,proto3" json:"ess,omitempty"`
	// MISSING DOCUMENTATION!!!
	EssStatus *ESSStatus `protobuf:"bytes,3,opt,name=essStatus,proto3" json:"essStatus,omitempty"`
}

func (x *ESSStatusProfile) Reset() {
	*x = ESSStatusProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_essmodule_essmodule_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ESSStatusProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSStatusProfile) ProtoMessage() {}

func (x *ESSStatusProfile) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSStatusProfile.ProtoReflect.Descriptor instead.
func (*ESSStatusProfile) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{20}
}

func (x *ESSStatusProfile) GetStatusMessageInfo() *commonmodule.StatusMessageInfo {
	if x != nil {
		return x.StatusMessageInfo
	}
	return nil
}

func (x *ESSStatusProfile) GetEss() *commonmodule.ESS {
	if x != nil {
		return x.Ess
	}
	return nil
}

func (x *ESSStatusProfile) GetEssStatus() *ESSStatus {
	if x != nil {
		return x.EssStatus
	}
	return nil
}

// Point definition (Point)
type ESSPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Black start enable
	BlackStartEnabled *commonmodule.ControlSPC `protobuf:"bytes,1,opt,name=blackStartEnabled,proto3" json:"blackStartEnabled,omitempty"`
	// Enable frequency set point
	FrequencySetPointEnabled *commonmodule.ControlSPC `protobuf:"bytes,2,opt,name=frequencySetPointEnabled,proto3" json:"frequencySetPointEnabled,omitempty"`
	// ESS function parameter
	Function *ESSFunction `protobuf:"bytes,3,opt,name=function,proto3" json:"function,omitempty"`
	// Grid connect mode
	Mode *commonmodule.ENG_GridConnectModeKind `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"`
	// Black start enable
	PctHzDroop *wrapperspb.FloatValue `protobuf:"bytes,5,opt,name=pctHzDroop,proto3" json:"pctHzDroop,omitempty"`
	// Black start enable
	PctVDroop *wrapperspb.FloatValue `protobuf:"bytes,6,opt,name=pctVDroop,proto3" json:"pctVDroop,omitempty"`
	// Ramp rates
	RampRates *commonmodule.RampRate `protobuf:"bytes,7,opt,name=rampRates,proto3" json:"rampRates,omitempty"`
	// Enable reactive power set point
	ReactivePwrSetPointEnabled *commonmodule.ControlSPC `protobuf:"bytes,8,opt,name=reactivePwrSetPointEnabled,proto3" json:"reactivePwrSetPointEnabled,omitempty"`
	// Enable real power set point
	RealPwrSetPointEnabled *commonmodule.ControlSPC `protobuf:"bytes,9,opt,name=realPwrSetPointEnabled,proto3" json:"realPwrSetPointEnabled,omitempty"`
	// Reset device
	Reset_ *commonmodule.ControlSPC `protobuf:"bytes,10,opt,name=reset,proto3" json:"reset,omitempty"`
	// ESS state
	State *commonmodule.Optional_StateKind `protobuf:"bytes,11,opt,name=state,proto3" json:"state,omitempty"`
	// Synchronize back to grid
	SyncBackToGrid *commonmodule.ControlSPC `protobuf:"bytes,12,opt,name=syncBackToGrid,proto3" json:"syncBackToGrid,omitempty"`
	// Transition to island on grid loss enable
	TransToIslndOnGridLossEnabled *commonmodule.ControlSPC `protobuf:"bytes,13,opt,name=transToIslndOnGridLossEnabled,proto3" json:"transToIslndOnGridLossEnabled,omitempty"`
	// Enable voltage set point
	VoltageSetPointEnabled *commonmodule.ControlSPC `protobuf:"bytes,14,opt,name=voltageSetPointEnabled,proto3" json:"voltageSetPointEnabled,omitempty"`
	// Start time
	StartTime *commonmodule.ControlTimestamp `protobuf:"bytes,15,opt,name=startTime,proto3" json:"startTime,omitempty"`
}

func (x *ESSPoint) Reset() {
	*x = ESSPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_essmodule_essmodule_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ESSPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSPoint) ProtoMessage() {}

func (x *ESSPoint) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSPoint.ProtoReflect.Descriptor instead.
func (*ESSPoint) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{21}
}

func (x *ESSPoint) GetBlackStartEnabled() *commonmodule.ControlSPC {
	if x != nil {
		return x.BlackStartEnabled
	}
	return nil
}

func (x *ESSPoint) GetFrequencySetPointEnabled() *commonmodule.ControlSPC {
	if x != nil {
		return x.FrequencySetPointEnabled
	}
	return nil
}

func (x *ESSPoint) GetFunction() *ESSFunction {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *ESSPoint) GetMode() *commonmodule.ENG_GridConnectModeKind {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *ESSPoint) GetPctHzDroop() *wrapperspb.FloatValue {
	if x != nil {
		return x.PctHzDroop
	}
	return nil
}

func (x *ESSPoint) GetPctVDroop() *wrapperspb.FloatValue {
	if x != nil {
		return x.PctVDroop
	}
	return nil
}

func (x *ESSPoint) GetRampRates() *commonmodule.RampRate {
	if x != nil {
		return x.RampRates
	}
	return nil
}

func (x *ESSPoint) GetReactivePwrSetPointEnabled() *commonmodule.ControlSPC {
	if x != nil {
		return x.ReactivePwrSetPointEnabled
	}
	return nil
}

func (x *ESSPoint) GetRealPwrSetPointEnabled() *commonmodule.ControlSPC {
	if x != nil {
		return x.RealPwrSetPointEnabled
	}
	return nil
}

func (x *ESSPoint) GetReset_() *commonmodule.ControlSPC {
	if x != nil {
		return x.Reset_
	}
	return nil
}

func (x *ESSPoint) GetState() *commonmodule.Optional_StateKind {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *ESSPoint) GetSyncBackToGrid() *commonmodule.ControlSPC {
	if x != nil {
		return x.SyncBackToGrid
	}
	return nil
}

func (x *ESSPoint) GetTransToIslndOnGridLossEnabled() *commonmodule.ControlSPC {
	if x != nil {
		return x.TransToIslndOnGridLossEnabled
	}
	return nil
}

func (x *ESSPoint) GetVoltageSetPointEnabled() *commonmodule.ControlSPC {
	if x != nil {
		return x.VoltageSetPointEnabled
	}
	return nil
}

func (x *ESSPoint) GetStartTime() *commonmodule.ControlTimestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

// Curve shape setting (FC=SP) (CSG_SP)
type ESSCSG struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The array with the points specifying a curve shape.
	CrvPts []*ESSPoint `protobuf:"bytes,1,rep,name=crvPts,proto3" json:"crvPts,omitempty"`
}

func (x *ESSCSG) Reset() {
	*x = ESSCSG{}
	if protoimpl.UnsafeEnabled {
		mi := &file_essmodule_essmodule_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ESSCSG) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSCSG) ProtoMessage() {}

func (x *ESSCSG) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSCSG.ProtoReflect.Descriptor instead.
func (*ESSCSG) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{22}
}

func (x *ESSCSG) GetCrvPts() []*ESSPoint {
	if x != nil {
		return x.CrvPts
	}
	return nil
}

// OpenFMB specialization for control schedule using:  LN: Schedule   Name: FSCH
type ESSControlScheduleFSCH struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Discrete value in ESSCSG type
	ValDCSG *ESSCSG `protobuf:"bytes,1,opt,name=ValDCSG,proto3" json:"ValDCSG,omitempty"`
}

func (x *ESSControlScheduleFSCH) Reset() {
	*x = ESSControlScheduleFSCH{}
	if protoimpl.UnsafeEnabled {
		mi := &file_essmodule_essmodule_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ESSControlScheduleFSCH) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSControlScheduleFSCH) ProtoMessage() {}

func (x *ESSControlScheduleFSCH) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSControlScheduleFSCH.ProtoReflect.Descriptor instead.
func (*ESSControlScheduleFSCH) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{23}
}

func (x *ESSControlScheduleFSCH) GetValDCSG() *ESSCSG {
	if x != nil {
		return x.ValDCSG
	}
	return nil
}

// Specialized 61850 FSCC class.  LN: Schedule controller   Name: FSCC
type EssControlFSCC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ControlFSCC *commonmodule.ControlFSCC `protobuf:"bytes,1,opt,name=controlFSCC,proto3" json:"controlFSCC,omitempty"`
	// MISSING DOCUMENTATION!!!
	EssControlScheduleFSCH *ESSControlScheduleFSCH `protobuf:"bytes,2,opt,name=essControlScheduleFSCH,proto3" json:"essControlScheduleFSCH,omitempty"`
}

func (x *EssControlFSCC) Reset() {
	*x = EssControlFSCC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_essmodule_essmodule_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EssControlFSCC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EssControlFSCC) ProtoMessage() {}

func (x *EssControlFSCC) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EssControlFSCC.ProtoReflect.Descriptor instead.
func (*EssControlFSCC) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{24}
}

func (x *EssControlFSCC) GetControlFSCC() *commonmodule.ControlFSCC {
	if x != nil {
		return x.ControlFSCC
	}
	return nil
}

func (x *EssControlFSCC) GetEssControlScheduleFSCH() *ESSControlScheduleFSCH {
	if x != nil {
		return x.EssControlScheduleFSCH
	}
	return nil
}

// ESS control class
type ESSControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ControlValue *commonmodule.ControlValue `protobuf:"bytes,1,opt,name=controlValue,proto3" json:"controlValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	Check *commonmodule.CheckConditions `protobuf:"bytes,2,opt,name=check,proto3" json:"check,omitempty"`
	// MISSING DOCUMENTATION!!!
	EssControlFSCC *EssControlFSCC `protobuf:"bytes,3,opt,name=essControlFSCC,proto3" json:"essControlFSCC,omitempty"`
}

func (x *ESSControl) Reset() {
	*x = ESSControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_essmodule_essmodule_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ESSControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSControl) ProtoMessage() {}

func (x *ESSControl) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSControl.ProtoReflect.Descriptor instead.
func (*ESSControl) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{25}
}

func (x *ESSControl) GetControlValue() *commonmodule.ControlValue {
	if x != nil {
		return x.ControlValue
	}
	return nil
}

func (x *ESSControl) GetCheck() *commonmodule.CheckConditions {
	if x != nil {
		return x.Check
	}
	return nil
}

func (x *ESSControl) GetEssControlFSCC() *EssControlFSCC {
	if x != nil {
		return x.EssControlFSCC
	}
	return nil
}

// ESS control profile
type ESSControlProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ControlMessageInfo *commonmodule.ControlMessageInfo `protobuf:"bytes,1,opt,name=controlMessageInfo,proto3" json:"controlMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	Ess *commonmodule.ESS `protobuf:"bytes,2,opt,name=ess,proto3" json:"ess,omitempty"`
	// MISSING DOCUMENTATION!!!
	EssControl *ESSControl `protobuf:"bytes,3,opt,name=essControl,proto3" json:"essControl,omitempty"`
}

func (x *ESSControlProfile) Reset() {
	*x = ESSControlProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_essmodule_essmodule_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ESSControlProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESSControlProfile) ProtoMessage() {}

func (x *ESSControlProfile) ProtoReflect() protoreflect.Message {
	mi := &file_essmodule_essmodule_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESSControlProfile.ProtoReflect.Descriptor instead.
func (*ESSControlProfile) Descriptor() ([]byte, []int) {
	return file_essmodule_essmodule_proto_rawDescGZIP(), []int{26}
}

func (x *ESSControlProfile) GetControlMessageInfo() *commonmodule.ControlMessageInfo {
	if x != nil {
		return x.ControlMessageInfo
	}
	return nil
}

func (x *ESSControlProfile) GetEss() *commonmodule.ESS {
	if x != nil {
		return x.Ess
	}
	return nil
}

func (x *ESSControlProfile) GetEssControl() *ESSControl {
	if x != nil {
		return x.EssControl
	}
	return nil
}

var File_essmodule_essmodule_proto protoreflect.FileDescriptor

var file_essmodule_essmodule_proto_rawDesc = []byte{
	0x0a, 0x19, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x65, 0x73, 0x73, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x65, 0x73, 0x73,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x1a, 0x09, 0x75, 0x6d, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xe4, 0x02, 0x0a, 0x0c, 0x45, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5a,
	0x42, 0x41, 0x54, 0x12, 0x74, 0x0a, 0x1c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f,
	0x64, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x1c, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x42, 0x61, 0x74,
	0x48, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50,
	0x53, 0x52, 0x05, 0x42, 0x61, 0x74, 0x48, 0x69, 0x12, 0x2d, 0x0a, 0x05, 0x42, 0x61, 0x74, 0x4c,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53,
	0x52, 0x05, 0x42, 0x61, 0x74, 0x4c, 0x6f, 0x12, 0x2d, 0x0a, 0x05, 0x42, 0x61, 0x74, 0x53, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52,
	0x05, 0x42, 0x61, 0x74, 0x53, 0x74, 0x12, 0x22, 0x0a, 0x03, 0x53, 0x6f, 0x63, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x4d, 0x56, 0x52, 0x03, 0x53, 0x6f, 0x63, 0x12, 0x2d, 0x0a, 0x05, 0x53, 0x74,
	0x64, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53,
	0x50, 0x53, 0x52, 0x05, 0x53, 0x74, 0x64, 0x62, 0x79, 0x22, 0xb8, 0x05, 0x0a, 0x13, 0x46, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x53, 0x0a, 0x16, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x44, 0x65,
	0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x44, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e,
	0x64, 0x4d, 0x69, 0x6e, 0x75, 0x73, 0x12, 0x51, 0x0a, 0x15, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x44, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x50, 0x6c, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x15, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x44, 0x65, 0x61,
	0x64, 0x42, 0x61, 0x6e, 0x64, 0x50, 0x6c, 0x75, 0x73, 0x12, 0x52, 0x0a, 0x16, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x74, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x74, 0x6c, 0x12, 0x49, 0x0a,
	0x11, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x5f, 0x0a, 0x1c, 0x67, 0x72, 0x69, 0x64,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x61, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1c, 0x67, 0x72, 0x69,
	0x64, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x61, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x75, 0x73, 0x12, 0x5d, 0x0a, 0x1b, 0x67, 0x72, 0x69,
	0x64, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x61, 0x6e, 0x64, 0x50, 0x6c, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x67, 0x72, 0x69,
	0x64, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x61, 0x6e, 0x64, 0x50, 0x6c, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x12, 0x6f, 0x76, 0x65, 0x72,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x44, 0x72, 0x6f, 0x6f, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x12, 0x6f, 0x76, 0x65, 0x72, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x44, 0x72, 0x6f, 0x6f, 0x70, 0x12, 0x4d, 0x0a, 0x13, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x44, 0x72, 0x6f, 0x6f, 0x70, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x13, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x44,
	0x72, 0x6f, 0x6f, 0x70, 0x22, 0xa7, 0x03, 0x0a, 0x0b, 0x50, 0x65, 0x61, 0x6b, 0x53, 0x68, 0x61,
	0x76, 0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a, 0x10, 0x62, 0x61, 0x73, 0x65, 0x53, 0x68, 0x61, 0x76,
	0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x62, 0x61, 0x73,
	0x65, 0x53, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x42, 0x0a,
	0x0e, 0x70, 0x65, 0x61, 0x6b, 0x53, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x43, 0x74, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0e, 0x70, 0x65, 0x61, 0x6b, 0x53, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x43, 0x74,
	0x6c, 0x12, 0x47, 0x0a, 0x10, 0x70, 0x65, 0x61, 0x6b, 0x53, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x70, 0x65, 0x61, 0x6b, 0x53, 0x68,
	0x61, 0x76, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x61, 0x0a, 0x1d, 0x73, 0x6f,
	0x63, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x48, 0x69, 0x67, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1d,
	0x73, 0x6f, 0x63, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x48, 0x69, 0x67, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x5f, 0x0a,
	0x1c, 0x73, 0x6f, 0x63, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4c, 0x6f, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x1c, 0x73, 0x6f, 0x63, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4c, 0x6f, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xf0,
	0x02, 0x0a, 0x08, 0x53, 0x6f, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x73,
	0x6f, 0x63, 0x48, 0x69, 0x67, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x73, 0x6f, 0x63, 0x48, 0x69, 0x67, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x53, 0x0a, 0x16,
	0x73, 0x6f, 0x63, 0x48, 0x69, 0x67, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x48, 0x79, 0x73, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x73, 0x6f, 0x63, 0x48, 0x69,
	0x67, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x48, 0x79, 0x73, 0x74, 0x65, 0x72, 0x65, 0x73, 0x69,
	0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x6f, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x74, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x73, 0x6f, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x74, 0x6c, 0x12,
	0x3d, 0x0a, 0x0b, 0x73, 0x6f, 0x63, 0x4c, 0x6f, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0b, 0x73, 0x6f, 0x63, 0x4c, 0x6f, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x51,
	0x0a, 0x15, 0x73, 0x6f, 0x63, 0x4c, 0x6f, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x48, 0x79, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x69, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x73, 0x6f, 0x63, 0x4c,
	0x6f, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x48, 0x79, 0x73, 0x74, 0x65, 0x72, 0x65, 0x73, 0x69,
	0x73, 0x22, 0xef, 0x02, 0x0a, 0x0d, 0x53, 0x4f, 0x43, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x10, 0x73, 0x6f, 0x63, 0x44, 0x65, 0x61, 0x64, 0x42, 0x61,
	0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x73, 0x6f, 0x63, 0x44,
	0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x0f,
	0x73, 0x6f, 0x63, 0x44, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x50, 0x6c, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0f, 0x73, 0x6f, 0x63, 0x44, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x50,
	0x6c, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x73, 0x6f, 0x63, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x74, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x73, 0x6f, 0x63, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x74, 0x6c, 0x12, 0x47, 0x0a, 0x10, 0x73,
	0x6f, 0x63, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x10, 0x73, 0x6f, 0x63, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x65, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x6f, 0x63, 0x53, 0x65, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x6f, 0x63, 0x53, 0x65, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x22, 0x8e, 0x03, 0x0a, 0x11, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x10, 0x6f, 0x76, 0x65,
	0x72, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x44, 0x72, 0x6f, 0x6f, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x44, 0x72, 0x6f,
	0x6f, 0x70, 0x12, 0x49, 0x0a, 0x11, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x44, 0x72, 0x6f, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x44, 0x72, 0x6f, 0x6f, 0x70, 0x12, 0x4f, 0x0a,
	0x14, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64,
	0x4d, 0x69, 0x6e, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x44, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x75, 0x73, 0x12, 0x4d,
	0x0a, 0x13, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e,
	0x64, 0x50, 0x6c, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x44, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x50, 0x6c, 0x75, 0x73, 0x12, 0x45, 0x0a,
	0x0f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x22, 0xa0, 0x01, 0x0a, 0x0c, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x44, 0x72, 0x6f, 0x6f, 0x70, 0x12, 0x44, 0x0a, 0x0f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x44, 0x72, 0x6f, 0x6f, 0x70, 0x43, 0x74, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x76, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x44, 0x72, 0x6f, 0x6f, 0x70, 0x43, 0x74, 0x6c, 0x12, 0x4a, 0x0a, 0x11, 0x76,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x97, 0x01, 0x0a, 0x09, 0x56, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x50, 0x49, 0x12, 0x3e, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x50, 0x49, 0x43, 0x74, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x50, 0x49, 0x43, 0x74, 0x6c, 0x12, 0x4a, 0x0a, 0x11, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x56, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xf7, 0x01, 0x0a, 0x0f, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x46, 0x69,
	0x72, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x4a, 0x0a, 0x12, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x46, 0x69, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x74, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x46, 0x69, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x74,
	0x6c, 0x12, 0x4b, 0x0a, 0x13, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x64, 0x70, 0x5f, 0x64, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x70, 0x44, 0x74, 0x12, 0x4b,
	0x0a, 0x13, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x64, 0x70, 0x5f, 0x64, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x44, 0x70, 0x44, 0x74, 0x22, 0xc1, 0x03, 0x0a, 0x0b,
	0x45, 0x53, 0x53, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0f, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x46, 0x69, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x46, 0x69, 0x72, 0x6d, 0x69, 0x6e, 0x67,
	0x52, 0x0f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x46, 0x69, 0x72, 0x6d, 0x69, 0x6e,
	0x67, 0x12, 0x50, 0x0a, 0x13, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x70, 0x65, 0x61, 0x6b, 0x53, 0x68, 0x61, 0x76, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x73, 0x73, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x65, 0x61, 0x6b, 0x53, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67,
	0x52, 0x0b, 0x70, 0x65, 0x61, 0x6b, 0x53, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a,
	0x08, 0x73, 0x6f, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x63, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x52, 0x08, 0x73, 0x6f, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3e,
	0x0a, 0x0d, 0x73, 0x6f, 0x63, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x53, 0x4f, 0x43, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0d, 0x73, 0x6f, 0x63, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3b,
	0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x44, 0x72, 0x6f, 0x6f, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x44, 0x72, 0x6f, 0x6f, 0x70, 0x52, 0x0c, 0x76,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x44, 0x72, 0x6f, 0x6f, 0x70, 0x12, 0x32, 0x0a, 0x09, 0x76,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x50, 0x49, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x56, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x50, 0x49, 0x52, 0x09, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x50, 0x49, 0x22,
	0x9c, 0x07, 0x0a, 0x0e, 0x45, 0x53, 0x53, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x45, 0x0a, 0x11, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x11, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x18, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x53, 0x50, 0x53, 0x52, 0x18, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x53,
	0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x32,
	0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x53, 0x53,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x45, 0x4e, 0x47, 0x5f, 0x47, 0x72, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a,
	0x0a, 0x70, 0x63, 0x74, 0x48, 0x7a, 0x44, 0x72, 0x6f, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x70, 0x63, 0x74, 0x48, 0x7a, 0x44, 0x72, 0x6f, 0x6f, 0x70, 0x12, 0x39, 0x0a, 0x09, 0x70, 0x63,
	0x74, 0x56, 0x44, 0x72, 0x6f, 0x6f, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x70, 0x63, 0x74, 0x56,
	0x44, 0x72, 0x6f, 0x6f, 0x70, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x61, 0x6d, 0x70, 0x52, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x61, 0x6d, 0x70, 0x52, 0x61, 0x74, 0x65,
	0x52, 0x09, 0x72, 0x61, 0x6d, 0x70, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x1a, 0x72,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x77, 0x72, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x1a, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x50, 0x77, 0x72, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x16, 0x72, 0x65, 0x61, 0x6c, 0x50, 0x77, 0x72, 0x53,
	0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x16, 0x72,
	0x65, 0x61, 0x6c, 0x50, 0x77, 0x72, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a,
	0x0e, 0x73, 0x79, 0x6e, 0x63, 0x42, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x47, 0x72, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x0e,
	0x73, 0x79, 0x6e, 0x63, 0x42, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x47, 0x72, 0x69, 0x64, 0x12, 0x5d,
	0x0a, 0x1d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x6f, 0x49, 0x73, 0x6c, 0x6e, 0x64, 0x4f, 0x6e,
	0x47, 0x72, 0x69, 0x64, 0x4c, 0x6f, 0x73, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x1d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x6f, 0x49, 0x73, 0x6c, 0x6e, 0x64, 0x4f, 0x6e, 0x47, 0x72,
	0x69, 0x64, 0x4c, 0x6f, 0x73, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x4f, 0x0a,
	0x16, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x16, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xaa,
	0x03, 0x0a, 0x15, 0x45, 0x53, 0x53, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e, 0x12, 0x74, 0x0a, 0x1c, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01,
	0x52, 0x1c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33,
	0x0a, 0x08, 0x41, 0x75, 0x78, 0x50, 0x77, 0x72, 0x53, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x08, 0x41, 0x75, 0x78, 0x50, 0x77,
	0x72, 0x53, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x65,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x4e, 0x53, 0x5f, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0b, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x45, 0x6d, 0x67, 0x53,
	0x74, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53,
	0x50, 0x53, 0x52, 0x07, 0x45, 0x6d, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x31, 0x0a, 0x07, 0x47,
	0x6e, 0x53, 0x79, 0x6e, 0x53, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x07, 0x47, 0x6e, 0x53, 0x79, 0x6e, 0x53, 0x74, 0x12, 0x3b,
	0x0a, 0x0b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x45, 0x53, 0x53, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6c, 0x0a, 0x0c, 0x45,
	0x53, 0x53, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5a, 0x47, 0x45, 0x4e, 0x12, 0x5c, 0x0a, 0x15, 0x65,
	0x53, 0x53, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5a, 0x47, 0x45, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x73, 0x73,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x53, 0x53, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x01, 0x52, 0x15, 0x65, 0x53, 0x53, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e, 0x22, 0xc4, 0x01, 0x0a, 0x08, 0x45, 0x53,
	0x53, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x5a, 0x42, 0x41, 0x54, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65,
	0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x5a, 0x42, 0x41, 0x54, 0x52, 0x0c, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5a,
	0x42, 0x41, 0x54, 0x12, 0x3b, 0x0a, 0x0c, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5a,
	0x47, 0x45, 0x4e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x73, 0x73, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x53, 0x53, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5a, 0x47,
	0x45, 0x4e, 0x52, 0x0c, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5a, 0x47, 0x45, 0x4e,
	0x22, 0xd3, 0x01, 0x0a, 0x0f, 0x45, 0x53, 0x53, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x50, 0x0a, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x01, 0x52, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x03, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x45, 0x53, 0x53, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01,
	0x52, 0x03, 0x65, 0x73, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x45, 0x53, 0x53, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x08, 0x88, 0xb5,
	0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x08, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x3a, 0x04, 0xc0, 0xf3, 0x18, 0x01, 0x22, 0xc6, 0x02, 0x0a, 0x0a, 0x45, 0x53, 0x53, 0x52, 0x65,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x86, 0x01, 0x0a, 0x22, 0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x22, 0x63, 0x6f, 0x6e, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x35,
	0x0a, 0x09, 0x70, 0x68, 0x61, 0x73, 0x65, 0x4d, 0x4d, 0x54, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x4d, 0x4d, 0x54, 0x4e, 0x52, 0x09, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x4d, 0x4d, 0x54, 0x4e, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x4d, 0x4d, 0x54, 0x52, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x4d, 0x4d, 0x54, 0x52, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d,
	0x54, 0x52, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x58,
	0x55, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d,
	0x58, 0x55, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x58, 0x55, 0x22,
	0xe1, 0x01, 0x0a, 0x11, 0x45, 0x53, 0x53, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x56, 0x0a, 0x12, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x12, 0x72, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a,
	0x03, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x53, 0x53, 0x42, 0x08, 0x88,
	0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x03, 0x65, 0x73, 0x73, 0x12, 0x3f, 0x0a, 0x0a,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x53, 0x53,
	0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18,
	0x01, 0x52, 0x0a, 0x65, 0x73, 0x73, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x04, 0xc0,
	0xf3, 0x18, 0x01, 0x22, 0xc6, 0x02, 0x0a, 0x0d, 0x45, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5a, 0x42, 0x41, 0x54, 0x12, 0x74, 0x0a, 0x1c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x1c, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x42,
	0x61, 0x74, 0x53, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x53, 0x50, 0x53, 0x52, 0x05, 0x42, 0x61, 0x74, 0x53, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x47, 0x72,
	0x69, 0x4d, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x4e, 0x47, 0x5f, 0x47, 0x72,
	0x69, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e,
	0x64, 0x52, 0x06, 0x47, 0x72, 0x69, 0x4d, 0x6f, 0x64, 0x12, 0x22, 0x0a, 0x03, 0x53, 0x6f, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4d, 0x56, 0x52, 0x03, 0x53, 0x6f, 0x63, 0x12, 0x2d, 0x0a,
	0x05, 0x53, 0x74, 0x64, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x05, 0x53, 0x74, 0x64, 0x62, 0x79, 0x22, 0x6d, 0x0a, 0x0d,
	0x45, 0x53, 0x53, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e, 0x12, 0x5c, 0x0a,
	0x15, 0x65, 0x53, 0x53, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65,
	0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x53, 0x53, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x01, 0x52, 0x15, 0x65, 0x53, 0x53, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e, 0x22, 0xce, 0x01, 0x0a, 0x09,
	0x45, 0x53, 0x53, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x0d,
	0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x42, 0x41, 0x54, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x45, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x42, 0x41, 0x54, 0x52, 0x0d, 0x65,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x42, 0x41, 0x54, 0x12, 0x3e, 0x0a, 0x0d,
	0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x45, 0x53, 0x53, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e, 0x52, 0x0d, 0x65,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e, 0x22, 0xda, 0x01, 0x0a,
	0x10, 0x45, 0x53, 0x53, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x53, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x01, 0x52, 0x11, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x03, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x45, 0x53, 0x53, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01,
	0x52, 0x03, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x73, 0x73, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x53, 0x53, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08,
	0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x09, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x3a, 0x04, 0xc0, 0xf3, 0x18, 0x01, 0x22, 0x95, 0x08, 0x0a, 0x08, 0x45, 0x53,
	0x53, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x50, 0x43, 0x52, 0x11, 0x62, 0x6c, 0x61,
	0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x54,
	0x0a, 0x18, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x50, 0x43, 0x52, 0x18, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x45, 0x53, 0x53, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x4e, 0x47, 0x5f, 0x47, 0x72, 0x69, 0x64, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x63, 0x74, 0x48, 0x7a, 0x44, 0x72, 0x6f, 0x6f,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x70, 0x63, 0x74, 0x48, 0x7a, 0x44, 0x72, 0x6f, 0x6f, 0x70,
	0x12, 0x39, 0x0a, 0x09, 0x70, 0x63, 0x74, 0x56, 0x44, 0x72, 0x6f, 0x6f, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x09, 0x70, 0x63, 0x74, 0x56, 0x44, 0x72, 0x6f, 0x6f, 0x70, 0x12, 0x34, 0x0a, 0x09, 0x72,
	0x61, 0x6d, 0x70, 0x52, 0x61, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x61,
	0x6d, 0x70, 0x52, 0x61, 0x74, 0x65, 0x52, 0x09, 0x72, 0x61, 0x6d, 0x70, 0x52, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x58, 0x0a, 0x1a, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x77, 0x72,
	0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x50, 0x43, 0x52,
	0x1a, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x77, 0x72, 0x53, 0x65, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x16, 0x72,
	0x65, 0x61, 0x6c, 0x50, 0x77, 0x72, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x53, 0x50, 0x43, 0x52, 0x16, 0x72, 0x65, 0x61, 0x6c, 0x50, 0x77, 0x72, 0x53, 0x65,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2e, 0x0a,
	0x05, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x53, 0x50, 0x43, 0x52, 0x05, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x36, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x73, 0x79, 0x6e, 0x63, 0x42, 0x61, 0x63,
	0x6b, 0x54, 0x6f, 0x47, 0x72, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x53, 0x50, 0x43, 0x52, 0x0e, 0x73, 0x79, 0x6e, 0x63, 0x42, 0x61, 0x63,
	0x6b, 0x54, 0x6f, 0x47, 0x72, 0x69, 0x64, 0x12, 0x5e, 0x0a, 0x1d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x54, 0x6f, 0x49, 0x73, 0x6c, 0x6e, 0x64, 0x4f, 0x6e, 0x47, 0x72, 0x69, 0x64, 0x4c, 0x6f, 0x73,
	0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x50, 0x43, 0x52, 0x1d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54,
	0x6f, 0x49, 0x73, 0x6c, 0x6e, 0x64, 0x4f, 0x6e, 0x47, 0x72, 0x69, 0x64, 0x4c, 0x6f, 0x73, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x16, 0x76, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x50,
	0x43, 0x52, 0x16, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0x88, 0xb5,
	0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x3f, 0x0a, 0x06, 0x45, 0x53, 0x53, 0x43, 0x53, 0x47, 0x12, 0x35, 0x0a, 0x06, 0x63,
	0x72, 0x76, 0x50, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x73,
	0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x53, 0x53, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x06, 0x63, 0x72, 0x76, 0x50,
	0x74, 0x73, 0x22, 0x4f, 0x0a, 0x16, 0x45, 0x53, 0x53, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x53, 0x43, 0x48, 0x12, 0x35, 0x0a, 0x07,
	0x56, 0x61, 0x6c, 0x44, 0x43, 0x53, 0x47, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x53, 0x53, 0x43, 0x53, 0x47,
	0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x07, 0x56, 0x61, 0x6c, 0x44,
	0x43, 0x53, 0x47, 0x22, 0xae, 0x01, 0x0a, 0x0e, 0x45, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x46, 0x53, 0x43, 0x43, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x46, 0x53, 0x43, 0x43, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x46, 0x53, 0x43, 0x43, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x53, 0x43, 0x43, 0x12, 0x59, 0x0a, 0x16, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x46,
	0x53, 0x43, 0x48, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x73, 0x73, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x53, 0x53, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x53, 0x43, 0x48, 0x52, 0x16, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x46, 0x53, 0x43, 0x48, 0x22, 0xca, 0x01, 0x0a, 0x0a, 0x45, 0x53, 0x53, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x41,
	0x0a, 0x0e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x53, 0x43, 0x43,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x45, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x53, 0x43,
	0x43, 0x52, 0x0e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x53, 0x43,
	0x43, 0x22, 0xe1, 0x01, 0x0a, 0x11, 0x45, 0x53, 0x53, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x56, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x12, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2d, 0x0a, 0x03, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x53, 0x53, 0x42,
	0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x03, 0x65, 0x73, 0x73, 0x12, 0x3f,
	0x0a, 0x0a, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45,
	0x53, 0x53, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90,
	0xb5, 0x18, 0x01, 0x52, 0x0a, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x3a,
	0x04, 0xc0, 0xf3, 0x18, 0x01, 0x42, 0x7b, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62,
	0x2e, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x01, 0x5a, 0x50, 0x67, 0x69,
	0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62,
	0x2f, 0x70, 0x73, 0x6d, 0x2f, 0x6f, 0x70, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x67, 0x6f, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2d, 0x6f, 0x70, 0x73,
	0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x66, 0x6d, 0x62, 0x2f, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0xaa, 0x02,
	0x11, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2e, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_essmodule_essmodule_proto_rawDescOnce sync.Once
	file_essmodule_essmodule_proto_rawDescData = file_essmodule_essmodule_proto_rawDesc
)

func file_essmodule_essmodule_proto_rawDescGZIP() []byte {
	file_essmodule_essmodule_proto_rawDescOnce.Do(func() {
		file_essmodule_essmodule_proto_rawDescData = protoimpl.X.CompressGZIP(file_essmodule_essmodule_proto_rawDescData)
	})
	return file_essmodule_essmodule_proto_rawDescData
}

var file_essmodule_essmodule_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_essmodule_essmodule_proto_goTypes = []interface{}{
	(*EssEventZBAT)(nil),                                    // 0: essmodule.EssEventZBAT
	(*FrequencyRegulation)(nil),                             // 1: essmodule.FrequencyRegulation
	(*PeakShaving)(nil),                                     // 2: essmodule.PeakShaving
	(*SocLimit)(nil),                                        // 3: essmodule.SocLimit
	(*SOCManagement)(nil),                                   // 4: essmodule.SOCManagement
	(*VoltageRegulation)(nil),                               // 5: essmodule.VoltageRegulation
	(*VoltageDroop)(nil),                                    // 6: essmodule.VoltageDroop
	(*VoltagePI)(nil),                                       // 7: essmodule.VoltagePI
	(*CapacityFirming)(nil),                                 // 8: essmodule.CapacityFirming
	(*ESSFunction)(nil),                                     // 9: essmodule.ESSFunction
	(*ESSPointStatus)(nil),                                  // 10: essmodule.ESSPointStatus
	(*ESSEventAndStatusZGEN)(nil),                           // 11: essmodule.ESSEventAndStatusZGEN
	(*ESSEventZGEN)(nil),                                    // 12: essmodule.ESSEventZGEN
	(*ESSEvent)(nil),                                        // 13: essmodule.ESSEvent
	(*ESSEventProfile)(nil),                                 // 14: essmodule.ESSEventProfile
	(*ESSReading)(nil),                                      // 15: essmodule.ESSReading
	(*ESSReadingProfile)(nil),                               // 16: essmodule.ESSReadingProfile
	(*EssStatusZBAT)(nil),                                   // 17: essmodule.EssStatusZBAT
	(*ESSStatusZGEN)(nil),                                   // 18: essmodule.ESSStatusZGEN
	(*ESSStatus)(nil),                                       // 19: essmodule.ESSStatus
	(*ESSStatusProfile)(nil),                                // 20: essmodule.ESSStatusProfile
	(*ESSPoint)(nil),                                        // 21: essmodule.ESSPoint
	(*ESSCSG)(nil),                                          // 22: essmodule.ESSCSG
	(*ESSControlScheduleFSCH)(nil),                          // 23: essmodule.ESSControlScheduleFSCH
	(*EssControlFSCC)(nil),                                  // 24: essmodule.EssControlFSCC
	(*ESSControl)(nil),                                      // 25: essmodule.ESSControl
	(*ESSControlProfile)(nil),                               // 26: essmodule.ESSControlProfile
	(*commonmodule.LogicalNodeForEventAndStatus)(nil),       // 27: commonmodule.LogicalNodeForEventAndStatus
	(*commonmodule.StatusSPS)(nil),                          // 28: commonmodule.StatusSPS
	(*commonmodule.MV)(nil),                                 // 29: commonmodule.MV
	(*wrapperspb.FloatValue)(nil),                           // 30: google.protobuf.FloatValue
	(*wrapperspb.BoolValue)(nil),                            // 31: google.protobuf.BoolValue
	(*commonmodule.ENG_GridConnectModeKind)(nil),            // 32: commonmodule.ENG_GridConnectModeKind
	(*commonmodule.RampRate)(nil),                           // 33: commonmodule.RampRate
	(*commonmodule.Optional_StateKind)(nil),                 // 34: commonmodule.Optional_StateKind
	(*commonmodule.ENS_DynamicTestKind)(nil),                // 35: commonmodule.ENS_DynamicTestKind
	(*commonmodule.EventValue)(nil),                         // 36: commonmodule.EventValue
	(*commonmodule.EventMessageInfo)(nil),                   // 37: commonmodule.EventMessageInfo
	(*commonmodule.ESS)(nil),                                // 38: commonmodule.ESS
	(*commonmodule.ConductingEquipmentTerminalReading)(nil), // 39: commonmodule.ConductingEquipmentTerminalReading
	(*commonmodule.PhaseMMTN)(nil),                          // 40: commonmodule.PhaseMMTN
	(*commonmodule.ReadingMMTR)(nil),                        // 41: commonmodule.ReadingMMTR
	(*commonmodule.ReadingMMXU)(nil),                        // 42: commonmodule.ReadingMMXU
	(*commonmodule.ReadingMessageInfo)(nil),                 // 43: commonmodule.ReadingMessageInfo
	(*commonmodule.StatusValue)(nil),                        // 44: commonmodule.StatusValue
	(*commonmodule.StatusMessageInfo)(nil),                  // 45: commonmodule.StatusMessageInfo
	(*commonmodule.ControlSPC)(nil),                         // 46: commonmodule.ControlSPC
	(*commonmodule.ControlTimestamp)(nil),                   // 47: commonmodule.ControlTimestamp
	(*commonmodule.ControlFSCC)(nil),                        // 48: commonmodule.ControlFSCC
	(*commonmodule.ControlValue)(nil),                       // 49: commonmodule.ControlValue
	(*commonmodule.CheckConditions)(nil),                    // 50: commonmodule.CheckConditions
	(*commonmodule.ControlMessageInfo)(nil),                 // 51: commonmodule.ControlMessageInfo
}
var file_essmodule_essmodule_proto_depIdxs = []int32{
	27,  // 0: essmodule.EssEventZBAT.logicalNodeForEventAndStatus:type_name -> commonmodule.LogicalNodeForEventAndStatus
	28,  // 1: essmodule.EssEventZBAT.BatHi:type_name -> commonmodule.StatusSPS
	28,  // 2: essmodule.EssEventZBAT.BatLo:type_name -> commonmodule.StatusSPS
	28,  // 3: essmodule.EssEventZBAT.BatSt:type_name -> commonmodule.StatusSPS
	29,  // 4: essmodule.EssEventZBAT.Soc:type_name -> commonmodule.MV
	28,  // 5: essmodule.EssEventZBAT.Stdby:type_name -> commonmodule.StatusSPS
	30,  // 6: essmodule.FrequencyRegulation.frequencyDeadBandMinus:type_name -> google.protobuf.FloatValue
	30,  // 7: essmodule.FrequencyRegulation.frequencyDeadBandPlus:type_name -> google.protobuf.FloatValue
	31,  // 8: essmodule.FrequencyRegulation.frequencyRegulationCtl:type_name -> google.protobuf.BoolValue
	30,  // 9: essmodule.FrequencyRegulation.frequencySetPoint:type_name -> google.protobuf.FloatValue
	30,  // 10: essmodule.FrequencyRegulation.gridFrequencyStableBandMinus:type_name -> google.protobuf.FloatValue
	30,  // 11: essmodule.FrequencyRegulation.gridFrequencyStableBandPlus:type_name -> google.protobuf.FloatValue
	30,  // 12: essmodule.FrequencyRegulation.overFrequencyDroop:type_name -> google.protobuf.FloatValue
	30,  // 13: essmodule.FrequencyRegulation.underFrequencyDroop:type_name -> google.protobuf.FloatValue
	30,  // 14: essmodule.PeakShaving.baseShavingLimit:type_name -> google.protobuf.FloatValue
	31,  // 15: essmodule.PeakShaving.peakShavingCtl:type_name -> google.protobuf.BoolValue
	30,  // 16: essmodule.PeakShaving.peakShavingLimit:type_name -> google.protobuf.FloatValue
	30,  // 17: essmodule.PeakShaving.socManagementAllowedHighLimit:type_name -> google.protobuf.FloatValue
	30,  // 18: essmodule.PeakShaving.socManagementAllowedLowLimit:type_name -> google.protobuf.FloatValue
	30,  // 19: essmodule.SocLimit.socHighLimit:type_name -> google.protobuf.FloatValue
	30,  // 20: essmodule.SocLimit.socHighLimitHysteresis:type_name -> google.protobuf.FloatValue
	31,  // 21: essmodule.SocLimit.socLimitCtl:type_name -> google.protobuf.BoolValue
	30,  // 22: essmodule.SocLimit.socLowLimit:type_name -> google.protobuf.FloatValue
	30,  // 23: essmodule.SocLimit.socLowLimitHysteresis:type_name -> google.protobuf.FloatValue
	30,  // 24: essmodule.SOCManagement.socDeadBandMinus:type_name -> google.protobuf.FloatValue
	30,  // 25: essmodule.SOCManagement.socDeadBandPlus:type_name -> google.protobuf.FloatValue
	31,  // 26: essmodule.SOCManagement.socManagementCtl:type_name -> google.protobuf.BoolValue
	30,  // 27: essmodule.SOCManagement.socPowerSetPoint:type_name -> google.protobuf.FloatValue
	30,  // 28: essmodule.SOCManagement.socSetPoint:type_name -> google.protobuf.FloatValue
	30,  // 29: essmodule.VoltageRegulation.overVoltageDroop:type_name -> google.protobuf.FloatValue
	30,  // 30: essmodule.VoltageRegulation.underVoltageDroop:type_name -> google.protobuf.FloatValue
	30,  // 31: essmodule.VoltageRegulation.voltageDeadBandMinus:type_name -> google.protobuf.FloatValue
	30,  // 32: essmodule.VoltageRegulation.voltageDeadBandPlus:type_name -> google.protobuf.FloatValue
	30,  // 33: essmodule.VoltageRegulation.voltageSetPoint:type_name -> google.protobuf.FloatValue
	31,  // 34: essmodule.VoltageDroop.voltageDroopCtl:type_name -> google.protobuf.BoolValue
	5,   // 35: essmodule.VoltageDroop.voltageRegulation:type_name -> essmodule.VoltageRegulation
	31,  // 36: essmodule.VoltagePI.voltagePICtl:type_name -> google.protobuf.BoolValue
	5,   // 37: essmodule.VoltagePI.voltageRegulation:type_name -> essmodule.VoltageRegulation
	31,  // 38: essmodule.CapacityFirming.capacityFirmingCtl:type_name -> google.protobuf.BoolValue
	30,  // 39: essmodule.CapacityFirming.limitNegative_dp_dt:type_name -> google.protobuf.FloatValue
	30,  // 40: essmodule.CapacityFirming.limitPositive_dp_dt:type_name -> google.protobuf.FloatValue
	8,   // 41: essmodule.ESSFunction.capacityFirming:type_name -> essmodule.CapacityFirming
	1,   // 42: essmodule.ESSFunction.frequencyRegulation:type_name -> essmodule.FrequencyRegulation
	2,   // 43: essmodule.ESSFunction.peakShaving:type_name -> essmodule.PeakShaving
	3,   // 44: essmodule.ESSFunction.socLimit:type_name -> essmodule.SocLimit
	4,   // 45: essmodule.ESSFunction.socManagement:type_name -> essmodule.SOCManagement
	6,   // 46: essmodule.ESSFunction.voltageDroop:type_name -> essmodule.VoltageDroop
	7,   // 47: essmodule.ESSFunction.voltagePI:type_name -> essmodule.VoltagePI
	28,  // 48: essmodule.ESSPointStatus.blackStartEnabled:type_name -> commonmodule.StatusSPS
	28,  // 49: essmodule.ESSPointStatus.frequencySetPointEnabled:type_name -> commonmodule.StatusSPS
	9,   // 50: essmodule.ESSPointStatus.function:type_name -> essmodule.ESSFunction
	32,  // 51: essmodule.ESSPointStatus.mode:type_name -> commonmodule.ENG_GridConnectModeKind
	30,  // 52: essmodule.ESSPointStatus.pctHzDroop:type_name -> google.protobuf.FloatValue
	30,  // 53: essmodule.ESSPointStatus.pctVDroop:type_name -> google.protobuf.FloatValue
	33,  // 54: essmodule.ESSPointStatus.rampRates:type_name -> commonmodule.RampRate
	28,  // 55: essmodule.ESSPointStatus.reactivePwrSetPointEnabled:type_name -> commonmodule.StatusSPS
	28,  // 56: essmodule.ESSPointStatus.realPwrSetPointEnabled:type_name -> commonmodule.StatusSPS
	34,  // 57: essmodule.ESSPointStatus.state:type_name -> commonmodule.Optional_StateKind
	28,  // 58: essmodule.ESSPointStatus.syncBackToGrid:type_name -> commonmodule.StatusSPS
	28,  // 59: essmodule.ESSPointStatus.transToIslndOnGridLossEnabled:type_name -> commonmodule.StatusSPS
	28,  // 60: essmodule.ESSPointStatus.voltageSetPointEnabled:type_name -> commonmodule.StatusSPS
	27,  // 61: essmodule.ESSEventAndStatusZGEN.logicalNodeForEventAndStatus:type_name -> commonmodule.LogicalNodeForEventAndStatus
	28,  // 62: essmodule.ESSEventAndStatusZGEN.AuxPwrSt:type_name -> commonmodule.StatusSPS
	35,  // 63: essmodule.ESSEventAndStatusZGEN.DynamicTest:type_name -> commonmodule.ENS_DynamicTestKind
	28,  // 64: essmodule.ESSEventAndStatusZGEN.EmgStop:type_name -> commonmodule.StatusSPS
	28,  // 65: essmodule.ESSEventAndStatusZGEN.GnSynSt:type_name -> commonmodule.StatusSPS
	10,  // 66: essmodule.ESSEventAndStatusZGEN.PointStatus:type_name -> essmodule.ESSPointStatus
	11,  // 67: essmodule.ESSEventZGEN.eSSEventAndStatusZGEN:type_name -> essmodule.ESSEventAndStatusZGEN
	36,  // 68: essmodule.ESSEvent.eventValue:type_name -> commonmodule.EventValue
	0,   // 69: essmodule.ESSEvent.essEventZBAT:type_name -> essmodule.EssEventZBAT
	12,  // 70: essmodule.ESSEvent.essEventZGEN:type_name -> essmodule.ESSEventZGEN
	37,  // 71: essmodule.ESSEventProfile.eventMessageInfo:type_name -> commonmodule.EventMessageInfo
	38,  // 72: essmodule.ESSEventProfile.ess:type_name -> commonmodule.ESS
	13,  // 73: essmodule.ESSEventProfile.essEvent:type_name -> essmodule.ESSEvent
	39,  // 74: essmodule.ESSReading.conductingEquipmentTerminalReading:type_name -> commonmodule.ConductingEquipmentTerminalReading
	40,  // 75: essmodule.ESSReading.phaseMMTN:type_name -> commonmodule.PhaseMMTN
	41,  // 76: essmodule.ESSReading.readingMMTR:type_name -> commonmodule.ReadingMMTR
	42,  // 77: essmodule.ESSReading.readingMMXU:type_name -> commonmodule.ReadingMMXU
	43,  // 78: essmodule.ESSReadingProfile.readingMessageInfo:type_name -> commonmodule.ReadingMessageInfo
	38,  // 79: essmodule.ESSReadingProfile.ess:type_name -> commonmodule.ESS
	15,  // 80: essmodule.ESSReadingProfile.essReading:type_name -> essmodule.ESSReading
	27,  // 81: essmodule.EssStatusZBAT.logicalNodeForEventAndStatus:type_name -> commonmodule.LogicalNodeForEventAndStatus
	28,  // 82: essmodule.EssStatusZBAT.BatSt:type_name -> commonmodule.StatusSPS
	32,  // 83: essmodule.EssStatusZBAT.GriMod:type_name -> commonmodule.ENG_GridConnectModeKind
	29,  // 84: essmodule.EssStatusZBAT.Soc:type_name -> commonmodule.MV
	28,  // 85: essmodule.EssStatusZBAT.Stdby:type_name -> commonmodule.StatusSPS
	11,  // 86: essmodule.ESSStatusZGEN.eSSEventAndStatusZGEN:type_name -> essmodule.ESSEventAndStatusZGEN
	44,  // 87: essmodule.ESSStatus.statusValue:type_name -> commonmodule.StatusValue
	17,  // 88: essmodule.ESSStatus.essStatusZBAT:type_name -> essmodule.EssStatusZBAT
	18,  // 89: essmodule.ESSStatus.essStatusZGEN:type_name -> essmodule.ESSStatusZGEN
	45,  // 90: essmodule.ESSStatusProfile.statusMessageInfo:type_name -> commonmodule.StatusMessageInfo
	38,  // 91: essmodule.ESSStatusProfile.ess:type_name -> commonmodule.ESS
	19,  // 92: essmodule.ESSStatusProfile.essStatus:type_name -> essmodule.ESSStatus
	46,  // 93: essmodule.ESSPoint.blackStartEnabled:type_name -> commonmodule.ControlSPC
	46,  // 94: essmodule.ESSPoint.frequencySetPointEnabled:type_name -> commonmodule.ControlSPC
	9,   // 95: essmodule.ESSPoint.function:type_name -> essmodule.ESSFunction
	32,  // 96: essmodule.ESSPoint.mode:type_name -> commonmodule.ENG_GridConnectModeKind
	30,  // 97: essmodule.ESSPoint.pctHzDroop:type_name -> google.protobuf.FloatValue
	30,  // 98: essmodule.ESSPoint.pctVDroop:type_name -> google.protobuf.FloatValue
	33,  // 99: essmodule.ESSPoint.rampRates:type_name -> commonmodule.RampRate
	46,  // 100: essmodule.ESSPoint.reactivePwrSetPointEnabled:type_name -> commonmodule.ControlSPC
	46,  // 101: essmodule.ESSPoint.realPwrSetPointEnabled:type_name -> commonmodule.ControlSPC
	46,  // 102: essmodule.ESSPoint.reset:type_name -> commonmodule.ControlSPC
	34,  // 103: essmodule.ESSPoint.state:type_name -> commonmodule.Optional_StateKind
	46,  // 104: essmodule.ESSPoint.syncBackToGrid:type_name -> commonmodule.ControlSPC
	46,  // 105: essmodule.ESSPoint.transToIslndOnGridLossEnabled:type_name -> commonmodule.ControlSPC
	46,  // 106: essmodule.ESSPoint.voltageSetPointEnabled:type_name -> commonmodule.ControlSPC
	47,  // 107: essmodule.ESSPoint.startTime:type_name -> commonmodule.ControlTimestamp
	21,  // 108: essmodule.ESSCSG.crvPts:type_name -> essmodule.ESSPoint
	22,  // 109: essmodule.ESSControlScheduleFSCH.ValDCSG:type_name -> essmodule.ESSCSG
	48,  // 110: essmodule.EssControlFSCC.controlFSCC:type_name -> commonmodule.ControlFSCC
	23,  // 111: essmodule.EssControlFSCC.essControlScheduleFSCH:type_name -> essmodule.ESSControlScheduleFSCH
	49,  // 112: essmodule.ESSControl.controlValue:type_name -> commonmodule.ControlValue
	50,  // 113: essmodule.ESSControl.check:type_name -> commonmodule.CheckConditions
	24,  // 114: essmodule.ESSControl.essControlFSCC:type_name -> essmodule.EssControlFSCC
	51,  // 115: essmodule.ESSControlProfile.controlMessageInfo:type_name -> commonmodule.ControlMessageInfo
	38,  // 116: essmodule.ESSControlProfile.ess:type_name -> commonmodule.ESS
	25,  // 117: essmodule.ESSControlProfile.essControl:type_name -> essmodule.ESSControl
	118, // [118:118] is the sub-list for method output_type
	118, // [118:118] is the sub-list for method input_type
	118, // [118:118] is the sub-list for extension type_name
	118, // [118:118] is the sub-list for extension extendee
	0,   // [0:118] is the sub-list for field type_name
}

func init() { file_essmodule_essmodule_proto_init() }
func file_essmodule_essmodule_proto_init() {
	if File_essmodule_essmodule_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_essmodule_essmodule_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EssEventZBAT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_essmodule_essmodule_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrequencyRegulation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_essmodule_essmodule_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeakShaving); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_essmodule_essmodule_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SocLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_essmodule_essmodule_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SOCManagement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_essmodule_essmodule_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoltageRegulation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_essmodule_essmodule_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoltageDroop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_essmodule_essmodule_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoltagePI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_essmodule_essmodule_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapacityFirming); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_essmodule_essmodule_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ESSFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_essmodule_essmodule_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ESSPointStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_essmodule_essmodule_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ESSEventAndStatusZGEN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_essmodule_essmodule_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ESSEventZGEN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_essmodule_essmodule_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ESSEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_essmodule_essmodule_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ESSEventProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_essmodule_essmodule_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ESSReading); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_essmodule_essmodule_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ESSReadingProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_essmodule_essmodule_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EssStatusZBAT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_essmodule_essmodule_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ESSStatusZGEN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_essmodule_essmodule_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ESSStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_essmodule_essmodule_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ESSStatusProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_essmodule_essmodule_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ESSPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_essmodule_essmodule_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ESSCSG); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_essmodule_essmodule_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ESSControlScheduleFSCH); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_essmodule_essmodule_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EssControlFSCC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_essmodule_essmodule_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ESSControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_essmodule_essmodule_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ESSControlProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_essmodule_essmodule_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_essmodule_essmodule_proto_goTypes,
		DependencyIndexes: file_essmodule_essmodule_proto_depIdxs,
		MessageInfos:      file_essmodule_essmodule_proto_msgTypes,
	}.Build()
	File_essmodule_essmodule_proto = out.File
	file_essmodule_essmodule_proto_rawDesc = nil
	file_essmodule_essmodule_proto_goTypes = nil
	file_essmodule_essmodule_proto_depIdxs = nil
}
