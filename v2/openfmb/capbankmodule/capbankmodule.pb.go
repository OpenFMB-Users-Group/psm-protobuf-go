// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.22.3
// source: capbankmodule/capbankmodule.proto

// OpenFMB Operational Model (61850-CIM) (v2.1.0).eapx
// Monday, April 3, 2023 7:34:35 PM UTC

package capbankmodule

import (
	_ "gitlab.com/openfmb/psm/ops/protobuf/go-openfmb-ops-protobuf/v2/openfmb"
	commonmodule "gitlab.com/openfmb/psm/ops/protobuf/go-openfmb-ops-protobuf/v2/openfmb/commonmodule"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Cap bank compensator system
type CapBankSystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ConductingEquipment *commonmodule.ConductingEquipment `protobuf:"bytes,1,opt,name=conductingEquipment,proto3" json:"conductingEquipment,omitempty"`
}

func (x *CapBankSystem) Reset() {
	*x = CapBankSystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capbankmodule_capbankmodule_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapBankSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapBankSystem) ProtoMessage() {}

func (x *CapBankSystem) ProtoReflect() protoreflect.Message {
	mi := &file_capbankmodule_capbankmodule_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapBankSystem.ProtoReflect.Descriptor instead.
func (*CapBankSystem) Descriptor() ([]byte, []int) {
	return file_capbankmodule_capbankmodule_proto_rawDescGZIP(), []int{0}
}

func (x *CapBankSystem) GetConductingEquipment() *commonmodule.ConductingEquipment {
	if x != nil {
		return x.ConductingEquipment
	}
	return nil
}

// LN: Power cap bank Â Name: YPSH
type CapBankControlYPSH struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current limit (boolean field)
	AmpLmt *commonmodule.PhaseSPC `protobuf:"bytes,1,opt,name=AmpLmt,proto3" json:"AmpLmt,omitempty"`
	// High current  threshold
	AmpThdHi *commonmodule.PhaseAPC `protobuf:"bytes,2,opt,name=AmpThdHi,proto3" json:"AmpThdHi,omitempty"`
	// Low current threshold
	AmpThdLo *commonmodule.PhaseAPC `protobuf:"bytes,3,opt,name=AmpThdLo,proto3" json:"AmpThdLo,omitempty"`
	// Control mode auto
	CtlModeAuto *commonmodule.ControlSPC `protobuf:"bytes,4,opt,name=CtlModeAuto,proto3" json:"CtlModeAuto,omitempty"`
	// Control mode override
	CtlModeOvrRd *commonmodule.ControlSPC `protobuf:"bytes,5,opt,name=CtlModeOvrRd,proto3" json:"CtlModeOvrRd,omitempty"`
	// Control mode remote
	CtlModeRem *commonmodule.ControlSPC `protobuf:"bytes,6,opt,name=CtlModeRem,proto3" json:"CtlModeRem,omitempty"`
	// The control characteristics for power flow operation
	DirMode *commonmodule.Optional_DirectionModeKind `protobuf:"bytes,7,opt,name=DirMode,proto3" json:"DirMode,omitempty"`
	// (controllable) Position of the switch of power shunt.
	Pos *commonmodule.PhaseSPC `protobuf:"bytes,8,opt,name=Pos,proto3" json:"Pos,omitempty"`
	// Temperature limit (boolean field)
	TempLmt *commonmodule.ControlSPC `protobuf:"bytes,9,opt,name=TempLmt,proto3" json:"TempLmt,omitempty"`
	// High temperature threshold
	TempThdHi *commonmodule.ControlAPC `protobuf:"bytes,10,opt,name=TempThdHi,proto3" json:"TempThdHi,omitempty"`
	// Low temperature threshold
	TempThdLo *commonmodule.ControlAPC `protobuf:"bytes,11,opt,name=TempThdLo,proto3" json:"TempThdLo,omitempty"`
	// VAr limit (boolean field)
	VArLmt *commonmodule.PhaseSPC `protobuf:"bytes,12,opt,name=VArLmt,proto3" json:"VArLmt,omitempty"`
	// High VAr threshold
	VArThdHi *commonmodule.PhaseAPC `protobuf:"bytes,13,opt,name=VArThdHi,proto3" json:"VArThdHi,omitempty"`
	// Low VAr threshold
	VArThdLo *commonmodule.PhaseAPC `protobuf:"bytes,14,opt,name=VArThdLo,proto3" json:"VArThdLo,omitempty"`
	// Voltage limit (boolean field)
	VolLmt *commonmodule.PhaseSPC `protobuf:"bytes,15,opt,name=VolLmt,proto3" json:"VolLmt,omitempty"`
	// High voltage threshold
	VolThdHi *commonmodule.PhaseAPC `protobuf:"bytes,16,opt,name=VolThdHi,proto3" json:"VolThdHi,omitempty"`
	// Low voltage threshold
	VolThdLo *commonmodule.PhaseAPC `protobuf:"bytes,17,opt,name=VolThdLo,proto3" json:"VolThdLo,omitempty"`
}

func (x *CapBankControlYPSH) Reset() {
	*x = CapBankControlYPSH{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capbankmodule_capbankmodule_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapBankControlYPSH) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapBankControlYPSH) ProtoMessage() {}

func (x *CapBankControlYPSH) ProtoReflect() protoreflect.Message {
	mi := &file_capbankmodule_capbankmodule_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapBankControlYPSH.ProtoReflect.Descriptor instead.
func (*CapBankControlYPSH) Descriptor() ([]byte, []int) {
	return file_capbankmodule_capbankmodule_proto_rawDescGZIP(), []int{1}
}

func (x *CapBankControlYPSH) GetAmpLmt() *commonmodule.PhaseSPC {
	if x != nil {
		return x.AmpLmt
	}
	return nil
}

func (x *CapBankControlYPSH) GetAmpThdHi() *commonmodule.PhaseAPC {
	if x != nil {
		return x.AmpThdHi
	}
	return nil
}

func (x *CapBankControlYPSH) GetAmpThdLo() *commonmodule.PhaseAPC {
	if x != nil {
		return x.AmpThdLo
	}
	return nil
}

func (x *CapBankControlYPSH) GetCtlModeAuto() *commonmodule.ControlSPC {
	if x != nil {
		return x.CtlModeAuto
	}
	return nil
}

func (x *CapBankControlYPSH) GetCtlModeOvrRd() *commonmodule.ControlSPC {
	if x != nil {
		return x.CtlModeOvrRd
	}
	return nil
}

func (x *CapBankControlYPSH) GetCtlModeRem() *commonmodule.ControlSPC {
	if x != nil {
		return x.CtlModeRem
	}
	return nil
}

func (x *CapBankControlYPSH) GetDirMode() *commonmodule.Optional_DirectionModeKind {
	if x != nil {
		return x.DirMode
	}
	return nil
}

func (x *CapBankControlYPSH) GetPos() *commonmodule.PhaseSPC {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *CapBankControlYPSH) GetTempLmt() *commonmodule.ControlSPC {
	if x != nil {
		return x.TempLmt
	}
	return nil
}

func (x *CapBankControlYPSH) GetTempThdHi() *commonmodule.ControlAPC {
	if x != nil {
		return x.TempThdHi
	}
	return nil
}

func (x *CapBankControlYPSH) GetTempThdLo() *commonmodule.ControlAPC {
	if x != nil {
		return x.TempThdLo
	}
	return nil
}

func (x *CapBankControlYPSH) GetVArLmt() *commonmodule.PhaseSPC {
	if x != nil {
		return x.VArLmt
	}
	return nil
}

func (x *CapBankControlYPSH) GetVArThdHi() *commonmodule.PhaseAPC {
	if x != nil {
		return x.VArThdHi
	}
	return nil
}

func (x *CapBankControlYPSH) GetVArThdLo() *commonmodule.PhaseAPC {
	if x != nil {
		return x.VArThdLo
	}
	return nil
}

func (x *CapBankControlYPSH) GetVolLmt() *commonmodule.PhaseSPC {
	if x != nil {
		return x.VolLmt
	}
	return nil
}

func (x *CapBankControlYPSH) GetVolThdHi() *commonmodule.PhaseAPC {
	if x != nil {
		return x.VolThdHi
	}
	return nil
}

func (x *CapBankControlYPSH) GetVolThdLo() *commonmodule.PhaseAPC {
	if x != nil {
		return x.VolThdLo
	}
	return nil
}

// Point definition (Point)
type CapBankPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Regulator control
	Control *CapBankControlYPSH `protobuf:"bytes,1,opt,name=control,proto3" json:"control,omitempty"`
	// Start time
	StartTime *commonmodule.Timestamp `protobuf:"bytes,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
}

func (x *CapBankPoint) Reset() {
	*x = CapBankPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capbankmodule_capbankmodule_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapBankPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapBankPoint) ProtoMessage() {}

func (x *CapBankPoint) ProtoReflect() protoreflect.Message {
	mi := &file_capbankmodule_capbankmodule_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapBankPoint.ProtoReflect.Descriptor instead.
func (*CapBankPoint) Descriptor() ([]byte, []int) {
	return file_capbankmodule_capbankmodule_proto_rawDescGZIP(), []int{2}
}

func (x *CapBankPoint) GetControl() *CapBankControlYPSH {
	if x != nil {
		return x.Control
	}
	return nil
}

func (x *CapBankPoint) GetStartTime() *commonmodule.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

// Curve shape setting (FC=SP) (CSG_SP)
type CapBankCSG struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The array with the points specifying a curve shape.
	CrvPts []*CapBankPoint `protobuf:"bytes,1,rep,name=crvPts,proto3" json:"crvPts,omitempty"`
}

func (x *CapBankCSG) Reset() {
	*x = CapBankCSG{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capbankmodule_capbankmodule_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapBankCSG) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapBankCSG) ProtoMessage() {}

func (x *CapBankCSG) ProtoReflect() protoreflect.Message {
	mi := &file_capbankmodule_capbankmodule_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapBankCSG.ProtoReflect.Descriptor instead.
func (*CapBankCSG) Descriptor() ([]byte, []int) {
	return file_capbankmodule_capbankmodule_proto_rawDescGZIP(), []int{3}
}

func (x *CapBankCSG) GetCrvPts() []*CapBankPoint {
	if x != nil {
		return x.CrvPts
	}
	return nil
}

// OpenFMB specialization for control schedule using:  LN: ScheduleÂ Â Â Name: FSCH
type CapBankControlScheduleFSCH struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Control value in CSG type
	ValCSG *CapBankCSG `protobuf:"bytes,1,opt,name=ValCSG,proto3" json:"ValCSG,omitempty"`
}

func (x *CapBankControlScheduleFSCH) Reset() {
	*x = CapBankControlScheduleFSCH{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capbankmodule_capbankmodule_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapBankControlScheduleFSCH) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapBankControlScheduleFSCH) ProtoMessage() {}

func (x *CapBankControlScheduleFSCH) ProtoReflect() protoreflect.Message {
	mi := &file_capbankmodule_capbankmodule_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapBankControlScheduleFSCH.ProtoReflect.Descriptor instead.
func (*CapBankControlScheduleFSCH) Descriptor() ([]byte, []int) {
	return file_capbankmodule_capbankmodule_proto_rawDescGZIP(), []int{4}
}

func (x *CapBankControlScheduleFSCH) GetValCSG() *CapBankCSG {
	if x != nil {
		return x.ValCSG
	}
	return nil
}

// Using 61850 FSCC for cap bank control
type CapBankControlFSCC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ControlFSCC *commonmodule.ControlFSCC `protobuf:"bytes,1,opt,name=controlFSCC,proto3" json:"controlFSCC,omitempty"`
	// MISSING DOCUMENTATION!!!
	CapBankControlScheduleFSCH *CapBankControlScheduleFSCH `protobuf:"bytes,2,opt,name=capBankControlScheduleFSCH,proto3" json:"capBankControlScheduleFSCH,omitempty"`
}

func (x *CapBankControlFSCC) Reset() {
	*x = CapBankControlFSCC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capbankmodule_capbankmodule_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapBankControlFSCC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapBankControlFSCC) ProtoMessage() {}

func (x *CapBankControlFSCC) ProtoReflect() protoreflect.Message {
	mi := &file_capbankmodule_capbankmodule_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapBankControlFSCC.ProtoReflect.Descriptor instead.
func (*CapBankControlFSCC) Descriptor() ([]byte, []int) {
	return file_capbankmodule_capbankmodule_proto_rawDescGZIP(), []int{5}
}

func (x *CapBankControlFSCC) GetControlFSCC() *commonmodule.ControlFSCC {
	if x != nil {
		return x.ControlFSCC
	}
	return nil
}

func (x *CapBankControlFSCC) GetCapBankControlScheduleFSCH() *CapBankControlScheduleFSCH {
	if x != nil {
		return x.CapBankControlScheduleFSCH
	}
	return nil
}

// CapBank control
type CapBankControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ControlValue *commonmodule.ControlValue `protobuf:"bytes,1,opt,name=controlValue,proto3" json:"controlValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	Check *commonmodule.CheckConditions `protobuf:"bytes,2,opt,name=check,proto3" json:"check,omitempty"`
	// MISSING DOCUMENTATION!!!
	CapBankControlFSCC *CapBankControlFSCC `protobuf:"bytes,3,opt,name=capBankControlFSCC,proto3" json:"capBankControlFSCC,omitempty"`
}

func (x *CapBankControl) Reset() {
	*x = CapBankControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capbankmodule_capbankmodule_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapBankControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapBankControl) ProtoMessage() {}

func (x *CapBankControl) ProtoReflect() protoreflect.Message {
	mi := &file_capbankmodule_capbankmodule_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapBankControl.ProtoReflect.Descriptor instead.
func (*CapBankControl) Descriptor() ([]byte, []int) {
	return file_capbankmodule_capbankmodule_proto_rawDescGZIP(), []int{6}
}

func (x *CapBankControl) GetControlValue() *commonmodule.ControlValue {
	if x != nil {
		return x.ControlValue
	}
	return nil
}

func (x *CapBankControl) GetCheck() *commonmodule.CheckConditions {
	if x != nil {
		return x.Check
	}
	return nil
}

func (x *CapBankControl) GetCapBankControlFSCC() *CapBankControlFSCC {
	if x != nil {
		return x.CapBankControlFSCC
	}
	return nil
}

// Cap bank control profile.  Instructs an end device (or an end device group) to perform a
// specified action.
type CapBankControlProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ControlMessageInfo *commonmodule.ControlMessageInfo `protobuf:"bytes,1,opt,name=controlMessageInfo,proto3" json:"controlMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	CapBankControl *CapBankControl `protobuf:"bytes,2,opt,name=capBankControl,proto3" json:"capBankControl,omitempty"`
	// MISSING DOCUMENTATION!!!
	CapBankSystem *CapBankSystem `protobuf:"bytes,3,opt,name=capBankSystem,proto3" json:"capBankSystem,omitempty"`
}

func (x *CapBankControlProfile) Reset() {
	*x = CapBankControlProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capbankmodule_capbankmodule_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapBankControlProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapBankControlProfile) ProtoMessage() {}

func (x *CapBankControlProfile) ProtoReflect() protoreflect.Message {
	mi := &file_capbankmodule_capbankmodule_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapBankControlProfile.ProtoReflect.Descriptor instead.
func (*CapBankControlProfile) Descriptor() ([]byte, []int) {
	return file_capbankmodule_capbankmodule_proto_rawDescGZIP(), []int{7}
}

func (x *CapBankControlProfile) GetControlMessageInfo() *commonmodule.ControlMessageInfo {
	if x != nil {
		return x.ControlMessageInfo
	}
	return nil
}

func (x *CapBankControlProfile) GetCapBankControl() *CapBankControl {
	if x != nil {
		return x.CapBankControl
	}
	return nil
}

func (x *CapBankControlProfile) GetCapBankSystem() *CapBankSystem {
	if x != nil {
		return x.CapBankSystem
	}
	return nil
}

// OpenFMB specialization for cap bank discrete control:
type CapBankDiscreteControlYPSH struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	LogicalNodeForControl *commonmodule.LogicalNodeForControl `protobuf:"bytes,1,opt,name=logicalNodeForControl,proto3" json:"logicalNodeForControl,omitempty"`
	// MISSING DOCUMENTATION!!!
	Control *CapBankControlYPSH `protobuf:"bytes,2,opt,name=control,proto3" json:"control,omitempty"`
}

func (x *CapBankDiscreteControlYPSH) Reset() {
	*x = CapBankDiscreteControlYPSH{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capbankmodule_capbankmodule_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapBankDiscreteControlYPSH) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapBankDiscreteControlYPSH) ProtoMessage() {}

func (x *CapBankDiscreteControlYPSH) ProtoReflect() protoreflect.Message {
	mi := &file_capbankmodule_capbankmodule_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapBankDiscreteControlYPSH.ProtoReflect.Descriptor instead.
func (*CapBankDiscreteControlYPSH) Descriptor() ([]byte, []int) {
	return file_capbankmodule_capbankmodule_proto_rawDescGZIP(), []int{8}
}

func (x *CapBankDiscreteControlYPSH) GetLogicalNodeForControl() *commonmodule.LogicalNodeForControl {
	if x != nil {
		return x.LogicalNodeForControl
	}
	return nil
}

func (x *CapBankDiscreteControlYPSH) GetControl() *CapBankControlYPSH {
	if x != nil {
		return x.Control
	}
	return nil
}

// Cap bank discrete control
type CapBankDiscreteControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ControlValue *commonmodule.ControlValue `protobuf:"bytes,1,opt,name=controlValue,proto3" json:"controlValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	Check *commonmodule.CheckConditions `protobuf:"bytes,2,opt,name=check,proto3" json:"check,omitempty"`
	// MISSING DOCUMENTATION!!!
	CapBankDiscreteControlYPSH *CapBankDiscreteControlYPSH `protobuf:"bytes,3,opt,name=capBankDiscreteControlYPSH,proto3" json:"capBankDiscreteControlYPSH,omitempty"`
}

func (x *CapBankDiscreteControl) Reset() {
	*x = CapBankDiscreteControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capbankmodule_capbankmodule_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapBankDiscreteControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapBankDiscreteControl) ProtoMessage() {}

func (x *CapBankDiscreteControl) ProtoReflect() protoreflect.Message {
	mi := &file_capbankmodule_capbankmodule_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapBankDiscreteControl.ProtoReflect.Descriptor instead.
func (*CapBankDiscreteControl) Descriptor() ([]byte, []int) {
	return file_capbankmodule_capbankmodule_proto_rawDescGZIP(), []int{9}
}

func (x *CapBankDiscreteControl) GetControlValue() *commonmodule.ControlValue {
	if x != nil {
		return x.ControlValue
	}
	return nil
}

func (x *CapBankDiscreteControl) GetCheck() *commonmodule.CheckConditions {
	if x != nil {
		return x.Check
	}
	return nil
}

func (x *CapBankDiscreteControl) GetCapBankDiscreteControlYPSH() *CapBankDiscreteControlYPSH {
	if x != nil {
		return x.CapBankDiscreteControlYPSH
	}
	return nil
}

// Cap bank discrete control profile.  Instructs an end device (or an end device group) to perform
// a specified action.
type CapBankDiscreteControlProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ControlMessageInfo *commonmodule.ControlMessageInfo `protobuf:"bytes,1,opt,name=controlMessageInfo,proto3" json:"controlMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	CapBankControl *CapBankDiscreteControl `protobuf:"bytes,2,opt,name=capBankControl,proto3" json:"capBankControl,omitempty"`
	// MISSING DOCUMENTATION!!!
	CapBankSystem *CapBankSystem `protobuf:"bytes,3,opt,name=capBankSystem,proto3" json:"capBankSystem,omitempty"`
}

func (x *CapBankDiscreteControlProfile) Reset() {
	*x = CapBankDiscreteControlProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capbankmodule_capbankmodule_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapBankDiscreteControlProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapBankDiscreteControlProfile) ProtoMessage() {}

func (x *CapBankDiscreteControlProfile) ProtoReflect() protoreflect.Message {
	mi := &file_capbankmodule_capbankmodule_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapBankDiscreteControlProfile.ProtoReflect.Descriptor instead.
func (*CapBankDiscreteControlProfile) Descriptor() ([]byte, []int) {
	return file_capbankmodule_capbankmodule_proto_rawDescGZIP(), []int{10}
}

func (x *CapBankDiscreteControlProfile) GetControlMessageInfo() *commonmodule.ControlMessageInfo {
	if x != nil {
		return x.ControlMessageInfo
	}
	return nil
}

func (x *CapBankDiscreteControlProfile) GetCapBankControl() *CapBankDiscreteControl {
	if x != nil {
		return x.CapBankControl
	}
	return nil
}

func (x *CapBankDiscreteControlProfile) GetCapBankSystem() *CapBankSystem {
	if x != nil {
		return x.CapBankSystem
	}
	return nil
}

// LN: Power cap bank Â Name: YPSH
type CapBankEventAndStatusYPSH struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	LogicalNodeForEventAndStatus *commonmodule.LogicalNodeForEventAndStatus `protobuf:"bytes,1,opt,name=logicalNodeForEventAndStatus,proto3" json:"logicalNodeForEventAndStatus,omitempty"`
	// True if current limit (high, low, or both) are set
	AmpLmt *commonmodule.PhaseSPS `protobuf:"bytes,2,opt,name=AmpLmt,proto3" json:"AmpLmt,omitempty"`
	// Control mode
	CtlMode *commonmodule.Optional_ControlModeKind `protobuf:"bytes,3,opt,name=CtlMode,proto3" json:"CtlMode,omitempty"`
	// True if power flow is reversed
	DirRev *commonmodule.PhaseSPS `protobuf:"bytes,4,opt,name=DirRev,proto3" json:"DirRev,omitempty"`
	// MISSING DOCUMENTATION!!!
	DynamicTest *commonmodule.ENS_DynamicTestKind `protobuf:"bytes,5,opt,name=DynamicTest,proto3" json:"DynamicTest,omitempty"`
	// (controllable) Position of the switch of power shunt.
	Pos *commonmodule.PhaseDPS `protobuf:"bytes,6,opt,name=Pos,proto3" json:"Pos,omitempty"`
	// True if temperature limit (high, low, or both) are set
	TempLmt *commonmodule.PhaseSPS `protobuf:"bytes,7,opt,name=TempLmt,proto3" json:"TempLmt,omitempty"`
	// True if VAr limit (high, low, or both) are set
	VArLmt *commonmodule.PhaseSPS `protobuf:"bytes,8,opt,name=VArLmt,proto3" json:"VArLmt,omitempty"`
	// True if voltage limit (high, low, or both) are set
	VolLmt *commonmodule.PhaseSPS `protobuf:"bytes,9,opt,name=VolLmt,proto3" json:"VolLmt,omitempty"`
}

func (x *CapBankEventAndStatusYPSH) Reset() {
	*x = CapBankEventAndStatusYPSH{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capbankmodule_capbankmodule_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapBankEventAndStatusYPSH) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapBankEventAndStatusYPSH) ProtoMessage() {}

func (x *CapBankEventAndStatusYPSH) ProtoReflect() protoreflect.Message {
	mi := &file_capbankmodule_capbankmodule_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapBankEventAndStatusYPSH.ProtoReflect.Descriptor instead.
func (*CapBankEventAndStatusYPSH) Descriptor() ([]byte, []int) {
	return file_capbankmodule_capbankmodule_proto_rawDescGZIP(), []int{11}
}

func (x *CapBankEventAndStatusYPSH) GetLogicalNodeForEventAndStatus() *commonmodule.LogicalNodeForEventAndStatus {
	if x != nil {
		return x.LogicalNodeForEventAndStatus
	}
	return nil
}

func (x *CapBankEventAndStatusYPSH) GetAmpLmt() *commonmodule.PhaseSPS {
	if x != nil {
		return x.AmpLmt
	}
	return nil
}

func (x *CapBankEventAndStatusYPSH) GetCtlMode() *commonmodule.Optional_ControlModeKind {
	if x != nil {
		return x.CtlMode
	}
	return nil
}

func (x *CapBankEventAndStatusYPSH) GetDirRev() *commonmodule.PhaseSPS {
	if x != nil {
		return x.DirRev
	}
	return nil
}

func (x *CapBankEventAndStatusYPSH) GetDynamicTest() *commonmodule.ENS_DynamicTestKind {
	if x != nil {
		return x.DynamicTest
	}
	return nil
}

func (x *CapBankEventAndStatusYPSH) GetPos() *commonmodule.PhaseDPS {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *CapBankEventAndStatusYPSH) GetTempLmt() *commonmodule.PhaseSPS {
	if x != nil {
		return x.TempLmt
	}
	return nil
}

func (x *CapBankEventAndStatusYPSH) GetVArLmt() *commonmodule.PhaseSPS {
	if x != nil {
		return x.VArLmt
	}
	return nil
}

func (x *CapBankEventAndStatusYPSH) GetVolLmt() *commonmodule.PhaseSPS {
	if x != nil {
		return x.VolLmt
	}
	return nil
}

// Cap bank event
type CapBankEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	EventValue *commonmodule.EventValue `protobuf:"bytes,1,opt,name=eventValue,proto3" json:"eventValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	CapBankEventAndStatusYPSH *CapBankEventAndStatusYPSH `protobuf:"bytes,2,opt,name=CapBankEventAndStatusYPSH,proto3" json:"CapBankEventAndStatusYPSH,omitempty"`
}

func (x *CapBankEvent) Reset() {
	*x = CapBankEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capbankmodule_capbankmodule_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapBankEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapBankEvent) ProtoMessage() {}

func (x *CapBankEvent) ProtoReflect() protoreflect.Message {
	mi := &file_capbankmodule_capbankmodule_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapBankEvent.ProtoReflect.Descriptor instead.
func (*CapBankEvent) Descriptor() ([]byte, []int) {
	return file_capbankmodule_capbankmodule_proto_rawDescGZIP(), []int{12}
}

func (x *CapBankEvent) GetEventValue() *commonmodule.EventValue {
	if x != nil {
		return x.EventValue
	}
	return nil
}

func (x *CapBankEvent) GetCapBankEventAndStatusYPSH() *CapBankEventAndStatusYPSH {
	if x != nil {
		return x.CapBankEventAndStatusYPSH
	}
	return nil
}

// Cap bank status profile
type CapBankEventProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	EventMessageInfo *commonmodule.EventMessageInfo `protobuf:"bytes,1,opt,name=eventMessageInfo,proto3" json:"eventMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	CapBankEvent *CapBankEvent `protobuf:"bytes,2,opt,name=capBankEvent,proto3" json:"capBankEvent,omitempty"`
	// MISSING DOCUMENTATION!!!
	CapBankSystem *CapBankSystem `protobuf:"bytes,3,opt,name=capBankSystem,proto3" json:"capBankSystem,omitempty"`
}

func (x *CapBankEventProfile) Reset() {
	*x = CapBankEventProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capbankmodule_capbankmodule_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapBankEventProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapBankEventProfile) ProtoMessage() {}

func (x *CapBankEventProfile) ProtoReflect() protoreflect.Message {
	mi := &file_capbankmodule_capbankmodule_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapBankEventProfile.ProtoReflect.Descriptor instead.
func (*CapBankEventProfile) Descriptor() ([]byte, []int) {
	return file_capbankmodule_capbankmodule_proto_rawDescGZIP(), []int{13}
}

func (x *CapBankEventProfile) GetEventMessageInfo() *commonmodule.EventMessageInfo {
	if x != nil {
		return x.EventMessageInfo
	}
	return nil
}

func (x *CapBankEventProfile) GetCapBankEvent() *CapBankEvent {
	if x != nil {
		return x.CapBankEvent
	}
	return nil
}

func (x *CapBankEventProfile) GetCapBankSystem() *CapBankSystem {
	if x != nil {
		return x.CapBankSystem
	}
	return nil
}

// Cap bank reading value
type CapBankReading struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ConductingEquipmentTerminalReading *commonmodule.ConductingEquipmentTerminalReading `protobuf:"bytes,1,opt,name=conductingEquipmentTerminalReading,proto3" json:"conductingEquipmentTerminalReading,omitempty"`
	// MISSING DOCUMENTATION!!!
	PhaseMMTN *commonmodule.PhaseMMTN `protobuf:"bytes,2,opt,name=phaseMMTN,proto3" json:"phaseMMTN,omitempty"`
	// MISSING DOCUMENTATION!!!
	ReadingMMTR *commonmodule.ReadingMMTR `protobuf:"bytes,3,opt,name=readingMMTR,proto3" json:"readingMMTR,omitempty"`
	// MISSING DOCUMENTATION!!!
	ReadingMMXU *commonmodule.ReadingMMXU `protobuf:"bytes,4,opt,name=readingMMXU,proto3" json:"readingMMXU,omitempty"`
	// MISSING DOCUMENTATION!!!
	SecondaryReadingMMXU *commonmodule.ReadingMMXU `protobuf:"bytes,5,opt,name=secondaryReadingMMXU,proto3" json:"secondaryReadingMMXU,omitempty"`
}

func (x *CapBankReading) Reset() {
	*x = CapBankReading{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capbankmodule_capbankmodule_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapBankReading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapBankReading) ProtoMessage() {}

func (x *CapBankReading) ProtoReflect() protoreflect.Message {
	mi := &file_capbankmodule_capbankmodule_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapBankReading.ProtoReflect.Descriptor instead.
func (*CapBankReading) Descriptor() ([]byte, []int) {
	return file_capbankmodule_capbankmodule_proto_rawDescGZIP(), []int{14}
}

func (x *CapBankReading) GetConductingEquipmentTerminalReading() *commonmodule.ConductingEquipmentTerminalReading {
	if x != nil {
		return x.ConductingEquipmentTerminalReading
	}
	return nil
}

func (x *CapBankReading) GetPhaseMMTN() *commonmodule.PhaseMMTN {
	if x != nil {
		return x.PhaseMMTN
	}
	return nil
}

func (x *CapBankReading) GetReadingMMTR() *commonmodule.ReadingMMTR {
	if x != nil {
		return x.ReadingMMTR
	}
	return nil
}

func (x *CapBankReading) GetReadingMMXU() *commonmodule.ReadingMMXU {
	if x != nil {
		return x.ReadingMMXU
	}
	return nil
}

func (x *CapBankReading) GetSecondaryReadingMMXU() *commonmodule.ReadingMMXU {
	if x != nil {
		return x.SecondaryReadingMMXU
	}
	return nil
}

// Cap bank reading profile
type CapBankReadingProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ReadingMessageInfo *commonmodule.ReadingMessageInfo `protobuf:"bytes,1,opt,name=readingMessageInfo,proto3" json:"readingMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	CapBankReading *CapBankReading `protobuf:"bytes,2,opt,name=capBankReading,proto3" json:"capBankReading,omitempty"`
	// MISSING DOCUMENTATION!!!
	CapBankSystem *CapBankSystem `protobuf:"bytes,3,opt,name=capBankSystem,proto3" json:"capBankSystem,omitempty"`
}

func (x *CapBankReadingProfile) Reset() {
	*x = CapBankReadingProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capbankmodule_capbankmodule_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapBankReadingProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapBankReadingProfile) ProtoMessage() {}

func (x *CapBankReadingProfile) ProtoReflect() protoreflect.Message {
	mi := &file_capbankmodule_capbankmodule_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapBankReadingProfile.ProtoReflect.Descriptor instead.
func (*CapBankReadingProfile) Descriptor() ([]byte, []int) {
	return file_capbankmodule_capbankmodule_proto_rawDescGZIP(), []int{15}
}

func (x *CapBankReadingProfile) GetReadingMessageInfo() *commonmodule.ReadingMessageInfo {
	if x != nil {
		return x.ReadingMessageInfo
	}
	return nil
}

func (x *CapBankReadingProfile) GetCapBankReading() *CapBankReading {
	if x != nil {
		return x.CapBankReading
	}
	return nil
}

func (x *CapBankReadingProfile) GetCapBankSystem() *CapBankSystem {
	if x != nil {
		return x.CapBankSystem
	}
	return nil
}

// Cap bank status
type CapBankStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	StatusValue *commonmodule.StatusValue `protobuf:"bytes,1,opt,name=statusValue,proto3" json:"statusValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	CapBankEventAndStatusYPSH *CapBankEventAndStatusYPSH `protobuf:"bytes,2,opt,name=capBankEventAndStatusYPSH,proto3" json:"capBankEventAndStatusYPSH,omitempty"`
}

func (x *CapBankStatus) Reset() {
	*x = CapBankStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capbankmodule_capbankmodule_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapBankStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapBankStatus) ProtoMessage() {}

func (x *CapBankStatus) ProtoReflect() protoreflect.Message {
	mi := &file_capbankmodule_capbankmodule_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapBankStatus.ProtoReflect.Descriptor instead.
func (*CapBankStatus) Descriptor() ([]byte, []int) {
	return file_capbankmodule_capbankmodule_proto_rawDescGZIP(), []int{16}
}

func (x *CapBankStatus) GetStatusValue() *commonmodule.StatusValue {
	if x != nil {
		return x.StatusValue
	}
	return nil
}

func (x *CapBankStatus) GetCapBankEventAndStatusYPSH() *CapBankEventAndStatusYPSH {
	if x != nil {
		return x.CapBankEventAndStatusYPSH
	}
	return nil
}

// Cap bank status profile
type CapBankStatusProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	StatusMessageInfo *commonmodule.StatusMessageInfo `protobuf:"bytes,1,opt,name=statusMessageInfo,proto3" json:"statusMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	CapBankStatus *CapBankStatus `protobuf:"bytes,2,opt,name=capBankStatus,proto3" json:"capBankStatus,omitempty"`
	// MISSING DOCUMENTATION!!!
	CapBankSystem *CapBankSystem `protobuf:"bytes,3,opt,name=capBankSystem,proto3" json:"capBankSystem,omitempty"`
}

func (x *CapBankStatusProfile) Reset() {
	*x = CapBankStatusProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capbankmodule_capbankmodule_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapBankStatusProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapBankStatusProfile) ProtoMessage() {}

func (x *CapBankStatusProfile) ProtoReflect() protoreflect.Message {
	mi := &file_capbankmodule_capbankmodule_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapBankStatusProfile.ProtoReflect.Descriptor instead.
func (*CapBankStatusProfile) Descriptor() ([]byte, []int) {
	return file_capbankmodule_capbankmodule_proto_rawDescGZIP(), []int{17}
}

func (x *CapBankStatusProfile) GetStatusMessageInfo() *commonmodule.StatusMessageInfo {
	if x != nil {
		return x.StatusMessageInfo
	}
	return nil
}

func (x *CapBankStatusProfile) GetCapBankStatus() *CapBankStatus {
	if x != nil {
		return x.CapBankStatus
	}
	return nil
}

func (x *CapBankStatusProfile) GetCapBankSystem() *CapBankSystem {
	if x != nil {
		return x.CapBankSystem
	}
	return nil
}

var File_capbankmodule_capbankmodule_proto protoreflect.FileDescriptor

var file_capbankmodule_capbankmodule_proto_rawDesc = []byte{
	0x0a, 0x21, 0x63, 0x61, 0x70, 0x62, 0x61, 0x6e, 0x6b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f,
	0x63, 0x61, 0x70, 0x62, 0x61, 0x6e, 0x6b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x63, 0x61, 0x70, 0x62, 0x61, 0x6e, 0x6b, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x1a, 0x09, 0x75, 0x6d, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6a,
	0x0a, 0x0d, 0x43, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x59, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6e,
	0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xa2, 0x07, 0x0a, 0x12, 0x43,
	0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x59, 0x50, 0x53,
	0x48, 0x12, 0x2e, 0x0a, 0x06, 0x41, 0x6d, 0x70, 0x4c, 0x6d, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53, 0x50, 0x43, 0x52, 0x06, 0x41, 0x6d, 0x70, 0x4c, 0x6d,
	0x74, 0x12, 0x32, 0x0a, 0x08, 0x41, 0x6d, 0x70, 0x54, 0x68, 0x64, 0x48, 0x69, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x41, 0x50, 0x43, 0x52, 0x08, 0x41, 0x6d, 0x70,
	0x54, 0x68, 0x64, 0x48, 0x69, 0x12, 0x32, 0x0a, 0x08, 0x41, 0x6d, 0x70, 0x54, 0x68, 0x64, 0x4c,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x41, 0x50, 0x43, 0x52,
	0x08, 0x41, 0x6d, 0x70, 0x54, 0x68, 0x64, 0x4c, 0x6f, 0x12, 0x3a, 0x0a, 0x0b, 0x43, 0x74, 0x6c,
	0x4d, 0x6f, 0x64, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x50, 0x43, 0x52, 0x0b, 0x43, 0x74, 0x6c, 0x4d, 0x6f, 0x64,
	0x65, 0x41, 0x75, 0x74, 0x6f, 0x12, 0x3c, 0x0a, 0x0c, 0x43, 0x74, 0x6c, 0x4d, 0x6f, 0x64, 0x65,
	0x4f, 0x76, 0x72, 0x52, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x53, 0x50, 0x43, 0x52, 0x0c, 0x43, 0x74, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x4f, 0x76,
	0x72, 0x52, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x43, 0x74, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x50,
	0x43, 0x52, 0x0a, 0x43, 0x74, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x6d, 0x12, 0x42, 0x0a,
	0x07, 0x44, 0x69, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x07, 0x44, 0x69, 0x72, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x28, 0x0a, 0x03, 0x50, 0x6f, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x53, 0x50, 0x43, 0x52, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x54,
	0x65, 0x6d, 0x70, 0x4c, 0x6d, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x53, 0x50, 0x43, 0x52, 0x07, 0x54, 0x65, 0x6d, 0x70, 0x4c, 0x6d, 0x74, 0x12,
	0x36, 0x0a, 0x09, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x68, 0x64, 0x48, 0x69, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x50, 0x43, 0x52, 0x09, 0x54, 0x65,
	0x6d, 0x70, 0x54, 0x68, 0x64, 0x48, 0x69, 0x12, 0x36, 0x0a, 0x09, 0x54, 0x65, 0x6d, 0x70, 0x54,
	0x68, 0x64, 0x4c, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x41, 0x50, 0x43, 0x52, 0x09, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x68, 0x64, 0x4c, 0x6f, 0x12,
	0x2e, 0x0a, 0x06, 0x56, 0x41, 0x72, 0x4c, 0x6d, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x53, 0x50, 0x43, 0x52, 0x06, 0x56, 0x41, 0x72, 0x4c, 0x6d, 0x74, 0x12,
	0x32, 0x0a, 0x08, 0x56, 0x41, 0x72, 0x54, 0x68, 0x64, 0x48, 0x69, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x41, 0x50, 0x43, 0x52, 0x08, 0x56, 0x41, 0x72, 0x54, 0x68,
	0x64, 0x48, 0x69, 0x12, 0x32, 0x0a, 0x08, 0x56, 0x41, 0x72, 0x54, 0x68, 0x64, 0x4c, 0x6f, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x41, 0x50, 0x43, 0x52, 0x08, 0x56,
	0x41, 0x72, 0x54, 0x68, 0x64, 0x4c, 0x6f, 0x12, 0x2e, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x4c, 0x6d,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53, 0x50, 0x43, 0x52,
	0x06, 0x56, 0x6f, 0x6c, 0x4c, 0x6d, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x56, 0x6f, 0x6c, 0x54, 0x68,
	0x64, 0x48, 0x69, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x41, 0x50,
	0x43, 0x52, 0x08, 0x56, 0x6f, 0x6c, 0x54, 0x68, 0x64, 0x48, 0x69, 0x12, 0x32, 0x0a, 0x08, 0x56,
	0x6f, 0x6c, 0x54, 0x68, 0x64, 0x4c, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x41, 0x50, 0x43, 0x52, 0x08, 0x56, 0x6f, 0x6c, 0x54, 0x68, 0x64, 0x4c, 0x6f, 0x22,
	0x8c, 0x01, 0x0a, 0x0c, 0x43, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x3b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x61, 0x70, 0x62, 0x61, 0x6e, 0x6b, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x43, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x59, 0x50, 0x53, 0x48, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x3f, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90,
	0xb5, 0x18, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4b,
	0x0a, 0x0a, 0x43, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x53, 0x47, 0x12, 0x3d, 0x0a, 0x06,
	0x63, 0x72, 0x76, 0x50, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x61, 0x70, 0x62, 0x61, 0x6e, 0x6b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x70,
	0x42, 0x61, 0x6e, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90,
	0xb5, 0x18, 0x01, 0x52, 0x06, 0x63, 0x72, 0x76, 0x50, 0x74, 0x73, 0x22, 0x59, 0x0a, 0x1a, 0x43,
	0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x53, 0x43, 0x48, 0x12, 0x3b, 0x0a, 0x06, 0x56, 0x61, 0x6c,
	0x43, 0x53, 0x47, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x61, 0x70, 0x62,
	0x61, 0x6e, 0x6b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x70, 0x42, 0x61, 0x6e,
	0x6b, 0x43, 0x53, 0x47, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x06,
	0x56, 0x61, 0x6c, 0x43, 0x53, 0x47, 0x22, 0xc2, 0x01, 0x0a, 0x12, 0x43, 0x61, 0x70, 0x42, 0x61,
	0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x53, 0x43, 0x43, 0x12, 0x41, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x53, 0x43, 0x43, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x53, 0x43, 0x43, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x53, 0x43, 0x43,
	0x12, 0x69, 0x0a, 0x1a, 0x63, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x53, 0x43, 0x48, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x61, 0x70, 0x62, 0x61, 0x6e, 0x6b, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x53, 0x43, 0x48, 0x52,
	0x1a, 0x63, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x53, 0x43, 0x48, 0x22, 0xde, 0x01, 0x0a, 0x0e,
	0x43, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x44,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x51, 0x0a, 0x12, 0x63, 0x61, 0x70,
	0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x53, 0x43, 0x43, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x61, 0x70, 0x62, 0x61, 0x6e, 0x6b, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x46, 0x53, 0x43, 0x43, 0x52, 0x12, 0x63, 0x61, 0x70, 0x42, 0x61, 0x6e,
	0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x53, 0x43, 0x43, 0x22, 0x94, 0x02, 0x0a,
	0x15, 0x43, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x56, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4f,
	0x0a, 0x0e, 0x63, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x61, 0x70, 0x62, 0x61, 0x6e, 0x6b,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52,
	0x0e, 0x63, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12,
	0x4c, 0x0a, 0x0d, 0x63, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x61, 0x70, 0x62, 0x61, 0x6e, 0x6b,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0d,
	0x63, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x3a, 0x04, 0xc0,
	0xf3, 0x18, 0x01, 0x22, 0xba, 0x01, 0x0a, 0x1a, 0x43, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x44,
	0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x59, 0x50,
	0x53, 0x48, 0x12, 0x5f, 0x0a, 0x15, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64,
	0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x15, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x12, 0x3b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x61, 0x70, 0x62, 0x61, 0x6e, 0x6b, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x59, 0x50, 0x53, 0x48, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x22, 0xfe, 0x01, 0x0a, 0x16, 0x43, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x44, 0x69, 0x73, 0x63,
	0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x44, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x33, 0x0a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x69, 0x0a, 0x1a, 0x63, 0x61, 0x70, 0x42, 0x61, 0x6e,
	0x6b, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x59, 0x50, 0x53, 0x48, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x61, 0x70,
	0x62, 0x61, 0x6e, 0x6b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x70, 0x42, 0x61,
	0x6e, 0x6b, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x59, 0x50, 0x53, 0x48, 0x52, 0x1a, 0x63, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x44, 0x69,
	0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x59, 0x50, 0x53,
	0x48, 0x22, 0xa4, 0x02, 0x0a, 0x1d, 0x43, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x44, 0x69, 0x73,
	0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x56, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x57, 0x0a, 0x0e, 0x63,
	0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x61, 0x70, 0x62, 0x61, 0x6e, 0x6b, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x44, 0x69, 0x73, 0x63, 0x72,
	0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01,
	0x90, 0xb5, 0x18, 0x01, 0x52, 0x0e, 0x63, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x61,
	0x70, 0x62, 0x61, 0x6e, 0x6b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x70, 0x42,
	0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90,
	0xb5, 0x18, 0x01, 0x52, 0x0d, 0x63, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x3a, 0x04, 0xc0, 0xf3, 0x18, 0x01, 0x22, 0xb4, 0x04, 0x0a, 0x19, 0x43, 0x61, 0x70,
	0x42, 0x61, 0x6e, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x59, 0x50, 0x53, 0x48, 0x12, 0x74, 0x0a, 0x1c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x1c,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x06,
	0x41, 0x6d, 0x70, 0x4c, 0x6d, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x53, 0x50, 0x53, 0x52, 0x06, 0x41, 0x6d, 0x70, 0x4c, 0x6d, 0x74, 0x12, 0x40, 0x0a, 0x07,
	0x43, 0x74, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64,
	0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x07, 0x43, 0x74, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2e,
	0x0a, 0x06, 0x44, 0x69, 0x72, 0x52, 0x65, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x53, 0x50, 0x53, 0x52, 0x06, 0x44, 0x69, 0x72, 0x52, 0x65, 0x76, 0x12, 0x43,
	0x0a, 0x0b, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x45, 0x4e, 0x53, 0x5f, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x65,
	0x73, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0b, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54,
	0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x50, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x44, 0x50, 0x53, 0x52, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x30, 0x0a,
	0x07, 0x54, 0x65, 0x6d, 0x70, 0x4c, 0x6d, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x53, 0x50, 0x53, 0x52, 0x07, 0x54, 0x65, 0x6d, 0x70, 0x4c, 0x6d, 0x74, 0x12,
	0x2e, 0x0a, 0x06, 0x56, 0x41, 0x72, 0x4c, 0x6d, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x53, 0x50, 0x53, 0x52, 0x06, 0x56, 0x41, 0x72, 0x4c, 0x6d, 0x74, 0x12,
	0x2e, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x4c, 0x6d, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x53, 0x50, 0x53, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x4c, 0x6d, 0x74, 0x22,
	0xb6, 0x01, 0x0a, 0x0c, 0x43, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x3e, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x66, 0x0a, 0x19, 0x43, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x59, 0x50, 0x53, 0x48, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x61, 0x70, 0x62, 0x61, 0x6e, 0x6b, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x59, 0x50, 0x53, 0x48, 0x52, 0x19, 0x43,
	0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x59, 0x50, 0x53, 0x48, 0x22, 0x86, 0x02, 0x0a, 0x13, 0x43, 0x61, 0x70,
	0x42, 0x61, 0x6e, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x50, 0x0a, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01,
	0x52, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x49, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x61, 0x70, 0x62, 0x61,
	0x6e, 0x6b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52,
	0x0c, 0x63, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4c, 0x0a,
	0x0d, 0x63, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x61, 0x70, 0x62, 0x61, 0x6e, 0x6b, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0d, 0x63, 0x61,
	0x70, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x3a, 0x04, 0xc0, 0xf3, 0x18,
	0x01, 0x22, 0x99, 0x03, 0x0a, 0x0e, 0x43, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x86, 0x01, 0x0a, 0x22, 0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x22, 0x63, 0x6f, 0x6e, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a,
	0x09, 0x70, 0x68, 0x61, 0x73, 0x65, 0x4d, 0x4d, 0x54, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x4d, 0x4d, 0x54, 0x4e, 0x52, 0x09, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x4d, 0x4d, 0x54, 0x4e, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d,
	0x4d, 0x54, 0x52, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x4d, 0x4d, 0x54, 0x52, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x54,
	0x52, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x58, 0x55,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x58,
	0x55, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x58, 0x55, 0x12, 0x4d,
	0x0a, 0x14, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x4d, 0x4d, 0x58, 0x55, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x58, 0x55, 0x52, 0x14, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x58, 0x55, 0x22, 0x94, 0x02,
	0x0a, 0x15, 0x43, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x56, 0x0a, 0x12, 0x72, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x12, 0x72, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x4f, 0x0a, 0x0e, 0x63, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x61, 0x70, 0x62, 0x61, 0x6e,
	0x6b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x52,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01,
	0x52, 0x0e, 0x63, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x61, 0x70, 0x62, 0x61, 0x6e,
	0x6b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52,
	0x0d, 0x63, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x3a, 0x04,
	0xc0, 0xf3, 0x18, 0x01, 0x22, 0xba, 0x01, 0x0a, 0x0d, 0x43, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x66, 0x0a, 0x19, 0x63, 0x61, 0x70,
	0x42, 0x61, 0x6e, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x59, 0x50, 0x53, 0x48, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63,
	0x61, 0x70, 0x62, 0x61, 0x6e, 0x6b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x70,
	0x42, 0x61, 0x6e, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x59, 0x50, 0x53, 0x48, 0x52, 0x19, 0x63, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x59, 0x50, 0x53,
	0x48, 0x22, 0x8d, 0x02, 0x0a, 0x14, 0x43, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x53, 0x0a, 0x11, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x11, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x4c, 0x0a, 0x0d, 0x63, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x61, 0x70, 0x62, 0x61, 0x6e, 0x6b,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0d,
	0x63, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4c, 0x0a,
	0x0d, 0x63, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x61, 0x70, 0x62, 0x61, 0x6e, 0x6b, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x70, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0d, 0x63, 0x61,
	0x70, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x3a, 0x04, 0xc0, 0xf3, 0x18,
	0x01, 0x42, 0x87, 0x01, 0x0a, 0x15, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2e, 0x63, 0x61,
	0x70, 0x62, 0x61, 0x6e, 0x6b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x01, 0x5a, 0x54, 0x67,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d,
	0x62, 0x2f, 0x70, 0x73, 0x6d, 0x2f, 0x6f, 0x70, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x67, 0x6f, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2d, 0x6f, 0x70,
	0x73, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x70,
	0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2f, 0x63, 0x61, 0x70, 0x62, 0x61, 0x6e, 0x6b, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0xaa, 0x02, 0x15, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2e, 0x63, 0x61,
	0x70, 0x62, 0x61, 0x6e, 0x6b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_capbankmodule_capbankmodule_proto_rawDescOnce sync.Once
	file_capbankmodule_capbankmodule_proto_rawDescData = file_capbankmodule_capbankmodule_proto_rawDesc
)

func file_capbankmodule_capbankmodule_proto_rawDescGZIP() []byte {
	file_capbankmodule_capbankmodule_proto_rawDescOnce.Do(func() {
		file_capbankmodule_capbankmodule_proto_rawDescData = protoimpl.X.CompressGZIP(file_capbankmodule_capbankmodule_proto_rawDescData)
	})
	return file_capbankmodule_capbankmodule_proto_rawDescData
}

var file_capbankmodule_capbankmodule_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_capbankmodule_capbankmodule_proto_goTypes = []interface{}{
	(*CapBankSystem)(nil),                                   // 0: capbankmodule.CapBankSystem
	(*CapBankControlYPSH)(nil),                              // 1: capbankmodule.CapBankControlYPSH
	(*CapBankPoint)(nil),                                    // 2: capbankmodule.CapBankPoint
	(*CapBankCSG)(nil),                                      // 3: capbankmodule.CapBankCSG
	(*CapBankControlScheduleFSCH)(nil),                      // 4: capbankmodule.CapBankControlScheduleFSCH
	(*CapBankControlFSCC)(nil),                              // 5: capbankmodule.CapBankControlFSCC
	(*CapBankControl)(nil),                                  // 6: capbankmodule.CapBankControl
	(*CapBankControlProfile)(nil),                           // 7: capbankmodule.CapBankControlProfile
	(*CapBankDiscreteControlYPSH)(nil),                      // 8: capbankmodule.CapBankDiscreteControlYPSH
	(*CapBankDiscreteControl)(nil),                          // 9: capbankmodule.CapBankDiscreteControl
	(*CapBankDiscreteControlProfile)(nil),                   // 10: capbankmodule.CapBankDiscreteControlProfile
	(*CapBankEventAndStatusYPSH)(nil),                       // 11: capbankmodule.CapBankEventAndStatusYPSH
	(*CapBankEvent)(nil),                                    // 12: capbankmodule.CapBankEvent
	(*CapBankEventProfile)(nil),                             // 13: capbankmodule.CapBankEventProfile
	(*CapBankReading)(nil),                                  // 14: capbankmodule.CapBankReading
	(*CapBankReadingProfile)(nil),                           // 15: capbankmodule.CapBankReadingProfile
	(*CapBankStatus)(nil),                                   // 16: capbankmodule.CapBankStatus
	(*CapBankStatusProfile)(nil),                            // 17: capbankmodule.CapBankStatusProfile
	(*commonmodule.ConductingEquipment)(nil),                // 18: commonmodule.ConductingEquipment
	(*commonmodule.PhaseSPC)(nil),                           // 19: commonmodule.PhaseSPC
	(*commonmodule.PhaseAPC)(nil),                           // 20: commonmodule.PhaseAPC
	(*commonmodule.ControlSPC)(nil),                         // 21: commonmodule.ControlSPC
	(*commonmodule.Optional_DirectionModeKind)(nil),         // 22: commonmodule.Optional_DirectionModeKind
	(*commonmodule.ControlAPC)(nil),                         // 23: commonmodule.ControlAPC
	(*commonmodule.Timestamp)(nil),                          // 24: commonmodule.Timestamp
	(*commonmodule.ControlFSCC)(nil),                        // 25: commonmodule.ControlFSCC
	(*commonmodule.ControlValue)(nil),                       // 26: commonmodule.ControlValue
	(*commonmodule.CheckConditions)(nil),                    // 27: commonmodule.CheckConditions
	(*commonmodule.ControlMessageInfo)(nil),                 // 28: commonmodule.ControlMessageInfo
	(*commonmodule.LogicalNodeForControl)(nil),              // 29: commonmodule.LogicalNodeForControl
	(*commonmodule.LogicalNodeForEventAndStatus)(nil),       // 30: commonmodule.LogicalNodeForEventAndStatus
	(*commonmodule.PhaseSPS)(nil),                           // 31: commonmodule.PhaseSPS
	(*commonmodule.Optional_ControlModeKind)(nil),           // 32: commonmodule.Optional_ControlModeKind
	(*commonmodule.ENS_DynamicTestKind)(nil),                // 33: commonmodule.ENS_DynamicTestKind
	(*commonmodule.PhaseDPS)(nil),                           // 34: commonmodule.PhaseDPS
	(*commonmodule.EventValue)(nil),                         // 35: commonmodule.EventValue
	(*commonmodule.EventMessageInfo)(nil),                   // 36: commonmodule.EventMessageInfo
	(*commonmodule.ConductingEquipmentTerminalReading)(nil), // 37: commonmodule.ConductingEquipmentTerminalReading
	(*commonmodule.PhaseMMTN)(nil),                          // 38: commonmodule.PhaseMMTN
	(*commonmodule.ReadingMMTR)(nil),                        // 39: commonmodule.ReadingMMTR
	(*commonmodule.ReadingMMXU)(nil),                        // 40: commonmodule.ReadingMMXU
	(*commonmodule.ReadingMessageInfo)(nil),                 // 41: commonmodule.ReadingMessageInfo
	(*commonmodule.StatusValue)(nil),                        // 42: commonmodule.StatusValue
	(*commonmodule.StatusMessageInfo)(nil),                  // 43: commonmodule.StatusMessageInfo
}
var file_capbankmodule_capbankmodule_proto_depIdxs = []int32{
	18, // 0: capbankmodule.CapBankSystem.conductingEquipment:type_name -> commonmodule.ConductingEquipment
	19, // 1: capbankmodule.CapBankControlYPSH.AmpLmt:type_name -> commonmodule.PhaseSPC
	20, // 2: capbankmodule.CapBankControlYPSH.AmpThdHi:type_name -> commonmodule.PhaseAPC
	20, // 3: capbankmodule.CapBankControlYPSH.AmpThdLo:type_name -> commonmodule.PhaseAPC
	21, // 4: capbankmodule.CapBankControlYPSH.CtlModeAuto:type_name -> commonmodule.ControlSPC
	21, // 5: capbankmodule.CapBankControlYPSH.CtlModeOvrRd:type_name -> commonmodule.ControlSPC
	21, // 6: capbankmodule.CapBankControlYPSH.CtlModeRem:type_name -> commonmodule.ControlSPC
	22, // 7: capbankmodule.CapBankControlYPSH.DirMode:type_name -> commonmodule.Optional_DirectionModeKind
	19, // 8: capbankmodule.CapBankControlYPSH.Pos:type_name -> commonmodule.PhaseSPC
	21, // 9: capbankmodule.CapBankControlYPSH.TempLmt:type_name -> commonmodule.ControlSPC
	23, // 10: capbankmodule.CapBankControlYPSH.TempThdHi:type_name -> commonmodule.ControlAPC
	23, // 11: capbankmodule.CapBankControlYPSH.TempThdLo:type_name -> commonmodule.ControlAPC
	19, // 12: capbankmodule.CapBankControlYPSH.VArLmt:type_name -> commonmodule.PhaseSPC
	20, // 13: capbankmodule.CapBankControlYPSH.VArThdHi:type_name -> commonmodule.PhaseAPC
	20, // 14: capbankmodule.CapBankControlYPSH.VArThdLo:type_name -> commonmodule.PhaseAPC
	19, // 15: capbankmodule.CapBankControlYPSH.VolLmt:type_name -> commonmodule.PhaseSPC
	20, // 16: capbankmodule.CapBankControlYPSH.VolThdHi:type_name -> commonmodule.PhaseAPC
	20, // 17: capbankmodule.CapBankControlYPSH.VolThdLo:type_name -> commonmodule.PhaseAPC
	1,  // 18: capbankmodule.CapBankPoint.control:type_name -> capbankmodule.CapBankControlYPSH
	24, // 19: capbankmodule.CapBankPoint.startTime:type_name -> commonmodule.Timestamp
	2,  // 20: capbankmodule.CapBankCSG.crvPts:type_name -> capbankmodule.CapBankPoint
	3,  // 21: capbankmodule.CapBankControlScheduleFSCH.ValCSG:type_name -> capbankmodule.CapBankCSG
	25, // 22: capbankmodule.CapBankControlFSCC.controlFSCC:type_name -> commonmodule.ControlFSCC
	4,  // 23: capbankmodule.CapBankControlFSCC.capBankControlScheduleFSCH:type_name -> capbankmodule.CapBankControlScheduleFSCH
	26, // 24: capbankmodule.CapBankControl.controlValue:type_name -> commonmodule.ControlValue
	27, // 25: capbankmodule.CapBankControl.check:type_name -> commonmodule.CheckConditions
	5,  // 26: capbankmodule.CapBankControl.capBankControlFSCC:type_name -> capbankmodule.CapBankControlFSCC
	28, // 27: capbankmodule.CapBankControlProfile.controlMessageInfo:type_name -> commonmodule.ControlMessageInfo
	6,  // 28: capbankmodule.CapBankControlProfile.capBankControl:type_name -> capbankmodule.CapBankControl
	0,  // 29: capbankmodule.CapBankControlProfile.capBankSystem:type_name -> capbankmodule.CapBankSystem
	29, // 30: capbankmodule.CapBankDiscreteControlYPSH.logicalNodeForControl:type_name -> commonmodule.LogicalNodeForControl
	1,  // 31: capbankmodule.CapBankDiscreteControlYPSH.control:type_name -> capbankmodule.CapBankControlYPSH
	26, // 32: capbankmodule.CapBankDiscreteControl.controlValue:type_name -> commonmodule.ControlValue
	27, // 33: capbankmodule.CapBankDiscreteControl.check:type_name -> commonmodule.CheckConditions
	8,  // 34: capbankmodule.CapBankDiscreteControl.capBankDiscreteControlYPSH:type_name -> capbankmodule.CapBankDiscreteControlYPSH
	28, // 35: capbankmodule.CapBankDiscreteControlProfile.controlMessageInfo:type_name -> commonmodule.ControlMessageInfo
	9,  // 36: capbankmodule.CapBankDiscreteControlProfile.capBankControl:type_name -> capbankmodule.CapBankDiscreteControl
	0,  // 37: capbankmodule.CapBankDiscreteControlProfile.capBankSystem:type_name -> capbankmodule.CapBankSystem
	30, // 38: capbankmodule.CapBankEventAndStatusYPSH.logicalNodeForEventAndStatus:type_name -> commonmodule.LogicalNodeForEventAndStatus
	31, // 39: capbankmodule.CapBankEventAndStatusYPSH.AmpLmt:type_name -> commonmodule.PhaseSPS
	32, // 40: capbankmodule.CapBankEventAndStatusYPSH.CtlMode:type_name -> commonmodule.Optional_ControlModeKind
	31, // 41: capbankmodule.CapBankEventAndStatusYPSH.DirRev:type_name -> commonmodule.PhaseSPS
	33, // 42: capbankmodule.CapBankEventAndStatusYPSH.DynamicTest:type_name -> commonmodule.ENS_DynamicTestKind
	34, // 43: capbankmodule.CapBankEventAndStatusYPSH.Pos:type_name -> commonmodule.PhaseDPS
	31, // 44: capbankmodule.CapBankEventAndStatusYPSH.TempLmt:type_name -> commonmodule.PhaseSPS
	31, // 45: capbankmodule.CapBankEventAndStatusYPSH.VArLmt:type_name -> commonmodule.PhaseSPS
	31, // 46: capbankmodule.CapBankEventAndStatusYPSH.VolLmt:type_name -> commonmodule.PhaseSPS
	35, // 47: capbankmodule.CapBankEvent.eventValue:type_name -> commonmodule.EventValue
	11, // 48: capbankmodule.CapBankEvent.CapBankEventAndStatusYPSH:type_name -> capbankmodule.CapBankEventAndStatusYPSH
	36, // 49: capbankmodule.CapBankEventProfile.eventMessageInfo:type_name -> commonmodule.EventMessageInfo
	12, // 50: capbankmodule.CapBankEventProfile.capBankEvent:type_name -> capbankmodule.CapBankEvent
	0,  // 51: capbankmodule.CapBankEventProfile.capBankSystem:type_name -> capbankmodule.CapBankSystem
	37, // 52: capbankmodule.CapBankReading.conductingEquipmentTerminalReading:type_name -> commonmodule.ConductingEquipmentTerminalReading
	38, // 53: capbankmodule.CapBankReading.phaseMMTN:type_name -> commonmodule.PhaseMMTN
	39, // 54: capbankmodule.CapBankReading.readingMMTR:type_name -> commonmodule.ReadingMMTR
	40, // 55: capbankmodule.CapBankReading.readingMMXU:type_name -> commonmodule.ReadingMMXU
	40, // 56: capbankmodule.CapBankReading.secondaryReadingMMXU:type_name -> commonmodule.ReadingMMXU
	41, // 57: capbankmodule.CapBankReadingProfile.readingMessageInfo:type_name -> commonmodule.ReadingMessageInfo
	14, // 58: capbankmodule.CapBankReadingProfile.capBankReading:type_name -> capbankmodule.CapBankReading
	0,  // 59: capbankmodule.CapBankReadingProfile.capBankSystem:type_name -> capbankmodule.CapBankSystem
	42, // 60: capbankmodule.CapBankStatus.statusValue:type_name -> commonmodule.StatusValue
	11, // 61: capbankmodule.CapBankStatus.capBankEventAndStatusYPSH:type_name -> capbankmodule.CapBankEventAndStatusYPSH
	43, // 62: capbankmodule.CapBankStatusProfile.statusMessageInfo:type_name -> commonmodule.StatusMessageInfo
	16, // 63: capbankmodule.CapBankStatusProfile.capBankStatus:type_name -> capbankmodule.CapBankStatus
	0,  // 64: capbankmodule.CapBankStatusProfile.capBankSystem:type_name -> capbankmodule.CapBankSystem
	65, // [65:65] is the sub-list for method output_type
	65, // [65:65] is the sub-list for method input_type
	65, // [65:65] is the sub-list for extension type_name
	65, // [65:65] is the sub-list for extension extendee
	0,  // [0:65] is the sub-list for field type_name
}

func init() { file_capbankmodule_capbankmodule_proto_init() }
func file_capbankmodule_capbankmodule_proto_init() {
	if File_capbankmodule_capbankmodule_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_capbankmodule_capbankmodule_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapBankSystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capbankmodule_capbankmodule_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapBankControlYPSH); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capbankmodule_capbankmodule_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapBankPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capbankmodule_capbankmodule_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapBankCSG); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capbankmodule_capbankmodule_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapBankControlScheduleFSCH); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capbankmodule_capbankmodule_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapBankControlFSCC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capbankmodule_capbankmodule_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapBankControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capbankmodule_capbankmodule_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapBankControlProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capbankmodule_capbankmodule_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapBankDiscreteControlYPSH); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capbankmodule_capbankmodule_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapBankDiscreteControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capbankmodule_capbankmodule_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapBankDiscreteControlProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capbankmodule_capbankmodule_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapBankEventAndStatusYPSH); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capbankmodule_capbankmodule_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapBankEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capbankmodule_capbankmodule_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapBankEventProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capbankmodule_capbankmodule_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapBankReading); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capbankmodule_capbankmodule_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapBankReadingProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capbankmodule_capbankmodule_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapBankStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capbankmodule_capbankmodule_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapBankStatusProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_capbankmodule_capbankmodule_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_capbankmodule_capbankmodule_proto_goTypes,
		DependencyIndexes: file_capbankmodule_capbankmodule_proto_depIdxs,
		MessageInfos:      file_capbankmodule_capbankmodule_proto_msgTypes,
	}.Build()
	File_capbankmodule_capbankmodule_proto = out.File
	file_capbankmodule_capbankmodule_proto_rawDesc = nil
	file_capbankmodule_capbankmodule_proto_goTypes = nil
	file_capbankmodule_capbankmodule_proto_depIdxs = nil
}
