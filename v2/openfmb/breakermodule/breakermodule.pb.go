// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.22.2
// source: breakermodule/breakermodule.proto

// OpenFMB Operational Model (61850-CIM) (v2.1.0).eapx
// Monday, April 3, 2023 7:34:35 PM UTC

package breakermodule

import (
	_ "gitlab.com/openfmb/psm/ops/protobuf/go-openfmb-ops-protobuf/v2/openfmb"
	commonmodule "gitlab.com/openfmb/psm/ops/protobuf/go-openfmb-ops-protobuf/v2/openfmb/commonmodule"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Reclose enabled
type BreakerDiscreteControlXCBR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	DiscreteControlXCBR *commonmodule.DiscreteControlXCBR `protobuf:"bytes,1,opt,name=discreteControlXCBR,proto3" json:"discreteControlXCBR,omitempty"`
}

func (x *BreakerDiscreteControlXCBR) Reset() {
	*x = BreakerDiscreteControlXCBR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breakermodule_breakermodule_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BreakerDiscreteControlXCBR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreakerDiscreteControlXCBR) ProtoMessage() {}

func (x *BreakerDiscreteControlXCBR) ProtoReflect() protoreflect.Message {
	mi := &file_breakermodule_breakermodule_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreakerDiscreteControlXCBR.ProtoReflect.Descriptor instead.
func (*BreakerDiscreteControlXCBR) Descriptor() ([]byte, []int) {
	return file_breakermodule_breakermodule_proto_rawDescGZIP(), []int{0}
}

func (x *BreakerDiscreteControlXCBR) GetDiscreteControlXCBR() *commonmodule.DiscreteControlXCBR {
	if x != nil {
		return x.DiscreteControlXCBR
	}
	return nil
}

// Breaker discrete control class
type BreakerDiscreteControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ControlValue *commonmodule.ControlValue `protobuf:"bytes,1,opt,name=controlValue,proto3" json:"controlValue,omitempty"`
	// IEC61850 enhanced control parameters.
	Check *commonmodule.CheckConditions `protobuf:"bytes,2,opt,name=check,proto3" json:"check,omitempty"`
	// MISSING DOCUMENTATION!!!
	BreakerDiscreteControlXCBR *BreakerDiscreteControlXCBR `protobuf:"bytes,3,opt,name=breakerDiscreteControlXCBR,proto3" json:"breakerDiscreteControlXCBR,omitempty"`
}

func (x *BreakerDiscreteControl) Reset() {
	*x = BreakerDiscreteControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breakermodule_breakermodule_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BreakerDiscreteControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreakerDiscreteControl) ProtoMessage() {}

func (x *BreakerDiscreteControl) ProtoReflect() protoreflect.Message {
	mi := &file_breakermodule_breakermodule_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreakerDiscreteControl.ProtoReflect.Descriptor instead.
func (*BreakerDiscreteControl) Descriptor() ([]byte, []int) {
	return file_breakermodule_breakermodule_proto_rawDescGZIP(), []int{1}
}

func (x *BreakerDiscreteControl) GetControlValue() *commonmodule.ControlValue {
	if x != nil {
		return x.ControlValue
	}
	return nil
}

func (x *BreakerDiscreteControl) GetCheck() *commonmodule.CheckConditions {
	if x != nil {
		return x.Check
	}
	return nil
}

func (x *BreakerDiscreteControl) GetBreakerDiscreteControlXCBR() *BreakerDiscreteControlXCBR {
	if x != nil {
		return x.BreakerDiscreteControlXCBR
	}
	return nil
}

// A mechanical switching device capable of making, carrying, and breaking currents under normal
// circuit conditions and also making, carrying for a specified time, and breaking currents under
// specified abnormal circuit conditions e.g.  those of short circuit.
type Breaker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ConductingEquipment *commonmodule.ConductingEquipment `protobuf:"bytes,1,opt,name=conductingEquipment,proto3" json:"conductingEquipment,omitempty"`
}

func (x *Breaker) Reset() {
	*x = Breaker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breakermodule_breakermodule_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Breaker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Breaker) ProtoMessage() {}

func (x *Breaker) ProtoReflect() protoreflect.Message {
	mi := &file_breakermodule_breakermodule_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Breaker.ProtoReflect.Descriptor instead.
func (*Breaker) Descriptor() ([]byte, []int) {
	return file_breakermodule_breakermodule_proto_rawDescGZIP(), []int{2}
}

func (x *Breaker) GetConductingEquipment() *commonmodule.ConductingEquipment {
	if x != nil {
		return x.ConductingEquipment
	}
	return nil
}

// Instructs an end device (or an end device group) to perform a specified action.
type BreakerDiscreteControlProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ControlMessageInfo *commonmodule.ControlMessageInfo `protobuf:"bytes,1,opt,name=controlMessageInfo,proto3" json:"controlMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	Breaker *Breaker `protobuf:"bytes,2,opt,name=breaker,proto3" json:"breaker,omitempty"`
	// MISSING DOCUMENTATION!!!
	BreakerDiscreteControl *BreakerDiscreteControl `protobuf:"bytes,3,opt,name=breakerDiscreteControl,proto3" json:"breakerDiscreteControl,omitempty"`
}

func (x *BreakerDiscreteControlProfile) Reset() {
	*x = BreakerDiscreteControlProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breakermodule_breakermodule_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BreakerDiscreteControlProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreakerDiscreteControlProfile) ProtoMessage() {}

func (x *BreakerDiscreteControlProfile) ProtoReflect() protoreflect.Message {
	mi := &file_breakermodule_breakermodule_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreakerDiscreteControlProfile.ProtoReflect.Descriptor instead.
func (*BreakerDiscreteControlProfile) Descriptor() ([]byte, []int) {
	return file_breakermodule_breakermodule_proto_rawDescGZIP(), []int{3}
}

func (x *BreakerDiscreteControlProfile) GetControlMessageInfo() *commonmodule.ControlMessageInfo {
	if x != nil {
		return x.ControlMessageInfo
	}
	return nil
}

func (x *BreakerDiscreteControlProfile) GetBreaker() *Breaker {
	if x != nil {
		return x.Breaker
	}
	return nil
}

func (x *BreakerDiscreteControlProfile) GetBreakerDiscreteControl() *BreakerDiscreteControl {
	if x != nil {
		return x.BreakerDiscreteControl
	}
	return nil
}

// Breaker event class
type BreakerEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	EventValue *commonmodule.EventValue `protobuf:"bytes,1,opt,name=eventValue,proto3" json:"eventValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	StatusAndEventXCBR *commonmodule.StatusAndEventXCBR `protobuf:"bytes,2,opt,name=statusAndEventXCBR,proto3" json:"statusAndEventXCBR,omitempty"`
}

func (x *BreakerEvent) Reset() {
	*x = BreakerEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breakermodule_breakermodule_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BreakerEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreakerEvent) ProtoMessage() {}

func (x *BreakerEvent) ProtoReflect() protoreflect.Message {
	mi := &file_breakermodule_breakermodule_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreakerEvent.ProtoReflect.Descriptor instead.
func (*BreakerEvent) Descriptor() ([]byte, []int) {
	return file_breakermodule_breakermodule_proto_rawDescGZIP(), []int{4}
}

func (x *BreakerEvent) GetEventValue() *commonmodule.EventValue {
	if x != nil {
		return x.EventValue
	}
	return nil
}

func (x *BreakerEvent) GetStatusAndEventXCBR() *commonmodule.StatusAndEventXCBR {
	if x != nil {
		return x.StatusAndEventXCBR
	}
	return nil
}

// Breaker event profile
type BreakerEventProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	EventMessageInfo *commonmodule.EventMessageInfo `protobuf:"bytes,1,opt,name=eventMessageInfo,proto3" json:"eventMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	Breaker *Breaker `protobuf:"bytes,2,opt,name=breaker,proto3" json:"breaker,omitempty"`
	// MISSING DOCUMENTATION!!!
	BreakerEvent *BreakerEvent `protobuf:"bytes,3,opt,name=breakerEvent,proto3" json:"breakerEvent,omitempty"`
}

func (x *BreakerEventProfile) Reset() {
	*x = BreakerEventProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breakermodule_breakermodule_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BreakerEventProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreakerEventProfile) ProtoMessage() {}

func (x *BreakerEventProfile) ProtoReflect() protoreflect.Message {
	mi := &file_breakermodule_breakermodule_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreakerEventProfile.ProtoReflect.Descriptor instead.
func (*BreakerEventProfile) Descriptor() ([]byte, []int) {
	return file_breakermodule_breakermodule_proto_rawDescGZIP(), []int{5}
}

func (x *BreakerEventProfile) GetEventMessageInfo() *commonmodule.EventMessageInfo {
	if x != nil {
		return x.EventMessageInfo
	}
	return nil
}

func (x *BreakerEventProfile) GetBreaker() *Breaker {
	if x != nil {
		return x.Breaker
	}
	return nil
}

func (x *BreakerEventProfile) GetBreakerEvent() *BreakerEvent {
	if x != nil {
		return x.BreakerEvent
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type BreakerReading struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ConductingEquipmentTerminalReading *commonmodule.ConductingEquipmentTerminalReading `protobuf:"bytes,1,opt,name=conductingEquipmentTerminalReading,proto3" json:"conductingEquipmentTerminalReading,omitempty"`
	// MISSING DOCUMENTATION!!!
	DiffReadingMMXU *commonmodule.ReadingMMXU `protobuf:"bytes,2,opt,name=diffReadingMMXU,proto3" json:"diffReadingMMXU,omitempty"`
	// MISSING DOCUMENTATION!!!
	PhaseMMTN *commonmodule.PhaseMMTN `protobuf:"bytes,3,opt,name=phaseMMTN,proto3" json:"phaseMMTN,omitempty"`
	// MISSING DOCUMENTATION!!!
	ReadingMMTR *commonmodule.ReadingMMTR `protobuf:"bytes,4,opt,name=readingMMTR,proto3" json:"readingMMTR,omitempty"`
	// MISSING DOCUMENTATION!!!
	ReadingMMXU *commonmodule.ReadingMMXU `protobuf:"bytes,5,opt,name=readingMMXU,proto3" json:"readingMMXU,omitempty"`
}

func (x *BreakerReading) Reset() {
	*x = BreakerReading{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breakermodule_breakermodule_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BreakerReading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreakerReading) ProtoMessage() {}

func (x *BreakerReading) ProtoReflect() protoreflect.Message {
	mi := &file_breakermodule_breakermodule_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreakerReading.ProtoReflect.Descriptor instead.
func (*BreakerReading) Descriptor() ([]byte, []int) {
	return file_breakermodule_breakermodule_proto_rawDescGZIP(), []int{6}
}

func (x *BreakerReading) GetConductingEquipmentTerminalReading() *commonmodule.ConductingEquipmentTerminalReading {
	if x != nil {
		return x.ConductingEquipmentTerminalReading
	}
	return nil
}

func (x *BreakerReading) GetDiffReadingMMXU() *commonmodule.ReadingMMXU {
	if x != nil {
		return x.DiffReadingMMXU
	}
	return nil
}

func (x *BreakerReading) GetPhaseMMTN() *commonmodule.PhaseMMTN {
	if x != nil {
		return x.PhaseMMTN
	}
	return nil
}

func (x *BreakerReading) GetReadingMMTR() *commonmodule.ReadingMMTR {
	if x != nil {
		return x.ReadingMMTR
	}
	return nil
}

func (x *BreakerReading) GetReadingMMXU() *commonmodule.ReadingMMXU {
	if x != nil {
		return x.ReadingMMXU
	}
	return nil
}

// Breaker reading profile
type BreakerReadingProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ReadingMessageInfo *commonmodule.ReadingMessageInfo `protobuf:"bytes,1,opt,name=readingMessageInfo,proto3" json:"readingMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	Breaker *Breaker `protobuf:"bytes,2,opt,name=breaker,proto3" json:"breaker,omitempty"`
	// MISSING DOCUMENTATION!!!
	BreakerReading []*BreakerReading `protobuf:"bytes,3,rep,name=breakerReading,proto3" json:"breakerReading,omitempty"`
}

func (x *BreakerReadingProfile) Reset() {
	*x = BreakerReadingProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breakermodule_breakermodule_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BreakerReadingProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreakerReadingProfile) ProtoMessage() {}

func (x *BreakerReadingProfile) ProtoReflect() protoreflect.Message {
	mi := &file_breakermodule_breakermodule_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreakerReadingProfile.ProtoReflect.Descriptor instead.
func (*BreakerReadingProfile) Descriptor() ([]byte, []int) {
	return file_breakermodule_breakermodule_proto_rawDescGZIP(), []int{7}
}

func (x *BreakerReadingProfile) GetReadingMessageInfo() *commonmodule.ReadingMessageInfo {
	if x != nil {
		return x.ReadingMessageInfo
	}
	return nil
}

func (x *BreakerReadingProfile) GetBreaker() *Breaker {
	if x != nil {
		return x.Breaker
	}
	return nil
}

func (x *BreakerReadingProfile) GetBreakerReading() []*BreakerReading {
	if x != nil {
		return x.BreakerReading
	}
	return nil
}

// Status of a breaker
type BreakerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	StatusValue *commonmodule.StatusValue `protobuf:"bytes,1,opt,name=statusValue,proto3" json:"statusValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	StatusAndEventXCBR *commonmodule.StatusAndEventXCBR `protobuf:"bytes,2,opt,name=statusAndEventXCBR,proto3" json:"statusAndEventXCBR,omitempty"`
}

func (x *BreakerStatus) Reset() {
	*x = BreakerStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breakermodule_breakermodule_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BreakerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreakerStatus) ProtoMessage() {}

func (x *BreakerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_breakermodule_breakermodule_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreakerStatus.ProtoReflect.Descriptor instead.
func (*BreakerStatus) Descriptor() ([]byte, []int) {
	return file_breakermodule_breakermodule_proto_rawDescGZIP(), []int{8}
}

func (x *BreakerStatus) GetStatusValue() *commonmodule.StatusValue {
	if x != nil {
		return x.StatusValue
	}
	return nil
}

func (x *BreakerStatus) GetStatusAndEventXCBR() *commonmodule.StatusAndEventXCBR {
	if x != nil {
		return x.StatusAndEventXCBR
	}
	return nil
}

// Breaker status profile
type BreakerStatusProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	StatusMessageInfo *commonmodule.StatusMessageInfo `protobuf:"bytes,1,opt,name=statusMessageInfo,proto3" json:"statusMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	Breaker *Breaker `protobuf:"bytes,2,opt,name=breaker,proto3" json:"breaker,omitempty"`
	// MISSING DOCUMENTATION!!!
	BreakerStatus *BreakerStatus `protobuf:"bytes,3,opt,name=breakerStatus,proto3" json:"breakerStatus,omitempty"`
}

func (x *BreakerStatusProfile) Reset() {
	*x = BreakerStatusProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_breakermodule_breakermodule_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BreakerStatusProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreakerStatusProfile) ProtoMessage() {}

func (x *BreakerStatusProfile) ProtoReflect() protoreflect.Message {
	mi := &file_breakermodule_breakermodule_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreakerStatusProfile.ProtoReflect.Descriptor instead.
func (*BreakerStatusProfile) Descriptor() ([]byte, []int) {
	return file_breakermodule_breakermodule_proto_rawDescGZIP(), []int{9}
}

func (x *BreakerStatusProfile) GetStatusMessageInfo() *commonmodule.StatusMessageInfo {
	if x != nil {
		return x.StatusMessageInfo
	}
	return nil
}

func (x *BreakerStatusProfile) GetBreaker() *Breaker {
	if x != nil {
		return x.Breaker
	}
	return nil
}

func (x *BreakerStatusProfile) GetBreakerStatus() *BreakerStatus {
	if x != nil {
		return x.BreakerStatus
	}
	return nil
}

var File_breakermodule_breakermodule_proto protoreflect.FileDescriptor

var file_breakermodule_breakermodule_proto_rawDesc = []byte{
	0x0a, 0x21, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f,
	0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x1a, 0x09, 0x75, 0x6d, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x77,
	0x0a, 0x1a, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x58, 0x43, 0x42, 0x52, 0x12, 0x59, 0x0a, 0x13,
	0x64, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x58,
	0x43, 0x42, 0x52, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x58, 0x43, 0x42, 0x52, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x01, 0x52, 0x13, 0x64, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x58, 0x43, 0x42, 0x52, 0x22, 0xfe, 0x01, 0x0a, 0x16, 0x42, 0x72, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x69, 0x0a,
	0x1a, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x58, 0x43, 0x42, 0x52, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x58, 0x43, 0x42, 0x52, 0x52, 0x1a, 0x62, 0x72,
	0x65, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x58, 0x43, 0x42, 0x52, 0x22, 0x64, 0x0a, 0x07, 0x42, 0x72, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6e,
	0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xa2,
	0x02, 0x0a, 0x1d, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x56, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x01, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x07, 0x62, 0x72, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x72, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x07, 0x62, 0x72, 0x65,
	0x61, 0x6b, 0x65, 0x72, 0x12, 0x67, 0x0a, 0x16, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x44,
	0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63,
	0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x08, 0x88, 0xb5, 0x18,
	0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x16, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x69,
	0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x3a, 0x04, 0xc0,
	0xf3, 0x18, 0x01, 0x22, 0xa0, 0x01, 0x0a, 0x0c, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x50, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x6e,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x58, 0x43, 0x42, 0x52, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x58, 0x43,
	0x42, 0x52, 0x52, 0x12, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x6e, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x58, 0x43, 0x42, 0x52, 0x22, 0xf4, 0x01, 0x0a, 0x13, 0x42, 0x72, 0x65, 0x61, 0x6b,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x50,
	0x0a, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x10,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x3a, 0x0a, 0x07, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90,
	0xb5, 0x18, 0x01, 0x52, 0x07, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x0c,
	0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42,
	0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0c, 0x62, 0x72, 0x65, 0x61, 0x6b,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x3a, 0x04, 0xc0, 0xf3, 0x18, 0x01, 0x22, 0x8f, 0x03,
	0x0a, 0x0e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x86, 0x01, 0x0a, 0x22, 0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x22, 0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6e,
	0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x0f, 0x64, 0x69, 0x66,
	0x66, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x58, 0x55, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x58, 0x55, 0x52, 0x0f, 0x64,
	0x69, 0x66, 0x66, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x58, 0x55, 0x12, 0x35,
	0x0a, 0x09, 0x70, 0x68, 0x61, 0x73, 0x65, 0x4d, 0x4d, 0x54, 0x4e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x4d, 0x4d, 0x54, 0x4e, 0x52, 0x09, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x4d, 0x4d, 0x54, 0x4e, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x4d, 0x4d, 0x54, 0x52, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x4d, 0x4d, 0x54, 0x52, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d,
	0x54, 0x52, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x58,
	0x55, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d,
	0x58, 0x55, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x58, 0x55, 0x22,
	0x86, 0x02, 0x0a, 0x15, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x56, 0x0a, 0x12, 0x72, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x12, 0x72,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3a, 0x0a, 0x07, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01,
	0x90, 0xb5, 0x18, 0x01, 0x52, 0x07, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x53, 0x0a,
	0x0e, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x42, 0x0c, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x98, 0xb5,
	0x18, 0x02, 0x52, 0x0e, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x3a, 0x04, 0xc0, 0xf3, 0x18, 0x01, 0x22, 0xa4, 0x01, 0x0a, 0x0d, 0x42, 0x72, 0x65,
	0x61, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01,
	0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x50, 0x0a,
	0x12, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x58,
	0x43, 0x42, 0x52, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41,
	0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x58, 0x43, 0x42, 0x52, 0x52, 0x12, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x41, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x58, 0x43, 0x42, 0x52, 0x22,
	0xfb, 0x01, 0x0a, 0x14, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x53, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x11, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a,
	0x07, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x42,
	0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01,
	0x52, 0x07, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0d, 0x62, 0x72, 0x65,
	0x61, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08,
	0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0d, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x04, 0xc0, 0xf3, 0x18, 0x01, 0x42, 0x87, 0x01,
	0x0a, 0x15, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2e, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x01, 0x5a, 0x54, 0x67, 0x69, 0x74, 0x6c, 0x61,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2f, 0x70, 0x73,
	0x6d, 0x2f, 0x6f, 0x70, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67,
	0x6f, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2d, 0x6f, 0x70, 0x73, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d,
	0x62, 0x2f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0xaa,
	0x02, 0x15, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2e, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_breakermodule_breakermodule_proto_rawDescOnce sync.Once
	file_breakermodule_breakermodule_proto_rawDescData = file_breakermodule_breakermodule_proto_rawDesc
)

func file_breakermodule_breakermodule_proto_rawDescGZIP() []byte {
	file_breakermodule_breakermodule_proto_rawDescOnce.Do(func() {
		file_breakermodule_breakermodule_proto_rawDescData = protoimpl.X.CompressGZIP(file_breakermodule_breakermodule_proto_rawDescData)
	})
	return file_breakermodule_breakermodule_proto_rawDescData
}

var file_breakermodule_breakermodule_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_breakermodule_breakermodule_proto_goTypes = []interface{}{
	(*BreakerDiscreteControlXCBR)(nil),                      // 0: breakermodule.BreakerDiscreteControlXCBR
	(*BreakerDiscreteControl)(nil),                          // 1: breakermodule.BreakerDiscreteControl
	(*Breaker)(nil),                                         // 2: breakermodule.Breaker
	(*BreakerDiscreteControlProfile)(nil),                   // 3: breakermodule.BreakerDiscreteControlProfile
	(*BreakerEvent)(nil),                                    // 4: breakermodule.BreakerEvent
	(*BreakerEventProfile)(nil),                             // 5: breakermodule.BreakerEventProfile
	(*BreakerReading)(nil),                                  // 6: breakermodule.BreakerReading
	(*BreakerReadingProfile)(nil),                           // 7: breakermodule.BreakerReadingProfile
	(*BreakerStatus)(nil),                                   // 8: breakermodule.BreakerStatus
	(*BreakerStatusProfile)(nil),                            // 9: breakermodule.BreakerStatusProfile
	(*commonmodule.DiscreteControlXCBR)(nil),                // 10: commonmodule.DiscreteControlXCBR
	(*commonmodule.ControlValue)(nil),                       // 11: commonmodule.ControlValue
	(*commonmodule.CheckConditions)(nil),                    // 12: commonmodule.CheckConditions
	(*commonmodule.ConductingEquipment)(nil),                // 13: commonmodule.ConductingEquipment
	(*commonmodule.ControlMessageInfo)(nil),                 // 14: commonmodule.ControlMessageInfo
	(*commonmodule.EventValue)(nil),                         // 15: commonmodule.EventValue
	(*commonmodule.StatusAndEventXCBR)(nil),                 // 16: commonmodule.StatusAndEventXCBR
	(*commonmodule.EventMessageInfo)(nil),                   // 17: commonmodule.EventMessageInfo
	(*commonmodule.ConductingEquipmentTerminalReading)(nil), // 18: commonmodule.ConductingEquipmentTerminalReading
	(*commonmodule.ReadingMMXU)(nil),                        // 19: commonmodule.ReadingMMXU
	(*commonmodule.PhaseMMTN)(nil),                          // 20: commonmodule.PhaseMMTN
	(*commonmodule.ReadingMMTR)(nil),                        // 21: commonmodule.ReadingMMTR
	(*commonmodule.ReadingMessageInfo)(nil),                 // 22: commonmodule.ReadingMessageInfo
	(*commonmodule.StatusValue)(nil),                        // 23: commonmodule.StatusValue
	(*commonmodule.StatusMessageInfo)(nil),                  // 24: commonmodule.StatusMessageInfo
}
var file_breakermodule_breakermodule_proto_depIdxs = []int32{
	10, // 0: breakermodule.BreakerDiscreteControlXCBR.discreteControlXCBR:type_name -> commonmodule.DiscreteControlXCBR
	11, // 1: breakermodule.BreakerDiscreteControl.controlValue:type_name -> commonmodule.ControlValue
	12, // 2: breakermodule.BreakerDiscreteControl.check:type_name -> commonmodule.CheckConditions
	0,  // 3: breakermodule.BreakerDiscreteControl.breakerDiscreteControlXCBR:type_name -> breakermodule.BreakerDiscreteControlXCBR
	13, // 4: breakermodule.Breaker.conductingEquipment:type_name -> commonmodule.ConductingEquipment
	14, // 5: breakermodule.BreakerDiscreteControlProfile.controlMessageInfo:type_name -> commonmodule.ControlMessageInfo
	2,  // 6: breakermodule.BreakerDiscreteControlProfile.breaker:type_name -> breakermodule.Breaker
	1,  // 7: breakermodule.BreakerDiscreteControlProfile.breakerDiscreteControl:type_name -> breakermodule.BreakerDiscreteControl
	15, // 8: breakermodule.BreakerEvent.eventValue:type_name -> commonmodule.EventValue
	16, // 9: breakermodule.BreakerEvent.statusAndEventXCBR:type_name -> commonmodule.StatusAndEventXCBR
	17, // 10: breakermodule.BreakerEventProfile.eventMessageInfo:type_name -> commonmodule.EventMessageInfo
	2,  // 11: breakermodule.BreakerEventProfile.breaker:type_name -> breakermodule.Breaker
	4,  // 12: breakermodule.BreakerEventProfile.breakerEvent:type_name -> breakermodule.BreakerEvent
	18, // 13: breakermodule.BreakerReading.conductingEquipmentTerminalReading:type_name -> commonmodule.ConductingEquipmentTerminalReading
	19, // 14: breakermodule.BreakerReading.diffReadingMMXU:type_name -> commonmodule.ReadingMMXU
	20, // 15: breakermodule.BreakerReading.phaseMMTN:type_name -> commonmodule.PhaseMMTN
	21, // 16: breakermodule.BreakerReading.readingMMTR:type_name -> commonmodule.ReadingMMTR
	19, // 17: breakermodule.BreakerReading.readingMMXU:type_name -> commonmodule.ReadingMMXU
	22, // 18: breakermodule.BreakerReadingProfile.readingMessageInfo:type_name -> commonmodule.ReadingMessageInfo
	2,  // 19: breakermodule.BreakerReadingProfile.breaker:type_name -> breakermodule.Breaker
	6,  // 20: breakermodule.BreakerReadingProfile.breakerReading:type_name -> breakermodule.BreakerReading
	23, // 21: breakermodule.BreakerStatus.statusValue:type_name -> commonmodule.StatusValue
	16, // 22: breakermodule.BreakerStatus.statusAndEventXCBR:type_name -> commonmodule.StatusAndEventXCBR
	24, // 23: breakermodule.BreakerStatusProfile.statusMessageInfo:type_name -> commonmodule.StatusMessageInfo
	2,  // 24: breakermodule.BreakerStatusProfile.breaker:type_name -> breakermodule.Breaker
	8,  // 25: breakermodule.BreakerStatusProfile.breakerStatus:type_name -> breakermodule.BreakerStatus
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_breakermodule_breakermodule_proto_init() }
func file_breakermodule_breakermodule_proto_init() {
	if File_breakermodule_breakermodule_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_breakermodule_breakermodule_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BreakerDiscreteControlXCBR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breakermodule_breakermodule_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BreakerDiscreteControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breakermodule_breakermodule_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Breaker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breakermodule_breakermodule_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BreakerDiscreteControlProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breakermodule_breakermodule_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BreakerEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breakermodule_breakermodule_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BreakerEventProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breakermodule_breakermodule_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BreakerReading); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breakermodule_breakermodule_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BreakerReadingProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breakermodule_breakermodule_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BreakerStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_breakermodule_breakermodule_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BreakerStatusProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_breakermodule_breakermodule_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_breakermodule_breakermodule_proto_goTypes,
		DependencyIndexes: file_breakermodule_breakermodule_proto_depIdxs,
		MessageInfos:      file_breakermodule_breakermodule_proto_msgTypes,
	}.Build()
	File_breakermodule_breakermodule_proto = out.File
	file_breakermodule_breakermodule_proto_rawDesc = nil
	file_breakermodule_breakermodule_proto_goTypes = nil
	file_breakermodule_breakermodule_proto_depIdxs = nil
}
