// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v6.31.1
// source: generationmodule/generationmodule.proto

// OpenFMB Operational Model (61850-CIM) (v2.2.0).eapx
// Thursday, July 24, 2025 8:59:58 PM UTC

package generationmodule

import (
	_ "gitlab.com/openfmb/psm/ops/protobuf/go-openfmb-ops-protobuf/v2/openfmb"
	commonmodule "gitlab.com/openfmb/psm/ops/protobuf/go-openfmb-ops-protobuf/v2/openfmb/commonmodule"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A single or set of synchronous machines for converting mechanical power into alternating-current
// power. For example, individual machines within a set may be defined for scheduling purposes while a
// single control signal is derived for the set. In this case there would be a GeneratingUnit for each
// member of the set and an additional GeneratingUnit corresponding to the set.
type GeneratingUnit struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	ConductingEquipment *commonmodule.ConductingEquipment `protobuf:"bytes,1,opt,name=conductingEquipment,proto3" json:"conductingEquipment,omitempty"`
	// This is the maximum operating active power limit the dispatcher can enter for this unit.
	MaxOperatingP *commonmodule.ActivePower `protobuf:"bytes,2,opt,name=maxOperatingP,proto3" json:"maxOperatingP,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GeneratingUnit) Reset() {
	*x = GeneratingUnit{}
	mi := &file_generationmodule_generationmodule_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeneratingUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneratingUnit) ProtoMessage() {}

func (x *GeneratingUnit) ProtoReflect() protoreflect.Message {
	mi := &file_generationmodule_generationmodule_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneratingUnit.ProtoReflect.Descriptor instead.
func (*GeneratingUnit) Descriptor() ([]byte, []int) {
	return file_generationmodule_generationmodule_proto_rawDescGZIP(), []int{0}
}

func (x *GeneratingUnit) GetConductingEquipment() *commonmodule.ConductingEquipment {
	if x != nil {
		return x.ConductingEquipment
	}
	return nil
}

func (x *GeneratingUnit) GetMaxOperatingP() *commonmodule.ActivePower {
	if x != nil {
		return x.MaxOperatingP
	}
	return nil
}

// Configured setting
type GenerationCapabilityConfiguration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	SourceCapabilityConfiguration *commonmodule.SourceCapabilityConfiguration `protobuf:"bytes,1,opt,name=sourceCapabilityConfiguration,proto3" json:"sourceCapabilityConfiguration,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *GenerationCapabilityConfiguration) Reset() {
	*x = GenerationCapabilityConfiguration{}
	mi := &file_generationmodule_generationmodule_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerationCapabilityConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerationCapabilityConfiguration) ProtoMessage() {}

func (x *GenerationCapabilityConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_generationmodule_generationmodule_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerationCapabilityConfiguration.ProtoReflect.Descriptor instead.
func (*GenerationCapabilityConfiguration) Descriptor() ([]byte, []int) {
	return file_generationmodule_generationmodule_proto_rawDescGZIP(), []int{1}
}

func (x *GenerationCapabilityConfiguration) GetSourceCapabilityConfiguration() *commonmodule.SourceCapabilityConfiguration {
	if x != nil {
		return x.SourceCapabilityConfiguration
	}
	return nil
}

// Generation capability
type GenerationCapabilityOverride struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	IdentifiedObject *commonmodule.IdentifiedObject `protobuf:"bytes,1,opt,name=identifiedObject,proto3" json:"identifiedObject,omitempty"`
	// MISSING DOCUMENTATION!!!
	GenerationCapabilityConfiguration *GenerationCapabilityConfiguration `protobuf:"bytes,2,opt,name=generationCapabilityConfiguration,proto3" json:"generationCapabilityConfiguration,omitempty"`
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

func (x *GenerationCapabilityOverride) Reset() {
	*x = GenerationCapabilityOverride{}
	mi := &file_generationmodule_generationmodule_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerationCapabilityOverride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerationCapabilityOverride) ProtoMessage() {}

func (x *GenerationCapabilityOverride) ProtoReflect() protoreflect.Message {
	mi := &file_generationmodule_generationmodule_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerationCapabilityOverride.ProtoReflect.Descriptor instead.
func (*GenerationCapabilityOverride) Descriptor() ([]byte, []int) {
	return file_generationmodule_generationmodule_proto_rawDescGZIP(), []int{2}
}

func (x *GenerationCapabilityOverride) GetIdentifiedObject() *commonmodule.IdentifiedObject {
	if x != nil {
		return x.IdentifiedObject
	}
	return nil
}

func (x *GenerationCapabilityOverride) GetGenerationCapabilityConfiguration() *GenerationCapabilityConfiguration {
	if x != nil {
		return x.GenerationCapabilityConfiguration
	}
	return nil
}

// Generation capability profile
type GenerationCapabilityOverrideProfile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	CapabilityMessageInfo *commonmodule.CapabilityMessageInfo `protobuf:"bytes,1,opt,name=capabilityMessageInfo,proto3" json:"capabilityMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	GenerationCapabilityOverride *GenerationCapabilityOverride `protobuf:"bytes,2,opt,name=generationCapabilityOverride,proto3" json:"generationCapabilityOverride,omitempty"`
	// MISSING DOCUMENTATION!!!
	GeneratingUnit *GeneratingUnit `protobuf:"bytes,3,opt,name=generatingUnit,proto3" json:"generatingUnit,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GenerationCapabilityOverrideProfile) Reset() {
	*x = GenerationCapabilityOverrideProfile{}
	mi := &file_generationmodule_generationmodule_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerationCapabilityOverrideProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerationCapabilityOverrideProfile) ProtoMessage() {}

func (x *GenerationCapabilityOverrideProfile) ProtoReflect() protoreflect.Message {
	mi := &file_generationmodule_generationmodule_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerationCapabilityOverrideProfile.ProtoReflect.Descriptor instead.
func (*GenerationCapabilityOverrideProfile) Descriptor() ([]byte, []int) {
	return file_generationmodule_generationmodule_proto_rawDescGZIP(), []int{3}
}

func (x *GenerationCapabilityOverrideProfile) GetCapabilityMessageInfo() *commonmodule.CapabilityMessageInfo {
	if x != nil {
		return x.CapabilityMessageInfo
	}
	return nil
}

func (x *GenerationCapabilityOverrideProfile) GetGenerationCapabilityOverride() *GenerationCapabilityOverride {
	if x != nil {
		return x.GenerationCapabilityOverride
	}
	return nil
}

func (x *GenerationCapabilityOverrideProfile) GetGeneratingUnit() *GeneratingUnit {
	if x != nil {
		return x.GeneratingUnit
	}
	return nil
}

// Capability ratings
type GenerationCapabilityRatings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	SourceCapabilityRatings *commonmodule.SourceCapabilityRatings `protobuf:"bytes,1,opt,name=sourceCapabilityRatings,proto3" json:"sourceCapabilityRatings,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *GenerationCapabilityRatings) Reset() {
	*x = GenerationCapabilityRatings{}
	mi := &file_generationmodule_generationmodule_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerationCapabilityRatings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerationCapabilityRatings) ProtoMessage() {}

func (x *GenerationCapabilityRatings) ProtoReflect() protoreflect.Message {
	mi := &file_generationmodule_generationmodule_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerationCapabilityRatings.ProtoReflect.Descriptor instead.
func (*GenerationCapabilityRatings) Descriptor() ([]byte, []int) {
	return file_generationmodule_generationmodule_proto_rawDescGZIP(), []int{4}
}

func (x *GenerationCapabilityRatings) GetSourceCapabilityRatings() *commonmodule.SourceCapabilityRatings {
	if x != nil {
		return x.SourceCapabilityRatings
	}
	return nil
}

// Generation capability
type GenerationCapability struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	NameplateValue *commonmodule.NameplateValue `protobuf:"bytes,1,opt,name=nameplateValue,proto3" json:"nameplateValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	GenerationCapabilityRatings *GenerationCapabilityRatings `protobuf:"bytes,2,opt,name=generationCapabilityRatings,proto3" json:"generationCapabilityRatings,omitempty"`
	// MISSING DOCUMENTATION!!!
	GenerationCapabilityConfiguration *GenerationCapabilityConfiguration `protobuf:"bytes,3,opt,name=generationCapabilityConfiguration,proto3" json:"generationCapabilityConfiguration,omitempty"`
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

func (x *GenerationCapability) Reset() {
	*x = GenerationCapability{}
	mi := &file_generationmodule_generationmodule_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerationCapability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerationCapability) ProtoMessage() {}

func (x *GenerationCapability) ProtoReflect() protoreflect.Message {
	mi := &file_generationmodule_generationmodule_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerationCapability.ProtoReflect.Descriptor instead.
func (*GenerationCapability) Descriptor() ([]byte, []int) {
	return file_generationmodule_generationmodule_proto_rawDescGZIP(), []int{5}
}

func (x *GenerationCapability) GetNameplateValue() *commonmodule.NameplateValue {
	if x != nil {
		return x.NameplateValue
	}
	return nil
}

func (x *GenerationCapability) GetGenerationCapabilityRatings() *GenerationCapabilityRatings {
	if x != nil {
		return x.GenerationCapabilityRatings
	}
	return nil
}

func (x *GenerationCapability) GetGenerationCapabilityConfiguration() *GenerationCapabilityConfiguration {
	if x != nil {
		return x.GenerationCapabilityConfiguration
	}
	return nil
}

// Generation capability profile
type GenerationCapabilityProfile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	CapabilityMessageInfo *commonmodule.CapabilityMessageInfo `protobuf:"bytes,1,opt,name=capabilityMessageInfo,proto3" json:"capabilityMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	GenerationCapability *GenerationCapability `protobuf:"bytes,2,opt,name=generationCapability,proto3" json:"generationCapability,omitempty"`
	// MISSING DOCUMENTATION!!!
	GeneratingUnit *GeneratingUnit `protobuf:"bytes,3,opt,name=generatingUnit,proto3" json:"generatingUnit,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GenerationCapabilityProfile) Reset() {
	*x = GenerationCapabilityProfile{}
	mi := &file_generationmodule_generationmodule_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerationCapabilityProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerationCapabilityProfile) ProtoMessage() {}

func (x *GenerationCapabilityProfile) ProtoReflect() protoreflect.Message {
	mi := &file_generationmodule_generationmodule_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerationCapabilityProfile.ProtoReflect.Descriptor instead.
func (*GenerationCapabilityProfile) Descriptor() ([]byte, []int) {
	return file_generationmodule_generationmodule_proto_rawDescGZIP(), []int{6}
}

func (x *GenerationCapabilityProfile) GetCapabilityMessageInfo() *commonmodule.CapabilityMessageInfo {
	if x != nil {
		return x.CapabilityMessageInfo
	}
	return nil
}

func (x *GenerationCapabilityProfile) GetGenerationCapability() *GenerationCapability {
	if x != nil {
		return x.GenerationCapability
	}
	return nil
}

func (x *GenerationCapabilityProfile) GetGeneratingUnit() *GeneratingUnit {
	if x != nil {
		return x.GeneratingUnit
	}
	return nil
}

// Point definition (Point)  Control modes: - ISO (constant F) - X axis not in Time but real power
// % - Droop (F vs. % power output) - X axis not in time but real power %! - Real power output
// (constant)  Schedule (to Circuit Segment Management service) - Contains time  Direct Control  - No
// time, but only the objective sent to the Circuit Segment Management)
type GenerationPoint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Black start enable
	BlackStartEnabled *commonmodule.ControlSPC `protobuf:"bytes,1,opt,name=blackStartEnabled,proto3" json:"blackStartEnabled,omitempty"`
	// Enable frequency set point
	FrequencySetPointEnabled *commonmodule.ControlSPC `protobuf:"bytes,2,opt,name=frequencySetPointEnabled,proto3" json:"frequencySetPointEnabled,omitempty"`
	// MISSING DOCUMENTATION!!!
	PctHzDroop *wrapperspb.FloatValue `protobuf:"bytes,3,opt,name=pctHzDroop,proto3" json:"pctHzDroop,omitempty"`
	// MISSING DOCUMENTATION!!!
	PctVDroop *wrapperspb.FloatValue `protobuf:"bytes,4,opt,name=pctVDroop,proto3" json:"pctVDroop,omitempty"`
	// Ramp rates
	RampRates *commonmodule.RampRate `protobuf:"bytes,5,opt,name=rampRates,proto3" json:"rampRates,omitempty"`
	// Enable reactive power set point
	ReactivePwrSetPointEnabled *commonmodule.ControlSPC `protobuf:"bytes,6,opt,name=reactivePwrSetPointEnabled,proto3" json:"reactivePwrSetPointEnabled,omitempty"`
	// Enable joint real power set point
	RealPwrSetPointEnabled *commonmodule.ControlSPC `protobuf:"bytes,7,opt,name=realPwrSetPointEnabled,proto3" json:"realPwrSetPointEnabled,omitempty"`
	// Reset device
	Reset_ *commonmodule.ControlSPC `protobuf:"bytes,8,opt,name=reset,proto3" json:"reset,omitempty"`
	// MISSING DOCUMENTATION!!!
	State *commonmodule.Optional_StateKind `protobuf:"bytes,9,opt,name=state,proto3" json:"state,omitempty"`
	// Synchronize back to grid
	SyncBackToGrid *commonmodule.ControlSPC `protobuf:"bytes,10,opt,name=syncBackToGrid,proto3" json:"syncBackToGrid,omitempty"`
	// Transition to island on grid loss enable
	TransToIslndOnGridLossEnabled *commonmodule.ControlSPC `protobuf:"bytes,11,opt,name=transToIslndOnGridLossEnabled,proto3" json:"transToIslndOnGridLossEnabled,omitempty"`
	// Enable voltage set point
	VoltageSetPointEnabled *commonmodule.ControlSPC `protobuf:"bytes,12,opt,name=voltageSetPointEnabled,proto3" json:"voltageSetPointEnabled,omitempty"`
	// Start time
	StartTime *commonmodule.ControlTimestamp `protobuf:"bytes,13,opt,name=startTime,proto3" json:"startTime,omitempty"`
	// MISSING DOCUMENTATION!!!
	EnterServiceOperation *commonmodule.EnterServiceAPC `protobuf:"bytes,14,opt,name=enterServiceOperation,proto3" json:"enterServiceOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	HzWOperation *commonmodule.HzWAPC `protobuf:"bytes,15,opt,name=hzWOperation,proto3" json:"hzWOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	LimitWOperation *commonmodule.LimitWAPC `protobuf:"bytes,16,opt,name=limitWOperation,proto3" json:"limitWOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	PFOperation *commonmodule.PFSPC `protobuf:"bytes,17,opt,name=pFOperation,proto3" json:"pFOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	TmHzTripOperation *commonmodule.TmHzCSG `protobuf:"bytes,18,opt,name=tmHzTripOperation,proto3" json:"tmHzTripOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	TmVoltTripOperation *commonmodule.TmVoltCSG `protobuf:"bytes,19,opt,name=tmVoltTripOperation,proto3" json:"tmVoltTripOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	VArOperation *commonmodule.VarSPC `protobuf:"bytes,20,opt,name=vArOperation,proto3" json:"vArOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	VoltVarOperation *commonmodule.VoltVarCSG `protobuf:"bytes,21,opt,name=voltVarOperation,proto3" json:"voltVarOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	VoltWOperation *commonmodule.VoltWCSG `protobuf:"bytes,22,opt,name=voltWOperation,proto3" json:"voltWOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	WVarOperation *commonmodule.WVarCSG `protobuf:"bytes,23,opt,name=wVarOperation,proto3" json:"wVarOperation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenerationPoint) Reset() {
	*x = GenerationPoint{}
	mi := &file_generationmodule_generationmodule_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerationPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerationPoint) ProtoMessage() {}

func (x *GenerationPoint) ProtoReflect() protoreflect.Message {
	mi := &file_generationmodule_generationmodule_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerationPoint.ProtoReflect.Descriptor instead.
func (*GenerationPoint) Descriptor() ([]byte, []int) {
	return file_generationmodule_generationmodule_proto_rawDescGZIP(), []int{7}
}

func (x *GenerationPoint) GetBlackStartEnabled() *commonmodule.ControlSPC {
	if x != nil {
		return x.BlackStartEnabled
	}
	return nil
}

func (x *GenerationPoint) GetFrequencySetPointEnabled() *commonmodule.ControlSPC {
	if x != nil {
		return x.FrequencySetPointEnabled
	}
	return nil
}

func (x *GenerationPoint) GetPctHzDroop() *wrapperspb.FloatValue {
	if x != nil {
		return x.PctHzDroop
	}
	return nil
}

func (x *GenerationPoint) GetPctVDroop() *wrapperspb.FloatValue {
	if x != nil {
		return x.PctVDroop
	}
	return nil
}

func (x *GenerationPoint) GetRampRates() *commonmodule.RampRate {
	if x != nil {
		return x.RampRates
	}
	return nil
}

func (x *GenerationPoint) GetReactivePwrSetPointEnabled() *commonmodule.ControlSPC {
	if x != nil {
		return x.ReactivePwrSetPointEnabled
	}
	return nil
}

func (x *GenerationPoint) GetRealPwrSetPointEnabled() *commonmodule.ControlSPC {
	if x != nil {
		return x.RealPwrSetPointEnabled
	}
	return nil
}

func (x *GenerationPoint) GetReset_() *commonmodule.ControlSPC {
	if x != nil {
		return x.Reset_
	}
	return nil
}

func (x *GenerationPoint) GetState() *commonmodule.Optional_StateKind {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *GenerationPoint) GetSyncBackToGrid() *commonmodule.ControlSPC {
	if x != nil {
		return x.SyncBackToGrid
	}
	return nil
}

func (x *GenerationPoint) GetTransToIslndOnGridLossEnabled() *commonmodule.ControlSPC {
	if x != nil {
		return x.TransToIslndOnGridLossEnabled
	}
	return nil
}

func (x *GenerationPoint) GetVoltageSetPointEnabled() *commonmodule.ControlSPC {
	if x != nil {
		return x.VoltageSetPointEnabled
	}
	return nil
}

func (x *GenerationPoint) GetStartTime() *commonmodule.ControlTimestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GenerationPoint) GetEnterServiceOperation() *commonmodule.EnterServiceAPC {
	if x != nil {
		return x.EnterServiceOperation
	}
	return nil
}

func (x *GenerationPoint) GetHzWOperation() *commonmodule.HzWAPC {
	if x != nil {
		return x.HzWOperation
	}
	return nil
}

func (x *GenerationPoint) GetLimitWOperation() *commonmodule.LimitWAPC {
	if x != nil {
		return x.LimitWOperation
	}
	return nil
}

func (x *GenerationPoint) GetPFOperation() *commonmodule.PFSPC {
	if x != nil {
		return x.PFOperation
	}
	return nil
}

func (x *GenerationPoint) GetTmHzTripOperation() *commonmodule.TmHzCSG {
	if x != nil {
		return x.TmHzTripOperation
	}
	return nil
}

func (x *GenerationPoint) GetTmVoltTripOperation() *commonmodule.TmVoltCSG {
	if x != nil {
		return x.TmVoltTripOperation
	}
	return nil
}

func (x *GenerationPoint) GetVArOperation() *commonmodule.VarSPC {
	if x != nil {
		return x.VArOperation
	}
	return nil
}

func (x *GenerationPoint) GetVoltVarOperation() *commonmodule.VoltVarCSG {
	if x != nil {
		return x.VoltVarOperation
	}
	return nil
}

func (x *GenerationPoint) GetVoltWOperation() *commonmodule.VoltWCSG {
	if x != nil {
		return x.VoltWOperation
	}
	return nil
}

func (x *GenerationPoint) GetWVarOperation() *commonmodule.WVarCSG {
	if x != nil {
		return x.WVarOperation
	}
	return nil
}

// Curve shape setting (FC=SP) (CSG_SP)
type GenerationCSG struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The array with the points specifying a curve shape.
	CrvPts        []*GenerationPoint `protobuf:"bytes,1,rep,name=crvPts,proto3" json:"crvPts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenerationCSG) Reset() {
	*x = GenerationCSG{}
	mi := &file_generationmodule_generationmodule_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerationCSG) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerationCSG) ProtoMessage() {}

func (x *GenerationCSG) ProtoReflect() protoreflect.Message {
	mi := &file_generationmodule_generationmodule_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerationCSG.ProtoReflect.Descriptor instead.
func (*GenerationCSG) Descriptor() ([]byte, []int) {
	return file_generationmodule_generationmodule_proto_rawDescGZIP(), []int{8}
}

func (x *GenerationCSG) GetCrvPts() []*GenerationPoint {
	if x != nil {
		return x.CrvPts
	}
	return nil
}

// OpenFMB specialization for control schedule using:  LN: Schedule   Name: FSCH
type GenerationControlScheduleFSCH struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Discrete value in GenerationCSG type
	ValDCSG       *GenerationCSG `protobuf:"bytes,1,opt,name=ValDCSG,proto3" json:"ValDCSG,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenerationControlScheduleFSCH) Reset() {
	*x = GenerationControlScheduleFSCH{}
	mi := &file_generationmodule_generationmodule_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerationControlScheduleFSCH) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerationControlScheduleFSCH) ProtoMessage() {}

func (x *GenerationControlScheduleFSCH) ProtoReflect() protoreflect.Message {
	mi := &file_generationmodule_generationmodule_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerationControlScheduleFSCH.ProtoReflect.Descriptor instead.
func (*GenerationControlScheduleFSCH) Descriptor() ([]byte, []int) {
	return file_generationmodule_generationmodule_proto_rawDescGZIP(), []int{9}
}

func (x *GenerationControlScheduleFSCH) GetValDCSG() *GenerationCSG {
	if x != nil {
		return x.ValDCSG
	}
	return nil
}

// LN: Schedule controller   Name: FSCC
type GenerationControlFSCC struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	ControlFSCC *commonmodule.ControlFSCC `protobuf:"bytes,1,opt,name=controlFSCC,proto3" json:"controlFSCC,omitempty"`
	// MISSING DOCUMENTATION!!!
	GenerationControlScheduleFSCH *GenerationControlScheduleFSCH `protobuf:"bytes,2,opt,name=GenerationControlScheduleFSCH,proto3" json:"GenerationControlScheduleFSCH,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *GenerationControlFSCC) Reset() {
	*x = GenerationControlFSCC{}
	mi := &file_generationmodule_generationmodule_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerationControlFSCC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerationControlFSCC) ProtoMessage() {}

func (x *GenerationControlFSCC) ProtoReflect() protoreflect.Message {
	mi := &file_generationmodule_generationmodule_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerationControlFSCC.ProtoReflect.Descriptor instead.
func (*GenerationControlFSCC) Descriptor() ([]byte, []int) {
	return file_generationmodule_generationmodule_proto_rawDescGZIP(), []int{10}
}

func (x *GenerationControlFSCC) GetControlFSCC() *commonmodule.ControlFSCC {
	if x != nil {
		return x.ControlFSCC
	}
	return nil
}

func (x *GenerationControlFSCC) GetGenerationControlScheduleFSCH() *GenerationControlScheduleFSCH {
	if x != nil {
		return x.GenerationControlScheduleFSCH
	}
	return nil
}

// Generation control
type GenerationControl struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	ControlValue *commonmodule.ControlValue `protobuf:"bytes,1,opt,name=controlValue,proto3" json:"controlValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	Check *commonmodule.CheckConditions `protobuf:"bytes,2,opt,name=check,proto3" json:"check,omitempty"`
	// MISSING DOCUMENTATION!!!
	GenerationControlFSCC *GenerationControlFSCC `protobuf:"bytes,3,opt,name=generationControlFSCC,proto3" json:"generationControlFSCC,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *GenerationControl) Reset() {
	*x = GenerationControl{}
	mi := &file_generationmodule_generationmodule_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerationControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerationControl) ProtoMessage() {}

func (x *GenerationControl) ProtoReflect() protoreflect.Message {
	mi := &file_generationmodule_generationmodule_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerationControl.ProtoReflect.Descriptor instead.
func (*GenerationControl) Descriptor() ([]byte, []int) {
	return file_generationmodule_generationmodule_proto_rawDescGZIP(), []int{11}
}

func (x *GenerationControl) GetControlValue() *commonmodule.ControlValue {
	if x != nil {
		return x.ControlValue
	}
	return nil
}

func (x *GenerationControl) GetCheck() *commonmodule.CheckConditions {
	if x != nil {
		return x.Check
	}
	return nil
}

func (x *GenerationControl) GetGenerationControlFSCC() *GenerationControlFSCC {
	if x != nil {
		return x.GenerationControlFSCC
	}
	return nil
}

// Generation control profile
type GenerationControlProfile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	ControlMessageInfo *commonmodule.ControlMessageInfo `protobuf:"bytes,1,opt,name=controlMessageInfo,proto3" json:"controlMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	GeneratingUnit *GeneratingUnit `protobuf:"bytes,2,opt,name=generatingUnit,proto3" json:"generatingUnit,omitempty"`
	// MISSING DOCUMENTATION!!!
	GenerationControl *GenerationControl `protobuf:"bytes,3,opt,name=generationControl,proto3" json:"generationControl,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GenerationControlProfile) Reset() {
	*x = GenerationControlProfile{}
	mi := &file_generationmodule_generationmodule_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerationControlProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerationControlProfile) ProtoMessage() {}

func (x *GenerationControlProfile) ProtoReflect() protoreflect.Message {
	mi := &file_generationmodule_generationmodule_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerationControlProfile.ProtoReflect.Descriptor instead.
func (*GenerationControlProfile) Descriptor() ([]byte, []int) {
	return file_generationmodule_generationmodule_proto_rawDescGZIP(), []int{12}
}

func (x *GenerationControlProfile) GetControlMessageInfo() *commonmodule.ControlMessageInfo {
	if x != nil {
		return x.ControlMessageInfo
	}
	return nil
}

func (x *GenerationControlProfile) GetGeneratingUnit() *GeneratingUnit {
	if x != nil {
		return x.GeneratingUnit
	}
	return nil
}

func (x *GenerationControlProfile) GetGenerationControl() *GenerationControl {
	if x != nil {
		return x.GenerationControl
	}
	return nil
}

// Generation discrete control
type DroopParameter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// MISSING DOCUMENTATION!!!
	Slope *wrapperspb.FloatValue `protobuf:"bytes,1,opt,name=slope,proto3" json:"slope,omitempty"`
	// MISSING DOCUMENTATION!!!
	UnloadedOffset *wrapperspb.FloatValue `protobuf:"bytes,2,opt,name=unloadedOffset,proto3" json:"unloadedOffset,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DroopParameter) Reset() {
	*x = DroopParameter{}
	mi := &file_generationmodule_generationmodule_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DroopParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DroopParameter) ProtoMessage() {}

func (x *DroopParameter) ProtoReflect() protoreflect.Message {
	mi := &file_generationmodule_generationmodule_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DroopParameter.ProtoReflect.Descriptor instead.
func (*DroopParameter) Descriptor() ([]byte, []int) {
	return file_generationmodule_generationmodule_proto_rawDescGZIP(), []int{13}
}

func (x *DroopParameter) GetSlope() *wrapperspb.FloatValue {
	if x != nil {
		return x.Slope
	}
	return nil
}

func (x *DroopParameter) GetUnloadedOffset() *wrapperspb.FloatValue {
	if x != nil {
		return x.UnloadedOffset
	}
	return nil
}

// Generation real power control
type RealPowerControl struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// MISSING DOCUMENTATION!!!
	DroopSetpoint *DroopParameter `protobuf:"bytes,1,opt,name=droopSetpoint,proto3" json:"droopSetpoint,omitempty"`
	// MISSING DOCUMENTATION!!!
	IsochronousSetpoint *wrapperspb.FloatValue `protobuf:"bytes,2,opt,name=isochronousSetpoint,proto3" json:"isochronousSetpoint,omitempty"`
	// MISSING DOCUMENTATION!!!
	RealPowerControlMode *commonmodule.Optional_RealPowerControlKind `protobuf:"bytes,3,opt,name=realPowerControlMode,proto3" json:"realPowerControlMode,omitempty"`
	// MISSING DOCUMENTATION!!!
	RealPowerSetpoint *wrapperspb.FloatValue `protobuf:"bytes,4,opt,name=realPowerSetpoint,proto3" json:"realPowerSetpoint,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RealPowerControl) Reset() {
	*x = RealPowerControl{}
	mi := &file_generationmodule_generationmodule_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RealPowerControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealPowerControl) ProtoMessage() {}

func (x *RealPowerControl) ProtoReflect() protoreflect.Message {
	mi := &file_generationmodule_generationmodule_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealPowerControl.ProtoReflect.Descriptor instead.
func (*RealPowerControl) Descriptor() ([]byte, []int) {
	return file_generationmodule_generationmodule_proto_rawDescGZIP(), []int{14}
}

func (x *RealPowerControl) GetDroopSetpoint() *DroopParameter {
	if x != nil {
		return x.DroopSetpoint
	}
	return nil
}

func (x *RealPowerControl) GetIsochronousSetpoint() *wrapperspb.FloatValue {
	if x != nil {
		return x.IsochronousSetpoint
	}
	return nil
}

func (x *RealPowerControl) GetRealPowerControlMode() *commonmodule.Optional_RealPowerControlKind {
	if x != nil {
		return x.RealPowerControlMode
	}
	return nil
}

func (x *RealPowerControl) GetRealPowerSetpoint() *wrapperspb.FloatValue {
	if x != nil {
		return x.RealPowerSetpoint
	}
	return nil
}

// Generation real power control
type ReactivePowerControl struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// MISSING DOCUMENTATION!!!
	DroopSetpoint *DroopParameter `protobuf:"bytes,1,opt,name=droopSetpoint,proto3" json:"droopSetpoint,omitempty"`
	// MISSING DOCUMENTATION!!!
	PowerFactorSetpoint *wrapperspb.FloatValue `protobuf:"bytes,2,opt,name=powerFactorSetpoint,proto3" json:"powerFactorSetpoint,omitempty"`
	// MISSING DOCUMENTATION!!!
	ReactivePowerControlMode *commonmodule.Optional_ReactivePowerControlKind `protobuf:"bytes,3,opt,name=reactivePowerControlMode,proto3" json:"reactivePowerControlMode,omitempty"`
	// MISSING DOCUMENTATION!!!
	ReactivePowerSetpoint *wrapperspb.FloatValue `protobuf:"bytes,4,opt,name=reactivePowerSetpoint,proto3" json:"reactivePowerSetpoint,omitempty"`
	// MISSING DOCUMENTATION!!!
	VoltageSetpoint *wrapperspb.FloatValue `protobuf:"bytes,5,opt,name=voltageSetpoint,proto3" json:"voltageSetpoint,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ReactivePowerControl) Reset() {
	*x = ReactivePowerControl{}
	mi := &file_generationmodule_generationmodule_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReactivePowerControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReactivePowerControl) ProtoMessage() {}

func (x *ReactivePowerControl) ProtoReflect() protoreflect.Message {
	mi := &file_generationmodule_generationmodule_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReactivePowerControl.ProtoReflect.Descriptor instead.
func (*ReactivePowerControl) Descriptor() ([]byte, []int) {
	return file_generationmodule_generationmodule_proto_rawDescGZIP(), []int{15}
}

func (x *ReactivePowerControl) GetDroopSetpoint() *DroopParameter {
	if x != nil {
		return x.DroopSetpoint
	}
	return nil
}

func (x *ReactivePowerControl) GetPowerFactorSetpoint() *wrapperspb.FloatValue {
	if x != nil {
		return x.PowerFactorSetpoint
	}
	return nil
}

func (x *ReactivePowerControl) GetReactivePowerControlMode() *commonmodule.Optional_ReactivePowerControlKind {
	if x != nil {
		return x.ReactivePowerControlMode
	}
	return nil
}

func (x *ReactivePowerControl) GetReactivePowerSetpoint() *wrapperspb.FloatValue {
	if x != nil {
		return x.ReactivePowerSetpoint
	}
	return nil
}

func (x *ReactivePowerControl) GetVoltageSetpoint() *wrapperspb.FloatValue {
	if x != nil {
		return x.VoltageSetpoint
	}
	return nil
}

// Generation discrete control
type GenerationDiscreteControl struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	ControlValue *commonmodule.ControlValue `protobuf:"bytes,1,opt,name=controlValue,proto3" json:"controlValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	Check *commonmodule.CheckConditions `protobuf:"bytes,2,opt,name=check,proto3" json:"check,omitempty"`
	// MISSING DOCUMENTATION!!!
	ReactivePowerControl *ReactivePowerControl `protobuf:"bytes,3,opt,name=ReactivePowerControl,proto3" json:"ReactivePowerControl,omitempty"`
	// MISSING DOCUMENTATION!!!
	RealPowerControl *RealPowerControl `protobuf:"bytes,4,opt,name=RealPowerControl,proto3" json:"RealPowerControl,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GenerationDiscreteControl) Reset() {
	*x = GenerationDiscreteControl{}
	mi := &file_generationmodule_generationmodule_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerationDiscreteControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerationDiscreteControl) ProtoMessage() {}

func (x *GenerationDiscreteControl) ProtoReflect() protoreflect.Message {
	mi := &file_generationmodule_generationmodule_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerationDiscreteControl.ProtoReflect.Descriptor instead.
func (*GenerationDiscreteControl) Descriptor() ([]byte, []int) {
	return file_generationmodule_generationmodule_proto_rawDescGZIP(), []int{16}
}

func (x *GenerationDiscreteControl) GetControlValue() *commonmodule.ControlValue {
	if x != nil {
		return x.ControlValue
	}
	return nil
}

func (x *GenerationDiscreteControl) GetCheck() *commonmodule.CheckConditions {
	if x != nil {
		return x.Check
	}
	return nil
}

func (x *GenerationDiscreteControl) GetReactivePowerControl() *ReactivePowerControl {
	if x != nil {
		return x.ReactivePowerControl
	}
	return nil
}

func (x *GenerationDiscreteControl) GetRealPowerControl() *RealPowerControl {
	if x != nil {
		return x.RealPowerControl
	}
	return nil
}

// Generation discrete control profile
type GenerationDiscreteControlProfile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	ControlMessageInfo *commonmodule.ControlMessageInfo `protobuf:"bytes,1,opt,name=controlMessageInfo,proto3" json:"controlMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	GeneratingUnit *GeneratingUnit `protobuf:"bytes,2,opt,name=generatingUnit,proto3" json:"generatingUnit,omitempty"`
	// MISSING DOCUMENTATION!!!
	GenerationDiscreteControl *GenerationDiscreteControl `protobuf:"bytes,3,opt,name=generationDiscreteControl,proto3" json:"generationDiscreteControl,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *GenerationDiscreteControlProfile) Reset() {
	*x = GenerationDiscreteControlProfile{}
	mi := &file_generationmodule_generationmodule_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerationDiscreteControlProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerationDiscreteControlProfile) ProtoMessage() {}

func (x *GenerationDiscreteControlProfile) ProtoReflect() protoreflect.Message {
	mi := &file_generationmodule_generationmodule_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerationDiscreteControlProfile.ProtoReflect.Descriptor instead.
func (*GenerationDiscreteControlProfile) Descriptor() ([]byte, []int) {
	return file_generationmodule_generationmodule_proto_rawDescGZIP(), []int{17}
}

func (x *GenerationDiscreteControlProfile) GetControlMessageInfo() *commonmodule.ControlMessageInfo {
	if x != nil {
		return x.ControlMessageInfo
	}
	return nil
}

func (x *GenerationDiscreteControlProfile) GetGeneratingUnit() *GeneratingUnit {
	if x != nil {
		return x.GeneratingUnit
	}
	return nil
}

func (x *GenerationDiscreteControlProfile) GetGenerationDiscreteControl() *GenerationDiscreteControl {
	if x != nil {
		return x.GenerationDiscreteControl
	}
	return nil
}

// Generation reading value
type GenerationReading struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	ConductingEquipmentTerminalReading *commonmodule.ConductingEquipmentTerminalReading `protobuf:"bytes,1,opt,name=conductingEquipmentTerminalReading,proto3" json:"conductingEquipmentTerminalReading,omitempty"`
	// MISSING DOCUMENTATION!!!
	PhaseMMTN *commonmodule.PhaseMMTN `protobuf:"bytes,2,opt,name=phaseMMTN,proto3" json:"phaseMMTN,omitempty"`
	// MISSING DOCUMENTATION!!!
	ReadingMMTR *commonmodule.ReadingMMTR `protobuf:"bytes,3,opt,name=readingMMTR,proto3" json:"readingMMTR,omitempty"`
	// MISSING DOCUMENTATION!!!
	ReadingMMXU *commonmodule.ReadingMMXU `protobuf:"bytes,4,opt,name=readingMMXU,proto3" json:"readingMMXU,omitempty"`
	// MISSING DOCUMENTATION!!!
	ReadingMMDC   *commonmodule.ReadingMMDC `protobuf:"bytes,5,opt,name=readingMMDC,proto3" json:"readingMMDC,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenerationReading) Reset() {
	*x = GenerationReading{}
	mi := &file_generationmodule_generationmodule_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerationReading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerationReading) ProtoMessage() {}

func (x *GenerationReading) ProtoReflect() protoreflect.Message {
	mi := &file_generationmodule_generationmodule_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerationReading.ProtoReflect.Descriptor instead.
func (*GenerationReading) Descriptor() ([]byte, []int) {
	return file_generationmodule_generationmodule_proto_rawDescGZIP(), []int{18}
}

func (x *GenerationReading) GetConductingEquipmentTerminalReading() *commonmodule.ConductingEquipmentTerminalReading {
	if x != nil {
		return x.ConductingEquipmentTerminalReading
	}
	return nil
}

func (x *GenerationReading) GetPhaseMMTN() *commonmodule.PhaseMMTN {
	if x != nil {
		return x.PhaseMMTN
	}
	return nil
}

func (x *GenerationReading) GetReadingMMTR() *commonmodule.ReadingMMTR {
	if x != nil {
		return x.ReadingMMTR
	}
	return nil
}

func (x *GenerationReading) GetReadingMMXU() *commonmodule.ReadingMMXU {
	if x != nil {
		return x.ReadingMMXU
	}
	return nil
}

func (x *GenerationReading) GetReadingMMDC() *commonmodule.ReadingMMDC {
	if x != nil {
		return x.ReadingMMDC
	}
	return nil
}

// Generation reading profile
type GenerationReadingProfile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	ReadingMessageInfo *commonmodule.ReadingMessageInfo `protobuf:"bytes,1,opt,name=readingMessageInfo,proto3" json:"readingMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	GeneratingUnit *GeneratingUnit `protobuf:"bytes,2,opt,name=generatingUnit,proto3" json:"generatingUnit,omitempty"`
	// MISSING DOCUMENTATION!!!
	GenerationReading *GenerationReading `protobuf:"bytes,3,opt,name=generationReading,proto3" json:"generationReading,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GenerationReadingProfile) Reset() {
	*x = GenerationReadingProfile{}
	mi := &file_generationmodule_generationmodule_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerationReadingProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerationReadingProfile) ProtoMessage() {}

func (x *GenerationReadingProfile) ProtoReflect() protoreflect.Message {
	mi := &file_generationmodule_generationmodule_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerationReadingProfile.ProtoReflect.Descriptor instead.
func (*GenerationReadingProfile) Descriptor() ([]byte, []int) {
	return file_generationmodule_generationmodule_proto_rawDescGZIP(), []int{19}
}

func (x *GenerationReadingProfile) GetReadingMessageInfo() *commonmodule.ReadingMessageInfo {
	if x != nil {
		return x.ReadingMessageInfo
	}
	return nil
}

func (x *GenerationReadingProfile) GetGeneratingUnit() *GeneratingUnit {
	if x != nil {
		return x.GeneratingUnit
	}
	return nil
}

func (x *GenerationReadingProfile) GetGenerationReading() *GenerationReading {
	if x != nil {
		return x.GenerationReading
	}
	return nil
}

// Point definition (Point)
type GenerationPointStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Black start enable
	BlackStartEnabled *commonmodule.StatusSPS `protobuf:"bytes,1,opt,name=blackStartEnabled,proto3" json:"blackStartEnabled,omitempty"`
	// Enable frequency set point
	FrequencySetPointEnabled *commonmodule.StatusSPS `protobuf:"bytes,2,opt,name=frequencySetPointEnabled,proto3" json:"frequencySetPointEnabled,omitempty"`
	// MISSING DOCUMENTATION!!!
	PctHzDroop *wrapperspb.FloatValue `protobuf:"bytes,3,opt,name=pctHzDroop,proto3" json:"pctHzDroop,omitempty"`
	// MISSING DOCUMENTATION!!!
	PctVDroop *wrapperspb.FloatValue `protobuf:"bytes,4,opt,name=pctVDroop,proto3" json:"pctVDroop,omitempty"`
	// Ramp rates
	RampRates *commonmodule.RampRate `protobuf:"bytes,5,opt,name=rampRates,proto3" json:"rampRates,omitempty"`
	// Enable reactive power set point
	ReactivePwrSetPointEnabled *commonmodule.StatusSPS `protobuf:"bytes,6,opt,name=reactivePwrSetPointEnabled,proto3" json:"reactivePwrSetPointEnabled,omitempty"`
	// Enable real power set point
	RealPwrSetPointEnabled *commonmodule.StatusSPS `protobuf:"bytes,7,opt,name=realPwrSetPointEnabled,proto3" json:"realPwrSetPointEnabled,omitempty"`
	// MISSING DOCUMENTATION!!!
	State *commonmodule.Optional_StateKind `protobuf:"bytes,8,opt,name=state,proto3" json:"state,omitempty"`
	// Synchronize back to grid
	SyncBackToGrid *commonmodule.StatusSPS `protobuf:"bytes,9,opt,name=syncBackToGrid,proto3" json:"syncBackToGrid,omitempty"`
	// Transition to island on grid loss enable
	TransToIslndOnGridLossEnabled *commonmodule.StatusSPS `protobuf:"bytes,10,opt,name=transToIslndOnGridLossEnabled,proto3" json:"transToIslndOnGridLossEnabled,omitempty"`
	// Enable voltage set point
	VoltageSetPointEnabled *commonmodule.StatusSPS `protobuf:"bytes,11,opt,name=voltageSetPointEnabled,proto3" json:"voltageSetPointEnabled,omitempty"`
	// MISSING DOCUMENTATION!!!
	EnterServiceOperation *commonmodule.EnterServiceAPC `protobuf:"bytes,12,opt,name=enterServiceOperation,proto3" json:"enterServiceOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	HzWOperation *commonmodule.HzWAPC `protobuf:"bytes,13,opt,name=hzWOperation,proto3" json:"hzWOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	LimitWOperation *commonmodule.LimitWAPC `protobuf:"bytes,14,opt,name=limitWOperation,proto3" json:"limitWOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	PFOperation *commonmodule.PFSPC `protobuf:"bytes,15,opt,name=pFOperation,proto3" json:"pFOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	TmHzTripOperation *commonmodule.TmHzCSG `protobuf:"bytes,16,opt,name=tmHzTripOperation,proto3" json:"tmHzTripOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	TmVoltTripOperation *commonmodule.TmVoltCSG `protobuf:"bytes,17,opt,name=tmVoltTripOperation,proto3" json:"tmVoltTripOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	VArOperation *commonmodule.VarSPC `protobuf:"bytes,18,opt,name=vArOperation,proto3" json:"vArOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	VoltVarOperation *commonmodule.VoltVarCSG `protobuf:"bytes,19,opt,name=voltVarOperation,proto3" json:"voltVarOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	VoltWOperation *commonmodule.VoltWCSG `protobuf:"bytes,20,opt,name=voltWOperation,proto3" json:"voltWOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	WVarOperation *commonmodule.WVarCSG `protobuf:"bytes,21,opt,name=wVarOperation,proto3" json:"wVarOperation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenerationPointStatus) Reset() {
	*x = GenerationPointStatus{}
	mi := &file_generationmodule_generationmodule_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerationPointStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerationPointStatus) ProtoMessage() {}

func (x *GenerationPointStatus) ProtoReflect() protoreflect.Message {
	mi := &file_generationmodule_generationmodule_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerationPointStatus.ProtoReflect.Descriptor instead.
func (*GenerationPointStatus) Descriptor() ([]byte, []int) {
	return file_generationmodule_generationmodule_proto_rawDescGZIP(), []int{20}
}

func (x *GenerationPointStatus) GetBlackStartEnabled() *commonmodule.StatusSPS {
	if x != nil {
		return x.BlackStartEnabled
	}
	return nil
}

func (x *GenerationPointStatus) GetFrequencySetPointEnabled() *commonmodule.StatusSPS {
	if x != nil {
		return x.FrequencySetPointEnabled
	}
	return nil
}

func (x *GenerationPointStatus) GetPctHzDroop() *wrapperspb.FloatValue {
	if x != nil {
		return x.PctHzDroop
	}
	return nil
}

func (x *GenerationPointStatus) GetPctVDroop() *wrapperspb.FloatValue {
	if x != nil {
		return x.PctVDroop
	}
	return nil
}

func (x *GenerationPointStatus) GetRampRates() *commonmodule.RampRate {
	if x != nil {
		return x.RampRates
	}
	return nil
}

func (x *GenerationPointStatus) GetReactivePwrSetPointEnabled() *commonmodule.StatusSPS {
	if x != nil {
		return x.ReactivePwrSetPointEnabled
	}
	return nil
}

func (x *GenerationPointStatus) GetRealPwrSetPointEnabled() *commonmodule.StatusSPS {
	if x != nil {
		return x.RealPwrSetPointEnabled
	}
	return nil
}

func (x *GenerationPointStatus) GetState() *commonmodule.Optional_StateKind {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *GenerationPointStatus) GetSyncBackToGrid() *commonmodule.StatusSPS {
	if x != nil {
		return x.SyncBackToGrid
	}
	return nil
}

func (x *GenerationPointStatus) GetTransToIslndOnGridLossEnabled() *commonmodule.StatusSPS {
	if x != nil {
		return x.TransToIslndOnGridLossEnabled
	}
	return nil
}

func (x *GenerationPointStatus) GetVoltageSetPointEnabled() *commonmodule.StatusSPS {
	if x != nil {
		return x.VoltageSetPointEnabled
	}
	return nil
}

func (x *GenerationPointStatus) GetEnterServiceOperation() *commonmodule.EnterServiceAPC {
	if x != nil {
		return x.EnterServiceOperation
	}
	return nil
}

func (x *GenerationPointStatus) GetHzWOperation() *commonmodule.HzWAPC {
	if x != nil {
		return x.HzWOperation
	}
	return nil
}

func (x *GenerationPointStatus) GetLimitWOperation() *commonmodule.LimitWAPC {
	if x != nil {
		return x.LimitWOperation
	}
	return nil
}

func (x *GenerationPointStatus) GetPFOperation() *commonmodule.PFSPC {
	if x != nil {
		return x.PFOperation
	}
	return nil
}

func (x *GenerationPointStatus) GetTmHzTripOperation() *commonmodule.TmHzCSG {
	if x != nil {
		return x.TmHzTripOperation
	}
	return nil
}

func (x *GenerationPointStatus) GetTmVoltTripOperation() *commonmodule.TmVoltCSG {
	if x != nil {
		return x.TmVoltTripOperation
	}
	return nil
}

func (x *GenerationPointStatus) GetVArOperation() *commonmodule.VarSPC {
	if x != nil {
		return x.VArOperation
	}
	return nil
}

func (x *GenerationPointStatus) GetVoltVarOperation() *commonmodule.VoltVarCSG {
	if x != nil {
		return x.VoltVarOperation
	}
	return nil
}

func (x *GenerationPointStatus) GetVoltWOperation() *commonmodule.VoltWCSG {
	if x != nil {
		return x.VoltWOperation
	}
	return nil
}

func (x *GenerationPointStatus) GetWVarOperation() *commonmodule.WVarCSG {
	if x != nil {
		return x.WVarOperation
	}
	return nil
}

// Specialized 61850 ZGEN class
type GenerationEventAndStatusZGEN struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	LogicalNodeForEventAndStatus *commonmodule.LogicalNodeForEventAndStatus `protobuf:"bytes,1,opt,name=logicalNodeForEventAndStatus,proto3" json:"logicalNodeForEventAndStatus,omitempty"`
	// MISSING DOCUMENTATION!!!
	AuxPwrSt *commonmodule.StatusSPS `protobuf:"bytes,2,opt,name=AuxPwrSt,proto3" json:"AuxPwrSt,omitempty"`
	// MISSING DOCUMENTATION!!!
	DynamicTest *commonmodule.ENS_DynamicTestKind `protobuf:"bytes,3,opt,name=DynamicTest,proto3" json:"DynamicTest,omitempty"`
	// Emergency stop
	EmgStop *commonmodule.StatusSPS `protobuf:"bytes,4,opt,name=EmgStop,proto3" json:"EmgStop,omitempty"`
	// Generator is synchronized to EPS, or not; True = Synchronized
	GnSynSt *commonmodule.StatusSPS `protobuf:"bytes,5,opt,name=GnSynSt,proto3" json:"GnSynSt,omitempty"`
	// Point status
	PointStatus *GenerationPointStatus `protobuf:"bytes,6,opt,name=PointStatus,proto3" json:"PointStatus,omitempty"`
	// MISSING DOCUMENTATION!!!
	Alrm *commonmodule.Optional_AlrmKind `protobuf:"bytes,7,opt,name=Alrm,proto3" json:"Alrm,omitempty"`
	// MISSING DOCUMENTATION!!!
	GridConnectionState *commonmodule.Optional_GridConnectionStateKind `protobuf:"bytes,8,opt,name=GridConnectionState,proto3" json:"GridConnectionState,omitempty"`
	// MISSING DOCUMENTATION!!!
	ManAlrmInfo *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=ManAlrmInfo,proto3" json:"ManAlrmInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	OperatingState *commonmodule.Optional_OperatingStateKind `protobuf:"bytes,10,opt,name=OperatingState,proto3" json:"OperatingState,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GenerationEventAndStatusZGEN) Reset() {
	*x = GenerationEventAndStatusZGEN{}
	mi := &file_generationmodule_generationmodule_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerationEventAndStatusZGEN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerationEventAndStatusZGEN) ProtoMessage() {}

func (x *GenerationEventAndStatusZGEN) ProtoReflect() protoreflect.Message {
	mi := &file_generationmodule_generationmodule_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerationEventAndStatusZGEN.ProtoReflect.Descriptor instead.
func (*GenerationEventAndStatusZGEN) Descriptor() ([]byte, []int) {
	return file_generationmodule_generationmodule_proto_rawDescGZIP(), []int{21}
}

func (x *GenerationEventAndStatusZGEN) GetLogicalNodeForEventAndStatus() *commonmodule.LogicalNodeForEventAndStatus {
	if x != nil {
		return x.LogicalNodeForEventAndStatus
	}
	return nil
}

func (x *GenerationEventAndStatusZGEN) GetAuxPwrSt() *commonmodule.StatusSPS {
	if x != nil {
		return x.AuxPwrSt
	}
	return nil
}

func (x *GenerationEventAndStatusZGEN) GetDynamicTest() *commonmodule.ENS_DynamicTestKind {
	if x != nil {
		return x.DynamicTest
	}
	return nil
}

func (x *GenerationEventAndStatusZGEN) GetEmgStop() *commonmodule.StatusSPS {
	if x != nil {
		return x.EmgStop
	}
	return nil
}

func (x *GenerationEventAndStatusZGEN) GetGnSynSt() *commonmodule.StatusSPS {
	if x != nil {
		return x.GnSynSt
	}
	return nil
}

func (x *GenerationEventAndStatusZGEN) GetPointStatus() *GenerationPointStatus {
	if x != nil {
		return x.PointStatus
	}
	return nil
}

func (x *GenerationEventAndStatusZGEN) GetAlrm() *commonmodule.Optional_AlrmKind {
	if x != nil {
		return x.Alrm
	}
	return nil
}

func (x *GenerationEventAndStatusZGEN) GetGridConnectionState() *commonmodule.Optional_GridConnectionStateKind {
	if x != nil {
		return x.GridConnectionState
	}
	return nil
}

func (x *GenerationEventAndStatusZGEN) GetManAlrmInfo() *wrapperspb.StringValue {
	if x != nil {
		return x.ManAlrmInfo
	}
	return nil
}

func (x *GenerationEventAndStatusZGEN) GetOperatingState() *commonmodule.Optional_OperatingStateKind {
	if x != nil {
		return x.OperatingState
	}
	return nil
}

// Specialized generation event ZGEN
type GenerationEventZGEN struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	GenerationEventAndStatusZGEN *GenerationEventAndStatusZGEN `protobuf:"bytes,1,opt,name=generationEventAndStatusZGEN,proto3" json:"generationEventAndStatusZGEN,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *GenerationEventZGEN) Reset() {
	*x = GenerationEventZGEN{}
	mi := &file_generationmodule_generationmodule_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerationEventZGEN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerationEventZGEN) ProtoMessage() {}

func (x *GenerationEventZGEN) ProtoReflect() protoreflect.Message {
	mi := &file_generationmodule_generationmodule_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerationEventZGEN.ProtoReflect.Descriptor instead.
func (*GenerationEventZGEN) Descriptor() ([]byte, []int) {
	return file_generationmodule_generationmodule_proto_rawDescGZIP(), []int{22}
}

func (x *GenerationEventZGEN) GetGenerationEventAndStatusZGEN() *GenerationEventAndStatusZGEN {
	if x != nil {
		return x.GenerationEventAndStatusZGEN
	}
	return nil
}

// Generation event
type GenerationEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	EventValue *commonmodule.EventValue `protobuf:"bytes,1,opt,name=eventValue,proto3" json:"eventValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	GenerationEventZGEN *GenerationEventZGEN `protobuf:"bytes,2,opt,name=generationEventZGEN,proto3" json:"generationEventZGEN,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *GenerationEvent) Reset() {
	*x = GenerationEvent{}
	mi := &file_generationmodule_generationmodule_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerationEvent) ProtoMessage() {}

func (x *GenerationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_generationmodule_generationmodule_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerationEvent.ProtoReflect.Descriptor instead.
func (*GenerationEvent) Descriptor() ([]byte, []int) {
	return file_generationmodule_generationmodule_proto_rawDescGZIP(), []int{23}
}

func (x *GenerationEvent) GetEventValue() *commonmodule.EventValue {
	if x != nil {
		return x.EventValue
	}
	return nil
}

func (x *GenerationEvent) GetGenerationEventZGEN() *GenerationEventZGEN {
	if x != nil {
		return x.GenerationEventZGEN
	}
	return nil
}

// Generation event profile
type GenerationEventProfile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	EventMessageInfo *commonmodule.EventMessageInfo `protobuf:"bytes,1,opt,name=eventMessageInfo,proto3" json:"eventMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	GeneratingUnit *GeneratingUnit `protobuf:"bytes,2,opt,name=generatingUnit,proto3" json:"generatingUnit,omitempty"`
	// MISSING DOCUMENTATION!!!
	GenerationEvent *GenerationEvent `protobuf:"bytes,3,opt,name=generationEvent,proto3" json:"generationEvent,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GenerationEventProfile) Reset() {
	*x = GenerationEventProfile{}
	mi := &file_generationmodule_generationmodule_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerationEventProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerationEventProfile) ProtoMessage() {}

func (x *GenerationEventProfile) ProtoReflect() protoreflect.Message {
	mi := &file_generationmodule_generationmodule_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerationEventProfile.ProtoReflect.Descriptor instead.
func (*GenerationEventProfile) Descriptor() ([]byte, []int) {
	return file_generationmodule_generationmodule_proto_rawDescGZIP(), []int{24}
}

func (x *GenerationEventProfile) GetEventMessageInfo() *commonmodule.EventMessageInfo {
	if x != nil {
		return x.EventMessageInfo
	}
	return nil
}

func (x *GenerationEventProfile) GetGeneratingUnit() *GeneratingUnit {
	if x != nil {
		return x.GeneratingUnit
	}
	return nil
}

func (x *GenerationEventProfile) GetGenerationEvent() *GenerationEvent {
	if x != nil {
		return x.GenerationEvent
	}
	return nil
}

// Specialized 61850 ZGEN class
type GenerationStatusZGEN struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	GenerationEventAndStatusZGEN *GenerationEventAndStatusZGEN `protobuf:"bytes,1,opt,name=generationEventAndStatusZGEN,proto3" json:"generationEventAndStatusZGEN,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *GenerationStatusZGEN) Reset() {
	*x = GenerationStatusZGEN{}
	mi := &file_generationmodule_generationmodule_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerationStatusZGEN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerationStatusZGEN) ProtoMessage() {}

func (x *GenerationStatusZGEN) ProtoReflect() protoreflect.Message {
	mi := &file_generationmodule_generationmodule_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerationStatusZGEN.ProtoReflect.Descriptor instead.
func (*GenerationStatusZGEN) Descriptor() ([]byte, []int) {
	return file_generationmodule_generationmodule_proto_rawDescGZIP(), []int{25}
}

func (x *GenerationStatusZGEN) GetGenerationEventAndStatusZGEN() *GenerationEventAndStatusZGEN {
	if x != nil {
		return x.GenerationEventAndStatusZGEN
	}
	return nil
}

// Generation status
type GenerationStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	StatusValue *commonmodule.StatusValue `protobuf:"bytes,1,opt,name=statusValue,proto3" json:"statusValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	GenerationStatusZGEN *GenerationStatusZGEN `protobuf:"bytes,2,opt,name=generationStatusZGEN,proto3" json:"generationStatusZGEN,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GenerationStatus) Reset() {
	*x = GenerationStatus{}
	mi := &file_generationmodule_generationmodule_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerationStatus) ProtoMessage() {}

func (x *GenerationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_generationmodule_generationmodule_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerationStatus.ProtoReflect.Descriptor instead.
func (*GenerationStatus) Descriptor() ([]byte, []int) {
	return file_generationmodule_generationmodule_proto_rawDescGZIP(), []int{26}
}

func (x *GenerationStatus) GetStatusValue() *commonmodule.StatusValue {
	if x != nil {
		return x.StatusValue
	}
	return nil
}

func (x *GenerationStatus) GetGenerationStatusZGEN() *GenerationStatusZGEN {
	if x != nil {
		return x.GenerationStatusZGEN
	}
	return nil
}

// Generation status profile
type GenerationStatusProfile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	StatusMessageInfo *commonmodule.StatusMessageInfo `protobuf:"bytes,1,opt,name=statusMessageInfo,proto3" json:"statusMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	GeneratingUnit *GeneratingUnit `protobuf:"bytes,2,opt,name=generatingUnit,proto3" json:"generatingUnit,omitempty"`
	// MISSING DOCUMENTATION!!!
	GenerationStatus *GenerationStatus `protobuf:"bytes,3,opt,name=generationStatus,proto3" json:"generationStatus,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GenerationStatusProfile) Reset() {
	*x = GenerationStatusProfile{}
	mi := &file_generationmodule_generationmodule_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerationStatusProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerationStatusProfile) ProtoMessage() {}

func (x *GenerationStatusProfile) ProtoReflect() protoreflect.Message {
	mi := &file_generationmodule_generationmodule_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerationStatusProfile.ProtoReflect.Descriptor instead.
func (*GenerationStatusProfile) Descriptor() ([]byte, []int) {
	return file_generationmodule_generationmodule_proto_rawDescGZIP(), []int{27}
}

func (x *GenerationStatusProfile) GetStatusMessageInfo() *commonmodule.StatusMessageInfo {
	if x != nil {
		return x.StatusMessageInfo
	}
	return nil
}

func (x *GenerationStatusProfile) GetGeneratingUnit() *GeneratingUnit {
	if x != nil {
		return x.GeneratingUnit
	}
	return nil
}

func (x *GenerationStatusProfile) GetGenerationStatus() *GenerationStatus {
	if x != nil {
		return x.GenerationStatus
	}
	return nil
}

var File_generationmodule_generationmodule_proto protoreflect.FileDescriptor

var file_generationmodule_generationmodule_proto_rawDesc = []byte{
	0x0a, 0x27, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x1a, 0x09, 0x75, 0x6d, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xac, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x59, 0x0a, 0x13, 0x63, 0x6f,
	0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6e,
	0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01,
	0x52, 0x13, 0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x22, 0x9c, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x77, 0x0a, 0x1d,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x1d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfe, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x10, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x10, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x8b, 0x01, 0x0a, 0x21, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90,
	0xb5, 0x18, 0x01, 0x52, 0x21, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xde, 0x02, 0x0a, 0x23, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x5f,
	0x0a, 0x15, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x15, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x7c, 0x0a, 0x1c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52,
	0x1c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x52, 0x0a,
	0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18,
	0x01, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69,
	0x74, 0x3a, 0x04, 0xc0, 0xf3, 0x18, 0x01, 0x22, 0x84, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x65, 0x0a, 0x17, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x17, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xe1,
	0x02, 0x0a, 0x14, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x01, 0x52, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x79, 0x0a, 0x1b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18,
	0x01, 0x52, 0x1b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x81,
	0x01, 0x0a, 0x21, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x21, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xbe, 0x02, 0x0a, 0x1b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x5f, 0x0a, 0x15, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x15, 0x63, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x64, 0x0a, 0x14, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90,
	0xb5, 0x18, 0x01, 0x52, 0x14, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x0e, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x55,
	0x6e, 0x69, 0x74, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0e, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x3a, 0x04, 0xc0,
	0xf3, 0x18, 0x01, 0x22, 0xc3, 0x0c, 0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x62, 0x6c, 0x61, 0x63, 0x6b,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x50, 0x43, 0x52, 0x11, 0x62, 0x6c,
	0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x54, 0x0a, 0x18, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x50, 0x43, 0x52, 0x18, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x63, 0x74, 0x48, 0x7a, 0x44, 0x72,
	0x6f, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x70, 0x63, 0x74, 0x48, 0x7a, 0x44, 0x72, 0x6f,
	0x6f, 0x70, 0x12, 0x39, 0x0a, 0x09, 0x70, 0x63, 0x74, 0x56, 0x44, 0x72, 0x6f, 0x6f, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x09, 0x70, 0x63, 0x74, 0x56, 0x44, 0x72, 0x6f, 0x6f, 0x70, 0x12, 0x34, 0x0a,
	0x09, 0x72, 0x61, 0x6d, 0x70, 0x52, 0x61, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x52, 0x61, 0x6d, 0x70, 0x52, 0x61, 0x74, 0x65, 0x52, 0x09, 0x72, 0x61, 0x6d, 0x70, 0x52, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x1a, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50,
	0x77, 0x72, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x50,
	0x43, 0x52, 0x1a, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x77, 0x72, 0x53, 0x65,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x50, 0x0a,
	0x16, 0x72, 0x65, 0x61, 0x6c, 0x50, 0x77, 0x72, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x53, 0x50, 0x43, 0x52, 0x16, 0x72, 0x65, 0x61, 0x6c, 0x50, 0x77, 0x72,
	0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x2e, 0x0a, 0x05, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x50, 0x43, 0x52, 0x05, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12,
	0x36, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x73, 0x79, 0x6e, 0x63, 0x42,
	0x61, 0x63, 0x6b, 0x54, 0x6f, 0x47, 0x72, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x50, 0x43, 0x52, 0x0e, 0x73, 0x79, 0x6e, 0x63, 0x42,
	0x61, 0x63, 0x6b, 0x54, 0x6f, 0x47, 0x72, 0x69, 0x64, 0x12, 0x5e, 0x0a, 0x1d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x54, 0x6f, 0x49, 0x73, 0x6c, 0x6e, 0x64, 0x4f, 0x6e, 0x47, 0x72, 0x69, 0x64, 0x4c,
	0x6f, 0x73, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x50, 0x43, 0x52, 0x1d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x54, 0x6f, 0x49, 0x73, 0x6c, 0x6e, 0x64, 0x4f, 0x6e, 0x47, 0x72, 0x69, 0x64, 0x4c, 0x6f,
	0x73, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x16, 0x76, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x53, 0x50, 0x43, 0x52, 0x16, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08,
	0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x15, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x50,
	0x43, 0x52, 0x15, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0c, 0x68, 0x7a, 0x57, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x48, 0x7a,
	0x57, 0x41, 0x50, 0x43, 0x52, 0x0c, 0x68, 0x7a, 0x57, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x57, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x57, 0x41, 0x50, 0x43, 0x52, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x57, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0b, 0x70, 0x46, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x46, 0x53, 0x50, 0x43, 0x52,
	0x0b, 0x70, 0x46, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x11,
	0x74, 0x6d, 0x48, 0x7a, 0x54, 0x72, 0x69, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x6d, 0x48, 0x7a, 0x43, 0x53, 0x47, 0x52, 0x11,
	0x74, 0x6d, 0x48, 0x7a, 0x54, 0x72, 0x69, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x49, 0x0a, 0x13, 0x74, 0x6d, 0x56, 0x6f, 0x6c, 0x74, 0x54, 0x72, 0x69, 0x70, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x6d,
	0x56, 0x6f, 0x6c, 0x74, 0x43, 0x53, 0x47, 0x52, 0x13, 0x74, 0x6d, 0x56, 0x6f, 0x6c, 0x74, 0x54,
	0x72, 0x69, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0c,
	0x76, 0x41, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x56, 0x61, 0x72, 0x53, 0x50, 0x43, 0x52, 0x0c, 0x76, 0x41, 0x72, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x10, 0x76, 0x6f, 0x6c, 0x74, 0x56, 0x61,
	0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x56, 0x6f, 0x6c, 0x74, 0x56, 0x61, 0x72, 0x43, 0x53, 0x47, 0x52, 0x10, 0x76, 0x6f, 0x6c, 0x74,
	0x56, 0x61, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0e,
	0x76, 0x6f, 0x6c, 0x74, 0x57, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x56, 0x6f, 0x6c, 0x74, 0x57, 0x43, 0x53, 0x47, 0x52, 0x0e, 0x76, 0x6f,
	0x6c, 0x74, 0x57, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0d,
	0x77, 0x56, 0x61, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x57, 0x56, 0x61, 0x72, 0x43, 0x53, 0x47, 0x52, 0x0d, 0x77, 0x56, 0x61, 0x72,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x54, 0x0a, 0x0d, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x53, 0x47, 0x12, 0x43, 0x0a, 0x06, 0x63, 0x72,
	0x76, 0x50, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x08, 0x88,
	0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x06, 0x63, 0x72, 0x76, 0x50, 0x74, 0x73, 0x22,
	0x64, 0x0a, 0x1d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x53, 0x43, 0x48,
	0x12, 0x43, 0x0a, 0x07, 0x56, 0x61, 0x6c, 0x44, 0x43, 0x53, 0x47, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x53, 0x47, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x07, 0x56, 0x61,
	0x6c, 0x44, 0x43, 0x53, 0x47, 0x22, 0xd1, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x53, 0x43, 0x43, 0x12,
	0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x53, 0x43, 0x43, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x53, 0x43, 0x43, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x53,
	0x43, 0x43, 0x12, 0x75, 0x0a, 0x1d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x46,
	0x53, 0x43, 0x48, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x53, 0x43, 0x48, 0x52, 0x1d, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x53, 0x43, 0x48, 0x22, 0xed, 0x01, 0x0a, 0x11, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12,
	0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x5d, 0x0a, 0x15, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46,
	0x53, 0x43, 0x43, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x53,
	0x43, 0x43, 0x52, 0x15, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x53, 0x43, 0x43, 0x22, 0xa9, 0x02, 0x0a, 0x18, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x56, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x52,
	0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5,
	0x18, 0x01, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x6e,
	0x69, 0x74, 0x12, 0x5b, 0x0a, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x11, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x3a,
	0x04, 0xc0, 0xf3, 0x18, 0x01, 0x22, 0x88, 0x01, 0x0a, 0x0e, 0x44, 0x72, 0x6f, 0x6f, 0x70, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x75,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0e, 0x75, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x22, 0xd5, 0x02, 0x0a, 0x10, 0x52, 0x65, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x46, 0x0a, 0x0d, 0x64, 0x72, 0x6f, 0x6f, 0x70, 0x53, 0x65,
	0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x44, 0x72, 0x6f, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0d,
	0x64, 0x72, 0x6f, 0x6f, 0x70, 0x53, 0x65, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x4d, 0x0a,
	0x13, 0x69, 0x73, 0x6f, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x53, 0x65, 0x74, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x69, 0x73, 0x6f, 0x63, 0x68, 0x72, 0x6f,
	0x6e, 0x6f, 0x75, 0x73, 0x53, 0x65, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x5f, 0x0a, 0x14,
	0x72, 0x65, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x52, 0x65, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x14, 0x72, 0x65, 0x61, 0x6c, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a,
	0x11, 0x72, 0x65, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x65, 0x74, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x72, 0x65, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xb4, 0x03, 0x0a, 0x14, 0x52, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x12, 0x46, 0x0a, 0x0d, 0x64, 0x72, 0x6f, 0x6f, 0x70, 0x53, 0x65, 0x74, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x44, 0x72, 0x6f, 0x6f,
	0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0d, 0x64, 0x72, 0x6f, 0x6f,
	0x70, 0x53, 0x65, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x13, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x13, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x53, 0x65, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x6b, 0x0a, 0x18, 0x72, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x18, 0x72, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x51, 0x0a, 0x15, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x65, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x15, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x0f, 0x76, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f,
	0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22,
	0xc2, 0x02, 0x0a, 0x19, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69,
	0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x44, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x5a, 0x0a, 0x14, 0x52, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x14,
	0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x12, 0x4e, 0x0a, 0x10, 0x52, 0x65, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x52, 0x10, 0x52, 0x65, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x22, 0xc9, 0x02, 0x0a, 0x20, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x56, 0x0a, 0x12, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x12, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x52, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x55,
	0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x08, 0x88, 0xb5, 0x18,
	0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x73, 0x0a, 0x19, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52,
	0x19, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x72,
	0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x3a, 0x04, 0xc0, 0xf3, 0x18, 0x01,
	0x22, 0x8a, 0x03, 0x0a, 0x11, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x86, 0x01, 0x0a, 0x22, 0x63, 0x6f, 0x6e, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x22, 0x63, 0x6f, 0x6e,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x35, 0x0a, 0x09, 0x70, 0x68, 0x61, 0x73, 0x65, 0x4d, 0x4d, 0x54, 0x4e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x4d, 0x4d, 0x54, 0x4e, 0x52, 0x09, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x4d, 0x4d, 0x54, 0x4e, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x4d, 0x4d, 0x54, 0x52, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x4d, 0x4d, 0x54, 0x52, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d,
	0x4d, 0x54, 0x52, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d,
	0x58, 0x55, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d,
	0x4d, 0x58, 0x55, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x58, 0x55,
	0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x44, 0x43, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x44, 0x43,
	0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x44, 0x43, 0x22, 0xa9, 0x02,
	0x0a, 0x18, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x56, 0x0a, 0x12, 0x72, 0x65,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x12,
	0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x52, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x55, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x08, 0x88, 0xb5,
	0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x5b, 0x0a, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01,
	0x52, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x3a, 0x04, 0xc0, 0xf3, 0x18, 0x01, 0x22, 0xca, 0x0b, 0x0a, 0x15, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x11, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x11, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x18, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x18, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x3b, 0x0a, 0x0a, 0x70, 0x63, 0x74, 0x48, 0x7a, 0x44, 0x72, 0x6f, 0x6f, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x70, 0x63, 0x74, 0x48, 0x7a, 0x44, 0x72, 0x6f, 0x6f, 0x70, 0x12, 0x39, 0x0a, 0x09,
	0x70, 0x63, 0x74, 0x56, 0x44, 0x72, 0x6f, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x70, 0x63,
	0x74, 0x56, 0x44, 0x72, 0x6f, 0x6f, 0x70, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x61, 0x6d, 0x70, 0x52,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x61, 0x6d, 0x70, 0x52, 0x61,
	0x74, 0x65, 0x52, 0x09, 0x72, 0x61, 0x6d, 0x70, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x57, 0x0a,
	0x1a, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x77, 0x72, 0x53, 0x65, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x1a, 0x72, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x50, 0x77, 0x72, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x16, 0x72, 0x65, 0x61, 0x6c, 0x50, 0x77,
	0x72, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52,
	0x16, 0x72, 0x65, 0x61, 0x6c, 0x50, 0x77, 0x72, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x3f, 0x0a, 0x0e, 0x73, 0x79, 0x6e, 0x63, 0x42, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x47, 0x72, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53,
	0x52, 0x0e, 0x73, 0x79, 0x6e, 0x63, 0x42, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x47, 0x72, 0x69, 0x64,
	0x12, 0x5d, 0x0a, 0x1d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x6f, 0x49, 0x73, 0x6c, 0x6e, 0x64,
	0x4f, 0x6e, 0x47, 0x72, 0x69, 0x64, 0x4c, 0x6f, 0x73, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53,
	0x52, 0x1d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x6f, 0x49, 0x73, 0x6c, 0x6e, 0x64, 0x4f, 0x6e,
	0x47, 0x72, 0x69, 0x64, 0x4c, 0x6f, 0x73, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x4f, 0x0a, 0x16, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x16, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x53, 0x0a, 0x15, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x50, 0x43, 0x52, 0x15,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0c, 0x68, 0x7a, 0x57, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x48, 0x7a, 0x57, 0x41, 0x50,
	0x43, 0x52, 0x0c, 0x68, 0x7a, 0x57, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x41, 0x0a, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x57, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x57, 0x41, 0x50,
	0x43, 0x52, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x57, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0b, 0x70, 0x46, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x46, 0x53, 0x50, 0x43, 0x52, 0x0b, 0x70, 0x46,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x11, 0x74, 0x6d, 0x48,
	0x7a, 0x54, 0x72, 0x69, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x54, 0x6d, 0x48, 0x7a, 0x43, 0x53, 0x47, 0x52, 0x11, 0x74, 0x6d, 0x48,
	0x7a, 0x54, 0x72, 0x69, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49,
	0x0a, 0x13, 0x74, 0x6d, 0x56, 0x6f, 0x6c, 0x74, 0x54, 0x72, 0x69, 0x70, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x6d, 0x56, 0x6f, 0x6c,
	0x74, 0x43, 0x53, 0x47, 0x52, 0x13, 0x74, 0x6d, 0x56, 0x6f, 0x6c, 0x74, 0x54, 0x72, 0x69, 0x70,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0c, 0x76, 0x41, 0x72,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x56,
	0x61, 0x72, 0x53, 0x50, 0x43, 0x52, 0x0c, 0x76, 0x41, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x10, 0x76, 0x6f, 0x6c, 0x74, 0x56, 0x61, 0x72, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x56, 0x6f, 0x6c,
	0x74, 0x56, 0x61, 0x72, 0x43, 0x53, 0x47, 0x52, 0x10, 0x76, 0x6f, 0x6c, 0x74, 0x56, 0x61, 0x72,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0e, 0x76, 0x6f, 0x6c,
	0x74, 0x57, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x56, 0x6f, 0x6c, 0x74, 0x57, 0x43, 0x53, 0x47, 0x52, 0x0e, 0x76, 0x6f, 0x6c, 0x74, 0x57,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0d, 0x77, 0x56, 0x61,
	0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x57, 0x56, 0x61, 0x72, 0x43, 0x53, 0x47, 0x52, 0x0d, 0x77, 0x56, 0x61, 0x72, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe9, 0x05, 0x0a, 0x1c, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e, 0x12, 0x74, 0x0a, 0x1c, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52,
	0x1c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a,
	0x08, 0x41, 0x75, 0x78, 0x50, 0x77, 0x72, 0x53, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x08, 0x41, 0x75, 0x78, 0x50, 0x77, 0x72,
	0x53, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x65, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x4e, 0x53, 0x5f, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0b, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x45, 0x6d, 0x67, 0x53, 0x74,
	0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50,
	0x53, 0x52, 0x07, 0x45, 0x6d, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x31, 0x0a, 0x07, 0x47, 0x6e,
	0x53, 0x79, 0x6e, 0x53, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x53, 0x50, 0x53, 0x52, 0x07, 0x47, 0x6e, 0x53, 0x79, 0x6e, 0x53, 0x74, 0x12, 0x49, 0x0a,
	0x0b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x04, 0x41, 0x6c, 0x72, 0x6d,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x41,
	0x6c, 0x72, 0x6d, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x41, 0x6c, 0x72, 0x6d, 0x12, 0x60, 0x0a,
	0x13, 0x47, 0x72, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x47, 0x72, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x13, 0x47, 0x72, 0x69, 0x64,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x3e, 0x0a, 0x0b, 0x4d, 0x61, 0x6e, 0x41, 0x6c, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x4d, 0x61, 0x6e, 0x41, 0x6c, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x51, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69,
	0x6e, 0x64, 0x52, 0x0e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5a, 0x47, 0x45, 0x4e, 0x12, 0x78, 0x0a, 0x1c, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x1c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5a, 0x47, 0x45, 0x4e, 0x22, 0xaa, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x57, 0x0a, 0x13, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5a, 0x47, 0x45, 0x4e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5a, 0x47, 0x45, 0x4e, 0x52, 0x13, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5a, 0x47, 0x45,
	0x4e, 0x22, 0x9b, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x50, 0x0a, 0x10,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x10, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x52,
	0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5,
	0x18, 0x01, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x6e,
	0x69, 0x74, 0x12, 0x55, 0x0a, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x08,
	0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x3a, 0x04, 0xc0, 0xf3, 0x18, 0x01, 0x22,
	0x90, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e, 0x12, 0x78, 0x0a, 0x1c, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x01, 0x52, 0x1c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x47,
	0x45, 0x4e, 0x22, 0xb1, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5a, 0x0a, 0x14, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x47,
	0x45, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e,
	0x52, 0x14, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e, 0x22, 0xa2, 0x02, 0x0a, 0x17, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x53, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x01, 0x52, 0x11, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x52, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69,
	0x74, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0e, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x58, 0x0a, 0x10, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90,
	0xb5, 0x18, 0x01, 0x52, 0x10, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x04, 0xc0, 0xf3, 0x18, 0x01, 0x42, 0x90, 0x01, 0x0a, 0x18,
	0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x01, 0x5a, 0x57, 0x67, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2f, 0x70,
	0x73, 0x6d, 0x2f, 0x6f, 0x70, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x67, 0x6f, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2d, 0x6f, 0x70, 0x73, 0x2d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66,
	0x6d, 0x62, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0xaa, 0x02, 0x18, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2e, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_generationmodule_generationmodule_proto_rawDescOnce sync.Once
	file_generationmodule_generationmodule_proto_rawDescData = file_generationmodule_generationmodule_proto_rawDesc
)

func file_generationmodule_generationmodule_proto_rawDescGZIP() []byte {
	file_generationmodule_generationmodule_proto_rawDescOnce.Do(func() {
		file_generationmodule_generationmodule_proto_rawDescData = protoimpl.X.CompressGZIP(file_generationmodule_generationmodule_proto_rawDescData)
	})
	return file_generationmodule_generationmodule_proto_rawDescData
}

var file_generationmodule_generationmodule_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_generationmodule_generationmodule_proto_goTypes = []any{
	(*GeneratingUnit)(nil),                                  // 0: generationmodule.GeneratingUnit
	(*GenerationCapabilityConfiguration)(nil),               // 1: generationmodule.GenerationCapabilityConfiguration
	(*GenerationCapabilityOverride)(nil),                    // 2: generationmodule.GenerationCapabilityOverride
	(*GenerationCapabilityOverrideProfile)(nil),             // 3: generationmodule.GenerationCapabilityOverrideProfile
	(*GenerationCapabilityRatings)(nil),                     // 4: generationmodule.GenerationCapabilityRatings
	(*GenerationCapability)(nil),                            // 5: generationmodule.GenerationCapability
	(*GenerationCapabilityProfile)(nil),                     // 6: generationmodule.GenerationCapabilityProfile
	(*GenerationPoint)(nil),                                 // 7: generationmodule.GenerationPoint
	(*GenerationCSG)(nil),                                   // 8: generationmodule.GenerationCSG
	(*GenerationControlScheduleFSCH)(nil),                   // 9: generationmodule.GenerationControlScheduleFSCH
	(*GenerationControlFSCC)(nil),                           // 10: generationmodule.GenerationControlFSCC
	(*GenerationControl)(nil),                               // 11: generationmodule.GenerationControl
	(*GenerationControlProfile)(nil),                        // 12: generationmodule.GenerationControlProfile
	(*DroopParameter)(nil),                                  // 13: generationmodule.DroopParameter
	(*RealPowerControl)(nil),                                // 14: generationmodule.RealPowerControl
	(*ReactivePowerControl)(nil),                            // 15: generationmodule.ReactivePowerControl
	(*GenerationDiscreteControl)(nil),                       // 16: generationmodule.GenerationDiscreteControl
	(*GenerationDiscreteControlProfile)(nil),                // 17: generationmodule.GenerationDiscreteControlProfile
	(*GenerationReading)(nil),                               // 18: generationmodule.GenerationReading
	(*GenerationReadingProfile)(nil),                        // 19: generationmodule.GenerationReadingProfile
	(*GenerationPointStatus)(nil),                           // 20: generationmodule.GenerationPointStatus
	(*GenerationEventAndStatusZGEN)(nil),                    // 21: generationmodule.GenerationEventAndStatusZGEN
	(*GenerationEventZGEN)(nil),                             // 22: generationmodule.GenerationEventZGEN
	(*GenerationEvent)(nil),                                 // 23: generationmodule.GenerationEvent
	(*GenerationEventProfile)(nil),                          // 24: generationmodule.GenerationEventProfile
	(*GenerationStatusZGEN)(nil),                            // 25: generationmodule.GenerationStatusZGEN
	(*GenerationStatus)(nil),                                // 26: generationmodule.GenerationStatus
	(*GenerationStatusProfile)(nil),                         // 27: generationmodule.GenerationStatusProfile
	(*commonmodule.ConductingEquipment)(nil),                // 28: commonmodule.ConductingEquipment
	(*commonmodule.ActivePower)(nil),                        // 29: commonmodule.ActivePower
	(*commonmodule.SourceCapabilityConfiguration)(nil),      // 30: commonmodule.SourceCapabilityConfiguration
	(*commonmodule.IdentifiedObject)(nil),                   // 31: commonmodule.IdentifiedObject
	(*commonmodule.CapabilityMessageInfo)(nil),              // 32: commonmodule.CapabilityMessageInfo
	(*commonmodule.SourceCapabilityRatings)(nil),            // 33: commonmodule.SourceCapabilityRatings
	(*commonmodule.NameplateValue)(nil),                     // 34: commonmodule.NameplateValue
	(*commonmodule.ControlSPC)(nil),                         // 35: commonmodule.ControlSPC
	(*wrapperspb.FloatValue)(nil),                           // 36: google.protobuf.FloatValue
	(*commonmodule.RampRate)(nil),                           // 37: commonmodule.RampRate
	(*commonmodule.Optional_StateKind)(nil),                 // 38: commonmodule.Optional_StateKind
	(*commonmodule.ControlTimestamp)(nil),                   // 39: commonmodule.ControlTimestamp
	(*commonmodule.EnterServiceAPC)(nil),                    // 40: commonmodule.EnterServiceAPC
	(*commonmodule.HzWAPC)(nil),                             // 41: commonmodule.HzWAPC
	(*commonmodule.LimitWAPC)(nil),                          // 42: commonmodule.LimitWAPC
	(*commonmodule.PFSPC)(nil),                              // 43: commonmodule.PFSPC
	(*commonmodule.TmHzCSG)(nil),                            // 44: commonmodule.TmHzCSG
	(*commonmodule.TmVoltCSG)(nil),                          // 45: commonmodule.TmVoltCSG
	(*commonmodule.VarSPC)(nil),                             // 46: commonmodule.VarSPC
	(*commonmodule.VoltVarCSG)(nil),                         // 47: commonmodule.VoltVarCSG
	(*commonmodule.VoltWCSG)(nil),                           // 48: commonmodule.VoltWCSG
	(*commonmodule.WVarCSG)(nil),                            // 49: commonmodule.WVarCSG
	(*commonmodule.ControlFSCC)(nil),                        // 50: commonmodule.ControlFSCC
	(*commonmodule.ControlValue)(nil),                       // 51: commonmodule.ControlValue
	(*commonmodule.CheckConditions)(nil),                    // 52: commonmodule.CheckConditions
	(*commonmodule.ControlMessageInfo)(nil),                 // 53: commonmodule.ControlMessageInfo
	(*commonmodule.Optional_RealPowerControlKind)(nil),      // 54: commonmodule.Optional_RealPowerControlKind
	(*commonmodule.Optional_ReactivePowerControlKind)(nil),  // 55: commonmodule.Optional_ReactivePowerControlKind
	(*commonmodule.ConductingEquipmentTerminalReading)(nil), // 56: commonmodule.ConductingEquipmentTerminalReading
	(*commonmodule.PhaseMMTN)(nil),                          // 57: commonmodule.PhaseMMTN
	(*commonmodule.ReadingMMTR)(nil),                        // 58: commonmodule.ReadingMMTR
	(*commonmodule.ReadingMMXU)(nil),                        // 59: commonmodule.ReadingMMXU
	(*commonmodule.ReadingMMDC)(nil),                        // 60: commonmodule.ReadingMMDC
	(*commonmodule.ReadingMessageInfo)(nil),                 // 61: commonmodule.ReadingMessageInfo
	(*commonmodule.StatusSPS)(nil),                          // 62: commonmodule.StatusSPS
	(*commonmodule.LogicalNodeForEventAndStatus)(nil),       // 63: commonmodule.LogicalNodeForEventAndStatus
	(*commonmodule.ENS_DynamicTestKind)(nil),                // 64: commonmodule.ENS_DynamicTestKind
	(*commonmodule.Optional_AlrmKind)(nil),                  // 65: commonmodule.Optional_AlrmKind
	(*commonmodule.Optional_GridConnectionStateKind)(nil),   // 66: commonmodule.Optional_GridConnectionStateKind
	(*wrapperspb.StringValue)(nil),                          // 67: google.protobuf.StringValue
	(*commonmodule.Optional_OperatingStateKind)(nil),        // 68: commonmodule.Optional_OperatingStateKind
	(*commonmodule.EventValue)(nil),                         // 69: commonmodule.EventValue
	(*commonmodule.EventMessageInfo)(nil),                   // 70: commonmodule.EventMessageInfo
	(*commonmodule.StatusValue)(nil),                        // 71: commonmodule.StatusValue
	(*commonmodule.StatusMessageInfo)(nil),                  // 72: commonmodule.StatusMessageInfo
}
var file_generationmodule_generationmodule_proto_depIdxs = []int32{
	28,  // 0: generationmodule.GeneratingUnit.conductingEquipment:type_name -> commonmodule.ConductingEquipment
	29,  // 1: generationmodule.GeneratingUnit.maxOperatingP:type_name -> commonmodule.ActivePower
	30,  // 2: generationmodule.GenerationCapabilityConfiguration.sourceCapabilityConfiguration:type_name -> commonmodule.SourceCapabilityConfiguration
	31,  // 3: generationmodule.GenerationCapabilityOverride.identifiedObject:type_name -> commonmodule.IdentifiedObject
	1,   // 4: generationmodule.GenerationCapabilityOverride.generationCapabilityConfiguration:type_name -> generationmodule.GenerationCapabilityConfiguration
	32,  // 5: generationmodule.GenerationCapabilityOverrideProfile.capabilityMessageInfo:type_name -> commonmodule.CapabilityMessageInfo
	2,   // 6: generationmodule.GenerationCapabilityOverrideProfile.generationCapabilityOverride:type_name -> generationmodule.GenerationCapabilityOverride
	0,   // 7: generationmodule.GenerationCapabilityOverrideProfile.generatingUnit:type_name -> generationmodule.GeneratingUnit
	33,  // 8: generationmodule.GenerationCapabilityRatings.sourceCapabilityRatings:type_name -> commonmodule.SourceCapabilityRatings
	34,  // 9: generationmodule.GenerationCapability.nameplateValue:type_name -> commonmodule.NameplateValue
	4,   // 10: generationmodule.GenerationCapability.generationCapabilityRatings:type_name -> generationmodule.GenerationCapabilityRatings
	1,   // 11: generationmodule.GenerationCapability.generationCapabilityConfiguration:type_name -> generationmodule.GenerationCapabilityConfiguration
	32,  // 12: generationmodule.GenerationCapabilityProfile.capabilityMessageInfo:type_name -> commonmodule.CapabilityMessageInfo
	5,   // 13: generationmodule.GenerationCapabilityProfile.generationCapability:type_name -> generationmodule.GenerationCapability
	0,   // 14: generationmodule.GenerationCapabilityProfile.generatingUnit:type_name -> generationmodule.GeneratingUnit
	35,  // 15: generationmodule.GenerationPoint.blackStartEnabled:type_name -> commonmodule.ControlSPC
	35,  // 16: generationmodule.GenerationPoint.frequencySetPointEnabled:type_name -> commonmodule.ControlSPC
	36,  // 17: generationmodule.GenerationPoint.pctHzDroop:type_name -> google.protobuf.FloatValue
	36,  // 18: generationmodule.GenerationPoint.pctVDroop:type_name -> google.protobuf.FloatValue
	37,  // 19: generationmodule.GenerationPoint.rampRates:type_name -> commonmodule.RampRate
	35,  // 20: generationmodule.GenerationPoint.reactivePwrSetPointEnabled:type_name -> commonmodule.ControlSPC
	35,  // 21: generationmodule.GenerationPoint.realPwrSetPointEnabled:type_name -> commonmodule.ControlSPC
	35,  // 22: generationmodule.GenerationPoint.reset:type_name -> commonmodule.ControlSPC
	38,  // 23: generationmodule.GenerationPoint.state:type_name -> commonmodule.Optional_StateKind
	35,  // 24: generationmodule.GenerationPoint.syncBackToGrid:type_name -> commonmodule.ControlSPC
	35,  // 25: generationmodule.GenerationPoint.transToIslndOnGridLossEnabled:type_name -> commonmodule.ControlSPC
	35,  // 26: generationmodule.GenerationPoint.voltageSetPointEnabled:type_name -> commonmodule.ControlSPC
	39,  // 27: generationmodule.GenerationPoint.startTime:type_name -> commonmodule.ControlTimestamp
	40,  // 28: generationmodule.GenerationPoint.enterServiceOperation:type_name -> commonmodule.EnterServiceAPC
	41,  // 29: generationmodule.GenerationPoint.hzWOperation:type_name -> commonmodule.HzWAPC
	42,  // 30: generationmodule.GenerationPoint.limitWOperation:type_name -> commonmodule.LimitWAPC
	43,  // 31: generationmodule.GenerationPoint.pFOperation:type_name -> commonmodule.PFSPC
	44,  // 32: generationmodule.GenerationPoint.tmHzTripOperation:type_name -> commonmodule.TmHzCSG
	45,  // 33: generationmodule.GenerationPoint.tmVoltTripOperation:type_name -> commonmodule.TmVoltCSG
	46,  // 34: generationmodule.GenerationPoint.vArOperation:type_name -> commonmodule.VarSPC
	47,  // 35: generationmodule.GenerationPoint.voltVarOperation:type_name -> commonmodule.VoltVarCSG
	48,  // 36: generationmodule.GenerationPoint.voltWOperation:type_name -> commonmodule.VoltWCSG
	49,  // 37: generationmodule.GenerationPoint.wVarOperation:type_name -> commonmodule.WVarCSG
	7,   // 38: generationmodule.GenerationCSG.crvPts:type_name -> generationmodule.GenerationPoint
	8,   // 39: generationmodule.GenerationControlScheduleFSCH.ValDCSG:type_name -> generationmodule.GenerationCSG
	50,  // 40: generationmodule.GenerationControlFSCC.controlFSCC:type_name -> commonmodule.ControlFSCC
	9,   // 41: generationmodule.GenerationControlFSCC.GenerationControlScheduleFSCH:type_name -> generationmodule.GenerationControlScheduleFSCH
	51,  // 42: generationmodule.GenerationControl.controlValue:type_name -> commonmodule.ControlValue
	52,  // 43: generationmodule.GenerationControl.check:type_name -> commonmodule.CheckConditions
	10,  // 44: generationmodule.GenerationControl.generationControlFSCC:type_name -> generationmodule.GenerationControlFSCC
	53,  // 45: generationmodule.GenerationControlProfile.controlMessageInfo:type_name -> commonmodule.ControlMessageInfo
	0,   // 46: generationmodule.GenerationControlProfile.generatingUnit:type_name -> generationmodule.GeneratingUnit
	11,  // 47: generationmodule.GenerationControlProfile.generationControl:type_name -> generationmodule.GenerationControl
	36,  // 48: generationmodule.DroopParameter.slope:type_name -> google.protobuf.FloatValue
	36,  // 49: generationmodule.DroopParameter.unloadedOffset:type_name -> google.protobuf.FloatValue
	13,  // 50: generationmodule.RealPowerControl.droopSetpoint:type_name -> generationmodule.DroopParameter
	36,  // 51: generationmodule.RealPowerControl.isochronousSetpoint:type_name -> google.protobuf.FloatValue
	54,  // 52: generationmodule.RealPowerControl.realPowerControlMode:type_name -> commonmodule.Optional_RealPowerControlKind
	36,  // 53: generationmodule.RealPowerControl.realPowerSetpoint:type_name -> google.protobuf.FloatValue
	13,  // 54: generationmodule.ReactivePowerControl.droopSetpoint:type_name -> generationmodule.DroopParameter
	36,  // 55: generationmodule.ReactivePowerControl.powerFactorSetpoint:type_name -> google.protobuf.FloatValue
	55,  // 56: generationmodule.ReactivePowerControl.reactivePowerControlMode:type_name -> commonmodule.Optional_ReactivePowerControlKind
	36,  // 57: generationmodule.ReactivePowerControl.reactivePowerSetpoint:type_name -> google.protobuf.FloatValue
	36,  // 58: generationmodule.ReactivePowerControl.voltageSetpoint:type_name -> google.protobuf.FloatValue
	51,  // 59: generationmodule.GenerationDiscreteControl.controlValue:type_name -> commonmodule.ControlValue
	52,  // 60: generationmodule.GenerationDiscreteControl.check:type_name -> commonmodule.CheckConditions
	15,  // 61: generationmodule.GenerationDiscreteControl.ReactivePowerControl:type_name -> generationmodule.ReactivePowerControl
	14,  // 62: generationmodule.GenerationDiscreteControl.RealPowerControl:type_name -> generationmodule.RealPowerControl
	53,  // 63: generationmodule.GenerationDiscreteControlProfile.controlMessageInfo:type_name -> commonmodule.ControlMessageInfo
	0,   // 64: generationmodule.GenerationDiscreteControlProfile.generatingUnit:type_name -> generationmodule.GeneratingUnit
	16,  // 65: generationmodule.GenerationDiscreteControlProfile.generationDiscreteControl:type_name -> generationmodule.GenerationDiscreteControl
	56,  // 66: generationmodule.GenerationReading.conductingEquipmentTerminalReading:type_name -> commonmodule.ConductingEquipmentTerminalReading
	57,  // 67: generationmodule.GenerationReading.phaseMMTN:type_name -> commonmodule.PhaseMMTN
	58,  // 68: generationmodule.GenerationReading.readingMMTR:type_name -> commonmodule.ReadingMMTR
	59,  // 69: generationmodule.GenerationReading.readingMMXU:type_name -> commonmodule.ReadingMMXU
	60,  // 70: generationmodule.GenerationReading.readingMMDC:type_name -> commonmodule.ReadingMMDC
	61,  // 71: generationmodule.GenerationReadingProfile.readingMessageInfo:type_name -> commonmodule.ReadingMessageInfo
	0,   // 72: generationmodule.GenerationReadingProfile.generatingUnit:type_name -> generationmodule.GeneratingUnit
	18,  // 73: generationmodule.GenerationReadingProfile.generationReading:type_name -> generationmodule.GenerationReading
	62,  // 74: generationmodule.GenerationPointStatus.blackStartEnabled:type_name -> commonmodule.StatusSPS
	62,  // 75: generationmodule.GenerationPointStatus.frequencySetPointEnabled:type_name -> commonmodule.StatusSPS
	36,  // 76: generationmodule.GenerationPointStatus.pctHzDroop:type_name -> google.protobuf.FloatValue
	36,  // 77: generationmodule.GenerationPointStatus.pctVDroop:type_name -> google.protobuf.FloatValue
	37,  // 78: generationmodule.GenerationPointStatus.rampRates:type_name -> commonmodule.RampRate
	62,  // 79: generationmodule.GenerationPointStatus.reactivePwrSetPointEnabled:type_name -> commonmodule.StatusSPS
	62,  // 80: generationmodule.GenerationPointStatus.realPwrSetPointEnabled:type_name -> commonmodule.StatusSPS
	38,  // 81: generationmodule.GenerationPointStatus.state:type_name -> commonmodule.Optional_StateKind
	62,  // 82: generationmodule.GenerationPointStatus.syncBackToGrid:type_name -> commonmodule.StatusSPS
	62,  // 83: generationmodule.GenerationPointStatus.transToIslndOnGridLossEnabled:type_name -> commonmodule.StatusSPS
	62,  // 84: generationmodule.GenerationPointStatus.voltageSetPointEnabled:type_name -> commonmodule.StatusSPS
	40,  // 85: generationmodule.GenerationPointStatus.enterServiceOperation:type_name -> commonmodule.EnterServiceAPC
	41,  // 86: generationmodule.GenerationPointStatus.hzWOperation:type_name -> commonmodule.HzWAPC
	42,  // 87: generationmodule.GenerationPointStatus.limitWOperation:type_name -> commonmodule.LimitWAPC
	43,  // 88: generationmodule.GenerationPointStatus.pFOperation:type_name -> commonmodule.PFSPC
	44,  // 89: generationmodule.GenerationPointStatus.tmHzTripOperation:type_name -> commonmodule.TmHzCSG
	45,  // 90: generationmodule.GenerationPointStatus.tmVoltTripOperation:type_name -> commonmodule.TmVoltCSG
	46,  // 91: generationmodule.GenerationPointStatus.vArOperation:type_name -> commonmodule.VarSPC
	47,  // 92: generationmodule.GenerationPointStatus.voltVarOperation:type_name -> commonmodule.VoltVarCSG
	48,  // 93: generationmodule.GenerationPointStatus.voltWOperation:type_name -> commonmodule.VoltWCSG
	49,  // 94: generationmodule.GenerationPointStatus.wVarOperation:type_name -> commonmodule.WVarCSG
	63,  // 95: generationmodule.GenerationEventAndStatusZGEN.logicalNodeForEventAndStatus:type_name -> commonmodule.LogicalNodeForEventAndStatus
	62,  // 96: generationmodule.GenerationEventAndStatusZGEN.AuxPwrSt:type_name -> commonmodule.StatusSPS
	64,  // 97: generationmodule.GenerationEventAndStatusZGEN.DynamicTest:type_name -> commonmodule.ENS_DynamicTestKind
	62,  // 98: generationmodule.GenerationEventAndStatusZGEN.EmgStop:type_name -> commonmodule.StatusSPS
	62,  // 99: generationmodule.GenerationEventAndStatusZGEN.GnSynSt:type_name -> commonmodule.StatusSPS
	20,  // 100: generationmodule.GenerationEventAndStatusZGEN.PointStatus:type_name -> generationmodule.GenerationPointStatus
	65,  // 101: generationmodule.GenerationEventAndStatusZGEN.Alrm:type_name -> commonmodule.Optional_AlrmKind
	66,  // 102: generationmodule.GenerationEventAndStatusZGEN.GridConnectionState:type_name -> commonmodule.Optional_GridConnectionStateKind
	67,  // 103: generationmodule.GenerationEventAndStatusZGEN.ManAlrmInfo:type_name -> google.protobuf.StringValue
	68,  // 104: generationmodule.GenerationEventAndStatusZGEN.OperatingState:type_name -> commonmodule.Optional_OperatingStateKind
	21,  // 105: generationmodule.GenerationEventZGEN.generationEventAndStatusZGEN:type_name -> generationmodule.GenerationEventAndStatusZGEN
	69,  // 106: generationmodule.GenerationEvent.eventValue:type_name -> commonmodule.EventValue
	22,  // 107: generationmodule.GenerationEvent.generationEventZGEN:type_name -> generationmodule.GenerationEventZGEN
	70,  // 108: generationmodule.GenerationEventProfile.eventMessageInfo:type_name -> commonmodule.EventMessageInfo
	0,   // 109: generationmodule.GenerationEventProfile.generatingUnit:type_name -> generationmodule.GeneratingUnit
	23,  // 110: generationmodule.GenerationEventProfile.generationEvent:type_name -> generationmodule.GenerationEvent
	21,  // 111: generationmodule.GenerationStatusZGEN.generationEventAndStatusZGEN:type_name -> generationmodule.GenerationEventAndStatusZGEN
	71,  // 112: generationmodule.GenerationStatus.statusValue:type_name -> commonmodule.StatusValue
	25,  // 113: generationmodule.GenerationStatus.generationStatusZGEN:type_name -> generationmodule.GenerationStatusZGEN
	72,  // 114: generationmodule.GenerationStatusProfile.statusMessageInfo:type_name -> commonmodule.StatusMessageInfo
	0,   // 115: generationmodule.GenerationStatusProfile.generatingUnit:type_name -> generationmodule.GeneratingUnit
	26,  // 116: generationmodule.GenerationStatusProfile.generationStatus:type_name -> generationmodule.GenerationStatus
	117, // [117:117] is the sub-list for method output_type
	117, // [117:117] is the sub-list for method input_type
	117, // [117:117] is the sub-list for extension type_name
	117, // [117:117] is the sub-list for extension extendee
	0,   // [0:117] is the sub-list for field type_name
}

func init() { file_generationmodule_generationmodule_proto_init() }
func file_generationmodule_generationmodule_proto_init() {
	if File_generationmodule_generationmodule_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_generationmodule_generationmodule_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_generationmodule_generationmodule_proto_goTypes,
		DependencyIndexes: file_generationmodule_generationmodule_proto_depIdxs,
		MessageInfos:      file_generationmodule_generationmodule_proto_msgTypes,
	}.Build()
	File_generationmodule_generationmodule_proto = out.File
	file_generationmodule_generationmodule_proto_rawDesc = nil
	file_generationmodule_generationmodule_proto_goTypes = nil
	file_generationmodule_generationmodule_proto_depIdxs = nil
}
