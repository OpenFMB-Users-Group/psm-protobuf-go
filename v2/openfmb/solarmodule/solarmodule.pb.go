// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.6
// source: solarmodule/solarmodule.proto

// OpenFMB Operational Model (61850-CIM) (v2.0.0).eap
// Tuesday, April 27, 2021 7:07:08 PM UTC

package solarmodule

import (
	_ "gitlab.com/openfmb/psm/ops/protobuf/go-openfmb-ops-protobuf/v2/openfmb"
	commonmodule "gitlab.com/openfmb/psm/ops/protobuf/go-openfmb-ops-protobuf/v2/openfmb/commonmodule"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Point definition (Point)
type SolarPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enable frequency set point
	FrequencySetPointEnabled *commonmodule.ControlSPC `protobuf:"bytes,1,opt,name=frequencySetPointEnabled,proto3" json:"frequencySetPointEnabled,omitempty"`
	// Grid connect mode
	Mode *commonmodule.ENG_GridConnectModeKind `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty"`
	// Black start enable
	PctHzDroop *wrapperspb.FloatValue `protobuf:"bytes,3,opt,name=pctHzDroop,proto3" json:"pctHzDroop,omitempty"`
	// Black start enable
	PctVDroop *wrapperspb.FloatValue `protobuf:"bytes,4,opt,name=pctVDroop,proto3" json:"pctVDroop,omitempty"`
	// Ramp rates
	RampRates *commonmodule.RampRate `protobuf:"bytes,5,opt,name=rampRates,proto3" json:"rampRates,omitempty"`
	// Enable reactive power set point
	ReactivePwrSetPointEnabled *commonmodule.ControlSPC `protobuf:"bytes,6,opt,name=reactivePwrSetPointEnabled,proto3" json:"reactivePwrSetPointEnabled,omitempty"`
	// Enable real power set point
	RealPwrSetPointEnabled *commonmodule.ControlSPC `protobuf:"bytes,7,opt,name=realPwrSetPointEnabled,proto3" json:"realPwrSetPointEnabled,omitempty"`
	// Reset device
	Reset_ *commonmodule.ControlSPC `protobuf:"bytes,8,opt,name=reset,proto3" json:"reset,omitempty"`
	// ESS state
	State *commonmodule.Optional_StateKind `protobuf:"bytes,9,opt,name=state,proto3" json:"state,omitempty"`
	// Enable voltage set point
	VoltageSetPointEnabled *commonmodule.ControlSPC `protobuf:"bytes,10,opt,name=voltageSetPointEnabled,proto3" json:"voltageSetPointEnabled,omitempty"`
	// X-axis value (Unix time).
	StartTime *commonmodule.ControlTimestamp `protobuf:"bytes,11,opt,name=startTime,proto3" json:"startTime,omitempty"`
}

func (x *SolarPoint) Reset() {
	*x = SolarPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solarmodule_solarmodule_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolarPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarPoint) ProtoMessage() {}

func (x *SolarPoint) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarPoint.ProtoReflect.Descriptor instead.
func (*SolarPoint) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{0}
}

func (x *SolarPoint) GetFrequencySetPointEnabled() *commonmodule.ControlSPC {
	if x != nil {
		return x.FrequencySetPointEnabled
	}
	return nil
}

func (x *SolarPoint) GetMode() *commonmodule.ENG_GridConnectModeKind {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *SolarPoint) GetPctHzDroop() *wrapperspb.FloatValue {
	if x != nil {
		return x.PctHzDroop
	}
	return nil
}

func (x *SolarPoint) GetPctVDroop() *wrapperspb.FloatValue {
	if x != nil {
		return x.PctVDroop
	}
	return nil
}

func (x *SolarPoint) GetRampRates() *commonmodule.RampRate {
	if x != nil {
		return x.RampRates
	}
	return nil
}

func (x *SolarPoint) GetReactivePwrSetPointEnabled() *commonmodule.ControlSPC {
	if x != nil {
		return x.ReactivePwrSetPointEnabled
	}
	return nil
}

func (x *SolarPoint) GetRealPwrSetPointEnabled() *commonmodule.ControlSPC {
	if x != nil {
		return x.RealPwrSetPointEnabled
	}
	return nil
}

func (x *SolarPoint) GetReset_() *commonmodule.ControlSPC {
	if x != nil {
		return x.Reset_
	}
	return nil
}

func (x *SolarPoint) GetState() *commonmodule.Optional_StateKind {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *SolarPoint) GetVoltageSetPointEnabled() *commonmodule.ControlSPC {
	if x != nil {
		return x.VoltageSetPointEnabled
	}
	return nil
}

func (x *SolarPoint) GetStartTime() *commonmodule.ControlTimestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

// Curve shape setting (FC=SP) (CSG_SP)
type SolarCSG struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The array with the points specifying a curve shape.
	CrvPts []*SolarPoint `protobuf:"bytes,1,rep,name=crvPts,proto3" json:"crvPts,omitempty"`
}

func (x *SolarCSG) Reset() {
	*x = SolarCSG{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solarmodule_solarmodule_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolarCSG) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarCSG) ProtoMessage() {}

func (x *SolarCSG) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarCSG.ProtoReflect.Descriptor instead.
func (*SolarCSG) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{1}
}

func (x *SolarCSG) GetCrvPts() []*SolarPoint {
	if x != nil {
		return x.CrvPts
	}
	return nil
}

// OpenFMB specialization for control schedule using:  LN: Schedule   Name: FSCH
type SolarControlScheduleFSCH struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Discrete value in SolarCSG type
	ValDCSG *SolarCSG `protobuf:"bytes,1,opt,name=ValDCSG,proto3" json:"ValDCSG,omitempty"`
}

func (x *SolarControlScheduleFSCH) Reset() {
	*x = SolarControlScheduleFSCH{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solarmodule_solarmodule_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolarControlScheduleFSCH) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarControlScheduleFSCH) ProtoMessage() {}

func (x *SolarControlScheduleFSCH) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarControlScheduleFSCH.ProtoReflect.Descriptor instead.
func (*SolarControlScheduleFSCH) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{2}
}

func (x *SolarControlScheduleFSCH) GetValDCSG() *SolarCSG {
	if x != nil {
		return x.ValDCSG
	}
	return nil
}

// Specialized 61850 FSCC class.  LN: Schedule controller   Name: FSCC
type SolarControlFSCC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ControlFSCC *commonmodule.ControlFSCC `protobuf:"bytes,1,opt,name=controlFSCC,proto3" json:"controlFSCC,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarControlScheduleFSCH *SolarControlScheduleFSCH `protobuf:"bytes,2,opt,name=SolarControlScheduleFSCH,proto3" json:"SolarControlScheduleFSCH,omitempty"`
}

func (x *SolarControlFSCC) Reset() {
	*x = SolarControlFSCC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solarmodule_solarmodule_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolarControlFSCC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarControlFSCC) ProtoMessage() {}

func (x *SolarControlFSCC) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarControlFSCC.ProtoReflect.Descriptor instead.
func (*SolarControlFSCC) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{3}
}

func (x *SolarControlFSCC) GetControlFSCC() *commonmodule.ControlFSCC {
	if x != nil {
		return x.ControlFSCC
	}
	return nil
}

func (x *SolarControlFSCC) GetSolarControlScheduleFSCH() *SolarControlScheduleFSCH {
	if x != nil {
		return x.SolarControlScheduleFSCH
	}
	return nil
}

// Solar control
type SolarControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ControlValue *commonmodule.ControlValue `protobuf:"bytes,1,opt,name=controlValue,proto3" json:"controlValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	Check *commonmodule.CheckConditions `protobuf:"bytes,2,opt,name=check,proto3" json:"check,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarControlFSCC *SolarControlFSCC `protobuf:"bytes,3,opt,name=solarControlFSCC,proto3" json:"solarControlFSCC,omitempty"`
}

func (x *SolarControl) Reset() {
	*x = SolarControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solarmodule_solarmodule_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolarControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarControl) ProtoMessage() {}

func (x *SolarControl) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarControl.ProtoReflect.Descriptor instead.
func (*SolarControl) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{4}
}

func (x *SolarControl) GetControlValue() *commonmodule.ControlValue {
	if x != nil {
		return x.ControlValue
	}
	return nil
}

func (x *SolarControl) GetCheck() *commonmodule.CheckConditions {
	if x != nil {
		return x.Check
	}
	return nil
}

func (x *SolarControl) GetSolarControlFSCC() *SolarControlFSCC {
	if x != nil {
		return x.SolarControlFSCC
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type SolarInverter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ConductingEquipment *commonmodule.ConductingEquipment `protobuf:"bytes,1,opt,name=conductingEquipment,proto3" json:"conductingEquipment,omitempty"`
}

func (x *SolarInverter) Reset() {
	*x = SolarInverter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solarmodule_solarmodule_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolarInverter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarInverter) ProtoMessage() {}

func (x *SolarInverter) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarInverter.ProtoReflect.Descriptor instead.
func (*SolarInverter) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{5}
}

func (x *SolarInverter) GetConductingEquipment() *commonmodule.ConductingEquipment {
	if x != nil {
		return x.ConductingEquipment
	}
	return nil
}

// Solar control profile
type SolarControlProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ControlMessageInfo *commonmodule.ControlMessageInfo `protobuf:"bytes,1,opt,name=controlMessageInfo,proto3" json:"controlMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarControl *SolarControl `protobuf:"bytes,2,opt,name=solarControl,proto3" json:"solarControl,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarInverter *SolarInverter `protobuf:"bytes,3,opt,name=solarInverter,proto3" json:"solarInverter,omitempty"`
}

func (x *SolarControlProfile) Reset() {
	*x = SolarControlProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solarmodule_solarmodule_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolarControlProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarControlProfile) ProtoMessage() {}

func (x *SolarControlProfile) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarControlProfile.ProtoReflect.Descriptor instead.
func (*SolarControlProfile) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{6}
}

func (x *SolarControlProfile) GetControlMessageInfo() *commonmodule.ControlMessageInfo {
	if x != nil {
		return x.ControlMessageInfo
	}
	return nil
}

func (x *SolarControlProfile) GetSolarControl() *SolarControl {
	if x != nil {
		return x.SolarControl
	}
	return nil
}

func (x *SolarControlProfile) GetSolarInverter() *SolarInverter {
	if x != nil {
		return x.SolarInverter
	}
	return nil
}

// Point definition (Point)
type SolarPointStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enable frequency set point
	FrequencySetPointEnabled *commonmodule.StatusSPS `protobuf:"bytes,1,opt,name=frequencySetPointEnabled,proto3" json:"frequencySetPointEnabled,omitempty"`
	// Grid connect mode
	Mode *commonmodule.ENG_GridConnectModeKind `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty"`
	// Black start enable
	PctHzDroop *wrapperspb.FloatValue `protobuf:"bytes,3,opt,name=pctHzDroop,proto3" json:"pctHzDroop,omitempty"`
	// Black start enable
	PctVDroop *wrapperspb.FloatValue `protobuf:"bytes,4,opt,name=pctVDroop,proto3" json:"pctVDroop,omitempty"`
	// Ramp rates
	RampRates *commonmodule.RampRate `protobuf:"bytes,5,opt,name=rampRates,proto3" json:"rampRates,omitempty"`
	// Enable reactive power set point
	ReactivePwrSetPointEnabled *commonmodule.StatusSPS `protobuf:"bytes,6,opt,name=reactivePwrSetPointEnabled,proto3" json:"reactivePwrSetPointEnabled,omitempty"`
	// Enable real power set point
	RealPwrSetPointEnabled *commonmodule.StatusSPS `protobuf:"bytes,7,opt,name=realPwrSetPointEnabled,proto3" json:"realPwrSetPointEnabled,omitempty"`
	// ESS state
	State *commonmodule.Optional_StateKind `protobuf:"bytes,8,opt,name=state,proto3" json:"state,omitempty"`
	// Enable voltage set point
	VoltageSetPointEnabled *commonmodule.StatusSPS `protobuf:"bytes,9,opt,name=voltageSetPointEnabled,proto3" json:"voltageSetPointEnabled,omitempty"`
}

func (x *SolarPointStatus) Reset() {
	*x = SolarPointStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solarmodule_solarmodule_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolarPointStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarPointStatus) ProtoMessage() {}

func (x *SolarPointStatus) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarPointStatus.ProtoReflect.Descriptor instead.
func (*SolarPointStatus) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{7}
}

func (x *SolarPointStatus) GetFrequencySetPointEnabled() *commonmodule.StatusSPS {
	if x != nil {
		return x.FrequencySetPointEnabled
	}
	return nil
}

func (x *SolarPointStatus) GetMode() *commonmodule.ENG_GridConnectModeKind {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *SolarPointStatus) GetPctHzDroop() *wrapperspb.FloatValue {
	if x != nil {
		return x.PctHzDroop
	}
	return nil
}

func (x *SolarPointStatus) GetPctVDroop() *wrapperspb.FloatValue {
	if x != nil {
		return x.PctVDroop
	}
	return nil
}

func (x *SolarPointStatus) GetRampRates() *commonmodule.RampRate {
	if x != nil {
		return x.RampRates
	}
	return nil
}

func (x *SolarPointStatus) GetReactivePwrSetPointEnabled() *commonmodule.StatusSPS {
	if x != nil {
		return x.ReactivePwrSetPointEnabled
	}
	return nil
}

func (x *SolarPointStatus) GetRealPwrSetPointEnabled() *commonmodule.StatusSPS {
	if x != nil {
		return x.RealPwrSetPointEnabled
	}
	return nil
}

func (x *SolarPointStatus) GetState() *commonmodule.Optional_StateKind {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *SolarPointStatus) GetVoltageSetPointEnabled() *commonmodule.StatusSPS {
	if x != nil {
		return x.VoltageSetPointEnabled
	}
	return nil
}

// Specialized 61850 ZGEN class
type SolarEventAndStatusZGEN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	LogicalNodeForEventAndStatus *commonmodule.LogicalNodeForEventAndStatus `protobuf:"bytes,1,opt,name=logicalNodeForEventAndStatus,proto3" json:"logicalNodeForEventAndStatus,omitempty"`
	// DC Power On/Off Status; True = DC power on
	AuxPwrSt *commonmodule.StatusSPS `protobuf:"bytes,2,opt,name=AuxPwrSt,proto3" json:"AuxPwrSt,omitempty"`
	// MISSING DOCUMENTATION!!!
	DynamicTest *commonmodule.ENS_DynamicTestKind `protobuf:"bytes,3,opt,name=DynamicTest,proto3" json:"DynamicTest,omitempty"`
	// Emergency stop
	EmgStop *commonmodule.StatusSPS `protobuf:"bytes,4,opt,name=EmgStop,proto3" json:"EmgStop,omitempty"`
	// MISSING DOCUMENTATION!!!
	PointStatus *SolarPointStatus `protobuf:"bytes,5,opt,name=PointStatus,proto3" json:"PointStatus,omitempty"`
}

func (x *SolarEventAndStatusZGEN) Reset() {
	*x = SolarEventAndStatusZGEN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solarmodule_solarmodule_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolarEventAndStatusZGEN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarEventAndStatusZGEN) ProtoMessage() {}

func (x *SolarEventAndStatusZGEN) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarEventAndStatusZGEN.ProtoReflect.Descriptor instead.
func (*SolarEventAndStatusZGEN) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{8}
}

func (x *SolarEventAndStatusZGEN) GetLogicalNodeForEventAndStatus() *commonmodule.LogicalNodeForEventAndStatus {
	if x != nil {
		return x.LogicalNodeForEventAndStatus
	}
	return nil
}

func (x *SolarEventAndStatusZGEN) GetAuxPwrSt() *commonmodule.StatusSPS {
	if x != nil {
		return x.AuxPwrSt
	}
	return nil
}

func (x *SolarEventAndStatusZGEN) GetDynamicTest() *commonmodule.ENS_DynamicTestKind {
	if x != nil {
		return x.DynamicTest
	}
	return nil
}

func (x *SolarEventAndStatusZGEN) GetEmgStop() *commonmodule.StatusSPS {
	if x != nil {
		return x.EmgStop
	}
	return nil
}

func (x *SolarEventAndStatusZGEN) GetPointStatus() *SolarPointStatus {
	if x != nil {
		return x.PointStatus
	}
	return nil
}

// Specialized 61850 ZGEN class
type SolarEventZGEN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	SolarEventAndStatusZGEN *SolarEventAndStatusZGEN `protobuf:"bytes,1,opt,name=solarEventAndStatusZGEN,proto3" json:"solarEventAndStatusZGEN,omitempty"`
	// MISSING DOCUMENTATION!!!
	GriMod *commonmodule.ENG_GridConnectModeKind `protobuf:"bytes,2,opt,name=GriMod,proto3" json:"GriMod,omitempty"`
}

func (x *SolarEventZGEN) Reset() {
	*x = SolarEventZGEN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solarmodule_solarmodule_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolarEventZGEN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarEventZGEN) ProtoMessage() {}

func (x *SolarEventZGEN) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarEventZGEN.ProtoReflect.Descriptor instead.
func (*SolarEventZGEN) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{9}
}

func (x *SolarEventZGEN) GetSolarEventAndStatusZGEN() *SolarEventAndStatusZGEN {
	if x != nil {
		return x.SolarEventAndStatusZGEN
	}
	return nil
}

func (x *SolarEventZGEN) GetGriMod() *commonmodule.ENG_GridConnectModeKind {
	if x != nil {
		return x.GriMod
	}
	return nil
}

// Solar event
type SolarEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	EventValue *commonmodule.EventValue `protobuf:"bytes,1,opt,name=eventValue,proto3" json:"eventValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarEventZGEN *SolarEventZGEN `protobuf:"bytes,2,opt,name=solarEventZGEN,proto3" json:"solarEventZGEN,omitempty"`
}

func (x *SolarEvent) Reset() {
	*x = SolarEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solarmodule_solarmodule_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolarEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarEvent) ProtoMessage() {}

func (x *SolarEvent) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarEvent.ProtoReflect.Descriptor instead.
func (*SolarEvent) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{10}
}

func (x *SolarEvent) GetEventValue() *commonmodule.EventValue {
	if x != nil {
		return x.EventValue
	}
	return nil
}

func (x *SolarEvent) GetSolarEventZGEN() *SolarEventZGEN {
	if x != nil {
		return x.SolarEventZGEN
	}
	return nil
}

// Solar event profile
type SolarEventProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	EventMessageInfo *commonmodule.EventMessageInfo `protobuf:"bytes,1,opt,name=eventMessageInfo,proto3" json:"eventMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarEvent *SolarEvent `protobuf:"bytes,2,opt,name=solarEvent,proto3" json:"solarEvent,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarInverter *SolarInverter `protobuf:"bytes,3,opt,name=solarInverter,proto3" json:"solarInverter,omitempty"`
}

func (x *SolarEventProfile) Reset() {
	*x = SolarEventProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solarmodule_solarmodule_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolarEventProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarEventProfile) ProtoMessage() {}

func (x *SolarEventProfile) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarEventProfile.ProtoReflect.Descriptor instead.
func (*SolarEventProfile) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{11}
}

func (x *SolarEventProfile) GetEventMessageInfo() *commonmodule.EventMessageInfo {
	if x != nil {
		return x.EventMessageInfo
	}
	return nil
}

func (x *SolarEventProfile) GetSolarEvent() *SolarEvent {
	if x != nil {
		return x.SolarEvent
	}
	return nil
}

func (x *SolarEventProfile) GetSolarInverter() *SolarInverter {
	if x != nil {
		return x.SolarInverter
	}
	return nil
}

// Solar reading value
type SolarReading struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ConductingEquipmentTerminalReading *commonmodule.ConductingEquipmentTerminalReading `protobuf:"bytes,1,opt,name=conductingEquipmentTerminalReading,proto3" json:"conductingEquipmentTerminalReading,omitempty"`
	// MISSING DOCUMENTATION!!!
	PhaseMMTN *commonmodule.PhaseMMTN `protobuf:"bytes,2,opt,name=phaseMMTN,proto3" json:"phaseMMTN,omitempty"`
	// MISSING DOCUMENTATION!!!
	ReadingMMTR *commonmodule.ReadingMMTR `protobuf:"bytes,3,opt,name=readingMMTR,proto3" json:"readingMMTR,omitempty"`
	// MISSING DOCUMENTATION!!!
	ReadingMMXU *commonmodule.ReadingMMXU `protobuf:"bytes,4,opt,name=readingMMXU,proto3" json:"readingMMXU,omitempty"`
}

func (x *SolarReading) Reset() {
	*x = SolarReading{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solarmodule_solarmodule_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolarReading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarReading) ProtoMessage() {}

func (x *SolarReading) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarReading.ProtoReflect.Descriptor instead.
func (*SolarReading) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{12}
}

func (x *SolarReading) GetConductingEquipmentTerminalReading() *commonmodule.ConductingEquipmentTerminalReading {
	if x != nil {
		return x.ConductingEquipmentTerminalReading
	}
	return nil
}

func (x *SolarReading) GetPhaseMMTN() *commonmodule.PhaseMMTN {
	if x != nil {
		return x.PhaseMMTN
	}
	return nil
}

func (x *SolarReading) GetReadingMMTR() *commonmodule.ReadingMMTR {
	if x != nil {
		return x.ReadingMMTR
	}
	return nil
}

func (x *SolarReading) GetReadingMMXU() *commonmodule.ReadingMMXU {
	if x != nil {
		return x.ReadingMMXU
	}
	return nil
}

// Solar reading profile
type SolarReadingProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ReadingMessageInfo *commonmodule.ReadingMessageInfo `protobuf:"bytes,1,opt,name=readingMessageInfo,proto3" json:"readingMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarInverter *SolarInverter `protobuf:"bytes,2,opt,name=solarInverter,proto3" json:"solarInverter,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarReading *SolarReading `protobuf:"bytes,3,opt,name=solarReading,proto3" json:"solarReading,omitempty"`
}

func (x *SolarReadingProfile) Reset() {
	*x = SolarReadingProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solarmodule_solarmodule_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolarReadingProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarReadingProfile) ProtoMessage() {}

func (x *SolarReadingProfile) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarReadingProfile.ProtoReflect.Descriptor instead.
func (*SolarReadingProfile) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{13}
}

func (x *SolarReadingProfile) GetReadingMessageInfo() *commonmodule.ReadingMessageInfo {
	if x != nil {
		return x.ReadingMessageInfo
	}
	return nil
}

func (x *SolarReadingProfile) GetSolarInverter() *SolarInverter {
	if x != nil {
		return x.SolarInverter
	}
	return nil
}

func (x *SolarReadingProfile) GetSolarReading() *SolarReading {
	if x != nil {
		return x.SolarReading
	}
	return nil
}

// Specialized 61850 ZGEN LN class
type SolarStatusZGEN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	SolarEventAndStatusZGEN *SolarEventAndStatusZGEN `protobuf:"bytes,1,opt,name=solarEventAndStatusZGEN,proto3" json:"solarEventAndStatusZGEN,omitempty"`
	// MISSING DOCUMENTATION!!!
	GriMod *commonmodule.ENG_GridConnectModeKind `protobuf:"bytes,2,opt,name=GriMod,proto3" json:"GriMod,omitempty"`
}

func (x *SolarStatusZGEN) Reset() {
	*x = SolarStatusZGEN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solarmodule_solarmodule_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolarStatusZGEN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarStatusZGEN) ProtoMessage() {}

func (x *SolarStatusZGEN) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarStatusZGEN.ProtoReflect.Descriptor instead.
func (*SolarStatusZGEN) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{14}
}

func (x *SolarStatusZGEN) GetSolarEventAndStatusZGEN() *SolarEventAndStatusZGEN {
	if x != nil {
		return x.SolarEventAndStatusZGEN
	}
	return nil
}

func (x *SolarStatusZGEN) GetGriMod() *commonmodule.ENG_GridConnectModeKind {
	if x != nil {
		return x.GriMod
	}
	return nil
}

// Solar status
type SolarStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	StatusValue *commonmodule.StatusValue `protobuf:"bytes,1,opt,name=statusValue,proto3" json:"statusValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarStatusZGEN *SolarStatusZGEN `protobuf:"bytes,2,opt,name=solarStatusZGEN,proto3" json:"solarStatusZGEN,omitempty"`
}

func (x *SolarStatus) Reset() {
	*x = SolarStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solarmodule_solarmodule_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolarStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarStatus) ProtoMessage() {}

func (x *SolarStatus) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarStatus.ProtoReflect.Descriptor instead.
func (*SolarStatus) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{15}
}

func (x *SolarStatus) GetStatusValue() *commonmodule.StatusValue {
	if x != nil {
		return x.StatusValue
	}
	return nil
}

func (x *SolarStatus) GetSolarStatusZGEN() *SolarStatusZGEN {
	if x != nil {
		return x.SolarStatusZGEN
	}
	return nil
}

// Solar status profile
type SolarStatusProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	StatusMessageInfo *commonmodule.StatusMessageInfo `protobuf:"bytes,1,opt,name=statusMessageInfo,proto3" json:"statusMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarInverter *SolarInverter `protobuf:"bytes,2,opt,name=solarInverter,proto3" json:"solarInverter,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarStatus *SolarStatus `protobuf:"bytes,3,opt,name=solarStatus,proto3" json:"solarStatus,omitempty"`
}

func (x *SolarStatusProfile) Reset() {
	*x = SolarStatusProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solarmodule_solarmodule_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolarStatusProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarStatusProfile) ProtoMessage() {}

func (x *SolarStatusProfile) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarStatusProfile.ProtoReflect.Descriptor instead.
func (*SolarStatusProfile) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{16}
}

func (x *SolarStatusProfile) GetStatusMessageInfo() *commonmodule.StatusMessageInfo {
	if x != nil {
		return x.StatusMessageInfo
	}
	return nil
}

func (x *SolarStatusProfile) GetSolarInverter() *SolarInverter {
	if x != nil {
		return x.SolarInverter
	}
	return nil
}

func (x *SolarStatusProfile) GetSolarStatus() *SolarStatus {
	if x != nil {
		return x.SolarStatus
	}
	return nil
}

var File_solarmodule_solarmodule_proto protoreflect.FileDescriptor

var file_solarmodule_solarmodule_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x73, 0x6f,
	0x6c, 0x61, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0b, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x1a, 0x09, 0x75, 0x6d,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf9, 0x05, 0x0a, 0x0a, 0x53, 0x6f, 0x6c,
	0x61, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x18, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x53, 0x50, 0x43, 0x52, 0x18, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x39, 0x0a,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x4e, 0x47, 0x5f, 0x47,
	0x72, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69,
	0x6e, 0x64, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x63, 0x74, 0x48,
	0x7a, 0x44, 0x72, 0x6f, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x70, 0x63, 0x74, 0x48, 0x7a,
	0x44, 0x72, 0x6f, 0x6f, 0x70, 0x12, 0x39, 0x0a, 0x09, 0x70, 0x63, 0x74, 0x56, 0x44, 0x72, 0x6f,
	0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x70, 0x63, 0x74, 0x56, 0x44, 0x72, 0x6f, 0x6f, 0x70,
	0x12, 0x34, 0x0a, 0x09, 0x72, 0x61, 0x6d, 0x70, 0x52, 0x61, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x52, 0x61, 0x6d, 0x70, 0x52, 0x61, 0x74, 0x65, 0x52, 0x09, 0x72, 0x61, 0x6d,
	0x70, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x1a, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x50, 0x77, 0x72, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x53, 0x50, 0x43, 0x52, 0x1a, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x77,
	0x72, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x50, 0x0a, 0x16, 0x72, 0x65, 0x61, 0x6c, 0x50, 0x77, 0x72, 0x53, 0x65, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x50, 0x43, 0x52, 0x16, 0x72, 0x65, 0x61, 0x6c,
	0x50, 0x77, 0x72, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x2e, 0x0a, 0x05, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x50, 0x43, 0x52, 0x05, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b,
	0x69, 0x6e, 0x64, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x16, 0x76, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x53, 0x50, 0x43, 0x52, 0x16, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x45, 0x0a, 0x08, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x43, 0x53, 0x47,
	0x12, 0x39, 0x0a, 0x06, 0x63, 0x72, 0x76, 0x50, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53,
	0x6f, 0x6c, 0x61, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90,
	0xb5, 0x18, 0x01, 0x52, 0x06, 0x63, 0x72, 0x76, 0x50, 0x74, 0x73, 0x22, 0x55, 0x0a, 0x18, 0x53,
	0x6f, 0x6c, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x46, 0x53, 0x43, 0x48, 0x12, 0x39, 0x0a, 0x07, 0x56, 0x61, 0x6c, 0x44, 0x43,
	0x53, 0x47, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x72,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x43, 0x53, 0x47, 0x42,
	0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x07, 0x56, 0x61, 0x6c, 0x44, 0x43,
	0x53, 0x47, 0x22, 0xb8, 0x01, 0x0a, 0x10, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x46, 0x53, 0x43, 0x43, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x46, 0x53, 0x43, 0x43, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x46, 0x53, 0x43, 0x43, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x53, 0x43, 0x43, 0x12, 0x61, 0x0a, 0x18, 0x53, 0x6f,
	0x6c, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x46, 0x53, 0x43, 0x48, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73,
	0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x46,
	0x53, 0x43, 0x48, 0x52, 0x18, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x53, 0x43, 0x48, 0x22, 0xd4, 0x01,
	0x0a, 0x0c, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x44,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x49, 0x0a, 0x10, 0x73, 0x6f, 0x6c,
	0x61, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x53, 0x43, 0x43, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x53,
	0x43, 0x43, 0x52, 0x10, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x46, 0x53, 0x43, 0x43, 0x22, 0x6a, 0x0a, 0x0d, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x49, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x13, 0x63, 0x6f, 0x6e,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x88, 0x02, 0x0a, 0x13, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x56, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x12, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x47, 0x0a, 0x0c, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0c, 0x73, 0x6f, 0x6c,
	0x61, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x4a, 0x0a, 0x0d, 0x73, 0x6f, 0x6c,
	0x61, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53,
	0x6f, 0x6c, 0x61, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x42, 0x08, 0x88, 0xb5,
	0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0d, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x49, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x65, 0x72, 0x3a, 0x04, 0xc0, 0xf3, 0x18, 0x01, 0x22, 0x83, 0x05, 0x0a, 0x10,
	0x53, 0x6f, 0x6c, 0x61, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x53, 0x0a, 0x18, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x18, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x45, 0x4e, 0x47, 0x5f, 0x47, 0x72, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x63, 0x74, 0x48, 0x7a, 0x44, 0x72, 0x6f, 0x6f, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x70, 0x63, 0x74, 0x48, 0x7a, 0x44, 0x72, 0x6f, 0x6f, 0x70, 0x12, 0x39, 0x0a,
	0x09, 0x70, 0x63, 0x74, 0x56, 0x44, 0x72, 0x6f, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x70,
	0x63, 0x74, 0x56, 0x44, 0x72, 0x6f, 0x6f, 0x70, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x61, 0x6d, 0x70,
	0x52, 0x61, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x61, 0x6d, 0x70, 0x52,
	0x61, 0x74, 0x65, 0x52, 0x09, 0x72, 0x61, 0x6d, 0x70, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x57,
	0x0a, 0x1a, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x77, 0x72, 0x53, 0x65, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x1a, 0x72, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x77, 0x72, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x16, 0x72, 0x65, 0x61, 0x6c, 0x50,
	0x77, 0x72, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53,
	0x52, 0x16, 0x72, 0x65, 0x61, 0x6c, 0x50, 0x77, 0x72, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x4f, 0x0a, 0x16, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x16, 0x76, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x22, 0xfd, 0x02, 0x0a, 0x17, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e, 0x12, 0x74, 0x0a,
	0x1c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x1c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f,
	0x64, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x41, 0x75, 0x78, 0x50, 0x77, 0x72, 0x53, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x08,
	0x41, 0x75, 0x78, 0x50, 0x77, 0x72, 0x53, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x4e, 0x53,
	0x5f, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x4b, 0x69, 0x6e, 0x64,
	0x52, 0x0b, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x07, 0x45, 0x6d, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x07, 0x45, 0x6d, 0x67, 0x53, 0x74, 0x6f, 0x70,
	0x12, 0x3f, 0x0a, 0x0b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xb5, 0x01, 0x0a, 0x0e, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x5a, 0x47, 0x45, 0x4e, 0x12, 0x64, 0x0a, 0x17, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x01, 0x52, 0x17, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e, 0x12, 0x3d, 0x0a, 0x06, 0x47, 0x72,
	0x69, 0x4d, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x4e, 0x47, 0x5f, 0x47, 0x72,
	0x69, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e,
	0x64, 0x52, 0x06, 0x47, 0x72, 0x69, 0x4d, 0x6f, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x0a, 0x53, 0x6f,
	0x6c, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x73, 0x6f, 0x6c, 0x61,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5a, 0x47, 0x45, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53,
	0x6f, 0x6c, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5a, 0x47, 0x45, 0x4e, 0x52, 0x0e, 0x73,
	0x6f, 0x6c, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5a, 0x47, 0x45, 0x4e, 0x22, 0xfa, 0x01,
	0x0a, 0x11, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x50, 0x0a, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x01, 0x52, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x0a, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6f, 0x6c, 0x61,
	0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x73, 0x6f,
	0x6c, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x0d, 0x73, 0x6f, 0x6c, 0x61,
	0x72, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x6f,
	0x6c, 0x61, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x42, 0x08, 0x88, 0xb5, 0x18,
	0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0d, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x49, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x65, 0x72, 0x3a, 0x04, 0xc0, 0xf3, 0x18, 0x01, 0x22, 0xc8, 0x02, 0x0a, 0x0c, 0x53,
	0x6f, 0x6c, 0x61, 0x72, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x86, 0x01, 0x0a, 0x22,
	0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01,
	0x52, 0x22, 0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x09, 0x70, 0x68, 0x61, 0x73, 0x65, 0x4d, 0x4d, 0x54,
	0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x4d, 0x4d, 0x54, 0x4e,
	0x52, 0x09, 0x70, 0x68, 0x61, 0x73, 0x65, 0x4d, 0x4d, 0x54, 0x4e, 0x12, 0x3b, 0x0a, 0x0b, 0x72,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x54, 0x52, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x54, 0x52, 0x52, 0x0b, 0x72, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x54, 0x52, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x58, 0x55, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x58, 0x55, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x4d, 0x4d, 0x58, 0x55, 0x22, 0x88, 0x02, 0x0a, 0x13, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x52,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x56, 0x0a,
	0x12, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x01, 0x52, 0x12, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x0d, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x49, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x72,
	0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5,
	0x18, 0x01, 0x52, 0x0d, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65,
	0x72, 0x12, 0x47, 0x0a, 0x0c, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x52, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0c, 0x73, 0x6f,
	0x6c, 0x61, 0x72, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x04, 0xc0, 0xf3, 0x18, 0x01,
	0x22, 0xb6, 0x01, 0x0a, 0x0f, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5a, 0x47, 0x45, 0x4e, 0x12, 0x64, 0x0a, 0x17, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x01, 0x52, 0x17, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e, 0x12, 0x3d, 0x0a, 0x06, 0x47, 0x72,
	0x69, 0x4d, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x4e, 0x47, 0x5f, 0x47, 0x72,
	0x69, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e,
	0x64, 0x52, 0x06, 0x47, 0x72, 0x69, 0x4d, 0x6f, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x0b, 0x53, 0x6f,
	0x6c, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x46, 0x0a, 0x0f,
	0x73, 0x6f, 0x6c, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a,
	0x47, 0x45, 0x4e, 0x52, 0x0f, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5a, 0x47, 0x45, 0x4e, 0x22, 0x81, 0x02, 0x0a, 0x12, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x53, 0x0a, 0x11, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x11, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x4a, 0x0a, 0x0d, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x65, 0x72, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0d, 0x73,
	0x6f, 0x6c, 0x61, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0b,
	0x73, 0x6f, 0x6c, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x53, 0x6f, 0x6c, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0x88, 0xb5, 0x18,
	0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x3a, 0x04, 0xc0, 0xf3, 0x18, 0x01, 0x42, 0x81, 0x01, 0x0a, 0x13, 0x6f, 0x70, 0x65,
	0x6e, 0x66, 0x6d, 0x62, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x50, 0x01, 0x5a, 0x52, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f,
	0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2f, 0x70, 0x73, 0x6d, 0x2f, 0x6f, 0x70, 0x73, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x66,
	0x6d, 0x62, 0x2d, 0x6f, 0x70, 0x73, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x76, 0x32, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2f, 0x73, 0x6f, 0x6c, 0x61, 0x72,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0xaa, 0x02, 0x13, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62,
	0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_solarmodule_solarmodule_proto_rawDescOnce sync.Once
	file_solarmodule_solarmodule_proto_rawDescData = file_solarmodule_solarmodule_proto_rawDesc
)

func file_solarmodule_solarmodule_proto_rawDescGZIP() []byte {
	file_solarmodule_solarmodule_proto_rawDescOnce.Do(func() {
		file_solarmodule_solarmodule_proto_rawDescData = protoimpl.X.CompressGZIP(file_solarmodule_solarmodule_proto_rawDescData)
	})
	return file_solarmodule_solarmodule_proto_rawDescData
}

var file_solarmodule_solarmodule_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_solarmodule_solarmodule_proto_goTypes = []interface{}{
	(*SolarPoint)(nil),                                      // 0: solarmodule.SolarPoint
	(*SolarCSG)(nil),                                        // 1: solarmodule.SolarCSG
	(*SolarControlScheduleFSCH)(nil),                        // 2: solarmodule.SolarControlScheduleFSCH
	(*SolarControlFSCC)(nil),                                // 3: solarmodule.SolarControlFSCC
	(*SolarControl)(nil),                                    // 4: solarmodule.SolarControl
	(*SolarInverter)(nil),                                   // 5: solarmodule.SolarInverter
	(*SolarControlProfile)(nil),                             // 6: solarmodule.SolarControlProfile
	(*SolarPointStatus)(nil),                                // 7: solarmodule.SolarPointStatus
	(*SolarEventAndStatusZGEN)(nil),                         // 8: solarmodule.SolarEventAndStatusZGEN
	(*SolarEventZGEN)(nil),                                  // 9: solarmodule.SolarEventZGEN
	(*SolarEvent)(nil),                                      // 10: solarmodule.SolarEvent
	(*SolarEventProfile)(nil),                               // 11: solarmodule.SolarEventProfile
	(*SolarReading)(nil),                                    // 12: solarmodule.SolarReading
	(*SolarReadingProfile)(nil),                             // 13: solarmodule.SolarReadingProfile
	(*SolarStatusZGEN)(nil),                                 // 14: solarmodule.SolarStatusZGEN
	(*SolarStatus)(nil),                                     // 15: solarmodule.SolarStatus
	(*SolarStatusProfile)(nil),                              // 16: solarmodule.SolarStatusProfile
	(*commonmodule.ControlSPC)(nil),                         // 17: commonmodule.ControlSPC
	(*commonmodule.ENG_GridConnectModeKind)(nil),            // 18: commonmodule.ENG_GridConnectModeKind
	(*wrapperspb.FloatValue)(nil),                           // 19: google.protobuf.FloatValue
	(*commonmodule.RampRate)(nil),                           // 20: commonmodule.RampRate
	(*commonmodule.Optional_StateKind)(nil),                 // 21: commonmodule.Optional_StateKind
	(*commonmodule.ControlTimestamp)(nil),                   // 22: commonmodule.ControlTimestamp
	(*commonmodule.ControlFSCC)(nil),                        // 23: commonmodule.ControlFSCC
	(*commonmodule.ControlValue)(nil),                       // 24: commonmodule.ControlValue
	(*commonmodule.CheckConditions)(nil),                    // 25: commonmodule.CheckConditions
	(*commonmodule.ConductingEquipment)(nil),                // 26: commonmodule.ConductingEquipment
	(*commonmodule.ControlMessageInfo)(nil),                 // 27: commonmodule.ControlMessageInfo
	(*commonmodule.StatusSPS)(nil),                          // 28: commonmodule.StatusSPS
	(*commonmodule.LogicalNodeForEventAndStatus)(nil),       // 29: commonmodule.LogicalNodeForEventAndStatus
	(*commonmodule.ENS_DynamicTestKind)(nil),                // 30: commonmodule.ENS_DynamicTestKind
	(*commonmodule.EventValue)(nil),                         // 31: commonmodule.EventValue
	(*commonmodule.EventMessageInfo)(nil),                   // 32: commonmodule.EventMessageInfo
	(*commonmodule.ConductingEquipmentTerminalReading)(nil), // 33: commonmodule.ConductingEquipmentTerminalReading
	(*commonmodule.PhaseMMTN)(nil),                          // 34: commonmodule.PhaseMMTN
	(*commonmodule.ReadingMMTR)(nil),                        // 35: commonmodule.ReadingMMTR
	(*commonmodule.ReadingMMXU)(nil),                        // 36: commonmodule.ReadingMMXU
	(*commonmodule.ReadingMessageInfo)(nil),                 // 37: commonmodule.ReadingMessageInfo
	(*commonmodule.StatusValue)(nil),                        // 38: commonmodule.StatusValue
	(*commonmodule.StatusMessageInfo)(nil),                  // 39: commonmodule.StatusMessageInfo
}
var file_solarmodule_solarmodule_proto_depIdxs = []int32{
	17, // 0: solarmodule.SolarPoint.frequencySetPointEnabled:type_name -> commonmodule.ControlSPC
	18, // 1: solarmodule.SolarPoint.mode:type_name -> commonmodule.ENG_GridConnectModeKind
	19, // 2: solarmodule.SolarPoint.pctHzDroop:type_name -> google.protobuf.FloatValue
	19, // 3: solarmodule.SolarPoint.pctVDroop:type_name -> google.protobuf.FloatValue
	20, // 4: solarmodule.SolarPoint.rampRates:type_name -> commonmodule.RampRate
	17, // 5: solarmodule.SolarPoint.reactivePwrSetPointEnabled:type_name -> commonmodule.ControlSPC
	17, // 6: solarmodule.SolarPoint.realPwrSetPointEnabled:type_name -> commonmodule.ControlSPC
	17, // 7: solarmodule.SolarPoint.reset:type_name -> commonmodule.ControlSPC
	21, // 8: solarmodule.SolarPoint.state:type_name -> commonmodule.Optional_StateKind
	17, // 9: solarmodule.SolarPoint.voltageSetPointEnabled:type_name -> commonmodule.ControlSPC
	22, // 10: solarmodule.SolarPoint.startTime:type_name -> commonmodule.ControlTimestamp
	0,  // 11: solarmodule.SolarCSG.crvPts:type_name -> solarmodule.SolarPoint
	1,  // 12: solarmodule.SolarControlScheduleFSCH.ValDCSG:type_name -> solarmodule.SolarCSG
	23, // 13: solarmodule.SolarControlFSCC.controlFSCC:type_name -> commonmodule.ControlFSCC
	2,  // 14: solarmodule.SolarControlFSCC.SolarControlScheduleFSCH:type_name -> solarmodule.SolarControlScheduleFSCH
	24, // 15: solarmodule.SolarControl.controlValue:type_name -> commonmodule.ControlValue
	25, // 16: solarmodule.SolarControl.check:type_name -> commonmodule.CheckConditions
	3,  // 17: solarmodule.SolarControl.solarControlFSCC:type_name -> solarmodule.SolarControlFSCC
	26, // 18: solarmodule.SolarInverter.conductingEquipment:type_name -> commonmodule.ConductingEquipment
	27, // 19: solarmodule.SolarControlProfile.controlMessageInfo:type_name -> commonmodule.ControlMessageInfo
	4,  // 20: solarmodule.SolarControlProfile.solarControl:type_name -> solarmodule.SolarControl
	5,  // 21: solarmodule.SolarControlProfile.solarInverter:type_name -> solarmodule.SolarInverter
	28, // 22: solarmodule.SolarPointStatus.frequencySetPointEnabled:type_name -> commonmodule.StatusSPS
	18, // 23: solarmodule.SolarPointStatus.mode:type_name -> commonmodule.ENG_GridConnectModeKind
	19, // 24: solarmodule.SolarPointStatus.pctHzDroop:type_name -> google.protobuf.FloatValue
	19, // 25: solarmodule.SolarPointStatus.pctVDroop:type_name -> google.protobuf.FloatValue
	20, // 26: solarmodule.SolarPointStatus.rampRates:type_name -> commonmodule.RampRate
	28, // 27: solarmodule.SolarPointStatus.reactivePwrSetPointEnabled:type_name -> commonmodule.StatusSPS
	28, // 28: solarmodule.SolarPointStatus.realPwrSetPointEnabled:type_name -> commonmodule.StatusSPS
	21, // 29: solarmodule.SolarPointStatus.state:type_name -> commonmodule.Optional_StateKind
	28, // 30: solarmodule.SolarPointStatus.voltageSetPointEnabled:type_name -> commonmodule.StatusSPS
	29, // 31: solarmodule.SolarEventAndStatusZGEN.logicalNodeForEventAndStatus:type_name -> commonmodule.LogicalNodeForEventAndStatus
	28, // 32: solarmodule.SolarEventAndStatusZGEN.AuxPwrSt:type_name -> commonmodule.StatusSPS
	30, // 33: solarmodule.SolarEventAndStatusZGEN.DynamicTest:type_name -> commonmodule.ENS_DynamicTestKind
	28, // 34: solarmodule.SolarEventAndStatusZGEN.EmgStop:type_name -> commonmodule.StatusSPS
	7,  // 35: solarmodule.SolarEventAndStatusZGEN.PointStatus:type_name -> solarmodule.SolarPointStatus
	8,  // 36: solarmodule.SolarEventZGEN.solarEventAndStatusZGEN:type_name -> solarmodule.SolarEventAndStatusZGEN
	18, // 37: solarmodule.SolarEventZGEN.GriMod:type_name -> commonmodule.ENG_GridConnectModeKind
	31, // 38: solarmodule.SolarEvent.eventValue:type_name -> commonmodule.EventValue
	9,  // 39: solarmodule.SolarEvent.solarEventZGEN:type_name -> solarmodule.SolarEventZGEN
	32, // 40: solarmodule.SolarEventProfile.eventMessageInfo:type_name -> commonmodule.EventMessageInfo
	10, // 41: solarmodule.SolarEventProfile.solarEvent:type_name -> solarmodule.SolarEvent
	5,  // 42: solarmodule.SolarEventProfile.solarInverter:type_name -> solarmodule.SolarInverter
	33, // 43: solarmodule.SolarReading.conductingEquipmentTerminalReading:type_name -> commonmodule.ConductingEquipmentTerminalReading
	34, // 44: solarmodule.SolarReading.phaseMMTN:type_name -> commonmodule.PhaseMMTN
	35, // 45: solarmodule.SolarReading.readingMMTR:type_name -> commonmodule.ReadingMMTR
	36, // 46: solarmodule.SolarReading.readingMMXU:type_name -> commonmodule.ReadingMMXU
	37, // 47: solarmodule.SolarReadingProfile.readingMessageInfo:type_name -> commonmodule.ReadingMessageInfo
	5,  // 48: solarmodule.SolarReadingProfile.solarInverter:type_name -> solarmodule.SolarInverter
	12, // 49: solarmodule.SolarReadingProfile.solarReading:type_name -> solarmodule.SolarReading
	8,  // 50: solarmodule.SolarStatusZGEN.solarEventAndStatusZGEN:type_name -> solarmodule.SolarEventAndStatusZGEN
	18, // 51: solarmodule.SolarStatusZGEN.GriMod:type_name -> commonmodule.ENG_GridConnectModeKind
	38, // 52: solarmodule.SolarStatus.statusValue:type_name -> commonmodule.StatusValue
	14, // 53: solarmodule.SolarStatus.solarStatusZGEN:type_name -> solarmodule.SolarStatusZGEN
	39, // 54: solarmodule.SolarStatusProfile.statusMessageInfo:type_name -> commonmodule.StatusMessageInfo
	5,  // 55: solarmodule.SolarStatusProfile.solarInverter:type_name -> solarmodule.SolarInverter
	15, // 56: solarmodule.SolarStatusProfile.solarStatus:type_name -> solarmodule.SolarStatus
	57, // [57:57] is the sub-list for method output_type
	57, // [57:57] is the sub-list for method input_type
	57, // [57:57] is the sub-list for extension type_name
	57, // [57:57] is the sub-list for extension extendee
	0,  // [0:57] is the sub-list for field type_name
}

func init() { file_solarmodule_solarmodule_proto_init() }
func file_solarmodule_solarmodule_proto_init() {
	if File_solarmodule_solarmodule_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_solarmodule_solarmodule_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolarPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solarmodule_solarmodule_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolarCSG); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solarmodule_solarmodule_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolarControlScheduleFSCH); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solarmodule_solarmodule_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolarControlFSCC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solarmodule_solarmodule_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolarControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solarmodule_solarmodule_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolarInverter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solarmodule_solarmodule_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolarControlProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solarmodule_solarmodule_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolarPointStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solarmodule_solarmodule_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolarEventAndStatusZGEN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solarmodule_solarmodule_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolarEventZGEN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solarmodule_solarmodule_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolarEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solarmodule_solarmodule_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolarEventProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solarmodule_solarmodule_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolarReading); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solarmodule_solarmodule_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolarReadingProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solarmodule_solarmodule_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolarStatusZGEN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solarmodule_solarmodule_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolarStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solarmodule_solarmodule_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolarStatusProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_solarmodule_solarmodule_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_solarmodule_solarmodule_proto_goTypes,
		DependencyIndexes: file_solarmodule_solarmodule_proto_depIdxs,
		MessageInfos:      file_solarmodule_solarmodule_proto_msgTypes,
	}.Build()
	File_solarmodule_solarmodule_proto = out.File
	file_solarmodule_solarmodule_proto_rawDesc = nil
	file_solarmodule_solarmodule_proto_goTypes = nil
	file_solarmodule_solarmodule_proto_depIdxs = nil
}
