// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v6.31.1
// source: solarmodule/solarmodule.proto

// OpenFMB Operational Model (61850-CIM) (v2.2.0).eapx
// Thursday, July 24, 2025 8:59:58 PM UTC

package solarmodule

import (
	_ "gitlab.com/openfmb/psm/ops/protobuf/go-openfmb-ops-protobuf/v2/openfmb"
	commonmodule "gitlab.com/openfmb/psm/ops/protobuf/go-openfmb-ops-protobuf/v2/openfmb/commonmodule"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MISSING DOCUMENTATION!!!
type SolarInverter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	ConductingEquipment *commonmodule.ConductingEquipment `protobuf:"bytes,1,opt,name=conductingEquipment,proto3" json:"conductingEquipment,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *SolarInverter) Reset() {
	*x = SolarInverter{}
	mi := &file_solarmodule_solarmodule_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SolarInverter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarInverter) ProtoMessage() {}

func (x *SolarInverter) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarInverter.ProtoReflect.Descriptor instead.
func (*SolarInverter) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{0}
}

func (x *SolarInverter) GetConductingEquipment() *commonmodule.ConductingEquipment {
	if x != nil {
		return x.ConductingEquipment
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type SolarCapabilityConfiguration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	SourceCapabilityConfiguration *commonmodule.SourceCapabilityConfiguration `protobuf:"bytes,1,opt,name=sourceCapabilityConfiguration,proto3" json:"sourceCapabilityConfiguration,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *SolarCapabilityConfiguration) Reset() {
	*x = SolarCapabilityConfiguration{}
	mi := &file_solarmodule_solarmodule_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SolarCapabilityConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarCapabilityConfiguration) ProtoMessage() {}

func (x *SolarCapabilityConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarCapabilityConfiguration.ProtoReflect.Descriptor instead.
func (*SolarCapabilityConfiguration) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{1}
}

func (x *SolarCapabilityConfiguration) GetSourceCapabilityConfiguration() *commonmodule.SourceCapabilityConfiguration {
	if x != nil {
		return x.SourceCapabilityConfiguration
	}
	return nil
}

// Generation capability
type SolarCapabilityOverride struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	IdentifiedObject *commonmodule.IdentifiedObject `protobuf:"bytes,1,opt,name=identifiedObject,proto3" json:"identifiedObject,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarCapabilityConfiguration *SolarCapabilityConfiguration `protobuf:"bytes,2,opt,name=solarCapabilityConfiguration,proto3" json:"solarCapabilityConfiguration,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *SolarCapabilityOverride) Reset() {
	*x = SolarCapabilityOverride{}
	mi := &file_solarmodule_solarmodule_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SolarCapabilityOverride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarCapabilityOverride) ProtoMessage() {}

func (x *SolarCapabilityOverride) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarCapabilityOverride.ProtoReflect.Descriptor instead.
func (*SolarCapabilityOverride) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{2}
}

func (x *SolarCapabilityOverride) GetIdentifiedObject() *commonmodule.IdentifiedObject {
	if x != nil {
		return x.IdentifiedObject
	}
	return nil
}

func (x *SolarCapabilityOverride) GetSolarCapabilityConfiguration() *SolarCapabilityConfiguration {
	if x != nil {
		return x.SolarCapabilityConfiguration
	}
	return nil
}

// Generation capability profile
type SolarCapabilityOverrideProfile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	CapabilityMessageInfo *commonmodule.CapabilityMessageInfo `protobuf:"bytes,1,opt,name=capabilityMessageInfo,proto3" json:"capabilityMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarCapabilityOverride *SolarCapabilityOverride `protobuf:"bytes,2,opt,name=solarCapabilityOverride,proto3" json:"solarCapabilityOverride,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarInverter *SolarInverter `protobuf:"bytes,3,opt,name=solarInverter,proto3" json:"solarInverter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SolarCapabilityOverrideProfile) Reset() {
	*x = SolarCapabilityOverrideProfile{}
	mi := &file_solarmodule_solarmodule_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SolarCapabilityOverrideProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarCapabilityOverrideProfile) ProtoMessage() {}

func (x *SolarCapabilityOverrideProfile) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarCapabilityOverrideProfile.ProtoReflect.Descriptor instead.
func (*SolarCapabilityOverrideProfile) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{3}
}

func (x *SolarCapabilityOverrideProfile) GetCapabilityMessageInfo() *commonmodule.CapabilityMessageInfo {
	if x != nil {
		return x.CapabilityMessageInfo
	}
	return nil
}

func (x *SolarCapabilityOverrideProfile) GetSolarCapabilityOverride() *SolarCapabilityOverride {
	if x != nil {
		return x.SolarCapabilityOverride
	}
	return nil
}

func (x *SolarCapabilityOverrideProfile) GetSolarInverter() *SolarInverter {
	if x != nil {
		return x.SolarInverter
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type SolarCapabilityRatings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	SourceCapabilityRatings *commonmodule.SourceCapabilityRatings `protobuf:"bytes,1,opt,name=sourceCapabilityRatings,proto3" json:"sourceCapabilityRatings,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *SolarCapabilityRatings) Reset() {
	*x = SolarCapabilityRatings{}
	mi := &file_solarmodule_solarmodule_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SolarCapabilityRatings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarCapabilityRatings) ProtoMessage() {}

func (x *SolarCapabilityRatings) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarCapabilityRatings.ProtoReflect.Descriptor instead.
func (*SolarCapabilityRatings) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{4}
}

func (x *SolarCapabilityRatings) GetSourceCapabilityRatings() *commonmodule.SourceCapabilityRatings {
	if x != nil {
		return x.SourceCapabilityRatings
	}
	return nil
}

// Generation capability
type SolarCapability struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	NameplateValue *commonmodule.NameplateValue `protobuf:"bytes,1,opt,name=nameplateValue,proto3" json:"nameplateValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarCapabilityConfiguration *SolarCapabilityConfiguration `protobuf:"bytes,2,opt,name=solarCapabilityConfiguration,proto3" json:"solarCapabilityConfiguration,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarCapabilityRatings *SolarCapabilityRatings `protobuf:"bytes,3,opt,name=solarCapabilityRatings,proto3" json:"solarCapabilityRatings,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *SolarCapability) Reset() {
	*x = SolarCapability{}
	mi := &file_solarmodule_solarmodule_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SolarCapability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarCapability) ProtoMessage() {}

func (x *SolarCapability) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarCapability.ProtoReflect.Descriptor instead.
func (*SolarCapability) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{5}
}

func (x *SolarCapability) GetNameplateValue() *commonmodule.NameplateValue {
	if x != nil {
		return x.NameplateValue
	}
	return nil
}

func (x *SolarCapability) GetSolarCapabilityConfiguration() *SolarCapabilityConfiguration {
	if x != nil {
		return x.SolarCapabilityConfiguration
	}
	return nil
}

func (x *SolarCapability) GetSolarCapabilityRatings() *SolarCapabilityRatings {
	if x != nil {
		return x.SolarCapabilityRatings
	}
	return nil
}

// Generation capability profile
type SolarCapabilityProfile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	CapabilityMessageInfo *commonmodule.CapabilityMessageInfo `protobuf:"bytes,1,opt,name=capabilityMessageInfo,proto3" json:"capabilityMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarCapability *SolarCapability `protobuf:"bytes,2,opt,name=solarCapability,proto3" json:"solarCapability,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarInverter *SolarInverter `protobuf:"bytes,3,opt,name=solarInverter,proto3" json:"solarInverter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SolarCapabilityProfile) Reset() {
	*x = SolarCapabilityProfile{}
	mi := &file_solarmodule_solarmodule_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SolarCapabilityProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarCapabilityProfile) ProtoMessage() {}

func (x *SolarCapabilityProfile) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarCapabilityProfile.ProtoReflect.Descriptor instead.
func (*SolarCapabilityProfile) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{6}
}

func (x *SolarCapabilityProfile) GetCapabilityMessageInfo() *commonmodule.CapabilityMessageInfo {
	if x != nil {
		return x.CapabilityMessageInfo
	}
	return nil
}

func (x *SolarCapabilityProfile) GetSolarCapability() *SolarCapability {
	if x != nil {
		return x.SolarCapability
	}
	return nil
}

func (x *SolarCapabilityProfile) GetSolarInverter() *SolarInverter {
	if x != nil {
		return x.SolarInverter
	}
	return nil
}

// Point definition (Point)
type SolarPoint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Grid connect mode
	Mode *commonmodule.ENG_GridConnectModeKind `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty"`
	// Ramp rates
	RampRates *commonmodule.RampRate `protobuf:"bytes,5,opt,name=rampRates,proto3" json:"rampRates,omitempty"`
	// Reset device
	Reset_ *commonmodule.ControlSPC `protobuf:"bytes,8,opt,name=reset,proto3" json:"reset,omitempty"`
	// MISSING DOCUMENTATION!!!
	State *commonmodule.Optional_StateKind `protobuf:"bytes,9,opt,name=state,proto3" json:"state,omitempty"`
	// MISSING DOCUMENTATION!!!
	EnterServiceOperation *commonmodule.EnterServiceAPC `protobuf:"bytes,12,opt,name=enterServiceOperation,proto3" json:"enterServiceOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	HzWOperation *commonmodule.HzWAPC `protobuf:"bytes,13,opt,name=hzWOperation,proto3" json:"hzWOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	LimitWOperation *commonmodule.LimitWAPC `protobuf:"bytes,14,opt,name=limitWOperation,proto3" json:"limitWOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	PFOperation *commonmodule.PFSPC `protobuf:"bytes,15,opt,name=pFOperation,proto3" json:"pFOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	TmHzTripOperation *commonmodule.TmHzCSG `protobuf:"bytes,16,opt,name=tmHzTripOperation,proto3" json:"tmHzTripOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	TmVoltTripOperation *commonmodule.TmVoltCSG `protobuf:"bytes,17,opt,name=tmVoltTripOperation,proto3" json:"tmVoltTripOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	VArOperation *commonmodule.VarSPC `protobuf:"bytes,18,opt,name=vArOperation,proto3" json:"vArOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	VoltVarOperation *commonmodule.VoltVarCSG `protobuf:"bytes,19,opt,name=voltVarOperation,proto3" json:"voltVarOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	VoltWOperation *commonmodule.VoltWCSG `protobuf:"bytes,20,opt,name=voltWOperation,proto3" json:"voltWOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	WVarOperation *commonmodule.WVarCSG `protobuf:"bytes,21,opt,name=wVarOperation,proto3" json:"wVarOperation,omitempty"`
	// Black start enable
	BlackStartEnabled *commonmodule.ControlSPC `protobuf:"bytes,22,opt,name=blackStartEnabled,proto3" json:"blackStartEnabled,omitempty"`
	// MISSING DOCUMENTATION!!!
	WOperation    *commonmodule.WSPC `protobuf:"bytes,24,opt,name=wOperation,proto3" json:"wOperation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SolarPoint) Reset() {
	*x = SolarPoint{}
	mi := &file_solarmodule_solarmodule_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SolarPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarPoint) ProtoMessage() {}

func (x *SolarPoint) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarPoint.ProtoReflect.Descriptor instead.
func (*SolarPoint) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{7}
}

func (x *SolarPoint) GetMode() *commonmodule.ENG_GridConnectModeKind {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *SolarPoint) GetRampRates() *commonmodule.RampRate {
	if x != nil {
		return x.RampRates
	}
	return nil
}

func (x *SolarPoint) GetReset_() *commonmodule.ControlSPC {
	if x != nil {
		return x.Reset_
	}
	return nil
}

func (x *SolarPoint) GetState() *commonmodule.Optional_StateKind {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *SolarPoint) GetEnterServiceOperation() *commonmodule.EnterServiceAPC {
	if x != nil {
		return x.EnterServiceOperation
	}
	return nil
}

func (x *SolarPoint) GetHzWOperation() *commonmodule.HzWAPC {
	if x != nil {
		return x.HzWOperation
	}
	return nil
}

func (x *SolarPoint) GetLimitWOperation() *commonmodule.LimitWAPC {
	if x != nil {
		return x.LimitWOperation
	}
	return nil
}

func (x *SolarPoint) GetPFOperation() *commonmodule.PFSPC {
	if x != nil {
		return x.PFOperation
	}
	return nil
}

func (x *SolarPoint) GetTmHzTripOperation() *commonmodule.TmHzCSG {
	if x != nil {
		return x.TmHzTripOperation
	}
	return nil
}

func (x *SolarPoint) GetTmVoltTripOperation() *commonmodule.TmVoltCSG {
	if x != nil {
		return x.TmVoltTripOperation
	}
	return nil
}

func (x *SolarPoint) GetVArOperation() *commonmodule.VarSPC {
	if x != nil {
		return x.VArOperation
	}
	return nil
}

func (x *SolarPoint) GetVoltVarOperation() *commonmodule.VoltVarCSG {
	if x != nil {
		return x.VoltVarOperation
	}
	return nil
}

func (x *SolarPoint) GetVoltWOperation() *commonmodule.VoltWCSG {
	if x != nil {
		return x.VoltWOperation
	}
	return nil
}

func (x *SolarPoint) GetWVarOperation() *commonmodule.WVarCSG {
	if x != nil {
		return x.WVarOperation
	}
	return nil
}

func (x *SolarPoint) GetBlackStartEnabled() *commonmodule.ControlSPC {
	if x != nil {
		return x.BlackStartEnabled
	}
	return nil
}

func (x *SolarPoint) GetWOperation() *commonmodule.WSPC {
	if x != nil {
		return x.WOperation
	}
	return nil
}

// Curve shape setting (FC=SP) (CSG_SP)
type SolarCurvePoint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The array with the points specifying a curve shape.
	Control *SolarPoint `protobuf:"bytes,1,opt,name=control,proto3" json:"control,omitempty"`
	// Start time
	StartTime     *commonmodule.ControlTimestamp `protobuf:"bytes,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SolarCurvePoint) Reset() {
	*x = SolarCurvePoint{}
	mi := &file_solarmodule_solarmodule_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SolarCurvePoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarCurvePoint) ProtoMessage() {}

func (x *SolarCurvePoint) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarCurvePoint.ProtoReflect.Descriptor instead.
func (*SolarCurvePoint) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{8}
}

func (x *SolarCurvePoint) GetControl() *SolarPoint {
	if x != nil {
		return x.Control
	}
	return nil
}

func (x *SolarCurvePoint) GetStartTime() *commonmodule.ControlTimestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

// Curve shape setting (FC=SP) (CSG_SP)
type SolarCSG struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The array with the points specifying a curve shape.
	CrvPts        []*SolarCurvePoint `protobuf:"bytes,1,rep,name=crvPts,proto3" json:"crvPts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SolarCSG) Reset() {
	*x = SolarCSG{}
	mi := &file_solarmodule_solarmodule_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SolarCSG) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarCSG) ProtoMessage() {}

func (x *SolarCSG) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarCSG.ProtoReflect.Descriptor instead.
func (*SolarCSG) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{9}
}

func (x *SolarCSG) GetCrvPts() []*SolarCurvePoint {
	if x != nil {
		return x.CrvPts
	}
	return nil
}

// OpenFMB specialization for control schedule using:  LN: Schedule   Name: FSCH
type SolarControlScheduleFSCH struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Discrete value in SolarCSG type
	ValDCSG       *SolarCSG `protobuf:"bytes,1,opt,name=ValDCSG,proto3" json:"ValDCSG,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SolarControlScheduleFSCH) Reset() {
	*x = SolarControlScheduleFSCH{}
	mi := &file_solarmodule_solarmodule_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SolarControlScheduleFSCH) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarControlScheduleFSCH) ProtoMessage() {}

func (x *SolarControlScheduleFSCH) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarControlScheduleFSCH.ProtoReflect.Descriptor instead.
func (*SolarControlScheduleFSCH) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{10}
}

func (x *SolarControlScheduleFSCH) GetValDCSG() *SolarCSG {
	if x != nil {
		return x.ValDCSG
	}
	return nil
}

// Specialized 61850 FSCC class.  LN: Schedule controller   Name: FSCC
type SolarControlFSCC struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	ControlFSCC *commonmodule.ControlFSCC `protobuf:"bytes,1,opt,name=controlFSCC,proto3" json:"controlFSCC,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarControlScheduleFSCH *SolarControlScheduleFSCH `protobuf:"bytes,2,opt,name=SolarControlScheduleFSCH,proto3" json:"SolarControlScheduleFSCH,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *SolarControlFSCC) Reset() {
	*x = SolarControlFSCC{}
	mi := &file_solarmodule_solarmodule_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SolarControlFSCC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarControlFSCC) ProtoMessage() {}

func (x *SolarControlFSCC) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarControlFSCC.ProtoReflect.Descriptor instead.
func (*SolarControlFSCC) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{11}
}

func (x *SolarControlFSCC) GetControlFSCC() *commonmodule.ControlFSCC {
	if x != nil {
		return x.ControlFSCC
	}
	return nil
}

func (x *SolarControlFSCC) GetSolarControlScheduleFSCH() *SolarControlScheduleFSCH {
	if x != nil {
		return x.SolarControlScheduleFSCH
	}
	return nil
}

// Solar control
type SolarControl struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	ControlValue *commonmodule.ControlValue `protobuf:"bytes,1,opt,name=controlValue,proto3" json:"controlValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	Check *commonmodule.CheckConditions `protobuf:"bytes,2,opt,name=check,proto3" json:"check,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarControlFSCC *SolarControlFSCC `protobuf:"bytes,3,opt,name=solarControlFSCC,proto3" json:"solarControlFSCC,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SolarControl) Reset() {
	*x = SolarControl{}
	mi := &file_solarmodule_solarmodule_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SolarControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarControl) ProtoMessage() {}

func (x *SolarControl) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarControl.ProtoReflect.Descriptor instead.
func (*SolarControl) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{12}
}

func (x *SolarControl) GetControlValue() *commonmodule.ControlValue {
	if x != nil {
		return x.ControlValue
	}
	return nil
}

func (x *SolarControl) GetCheck() *commonmodule.CheckConditions {
	if x != nil {
		return x.Check
	}
	return nil
}

func (x *SolarControl) GetSolarControlFSCC() *SolarControlFSCC {
	if x != nil {
		return x.SolarControlFSCC
	}
	return nil
}

// Solar control profile
type SolarControlProfile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	ControlMessageInfo *commonmodule.ControlMessageInfo `protobuf:"bytes,1,opt,name=controlMessageInfo,proto3" json:"controlMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarControl *SolarControl `protobuf:"bytes,2,opt,name=solarControl,proto3" json:"solarControl,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarInverter *SolarInverter `protobuf:"bytes,3,opt,name=solarInverter,proto3" json:"solarInverter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SolarControlProfile) Reset() {
	*x = SolarControlProfile{}
	mi := &file_solarmodule_solarmodule_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SolarControlProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarControlProfile) ProtoMessage() {}

func (x *SolarControlProfile) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarControlProfile.ProtoReflect.Descriptor instead.
func (*SolarControlProfile) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{13}
}

func (x *SolarControlProfile) GetControlMessageInfo() *commonmodule.ControlMessageInfo {
	if x != nil {
		return x.ControlMessageInfo
	}
	return nil
}

func (x *SolarControlProfile) GetSolarControl() *SolarControl {
	if x != nil {
		return x.SolarControl
	}
	return nil
}

func (x *SolarControlProfile) GetSolarInverter() *SolarInverter {
	if x != nil {
		return x.SolarInverter
	}
	return nil
}

// OpenFMB specialization for cap bank discrete control:
type SolarDiscreteControlPV struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	LogicalNodeForControl *commonmodule.LogicalNodeForControl `protobuf:"bytes,1,opt,name=logicalNodeForControl,proto3" json:"logicalNodeForControl,omitempty"`
	// MISSING DOCUMENTATION!!!
	Control       *SolarPoint `protobuf:"bytes,2,opt,name=control,proto3" json:"control,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SolarDiscreteControlPV) Reset() {
	*x = SolarDiscreteControlPV{}
	mi := &file_solarmodule_solarmodule_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SolarDiscreteControlPV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarDiscreteControlPV) ProtoMessage() {}

func (x *SolarDiscreteControlPV) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarDiscreteControlPV.ProtoReflect.Descriptor instead.
func (*SolarDiscreteControlPV) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{14}
}

func (x *SolarDiscreteControlPV) GetLogicalNodeForControl() *commonmodule.LogicalNodeForControl {
	if x != nil {
		return x.LogicalNodeForControl
	}
	return nil
}

func (x *SolarDiscreteControlPV) GetControl() *SolarPoint {
	if x != nil {
		return x.Control
	}
	return nil
}

// Cap bank discrete control
type SolarDiscreteControl struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	ControlValue *commonmodule.ControlValue `protobuf:"bytes,1,opt,name=controlValue,proto3" json:"controlValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	Check *commonmodule.CheckConditions `protobuf:"bytes,2,opt,name=check,proto3" json:"check,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarDiscreteControlPV *SolarDiscreteControlPV `protobuf:"bytes,3,opt,name=solarDiscreteControlPV,proto3" json:"solarDiscreteControlPV,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *SolarDiscreteControl) Reset() {
	*x = SolarDiscreteControl{}
	mi := &file_solarmodule_solarmodule_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SolarDiscreteControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarDiscreteControl) ProtoMessage() {}

func (x *SolarDiscreteControl) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarDiscreteControl.ProtoReflect.Descriptor instead.
func (*SolarDiscreteControl) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{15}
}

func (x *SolarDiscreteControl) GetControlValue() *commonmodule.ControlValue {
	if x != nil {
		return x.ControlValue
	}
	return nil
}

func (x *SolarDiscreteControl) GetCheck() *commonmodule.CheckConditions {
	if x != nil {
		return x.Check
	}
	return nil
}

func (x *SolarDiscreteControl) GetSolarDiscreteControlPV() *SolarDiscreteControlPV {
	if x != nil {
		return x.SolarDiscreteControlPV
	}
	return nil
}

// Cap bank discrete control profile.  Instructs an end device (or an end device group) to perform
// a specified action.
type SolarDiscreteControlProfile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	ControlMessageInfo *commonmodule.ControlMessageInfo `protobuf:"bytes,1,opt,name=controlMessageInfo,proto3" json:"controlMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarDiscreteControl *SolarDiscreteControl `protobuf:"bytes,2,opt,name=solarDiscreteControl,proto3" json:"solarDiscreteControl,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarInverter *SolarInverter `protobuf:"bytes,3,opt,name=solarInverter,proto3" json:"solarInverter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SolarDiscreteControlProfile) Reset() {
	*x = SolarDiscreteControlProfile{}
	mi := &file_solarmodule_solarmodule_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SolarDiscreteControlProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarDiscreteControlProfile) ProtoMessage() {}

func (x *SolarDiscreteControlProfile) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarDiscreteControlProfile.ProtoReflect.Descriptor instead.
func (*SolarDiscreteControlProfile) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{16}
}

func (x *SolarDiscreteControlProfile) GetControlMessageInfo() *commonmodule.ControlMessageInfo {
	if x != nil {
		return x.ControlMessageInfo
	}
	return nil
}

func (x *SolarDiscreteControlProfile) GetSolarDiscreteControl() *SolarDiscreteControl {
	if x != nil {
		return x.SolarDiscreteControl
	}
	return nil
}

func (x *SolarDiscreteControlProfile) GetSolarInverter() *SolarInverter {
	if x != nil {
		return x.SolarInverter
	}
	return nil
}

// Point definition (Point)
type SolarPointStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Enable frequency set point
	FrequencySetPointEnabled *commonmodule.StatusSPS `protobuf:"bytes,1,opt,name=frequencySetPointEnabled,proto3" json:"frequencySetPointEnabled,omitempty"`
	// Grid connect mode
	Mode *commonmodule.ENG_GridConnectModeKind `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty"`
	// MISSING DOCUMENTATION!!!
	PctHzDroop *wrapperspb.FloatValue `protobuf:"bytes,3,opt,name=pctHzDroop,proto3" json:"pctHzDroop,omitempty"`
	// MISSING DOCUMENTATION!!!
	PctVDroop *wrapperspb.FloatValue `protobuf:"bytes,4,opt,name=pctVDroop,proto3" json:"pctVDroop,omitempty"`
	// Ramp rates
	RampRates *commonmodule.RampRate `protobuf:"bytes,5,opt,name=rampRates,proto3" json:"rampRates,omitempty"`
	// Enable reactive power set point
	ReactivePwrSetPointEnabled *commonmodule.StatusSPS `protobuf:"bytes,6,opt,name=reactivePwrSetPointEnabled,proto3" json:"reactivePwrSetPointEnabled,omitempty"`
	// Enable real power set point
	RealPwrSetPointEnabled *commonmodule.StatusSPS `protobuf:"bytes,7,opt,name=realPwrSetPointEnabled,proto3" json:"realPwrSetPointEnabled,omitempty"`
	// MISSING DOCUMENTATION!!!
	State *commonmodule.Optional_StateKind `protobuf:"bytes,8,opt,name=state,proto3" json:"state,omitempty"`
	// Enable voltage set point
	VoltageSetPointEnabled *commonmodule.StatusSPS `protobuf:"bytes,9,opt,name=voltageSetPointEnabled,proto3" json:"voltageSetPointEnabled,omitempty"`
	// MISSING DOCUMENTATION!!!
	BlackStartEnabled *commonmodule.ControlSPC `protobuf:"bytes,10,opt,name=blackStartEnabled,proto3" json:"blackStartEnabled,omitempty"`
	// MISSING DOCUMENTATION!!!
	EnterServiceOperation *commonmodule.EnterServiceAPC `protobuf:"bytes,11,opt,name=enterServiceOperation,proto3" json:"enterServiceOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	HzWOperation *commonmodule.HzWPoint `protobuf:"bytes,12,opt,name=hzWOperation,proto3" json:"hzWOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	LimitWOperation *commonmodule.LimitWAPC `protobuf:"bytes,13,opt,name=limitWOperation,proto3" json:"limitWOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	PFOperation *commonmodule.PFSPC `protobuf:"bytes,14,opt,name=pFOperation,proto3" json:"pFOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	SyncBackToGrid *commonmodule.ControlSPC `protobuf:"bytes,15,opt,name=syncBackToGrid,proto3" json:"syncBackToGrid,omitempty"`
	// MISSING DOCUMENTATION!!!
	TmHzTripOperation *commonmodule.TmHzCSG `protobuf:"bytes,16,opt,name=tmHzTripOperation,proto3" json:"tmHzTripOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	TmVoltTripOperation *commonmodule.TmVoltCSG `protobuf:"bytes,17,opt,name=tmVoltTripOperation,proto3" json:"tmVoltTripOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	VArOperation *commonmodule.VarSPC `protobuf:"bytes,18,opt,name=vArOperation,proto3" json:"vArOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	VoltVarOperation *commonmodule.VoltVarCSG `protobuf:"bytes,19,opt,name=voltVarOperation,proto3" json:"voltVarOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	VoltWOperation *commonmodule.VoltWCSG `protobuf:"bytes,20,opt,name=voltWOperation,proto3" json:"voltWOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	WVarOperation *commonmodule.WVarCSG `protobuf:"bytes,21,opt,name=wVarOperation,proto3" json:"wVarOperation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SolarPointStatus) Reset() {
	*x = SolarPointStatus{}
	mi := &file_solarmodule_solarmodule_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SolarPointStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarPointStatus) ProtoMessage() {}

func (x *SolarPointStatus) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarPointStatus.ProtoReflect.Descriptor instead.
func (*SolarPointStatus) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{17}
}

func (x *SolarPointStatus) GetFrequencySetPointEnabled() *commonmodule.StatusSPS {
	if x != nil {
		return x.FrequencySetPointEnabled
	}
	return nil
}

func (x *SolarPointStatus) GetMode() *commonmodule.ENG_GridConnectModeKind {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *SolarPointStatus) GetPctHzDroop() *wrapperspb.FloatValue {
	if x != nil {
		return x.PctHzDroop
	}
	return nil
}

func (x *SolarPointStatus) GetPctVDroop() *wrapperspb.FloatValue {
	if x != nil {
		return x.PctVDroop
	}
	return nil
}

func (x *SolarPointStatus) GetRampRates() *commonmodule.RampRate {
	if x != nil {
		return x.RampRates
	}
	return nil
}

func (x *SolarPointStatus) GetReactivePwrSetPointEnabled() *commonmodule.StatusSPS {
	if x != nil {
		return x.ReactivePwrSetPointEnabled
	}
	return nil
}

func (x *SolarPointStatus) GetRealPwrSetPointEnabled() *commonmodule.StatusSPS {
	if x != nil {
		return x.RealPwrSetPointEnabled
	}
	return nil
}

func (x *SolarPointStatus) GetState() *commonmodule.Optional_StateKind {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *SolarPointStatus) GetVoltageSetPointEnabled() *commonmodule.StatusSPS {
	if x != nil {
		return x.VoltageSetPointEnabled
	}
	return nil
}

func (x *SolarPointStatus) GetBlackStartEnabled() *commonmodule.ControlSPC {
	if x != nil {
		return x.BlackStartEnabled
	}
	return nil
}

func (x *SolarPointStatus) GetEnterServiceOperation() *commonmodule.EnterServiceAPC {
	if x != nil {
		return x.EnterServiceOperation
	}
	return nil
}

func (x *SolarPointStatus) GetHzWOperation() *commonmodule.HzWPoint {
	if x != nil {
		return x.HzWOperation
	}
	return nil
}

func (x *SolarPointStatus) GetLimitWOperation() *commonmodule.LimitWAPC {
	if x != nil {
		return x.LimitWOperation
	}
	return nil
}

func (x *SolarPointStatus) GetPFOperation() *commonmodule.PFSPC {
	if x != nil {
		return x.PFOperation
	}
	return nil
}

func (x *SolarPointStatus) GetSyncBackToGrid() *commonmodule.ControlSPC {
	if x != nil {
		return x.SyncBackToGrid
	}
	return nil
}

func (x *SolarPointStatus) GetTmHzTripOperation() *commonmodule.TmHzCSG {
	if x != nil {
		return x.TmHzTripOperation
	}
	return nil
}

func (x *SolarPointStatus) GetTmVoltTripOperation() *commonmodule.TmVoltCSG {
	if x != nil {
		return x.TmVoltTripOperation
	}
	return nil
}

func (x *SolarPointStatus) GetVArOperation() *commonmodule.VarSPC {
	if x != nil {
		return x.VArOperation
	}
	return nil
}

func (x *SolarPointStatus) GetVoltVarOperation() *commonmodule.VoltVarCSG {
	if x != nil {
		return x.VoltVarOperation
	}
	return nil
}

func (x *SolarPointStatus) GetVoltWOperation() *commonmodule.VoltWCSG {
	if x != nil {
		return x.VoltWOperation
	}
	return nil
}

func (x *SolarPointStatus) GetWVarOperation() *commonmodule.WVarCSG {
	if x != nil {
		return x.WVarOperation
	}
	return nil
}

// Specialized 61850 ZGEN class
type SolarEventAndStatusZGEN struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	LogicalNodeForEventAndStatus *commonmodule.LogicalNodeForEventAndStatus `protobuf:"bytes,1,opt,name=logicalNodeForEventAndStatus,proto3" json:"logicalNodeForEventAndStatus,omitempty"`
	// DC Power On/Off Status; True = DC power on
	AuxPwrSt *commonmodule.StatusSPS `protobuf:"bytes,2,opt,name=AuxPwrSt,proto3" json:"AuxPwrSt,omitempty"`
	// MISSING DOCUMENTATION!!!
	DynamicTest *commonmodule.ENS_DynamicTestKind `protobuf:"bytes,3,opt,name=DynamicTest,proto3" json:"DynamicTest,omitempty"`
	// Emergency stop
	EmgStop *commonmodule.StatusSPS `protobuf:"bytes,4,opt,name=EmgStop,proto3" json:"EmgStop,omitempty"`
	// MISSING DOCUMENTATION!!!
	PointStatus *SolarPointStatus `protobuf:"bytes,5,opt,name=PointStatus,proto3" json:"PointStatus,omitempty"`
	// DC Power On/Off Status; True = DC power on
	Alrm *commonmodule.Optional_AlrmKind `protobuf:"bytes,6,opt,name=Alrm,proto3" json:"Alrm,omitempty"`
	// Emergency stop
	GnSynSt *commonmodule.StatusSPS `protobuf:"bytes,7,opt,name=GnSynSt,proto3" json:"GnSynSt,omitempty"`
	// DC Power On/Off Status; True = DC power on
	GridConnectionState *commonmodule.Optional_GridConnectionStateKind `protobuf:"bytes,8,opt,name=GridConnectionState,proto3" json:"GridConnectionState,omitempty"`
	// DC Power On/Off Status; True = DC power on
	ManAlrmInfo *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=ManAlrmInfo,proto3" json:"ManAlrmInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	OperatingState *commonmodule.Optional_OperatingStateKind `protobuf:"bytes,10,opt,name=OperatingState,proto3" json:"OperatingState,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SolarEventAndStatusZGEN) Reset() {
	*x = SolarEventAndStatusZGEN{}
	mi := &file_solarmodule_solarmodule_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SolarEventAndStatusZGEN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarEventAndStatusZGEN) ProtoMessage() {}

func (x *SolarEventAndStatusZGEN) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarEventAndStatusZGEN.ProtoReflect.Descriptor instead.
func (*SolarEventAndStatusZGEN) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{18}
}

func (x *SolarEventAndStatusZGEN) GetLogicalNodeForEventAndStatus() *commonmodule.LogicalNodeForEventAndStatus {
	if x != nil {
		return x.LogicalNodeForEventAndStatus
	}
	return nil
}

func (x *SolarEventAndStatusZGEN) GetAuxPwrSt() *commonmodule.StatusSPS {
	if x != nil {
		return x.AuxPwrSt
	}
	return nil
}

func (x *SolarEventAndStatusZGEN) GetDynamicTest() *commonmodule.ENS_DynamicTestKind {
	if x != nil {
		return x.DynamicTest
	}
	return nil
}

func (x *SolarEventAndStatusZGEN) GetEmgStop() *commonmodule.StatusSPS {
	if x != nil {
		return x.EmgStop
	}
	return nil
}

func (x *SolarEventAndStatusZGEN) GetPointStatus() *SolarPointStatus {
	if x != nil {
		return x.PointStatus
	}
	return nil
}

func (x *SolarEventAndStatusZGEN) GetAlrm() *commonmodule.Optional_AlrmKind {
	if x != nil {
		return x.Alrm
	}
	return nil
}

func (x *SolarEventAndStatusZGEN) GetGnSynSt() *commonmodule.StatusSPS {
	if x != nil {
		return x.GnSynSt
	}
	return nil
}

func (x *SolarEventAndStatusZGEN) GetGridConnectionState() *commonmodule.Optional_GridConnectionStateKind {
	if x != nil {
		return x.GridConnectionState
	}
	return nil
}

func (x *SolarEventAndStatusZGEN) GetManAlrmInfo() *wrapperspb.StringValue {
	if x != nil {
		return x.ManAlrmInfo
	}
	return nil
}

func (x *SolarEventAndStatusZGEN) GetOperatingState() *commonmodule.Optional_OperatingStateKind {
	if x != nil {
		return x.OperatingState
	}
	return nil
}

// Specialized 61850 ZGEN class
type SolarEventZGEN struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	SolarEventAndStatusZGEN *SolarEventAndStatusZGEN `protobuf:"bytes,1,opt,name=solarEventAndStatusZGEN,proto3" json:"solarEventAndStatusZGEN,omitempty"`
	// MISSING DOCUMENTATION!!!
	GriMod        *commonmodule.ENG_GridConnectModeKind `protobuf:"bytes,2,opt,name=GriMod,proto3" json:"GriMod,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SolarEventZGEN) Reset() {
	*x = SolarEventZGEN{}
	mi := &file_solarmodule_solarmodule_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SolarEventZGEN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarEventZGEN) ProtoMessage() {}

func (x *SolarEventZGEN) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarEventZGEN.ProtoReflect.Descriptor instead.
func (*SolarEventZGEN) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{19}
}

func (x *SolarEventZGEN) GetSolarEventAndStatusZGEN() *SolarEventAndStatusZGEN {
	if x != nil {
		return x.SolarEventAndStatusZGEN
	}
	return nil
}

func (x *SolarEventZGEN) GetGriMod() *commonmodule.ENG_GridConnectModeKind {
	if x != nil {
		return x.GriMod
	}
	return nil
}

// Solar event
type SolarEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	EventValue *commonmodule.EventValue `protobuf:"bytes,1,opt,name=eventValue,proto3" json:"eventValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarEventZGEN *SolarEventZGEN `protobuf:"bytes,2,opt,name=solarEventZGEN,proto3" json:"solarEventZGEN,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SolarEvent) Reset() {
	*x = SolarEvent{}
	mi := &file_solarmodule_solarmodule_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SolarEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarEvent) ProtoMessage() {}

func (x *SolarEvent) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarEvent.ProtoReflect.Descriptor instead.
func (*SolarEvent) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{20}
}

func (x *SolarEvent) GetEventValue() *commonmodule.EventValue {
	if x != nil {
		return x.EventValue
	}
	return nil
}

func (x *SolarEvent) GetSolarEventZGEN() *SolarEventZGEN {
	if x != nil {
		return x.SolarEventZGEN
	}
	return nil
}

// Solar event profile
type SolarEventProfile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	EventMessageInfo *commonmodule.EventMessageInfo `protobuf:"bytes,1,opt,name=eventMessageInfo,proto3" json:"eventMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarEvent *SolarEvent `protobuf:"bytes,2,opt,name=solarEvent,proto3" json:"solarEvent,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarInverter *SolarInverter `protobuf:"bytes,3,opt,name=solarInverter,proto3" json:"solarInverter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SolarEventProfile) Reset() {
	*x = SolarEventProfile{}
	mi := &file_solarmodule_solarmodule_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SolarEventProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarEventProfile) ProtoMessage() {}

func (x *SolarEventProfile) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarEventProfile.ProtoReflect.Descriptor instead.
func (*SolarEventProfile) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{21}
}

func (x *SolarEventProfile) GetEventMessageInfo() *commonmodule.EventMessageInfo {
	if x != nil {
		return x.EventMessageInfo
	}
	return nil
}

func (x *SolarEventProfile) GetSolarEvent() *SolarEvent {
	if x != nil {
		return x.SolarEvent
	}
	return nil
}

func (x *SolarEventProfile) GetSolarInverter() *SolarInverter {
	if x != nil {
		return x.SolarInverter
	}
	return nil
}

// Solar reading value
type SolarReading struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	ConductingEquipmentTerminalReading *commonmodule.ConductingEquipmentTerminalReading `protobuf:"bytes,1,opt,name=conductingEquipmentTerminalReading,proto3" json:"conductingEquipmentTerminalReading,omitempty"`
	// MISSING DOCUMENTATION!!!
	PhaseMMTN *commonmodule.PhaseMMTN `protobuf:"bytes,2,opt,name=phaseMMTN,proto3" json:"phaseMMTN,omitempty"`
	// MISSING DOCUMENTATION!!!
	ReadingMMTR *commonmodule.ReadingMMTR `protobuf:"bytes,3,opt,name=readingMMTR,proto3" json:"readingMMTR,omitempty"`
	// MISSING DOCUMENTATION!!!
	ReadingMMXU *commonmodule.ReadingMMXU `protobuf:"bytes,4,opt,name=readingMMXU,proto3" json:"readingMMXU,omitempty"`
	// MISSING DOCUMENTATION!!!
	ReadingMMDC   *commonmodule.ReadingMMDC `protobuf:"bytes,5,opt,name=readingMMDC,proto3" json:"readingMMDC,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SolarReading) Reset() {
	*x = SolarReading{}
	mi := &file_solarmodule_solarmodule_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SolarReading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarReading) ProtoMessage() {}

func (x *SolarReading) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarReading.ProtoReflect.Descriptor instead.
func (*SolarReading) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{22}
}

func (x *SolarReading) GetConductingEquipmentTerminalReading() *commonmodule.ConductingEquipmentTerminalReading {
	if x != nil {
		return x.ConductingEquipmentTerminalReading
	}
	return nil
}

func (x *SolarReading) GetPhaseMMTN() *commonmodule.PhaseMMTN {
	if x != nil {
		return x.PhaseMMTN
	}
	return nil
}

func (x *SolarReading) GetReadingMMTR() *commonmodule.ReadingMMTR {
	if x != nil {
		return x.ReadingMMTR
	}
	return nil
}

func (x *SolarReading) GetReadingMMXU() *commonmodule.ReadingMMXU {
	if x != nil {
		return x.ReadingMMXU
	}
	return nil
}

func (x *SolarReading) GetReadingMMDC() *commonmodule.ReadingMMDC {
	if x != nil {
		return x.ReadingMMDC
	}
	return nil
}

// Solar reading profile
type SolarReadingProfile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	ReadingMessageInfo *commonmodule.ReadingMessageInfo `protobuf:"bytes,1,opt,name=readingMessageInfo,proto3" json:"readingMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarInverter *SolarInverter `protobuf:"bytes,2,opt,name=solarInverter,proto3" json:"solarInverter,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarReading  *SolarReading `protobuf:"bytes,3,opt,name=solarReading,proto3" json:"solarReading,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SolarReadingProfile) Reset() {
	*x = SolarReadingProfile{}
	mi := &file_solarmodule_solarmodule_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SolarReadingProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarReadingProfile) ProtoMessage() {}

func (x *SolarReadingProfile) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarReadingProfile.ProtoReflect.Descriptor instead.
func (*SolarReadingProfile) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{23}
}

func (x *SolarReadingProfile) GetReadingMessageInfo() *commonmodule.ReadingMessageInfo {
	if x != nil {
		return x.ReadingMessageInfo
	}
	return nil
}

func (x *SolarReadingProfile) GetSolarInverter() *SolarInverter {
	if x != nil {
		return x.SolarInverter
	}
	return nil
}

func (x *SolarReadingProfile) GetSolarReading() *SolarReading {
	if x != nil {
		return x.SolarReading
	}
	return nil
}

// Specialized 61850 ZGEN LN class
type SolarStatusZGEN struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	SolarEventAndStatusZGEN *SolarEventAndStatusZGEN `protobuf:"bytes,1,opt,name=solarEventAndStatusZGEN,proto3" json:"solarEventAndStatusZGEN,omitempty"`
	// MISSING DOCUMENTATION!!!
	GriMod        *commonmodule.ENG_GridConnectModeKind `protobuf:"bytes,2,opt,name=GriMod,proto3" json:"GriMod,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SolarStatusZGEN) Reset() {
	*x = SolarStatusZGEN{}
	mi := &file_solarmodule_solarmodule_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SolarStatusZGEN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarStatusZGEN) ProtoMessage() {}

func (x *SolarStatusZGEN) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarStatusZGEN.ProtoReflect.Descriptor instead.
func (*SolarStatusZGEN) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{24}
}

func (x *SolarStatusZGEN) GetSolarEventAndStatusZGEN() *SolarEventAndStatusZGEN {
	if x != nil {
		return x.SolarEventAndStatusZGEN
	}
	return nil
}

func (x *SolarStatusZGEN) GetGriMod() *commonmodule.ENG_GridConnectModeKind {
	if x != nil {
		return x.GriMod
	}
	return nil
}

// Solar status
type SolarStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	StatusValue *commonmodule.StatusValue `protobuf:"bytes,1,opt,name=statusValue,proto3" json:"statusValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarStatusZGEN *SolarStatusZGEN `protobuf:"bytes,2,opt,name=solarStatusZGEN,proto3" json:"solarStatusZGEN,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SolarStatus) Reset() {
	*x = SolarStatus{}
	mi := &file_solarmodule_solarmodule_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SolarStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarStatus) ProtoMessage() {}

func (x *SolarStatus) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarStatus.ProtoReflect.Descriptor instead.
func (*SolarStatus) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{25}
}

func (x *SolarStatus) GetStatusValue() *commonmodule.StatusValue {
	if x != nil {
		return x.StatusValue
	}
	return nil
}

func (x *SolarStatus) GetSolarStatusZGEN() *SolarStatusZGEN {
	if x != nil {
		return x.SolarStatusZGEN
	}
	return nil
}

// Solar status profile
type SolarStatusProfile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	StatusMessageInfo *commonmodule.StatusMessageInfo `protobuf:"bytes,1,opt,name=statusMessageInfo,proto3" json:"statusMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarInverter *SolarInverter `protobuf:"bytes,2,opt,name=solarInverter,proto3" json:"solarInverter,omitempty"`
	// MISSING DOCUMENTATION!!!
	SolarStatus   *SolarStatus `protobuf:"bytes,3,opt,name=solarStatus,proto3" json:"solarStatus,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SolarStatusProfile) Reset() {
	*x = SolarStatusProfile{}
	mi := &file_solarmodule_solarmodule_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SolarStatusProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarStatusProfile) ProtoMessage() {}

func (x *SolarStatusProfile) ProtoReflect() protoreflect.Message {
	mi := &file_solarmodule_solarmodule_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarStatusProfile.ProtoReflect.Descriptor instead.
func (*SolarStatusProfile) Descriptor() ([]byte, []int) {
	return file_solarmodule_solarmodule_proto_rawDescGZIP(), []int{26}
}

func (x *SolarStatusProfile) GetStatusMessageInfo() *commonmodule.StatusMessageInfo {
	if x != nil {
		return x.StatusMessageInfo
	}
	return nil
}

func (x *SolarStatusProfile) GetSolarInverter() *SolarInverter {
	if x != nil {
		return x.SolarInverter
	}
	return nil
}

func (x *SolarStatusProfile) GetSolarStatus() *SolarStatus {
	if x != nil {
		return x.SolarStatus
	}
	return nil
}

var File_solarmodule_solarmodule_proto protoreflect.FileDescriptor

var file_solarmodule_solarmodule_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x73, 0x6f,
	0x6c, 0x61, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0b, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x1a, 0x09, 0x75, 0x6d,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6a, 0x0a, 0x0d, 0x53, 0x6f, 0x6c, 0x61,
	0x72, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x13, 0x63, 0x6f, 0x6e,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6e, 0x67,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52,
	0x13, 0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x97, 0x01, 0x0a, 0x1c, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x77, 0x0a, 0x1d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52,
	0x1d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe4,
	0x01, 0x0a, 0x17, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x10, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x10, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x77, 0x0a, 0x1c,
	0x73, 0x6f, 0x6c, 0x61, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x88,
	0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x1c, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbd, 0x02, 0x0a, 0x1e, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x5f, 0x0a, 0x15, 0x63, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x01, 0x52, 0x15, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x68, 0x0a, 0x17, 0x73, 0x6f, 0x6c,
	0x61, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6f, 0x6c,
	0x61, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x17, 0x73, 0x6f, 0x6c, 0x61,
	0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x49, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6f, 0x6c,
	0x61, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x49, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01,
	0x52, 0x0d, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x3a,
	0x04, 0xc0, 0xf3, 0x18, 0x01, 0x22, 0x7f, 0x0a, 0x16, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x65, 0x0a, 0x17, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x17, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xb3, 0x02, 0x0a, 0x0f, 0x53, 0x6f, 0x6c, 0x61, 0x72,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x0e, 0x6e, 0x61,
	0x6d, 0x65, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x6d, 0x0a, 0x1c, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x72,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a, 0x16, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01,
	0x90, 0xb5, 0x18, 0x01, 0x52, 0x16, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x9d, 0x02, 0x0a,
	0x16, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x5f, 0x0a, 0x15, 0x63, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x01, 0x52, 0x15, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x50, 0x0a, 0x0f, 0x73, 0x6f, 0x6c, 0x61,
	0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x53, 0x6f, 0x6c, 0x61, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42,
	0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0f, 0x73, 0x6f, 0x6c, 0x61, 0x72,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x0d, 0x73, 0x6f,
	0x6c, 0x61, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x53, 0x6f, 0x6c, 0x61, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x42, 0x08, 0x88,
	0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0d, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x49, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x3a, 0x04, 0xc0, 0xf3, 0x18, 0x01, 0x22, 0xa1, 0x08, 0x0a,
	0x0a, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x4e, 0x47, 0x5f, 0x47, 0x72, 0x69,
	0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64,
	0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x61, 0x6d, 0x70, 0x52, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x61, 0x6d, 0x70, 0x52, 0x61, 0x74,
	0x65, 0x52, 0x09, 0x72, 0x61, 0x6d, 0x70, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x05,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x53, 0x50, 0x43, 0x52, 0x05, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x36, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x15, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x50, 0x43, 0x52, 0x15, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0c, 0x68, 0x7a, 0x57,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x48,
	0x7a, 0x57, 0x41, 0x50, 0x43, 0x52, 0x0c, 0x68, 0x7a, 0x57, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x57, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x57, 0x41, 0x50, 0x43, 0x52, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x57, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0b, 0x70, 0x46, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x46, 0x53, 0x50, 0x43,
	0x52, 0x0b, 0x70, 0x46, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a,
	0x11, 0x74, 0x6d, 0x48, 0x7a, 0x54, 0x72, 0x69, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x6d, 0x48, 0x7a, 0x43, 0x53, 0x47, 0x52,
	0x11, 0x74, 0x6d, 0x48, 0x7a, 0x54, 0x72, 0x69, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x13, 0x74, 0x6d, 0x56, 0x6f, 0x6c, 0x74, 0x54, 0x72, 0x69, 0x70,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54,
	0x6d, 0x56, 0x6f, 0x6c, 0x74, 0x43, 0x53, 0x47, 0x52, 0x13, 0x74, 0x6d, 0x56, 0x6f, 0x6c, 0x74,
	0x54, 0x72, 0x69, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a,
	0x0c, 0x76, 0x41, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x53, 0x50, 0x43, 0x52, 0x0c, 0x76, 0x41, 0x72, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x10, 0x76, 0x6f, 0x6c, 0x74, 0x56,
	0x61, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x56, 0x6f, 0x6c, 0x74, 0x56, 0x61, 0x72, 0x43, 0x53, 0x47, 0x52, 0x10, 0x76, 0x6f, 0x6c,
	0x74, 0x56, 0x61, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a,
	0x0e, 0x76, 0x6f, 0x6c, 0x74, 0x57, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x56, 0x6f, 0x6c, 0x74, 0x57, 0x43, 0x53, 0x47, 0x52, 0x0e, 0x76,
	0x6f, 0x6c, 0x74, 0x57, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a,
	0x0d, 0x77, 0x56, 0x61, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x57, 0x56, 0x61, 0x72, 0x43, 0x53, 0x47, 0x52, 0x0d, 0x77, 0x56, 0x61,
	0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x11, 0x62, 0x6c,
	0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x50, 0x43, 0x52,
	0x11, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x32, 0x0a, 0x0a, 0x77, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x57, 0x53, 0x50, 0x43, 0x52, 0x0a, 0x77, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x03,
	0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04,
	0x08, 0x07, 0x10, 0x08, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x4a, 0x04, 0x08, 0x17, 0x10, 0x18,
	0x22, 0x96, 0x01, 0x0a, 0x0f, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x43, 0x75, 0x72, 0x76, 0x65, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x08,
	0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x12, 0x46, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4a, 0x0a, 0x08, 0x53, 0x6f, 0x6c,
	0x61, 0x72, 0x43, 0x53, 0x47, 0x12, 0x3e, 0x0a, 0x06, 0x63, 0x72, 0x76, 0x50, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x43, 0x75, 0x72, 0x76, 0x65, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x06, 0x63,
	0x72, 0x76, 0x50, 0x74, 0x73, 0x22, 0x55, 0x0a, 0x18, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x53, 0x43,
	0x48, 0x12, 0x39, 0x0a, 0x07, 0x56, 0x61, 0x6c, 0x44, 0x43, 0x53, 0x47, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x43, 0x53, 0x47, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90,
	0xb5, 0x18, 0x01, 0x52, 0x07, 0x56, 0x61, 0x6c, 0x44, 0x43, 0x53, 0x47, 0x22, 0xb8, 0x01, 0x0a,
	0x10, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x53, 0x43,
	0x43, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x53, 0x43, 0x43,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x53, 0x43,
	0x43, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x46, 0x53, 0x43, 0x43, 0x12, 0x61, 0x0a, 0x18, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x53, 0x43, 0x48,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x53, 0x43, 0x48, 0x52, 0x18, 0x53,
	0x6f, 0x6c, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x46, 0x53, 0x43, 0x48, 0x22, 0xd4, 0x01, 0x0a, 0x0c, 0x53, 0x6f, 0x6c, 0x61,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x33,
	0x0a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x12, 0x49, 0x0a, 0x10, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x46, 0x53, 0x43, 0x43, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x73, 0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x53, 0x43, 0x43, 0x52, 0x10, 0x73, 0x6f,
	0x6c, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x53, 0x43, 0x43, 0x22, 0x88,
	0x02, 0x0a, 0x13, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x56, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47,
	0x0a, 0x0c, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42,
	0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0c, 0x73, 0x6f, 0x6c, 0x61, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x4a, 0x0a, 0x0d, 0x73, 0x6f, 0x6c, 0x61, 0x72,
	0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6c,
	0x61, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01,
	0x90, 0xb5, 0x18, 0x01, 0x52, 0x0d, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x65, 0x72, 0x3a, 0x04, 0xc0, 0xf3, 0x18, 0x01, 0x22, 0xac, 0x01, 0x0a, 0x16, 0x53, 0x6f,
	0x6c, 0x61, 0x72, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x50, 0x56, 0x12, 0x5f, 0x0a, 0x15, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e,
	0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x15,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x22, 0xee, 0x01, 0x0a, 0x14, 0x53, 0x6f, 0x6c,
	0x61, 0x72, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x5b, 0x0a, 0x16,
	0x73, 0x6f, 0x6c, 0x61, 0x72, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x50, 0x56, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73,
	0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x72,
	0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50,
	0x56, 0x52, 0x16, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x56, 0x22, 0xa8, 0x02, 0x0a, 0x1b, 0x53, 0x6f,
	0x6c, 0x61, 0x72, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x56, 0x0a, 0x12, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x12, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x5f, 0x0a, 0x14, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x6f,
	0x6c, 0x61, 0x72, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x14, 0x73, 0x6f,
	0x6c, 0x61, 0x72, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x12, 0x4a, 0x0a, 0x0d, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6f, 0x6c, 0x61,
	0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x49, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x65, 0x72, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52,
	0x0d, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x3a, 0x04,
	0xc0, 0xf3, 0x18, 0x01, 0x22, 0xa5, 0x0b, 0x0a, 0x10, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x53, 0x0a, 0x18, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x53, 0x50, 0x53, 0x52, 0x18, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x53,
	0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x39,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x4e, 0x47, 0x5f,
	0x47, 0x72, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4b,
	0x69, 0x6e, 0x64, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x63, 0x74,
	0x48, 0x7a, 0x44, 0x72, 0x6f, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x70, 0x63, 0x74, 0x48,
	0x7a, 0x44, 0x72, 0x6f, 0x6f, 0x70, 0x12, 0x39, 0x0a, 0x09, 0x70, 0x63, 0x74, 0x56, 0x44, 0x72,
	0x6f, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x70, 0x63, 0x74, 0x56, 0x44, 0x72, 0x6f, 0x6f,
	0x70, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x61, 0x6d, 0x70, 0x52, 0x61, 0x74, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x52, 0x61, 0x6d, 0x70, 0x52, 0x61, 0x74, 0x65, 0x52, 0x09, 0x72, 0x61,
	0x6d, 0x70, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x1a, 0x72, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x50, 0x77, 0x72, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x53, 0x50, 0x53, 0x52, 0x1a, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x77,
	0x72, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x4f, 0x0a, 0x16, 0x72, 0x65, 0x61, 0x6c, 0x50, 0x77, 0x72, 0x53, 0x65, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x16, 0x72, 0x65, 0x61, 0x6c, 0x50,
	0x77, 0x72, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69,
	0x6e, 0x64, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x16, 0x76, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53,
	0x50, 0x53, 0x52, 0x16, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x11, 0x62, 0x6c,
	0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x50, 0x43, 0x52,
	0x11, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x53, 0x0a, 0x15, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x50, 0x43,
	0x52, 0x15, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0c, 0x68, 0x7a, 0x57, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x48, 0x7a, 0x57,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0c, 0x68, 0x7a, 0x57, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x57, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x57, 0x41, 0x50, 0x43, 0x52, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x57, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0b, 0x70, 0x46, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x46, 0x53, 0x50, 0x43,
	0x52, 0x0b, 0x70, 0x46, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a,
	0x0e, 0x73, 0x79, 0x6e, 0x63, 0x42, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x47, 0x72, 0x69, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x50, 0x43, 0x52,
	0x0e, 0x73, 0x79, 0x6e, 0x63, 0x42, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x47, 0x72, 0x69, 0x64, 0x12,
	0x43, 0x0a, 0x11, 0x74, 0x6d, 0x48, 0x7a, 0x54, 0x72, 0x69, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x6d, 0x48, 0x7a, 0x43, 0x53,
	0x47, 0x52, 0x11, 0x74, 0x6d, 0x48, 0x7a, 0x54, 0x72, 0x69, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x13, 0x74, 0x6d, 0x56, 0x6f, 0x6c, 0x74, 0x54, 0x72,
	0x69, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x54, 0x6d, 0x56, 0x6f, 0x6c, 0x74, 0x43, 0x53, 0x47, 0x52, 0x13, 0x74, 0x6d, 0x56, 0x6f,
	0x6c, 0x74, 0x54, 0x72, 0x69, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x0c, 0x76, 0x41, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x53, 0x50, 0x43, 0x52, 0x0c, 0x76, 0x41, 0x72,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x10, 0x76, 0x6f, 0x6c,
	0x74, 0x56, 0x61, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x56, 0x6f, 0x6c, 0x74, 0x56, 0x61, 0x72, 0x43, 0x53, 0x47, 0x52, 0x10, 0x76,
	0x6f, 0x6c, 0x74, 0x56, 0x61, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3e, 0x0a, 0x0e, 0x76, 0x6f, 0x6c, 0x74, 0x57, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x56, 0x6f, 0x6c, 0x74, 0x57, 0x43, 0x53, 0x47, 0x52,
	0x0e, 0x76, 0x6f, 0x6c, 0x74, 0x57, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3b, 0x0a, 0x0d, 0x77, 0x56, 0x61, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x57, 0x56, 0x61, 0x72, 0x43, 0x53, 0x47, 0x52, 0x0d, 0x77,
	0x56, 0x61, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xda, 0x05, 0x0a,
	0x17, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e, 0x12, 0x74, 0x0a, 0x1c, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01,
	0x52, 0x1c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33,
	0x0a, 0x08, 0x41, 0x75, 0x78, 0x50, 0x77, 0x72, 0x53, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x08, 0x41, 0x75, 0x78, 0x50, 0x77,
	0x72, 0x53, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x65,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x4e, 0x53, 0x5f, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0b, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x45, 0x6d, 0x67, 0x53,
	0x74, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53,
	0x50, 0x53, 0x52, 0x07, 0x45, 0x6d, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x3f, 0x0a, 0x0b, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53,
	0x6f, 0x6c, 0x61, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x04,
	0x41, 0x6c, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x41, 0x6c, 0x72, 0x6d, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x41, 0x6c, 0x72,
	0x6d, 0x12, 0x31, 0x0a, 0x07, 0x47, 0x6e, 0x53, 0x79, 0x6e, 0x53, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x07, 0x47, 0x6e, 0x53,
	0x79, 0x6e, 0x53, 0x74, 0x12, 0x60, 0x0a, 0x13, 0x47, 0x72, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x47, 0x72, 0x69, 0x64, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e,
	0x64, 0x52, 0x13, 0x47, 0x72, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x4d, 0x61, 0x6e, 0x41, 0x6c, 0x72,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x4d, 0x61, 0x6e, 0x41, 0x6c,
	0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x51, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x0e, 0x53, 0x6f,
	0x6c, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5a, 0x47, 0x45, 0x4e, 0x12, 0x64, 0x0a, 0x17,
	0x73, 0x6f, 0x6c, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x73, 0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a,
	0x47, 0x45, 0x4e, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x17, 0x73, 0x6f, 0x6c, 0x61, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x47,
	0x45, 0x4e, 0x12, 0x3d, 0x0a, 0x06, 0x47, 0x72, 0x69, 0x4d, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x45, 0x4e, 0x47, 0x5f, 0x47, 0x72, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x06, 0x47, 0x72, 0x69, 0x4d, 0x6f,
	0x64, 0x22, 0x91, 0x01, 0x0a, 0x0a, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x3e, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x43, 0x0a, 0x0e, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5a, 0x47,
	0x45, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x72,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x5a, 0x47, 0x45, 0x4e, 0x52, 0x0e, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x5a, 0x47, 0x45, 0x4e, 0x22, 0xfa, 0x01, 0x0a, 0x11, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x50, 0x0a, 0x10, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x10, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a,
	0x0a, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x53, 0x6f, 0x6c, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01,
	0x90, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x4a, 0x0a, 0x0d, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x65, 0x72, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0d, 0x73,
	0x6f, 0x6c, 0x61, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x3a, 0x04, 0xc0, 0xf3,
	0x18, 0x01, 0x22, 0x85, 0x03, 0x0a, 0x0c, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x52, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x86, 0x01, 0x0a, 0x22, 0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x22, 0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x09,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x4d, 0x4d, 0x54, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x4d, 0x4d, 0x54, 0x4e, 0x52, 0x09, 0x70, 0x68, 0x61, 0x73, 0x65, 0x4d,
	0x4d, 0x54, 0x4e, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d,
	0x54, 0x52, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d,
	0x4d, 0x54, 0x52, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x54, 0x52,
	0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x58, 0x55, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x58, 0x55,
	0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x58, 0x55, 0x12, 0x3b, 0x0a,
	0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x44, 0x43, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x44, 0x43, 0x52, 0x0b, 0x72,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x44, 0x43, 0x22, 0x88, 0x02, 0x0a, 0x13, 0x53,
	0x6f, 0x6c, 0x61, 0x72, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x56, 0x0a, 0x12, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x12, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x0d, 0x73, 0x6f,
	0x6c, 0x61, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x53, 0x6f, 0x6c, 0x61, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x42, 0x08, 0x88,
	0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0d, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x49, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x0c, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x52,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73,
	0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x72,
	0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18,
	0x01, 0x52, 0x0c, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x3a,
	0x04, 0xc0, 0xf3, 0x18, 0x01, 0x22, 0xb6, 0x01, 0x0a, 0x0f, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e, 0x12, 0x64, 0x0a, 0x17, 0x73, 0x6f, 0x6c,
	0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5a, 0x47, 0x45, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6f, 0x6c,
	0x61, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x17, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e, 0x12,
	0x3d, 0x0a, 0x06, 0x47, 0x72, 0x69, 0x4d, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45,
	0x4e, 0x47, 0x5f, 0x47, 0x72, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x06, 0x47, 0x72, 0x69, 0x4d, 0x6f, 0x64, 0x22, 0x98,
	0x01, 0x0a, 0x0b, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x46, 0x0a, 0x0f, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5a, 0x47, 0x45, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6f, 0x6c,
	0x61, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e, 0x52, 0x0f, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5a, 0x47, 0x45, 0x4e, 0x22, 0x81, 0x02, 0x0a, 0x12, 0x53, 0x6f,
	0x6c, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x53, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x01, 0x52, 0x11, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x0d, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x49, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x72,
	0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5,
	0x18, 0x01, 0x52, 0x0d, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65,
	0x72, 0x12, 0x44, 0x0a, 0x0b, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x73, 0x6f, 0x6c, 0x61,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x04, 0xc0, 0xf3, 0x18, 0x01, 0x42, 0x81, 0x01,
	0x0a, 0x13, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x01, 0x5a, 0x52, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2f, 0x70, 0x73, 0x6d, 0x2f,
	0x6f, 0x70, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f, 0x2d,
	0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2d, 0x6f, 0x70, 0x73, 0x2d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2f,
	0x73, 0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0xaa, 0x02, 0x13, 0x6f, 0x70,
	0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_solarmodule_solarmodule_proto_rawDescOnce sync.Once
	file_solarmodule_solarmodule_proto_rawDescData = file_solarmodule_solarmodule_proto_rawDesc
)

func file_solarmodule_solarmodule_proto_rawDescGZIP() []byte {
	file_solarmodule_solarmodule_proto_rawDescOnce.Do(func() {
		file_solarmodule_solarmodule_proto_rawDescData = protoimpl.X.CompressGZIP(file_solarmodule_solarmodule_proto_rawDescData)
	})
	return file_solarmodule_solarmodule_proto_rawDescData
}

var file_solarmodule_solarmodule_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_solarmodule_solarmodule_proto_goTypes = []any{
	(*SolarInverter)(nil),                                   // 0: solarmodule.SolarInverter
	(*SolarCapabilityConfiguration)(nil),                    // 1: solarmodule.SolarCapabilityConfiguration
	(*SolarCapabilityOverride)(nil),                         // 2: solarmodule.SolarCapabilityOverride
	(*SolarCapabilityOverrideProfile)(nil),                  // 3: solarmodule.SolarCapabilityOverrideProfile
	(*SolarCapabilityRatings)(nil),                          // 4: solarmodule.SolarCapabilityRatings
	(*SolarCapability)(nil),                                 // 5: solarmodule.SolarCapability
	(*SolarCapabilityProfile)(nil),                          // 6: solarmodule.SolarCapabilityProfile
	(*SolarPoint)(nil),                                      // 7: solarmodule.SolarPoint
	(*SolarCurvePoint)(nil),                                 // 8: solarmodule.SolarCurvePoint
	(*SolarCSG)(nil),                                        // 9: solarmodule.SolarCSG
	(*SolarControlScheduleFSCH)(nil),                        // 10: solarmodule.SolarControlScheduleFSCH
	(*SolarControlFSCC)(nil),                                // 11: solarmodule.SolarControlFSCC
	(*SolarControl)(nil),                                    // 12: solarmodule.SolarControl
	(*SolarControlProfile)(nil),                             // 13: solarmodule.SolarControlProfile
	(*SolarDiscreteControlPV)(nil),                          // 14: solarmodule.SolarDiscreteControlPV
	(*SolarDiscreteControl)(nil),                            // 15: solarmodule.SolarDiscreteControl
	(*SolarDiscreteControlProfile)(nil),                     // 16: solarmodule.SolarDiscreteControlProfile
	(*SolarPointStatus)(nil),                                // 17: solarmodule.SolarPointStatus
	(*SolarEventAndStatusZGEN)(nil),                         // 18: solarmodule.SolarEventAndStatusZGEN
	(*SolarEventZGEN)(nil),                                  // 19: solarmodule.SolarEventZGEN
	(*SolarEvent)(nil),                                      // 20: solarmodule.SolarEvent
	(*SolarEventProfile)(nil),                               // 21: solarmodule.SolarEventProfile
	(*SolarReading)(nil),                                    // 22: solarmodule.SolarReading
	(*SolarReadingProfile)(nil),                             // 23: solarmodule.SolarReadingProfile
	(*SolarStatusZGEN)(nil),                                 // 24: solarmodule.SolarStatusZGEN
	(*SolarStatus)(nil),                                     // 25: solarmodule.SolarStatus
	(*SolarStatusProfile)(nil),                              // 26: solarmodule.SolarStatusProfile
	(*commonmodule.ConductingEquipment)(nil),                // 27: commonmodule.ConductingEquipment
	(*commonmodule.SourceCapabilityConfiguration)(nil),      // 28: commonmodule.SourceCapabilityConfiguration
	(*commonmodule.IdentifiedObject)(nil),                   // 29: commonmodule.IdentifiedObject
	(*commonmodule.CapabilityMessageInfo)(nil),              // 30: commonmodule.CapabilityMessageInfo
	(*commonmodule.SourceCapabilityRatings)(nil),            // 31: commonmodule.SourceCapabilityRatings
	(*commonmodule.NameplateValue)(nil),                     // 32: commonmodule.NameplateValue
	(*commonmodule.ENG_GridConnectModeKind)(nil),            // 33: commonmodule.ENG_GridConnectModeKind
	(*commonmodule.RampRate)(nil),                           // 34: commonmodule.RampRate
	(*commonmodule.ControlSPC)(nil),                         // 35: commonmodule.ControlSPC
	(*commonmodule.Optional_StateKind)(nil),                 // 36: commonmodule.Optional_StateKind
	(*commonmodule.EnterServiceAPC)(nil),                    // 37: commonmodule.EnterServiceAPC
	(*commonmodule.HzWAPC)(nil),                             // 38: commonmodule.HzWAPC
	(*commonmodule.LimitWAPC)(nil),                          // 39: commonmodule.LimitWAPC
	(*commonmodule.PFSPC)(nil),                              // 40: commonmodule.PFSPC
	(*commonmodule.TmHzCSG)(nil),                            // 41: commonmodule.TmHzCSG
	(*commonmodule.TmVoltCSG)(nil),                          // 42: commonmodule.TmVoltCSG
	(*commonmodule.VarSPC)(nil),                             // 43: commonmodule.VarSPC
	(*commonmodule.VoltVarCSG)(nil),                         // 44: commonmodule.VoltVarCSG
	(*commonmodule.VoltWCSG)(nil),                           // 45: commonmodule.VoltWCSG
	(*commonmodule.WVarCSG)(nil),                            // 46: commonmodule.WVarCSG
	(*commonmodule.WSPC)(nil),                               // 47: commonmodule.WSPC
	(*commonmodule.ControlTimestamp)(nil),                   // 48: commonmodule.ControlTimestamp
	(*commonmodule.ControlFSCC)(nil),                        // 49: commonmodule.ControlFSCC
	(*commonmodule.ControlValue)(nil),                       // 50: commonmodule.ControlValue
	(*commonmodule.CheckConditions)(nil),                    // 51: commonmodule.CheckConditions
	(*commonmodule.ControlMessageInfo)(nil),                 // 52: commonmodule.ControlMessageInfo
	(*commonmodule.LogicalNodeForControl)(nil),              // 53: commonmodule.LogicalNodeForControl
	(*commonmodule.StatusSPS)(nil),                          // 54: commonmodule.StatusSPS
	(*wrapperspb.FloatValue)(nil),                           // 55: google.protobuf.FloatValue
	(*commonmodule.HzWPoint)(nil),                           // 56: commonmodule.HzWPoint
	(*commonmodule.LogicalNodeForEventAndStatus)(nil),       // 57: commonmodule.LogicalNodeForEventAndStatus
	(*commonmodule.ENS_DynamicTestKind)(nil),                // 58: commonmodule.ENS_DynamicTestKind
	(*commonmodule.Optional_AlrmKind)(nil),                  // 59: commonmodule.Optional_AlrmKind
	(*commonmodule.Optional_GridConnectionStateKind)(nil),   // 60: commonmodule.Optional_GridConnectionStateKind
	(*wrapperspb.StringValue)(nil),                          // 61: google.protobuf.StringValue
	(*commonmodule.Optional_OperatingStateKind)(nil),        // 62: commonmodule.Optional_OperatingStateKind
	(*commonmodule.EventValue)(nil),                         // 63: commonmodule.EventValue
	(*commonmodule.EventMessageInfo)(nil),                   // 64: commonmodule.EventMessageInfo
	(*commonmodule.ConductingEquipmentTerminalReading)(nil), // 65: commonmodule.ConductingEquipmentTerminalReading
	(*commonmodule.PhaseMMTN)(nil),                          // 66: commonmodule.PhaseMMTN
	(*commonmodule.ReadingMMTR)(nil),                        // 67: commonmodule.ReadingMMTR
	(*commonmodule.ReadingMMXU)(nil),                        // 68: commonmodule.ReadingMMXU
	(*commonmodule.ReadingMMDC)(nil),                        // 69: commonmodule.ReadingMMDC
	(*commonmodule.ReadingMessageInfo)(nil),                 // 70: commonmodule.ReadingMessageInfo
	(*commonmodule.StatusValue)(nil),                        // 71: commonmodule.StatusValue
	(*commonmodule.StatusMessageInfo)(nil),                  // 72: commonmodule.StatusMessageInfo
}
var file_solarmodule_solarmodule_proto_depIdxs = []int32{
	27,  // 0: solarmodule.SolarInverter.conductingEquipment:type_name -> commonmodule.ConductingEquipment
	28,  // 1: solarmodule.SolarCapabilityConfiguration.sourceCapabilityConfiguration:type_name -> commonmodule.SourceCapabilityConfiguration
	29,  // 2: solarmodule.SolarCapabilityOverride.identifiedObject:type_name -> commonmodule.IdentifiedObject
	1,   // 3: solarmodule.SolarCapabilityOverride.solarCapabilityConfiguration:type_name -> solarmodule.SolarCapabilityConfiguration
	30,  // 4: solarmodule.SolarCapabilityOverrideProfile.capabilityMessageInfo:type_name -> commonmodule.CapabilityMessageInfo
	2,   // 5: solarmodule.SolarCapabilityOverrideProfile.solarCapabilityOverride:type_name -> solarmodule.SolarCapabilityOverride
	0,   // 6: solarmodule.SolarCapabilityOverrideProfile.solarInverter:type_name -> solarmodule.SolarInverter
	31,  // 7: solarmodule.SolarCapabilityRatings.sourceCapabilityRatings:type_name -> commonmodule.SourceCapabilityRatings
	32,  // 8: solarmodule.SolarCapability.nameplateValue:type_name -> commonmodule.NameplateValue
	1,   // 9: solarmodule.SolarCapability.solarCapabilityConfiguration:type_name -> solarmodule.SolarCapabilityConfiguration
	4,   // 10: solarmodule.SolarCapability.solarCapabilityRatings:type_name -> solarmodule.SolarCapabilityRatings
	30,  // 11: solarmodule.SolarCapabilityProfile.capabilityMessageInfo:type_name -> commonmodule.CapabilityMessageInfo
	5,   // 12: solarmodule.SolarCapabilityProfile.solarCapability:type_name -> solarmodule.SolarCapability
	0,   // 13: solarmodule.SolarCapabilityProfile.solarInverter:type_name -> solarmodule.SolarInverter
	33,  // 14: solarmodule.SolarPoint.mode:type_name -> commonmodule.ENG_GridConnectModeKind
	34,  // 15: solarmodule.SolarPoint.rampRates:type_name -> commonmodule.RampRate
	35,  // 16: solarmodule.SolarPoint.reset:type_name -> commonmodule.ControlSPC
	36,  // 17: solarmodule.SolarPoint.state:type_name -> commonmodule.Optional_StateKind
	37,  // 18: solarmodule.SolarPoint.enterServiceOperation:type_name -> commonmodule.EnterServiceAPC
	38,  // 19: solarmodule.SolarPoint.hzWOperation:type_name -> commonmodule.HzWAPC
	39,  // 20: solarmodule.SolarPoint.limitWOperation:type_name -> commonmodule.LimitWAPC
	40,  // 21: solarmodule.SolarPoint.pFOperation:type_name -> commonmodule.PFSPC
	41,  // 22: solarmodule.SolarPoint.tmHzTripOperation:type_name -> commonmodule.TmHzCSG
	42,  // 23: solarmodule.SolarPoint.tmVoltTripOperation:type_name -> commonmodule.TmVoltCSG
	43,  // 24: solarmodule.SolarPoint.vArOperation:type_name -> commonmodule.VarSPC
	44,  // 25: solarmodule.SolarPoint.voltVarOperation:type_name -> commonmodule.VoltVarCSG
	45,  // 26: solarmodule.SolarPoint.voltWOperation:type_name -> commonmodule.VoltWCSG
	46,  // 27: solarmodule.SolarPoint.wVarOperation:type_name -> commonmodule.WVarCSG
	35,  // 28: solarmodule.SolarPoint.blackStartEnabled:type_name -> commonmodule.ControlSPC
	47,  // 29: solarmodule.SolarPoint.wOperation:type_name -> commonmodule.WSPC
	7,   // 30: solarmodule.SolarCurvePoint.control:type_name -> solarmodule.SolarPoint
	48,  // 31: solarmodule.SolarCurvePoint.startTime:type_name -> commonmodule.ControlTimestamp
	8,   // 32: solarmodule.SolarCSG.crvPts:type_name -> solarmodule.SolarCurvePoint
	9,   // 33: solarmodule.SolarControlScheduleFSCH.ValDCSG:type_name -> solarmodule.SolarCSG
	49,  // 34: solarmodule.SolarControlFSCC.controlFSCC:type_name -> commonmodule.ControlFSCC
	10,  // 35: solarmodule.SolarControlFSCC.SolarControlScheduleFSCH:type_name -> solarmodule.SolarControlScheduleFSCH
	50,  // 36: solarmodule.SolarControl.controlValue:type_name -> commonmodule.ControlValue
	51,  // 37: solarmodule.SolarControl.check:type_name -> commonmodule.CheckConditions
	11,  // 38: solarmodule.SolarControl.solarControlFSCC:type_name -> solarmodule.SolarControlFSCC
	52,  // 39: solarmodule.SolarControlProfile.controlMessageInfo:type_name -> commonmodule.ControlMessageInfo
	12,  // 40: solarmodule.SolarControlProfile.solarControl:type_name -> solarmodule.SolarControl
	0,   // 41: solarmodule.SolarControlProfile.solarInverter:type_name -> solarmodule.SolarInverter
	53,  // 42: solarmodule.SolarDiscreteControlPV.logicalNodeForControl:type_name -> commonmodule.LogicalNodeForControl
	7,   // 43: solarmodule.SolarDiscreteControlPV.control:type_name -> solarmodule.SolarPoint
	50,  // 44: solarmodule.SolarDiscreteControl.controlValue:type_name -> commonmodule.ControlValue
	51,  // 45: solarmodule.SolarDiscreteControl.check:type_name -> commonmodule.CheckConditions
	14,  // 46: solarmodule.SolarDiscreteControl.solarDiscreteControlPV:type_name -> solarmodule.SolarDiscreteControlPV
	52,  // 47: solarmodule.SolarDiscreteControlProfile.controlMessageInfo:type_name -> commonmodule.ControlMessageInfo
	15,  // 48: solarmodule.SolarDiscreteControlProfile.solarDiscreteControl:type_name -> solarmodule.SolarDiscreteControl
	0,   // 49: solarmodule.SolarDiscreteControlProfile.solarInverter:type_name -> solarmodule.SolarInverter
	54,  // 50: solarmodule.SolarPointStatus.frequencySetPointEnabled:type_name -> commonmodule.StatusSPS
	33,  // 51: solarmodule.SolarPointStatus.mode:type_name -> commonmodule.ENG_GridConnectModeKind
	55,  // 52: solarmodule.SolarPointStatus.pctHzDroop:type_name -> google.protobuf.FloatValue
	55,  // 53: solarmodule.SolarPointStatus.pctVDroop:type_name -> google.protobuf.FloatValue
	34,  // 54: solarmodule.SolarPointStatus.rampRates:type_name -> commonmodule.RampRate
	54,  // 55: solarmodule.SolarPointStatus.reactivePwrSetPointEnabled:type_name -> commonmodule.StatusSPS
	54,  // 56: solarmodule.SolarPointStatus.realPwrSetPointEnabled:type_name -> commonmodule.StatusSPS
	36,  // 57: solarmodule.SolarPointStatus.state:type_name -> commonmodule.Optional_StateKind
	54,  // 58: solarmodule.SolarPointStatus.voltageSetPointEnabled:type_name -> commonmodule.StatusSPS
	35,  // 59: solarmodule.SolarPointStatus.blackStartEnabled:type_name -> commonmodule.ControlSPC
	37,  // 60: solarmodule.SolarPointStatus.enterServiceOperation:type_name -> commonmodule.EnterServiceAPC
	56,  // 61: solarmodule.SolarPointStatus.hzWOperation:type_name -> commonmodule.HzWPoint
	39,  // 62: solarmodule.SolarPointStatus.limitWOperation:type_name -> commonmodule.LimitWAPC
	40,  // 63: solarmodule.SolarPointStatus.pFOperation:type_name -> commonmodule.PFSPC
	35,  // 64: solarmodule.SolarPointStatus.syncBackToGrid:type_name -> commonmodule.ControlSPC
	41,  // 65: solarmodule.SolarPointStatus.tmHzTripOperation:type_name -> commonmodule.TmHzCSG
	42,  // 66: solarmodule.SolarPointStatus.tmVoltTripOperation:type_name -> commonmodule.TmVoltCSG
	43,  // 67: solarmodule.SolarPointStatus.vArOperation:type_name -> commonmodule.VarSPC
	44,  // 68: solarmodule.SolarPointStatus.voltVarOperation:type_name -> commonmodule.VoltVarCSG
	45,  // 69: solarmodule.SolarPointStatus.voltWOperation:type_name -> commonmodule.VoltWCSG
	46,  // 70: solarmodule.SolarPointStatus.wVarOperation:type_name -> commonmodule.WVarCSG
	57,  // 71: solarmodule.SolarEventAndStatusZGEN.logicalNodeForEventAndStatus:type_name -> commonmodule.LogicalNodeForEventAndStatus
	54,  // 72: solarmodule.SolarEventAndStatusZGEN.AuxPwrSt:type_name -> commonmodule.StatusSPS
	58,  // 73: solarmodule.SolarEventAndStatusZGEN.DynamicTest:type_name -> commonmodule.ENS_DynamicTestKind
	54,  // 74: solarmodule.SolarEventAndStatusZGEN.EmgStop:type_name -> commonmodule.StatusSPS
	17,  // 75: solarmodule.SolarEventAndStatusZGEN.PointStatus:type_name -> solarmodule.SolarPointStatus
	59,  // 76: solarmodule.SolarEventAndStatusZGEN.Alrm:type_name -> commonmodule.Optional_AlrmKind
	54,  // 77: solarmodule.SolarEventAndStatusZGEN.GnSynSt:type_name -> commonmodule.StatusSPS
	60,  // 78: solarmodule.SolarEventAndStatusZGEN.GridConnectionState:type_name -> commonmodule.Optional_GridConnectionStateKind
	61,  // 79: solarmodule.SolarEventAndStatusZGEN.ManAlrmInfo:type_name -> google.protobuf.StringValue
	62,  // 80: solarmodule.SolarEventAndStatusZGEN.OperatingState:type_name -> commonmodule.Optional_OperatingStateKind
	18,  // 81: solarmodule.SolarEventZGEN.solarEventAndStatusZGEN:type_name -> solarmodule.SolarEventAndStatusZGEN
	33,  // 82: solarmodule.SolarEventZGEN.GriMod:type_name -> commonmodule.ENG_GridConnectModeKind
	63,  // 83: solarmodule.SolarEvent.eventValue:type_name -> commonmodule.EventValue
	19,  // 84: solarmodule.SolarEvent.solarEventZGEN:type_name -> solarmodule.SolarEventZGEN
	64,  // 85: solarmodule.SolarEventProfile.eventMessageInfo:type_name -> commonmodule.EventMessageInfo
	20,  // 86: solarmodule.SolarEventProfile.solarEvent:type_name -> solarmodule.SolarEvent
	0,   // 87: solarmodule.SolarEventProfile.solarInverter:type_name -> solarmodule.SolarInverter
	65,  // 88: solarmodule.SolarReading.conductingEquipmentTerminalReading:type_name -> commonmodule.ConductingEquipmentTerminalReading
	66,  // 89: solarmodule.SolarReading.phaseMMTN:type_name -> commonmodule.PhaseMMTN
	67,  // 90: solarmodule.SolarReading.readingMMTR:type_name -> commonmodule.ReadingMMTR
	68,  // 91: solarmodule.SolarReading.readingMMXU:type_name -> commonmodule.ReadingMMXU
	69,  // 92: solarmodule.SolarReading.readingMMDC:type_name -> commonmodule.ReadingMMDC
	70,  // 93: solarmodule.SolarReadingProfile.readingMessageInfo:type_name -> commonmodule.ReadingMessageInfo
	0,   // 94: solarmodule.SolarReadingProfile.solarInverter:type_name -> solarmodule.SolarInverter
	22,  // 95: solarmodule.SolarReadingProfile.solarReading:type_name -> solarmodule.SolarReading
	18,  // 96: solarmodule.SolarStatusZGEN.solarEventAndStatusZGEN:type_name -> solarmodule.SolarEventAndStatusZGEN
	33,  // 97: solarmodule.SolarStatusZGEN.GriMod:type_name -> commonmodule.ENG_GridConnectModeKind
	71,  // 98: solarmodule.SolarStatus.statusValue:type_name -> commonmodule.StatusValue
	24,  // 99: solarmodule.SolarStatus.solarStatusZGEN:type_name -> solarmodule.SolarStatusZGEN
	72,  // 100: solarmodule.SolarStatusProfile.statusMessageInfo:type_name -> commonmodule.StatusMessageInfo
	0,   // 101: solarmodule.SolarStatusProfile.solarInverter:type_name -> solarmodule.SolarInverter
	25,  // 102: solarmodule.SolarStatusProfile.solarStatus:type_name -> solarmodule.SolarStatus
	103, // [103:103] is the sub-list for method output_type
	103, // [103:103] is the sub-list for method input_type
	103, // [103:103] is the sub-list for extension type_name
	103, // [103:103] is the sub-list for extension extendee
	0,   // [0:103] is the sub-list for field type_name
}

func init() { file_solarmodule_solarmodule_proto_init() }
func file_solarmodule_solarmodule_proto_init() {
	if File_solarmodule_solarmodule_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_solarmodule_solarmodule_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_solarmodule_solarmodule_proto_goTypes,
		DependencyIndexes: file_solarmodule_solarmodule_proto_depIdxs,
		MessageInfos:      file_solarmodule_solarmodule_proto_msgTypes,
	}.Build()
	File_solarmodule_solarmodule_proto = out.File
	file_solarmodule_solarmodule_proto_rawDesc = nil
	file_solarmodule_solarmodule_proto_goTypes = nil
	file_solarmodule_solarmodule_proto_depIdxs = nil
}
