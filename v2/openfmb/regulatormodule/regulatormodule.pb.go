// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.22.2
// source: regulatormodule/regulatormodule.proto

// OpenFMB Operational Model (61850-CIM) (v2.1.0).eapx
// Monday, April 3, 2023 7:34:35 PM UTC

package regulatormodule

import (
	_ "gitlab.com/openfmb/psm/ops/protobuf/go-openfmb-ops-protobuf/v2/openfmb"
	commonmodule "gitlab.com/openfmb/psm/ops/protobuf/go-openfmb-ops-protobuf/v2/openfmb/commonmodule"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// LN: Automatic tap changer controller   Name: ATCC
type DirectionalATCC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Control (secondary) voltage bandwidth (i.e., range), given either as voltage value or percentage
	// of the nominal voltage (forward power flow presumed).
	BndWid *commonmodule.PhaseAPC `protobuf:"bytes,1,opt,name=BndWid,proto3" json:"BndWid,omitempty"`
	// Time to wait before operating, after reaching the control point (forward power flow presumed).
	CtlDlTmms *commonmodule.PhaseISC `protobuf:"bytes,2,opt,name=CtlDlTmms,proto3" json:"CtlDlTmms,omitempty"`
	// Line drop voltage due to line resistance component (forward power flow presumed) at rated current.
	LDCR *commonmodule.PhaseAPC `protobuf:"bytes,3,opt,name=LDCR,proto3" json:"LDCR,omitempty"`
	// Line drop voltage due to line reactance component (forward power flow presumed) at rated current.
	LDCX *commonmodule.PhaseAPC `protobuf:"bytes,4,opt,name=LDCX,proto3" json:"LDCX,omitempty"`
	// (controllable) Voltage setpoint. Analog value (MX) feeds back the setpoint of the controller.
	VolSpt *commonmodule.PhaseAPC `protobuf:"bytes,5,opt,name=VolSpt,proto3" json:"VolSpt,omitempty"`
	// Enable voltage set point
	VoltageSetPointEnabled *commonmodule.PhaseDPC `protobuf:"bytes,6,opt,name=voltageSetPointEnabled,proto3" json:"voltageSetPointEnabled,omitempty"`
}

func (x *DirectionalATCC) Reset() {
	*x = DirectionalATCC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_regulatormodule_regulatormodule_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectionalATCC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectionalATCC) ProtoMessage() {}

func (x *DirectionalATCC) ProtoReflect() protoreflect.Message {
	mi := &file_regulatormodule_regulatormodule_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectionalATCC.ProtoReflect.Descriptor instead.
func (*DirectionalATCC) Descriptor() ([]byte, []int) {
	return file_regulatormodule_regulatormodule_proto_rawDescGZIP(), []int{0}
}

func (x *DirectionalATCC) GetBndWid() *commonmodule.PhaseAPC {
	if x != nil {
		return x.BndWid
	}
	return nil
}

func (x *DirectionalATCC) GetCtlDlTmms() *commonmodule.PhaseISC {
	if x != nil {
		return x.CtlDlTmms
	}
	return nil
}

func (x *DirectionalATCC) GetLDCR() *commonmodule.PhaseAPC {
	if x != nil {
		return x.LDCR
	}
	return nil
}

func (x *DirectionalATCC) GetLDCX() *commonmodule.PhaseAPC {
	if x != nil {
		return x.LDCX
	}
	return nil
}

func (x *DirectionalATCC) GetVolSpt() *commonmodule.PhaseAPC {
	if x != nil {
		return x.VolSpt
	}
	return nil
}

func (x *DirectionalATCC) GetVoltageSetPointEnabled() *commonmodule.PhaseDPC {
	if x != nil {
		return x.VoltageSetPointEnabled
	}
	return nil
}

// LN: Automatic tap changer controller   Name: ATCC
type RegulatorControlATCC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	LogicalNodeForControl *commonmodule.LogicalNodeForControl `protobuf:"bytes,1,opt,name=logicalNodeForControl,proto3" json:"logicalNodeForControl,omitempty"`
	// Forward voltage regulation
	DirFwd *DirectionalATCC `protobuf:"bytes,2,opt,name=DirFwd,proto3" json:"DirFwd,omitempty"`
	// The control characteristics for power flow operation
	DirMode *commonmodule.Optional_DirectionModeKind `protobuf:"bytes,3,opt,name=DirMode,proto3" json:"DirMode,omitempty"`
	// Reverse voltage regulation
	DirRev *DirectionalATCC `protobuf:"bytes,4,opt,name=DirRev,proto3" json:"DirRev,omitempty"`
	// This is the percentage used to determine the current threshold at which the control recognizes
	// current flow direction. Below the threshold, the current flow is considered to be indeterminate.
	DirThd *commonmodule.PhaseAPC `protobuf:"bytes,5,opt,name=DirThd,proto3" json:"DirThd,omitempty"`
	// (controllable) If true, transformers operate in parallel, otherwise they operate independently.
	ParOp *commonmodule.PhaseSPC `protobuf:"bytes,6,opt,name=ParOp,proto3" json:"ParOp,omitempty"`
	// Ramp rates
	RampRates *commonmodule.RampRate `protobuf:"bytes,7,opt,name=rampRates,proto3" json:"rampRates,omitempty"`
	// (controllable) Tap position change to the specified value.
	State *commonmodule.Optional_StateKind `protobuf:"bytes,8,opt,name=state,proto3" json:"state,omitempty"`
	// If true, tap position shall be lowered.
	TapOpL *commonmodule.PhaseSPC `protobuf:"bytes,9,opt,name=TapOpL,proto3" json:"TapOpL,omitempty"`
	// If true, tap position shall be raised.
	TapOpR *commonmodule.PhaseSPC `protobuf:"bytes,10,opt,name=TapOpR,proto3" json:"TapOpR,omitempty"`
	// High voltage limit for Voltage Limiter
	VolLmtHi *commonmodule.PhaseAPC `protobuf:"bytes,11,opt,name=VolLmtHi,proto3" json:"VolLmtHi,omitempty"`
	// Low voltage limit for Voltage Limiter
	VolLmtLo *commonmodule.PhaseAPC `protobuf:"bytes,12,opt,name=VolLmtLo,proto3" json:"VolLmtLo,omitempty"`
	// Voltage-limiting types
	VolLmtMode *commonmodule.Optional_VoltLimitModeKind `protobuf:"bytes,13,opt,name=VolLmtMode,proto3" json:"VolLmtMode,omitempty"`
}

func (x *RegulatorControlATCC) Reset() {
	*x = RegulatorControlATCC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_regulatormodule_regulatormodule_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegulatorControlATCC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegulatorControlATCC) ProtoMessage() {}

func (x *RegulatorControlATCC) ProtoReflect() protoreflect.Message {
	mi := &file_regulatormodule_regulatormodule_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegulatorControlATCC.ProtoReflect.Descriptor instead.
func (*RegulatorControlATCC) Descriptor() ([]byte, []int) {
	return file_regulatormodule_regulatormodule_proto_rawDescGZIP(), []int{1}
}

func (x *RegulatorControlATCC) GetLogicalNodeForControl() *commonmodule.LogicalNodeForControl {
	if x != nil {
		return x.LogicalNodeForControl
	}
	return nil
}

func (x *RegulatorControlATCC) GetDirFwd() *DirectionalATCC {
	if x != nil {
		return x.DirFwd
	}
	return nil
}

func (x *RegulatorControlATCC) GetDirMode() *commonmodule.Optional_DirectionModeKind {
	if x != nil {
		return x.DirMode
	}
	return nil
}

func (x *RegulatorControlATCC) GetDirRev() *DirectionalATCC {
	if x != nil {
		return x.DirRev
	}
	return nil
}

func (x *RegulatorControlATCC) GetDirThd() *commonmodule.PhaseAPC {
	if x != nil {
		return x.DirThd
	}
	return nil
}

func (x *RegulatorControlATCC) GetParOp() *commonmodule.PhaseSPC {
	if x != nil {
		return x.ParOp
	}
	return nil
}

func (x *RegulatorControlATCC) GetRampRates() *commonmodule.RampRate {
	if x != nil {
		return x.RampRates
	}
	return nil
}

func (x *RegulatorControlATCC) GetState() *commonmodule.Optional_StateKind {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *RegulatorControlATCC) GetTapOpL() *commonmodule.PhaseSPC {
	if x != nil {
		return x.TapOpL
	}
	return nil
}

func (x *RegulatorControlATCC) GetTapOpR() *commonmodule.PhaseSPC {
	if x != nil {
		return x.TapOpR
	}
	return nil
}

func (x *RegulatorControlATCC) GetVolLmtHi() *commonmodule.PhaseAPC {
	if x != nil {
		return x.VolLmtHi
	}
	return nil
}

func (x *RegulatorControlATCC) GetVolLmtLo() *commonmodule.PhaseAPC {
	if x != nil {
		return x.VolLmtLo
	}
	return nil
}

func (x *RegulatorControlATCC) GetVolLmtMode() *commonmodule.Optional_VoltLimitModeKind {
	if x != nil {
		return x.VolLmtMode
	}
	return nil
}

// Point definition (Point)
type RegulatorPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Regulator control
	Control *RegulatorControlATCC `protobuf:"bytes,1,opt,name=control,proto3" json:"control,omitempty"`
	// Start time
	StartTime *commonmodule.Timestamp `protobuf:"bytes,8,opt,name=startTime,proto3" json:"startTime,omitempty"`
}

func (x *RegulatorPoint) Reset() {
	*x = RegulatorPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_regulatormodule_regulatormodule_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegulatorPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegulatorPoint) ProtoMessage() {}

func (x *RegulatorPoint) ProtoReflect() protoreflect.Message {
	mi := &file_regulatormodule_regulatormodule_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegulatorPoint.ProtoReflect.Descriptor instead.
func (*RegulatorPoint) Descriptor() ([]byte, []int) {
	return file_regulatormodule_regulatormodule_proto_rawDescGZIP(), []int{2}
}

func (x *RegulatorPoint) GetControl() *RegulatorControlATCC {
	if x != nil {
		return x.Control
	}
	return nil
}

func (x *RegulatorPoint) GetStartTime() *commonmodule.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

// Curve shape setting (FC=SP) (CSG_SP)
type RegulatorCSG struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The array with the points specifying a curve shape.
	CrvPts []*RegulatorPoint `protobuf:"bytes,1,rep,name=crvPts,proto3" json:"crvPts,omitempty"`
}

func (x *RegulatorCSG) Reset() {
	*x = RegulatorCSG{}
	if protoimpl.UnsafeEnabled {
		mi := &file_regulatormodule_regulatormodule_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegulatorCSG) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegulatorCSG) ProtoMessage() {}

func (x *RegulatorCSG) ProtoReflect() protoreflect.Message {
	mi := &file_regulatormodule_regulatormodule_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegulatorCSG.ProtoReflect.Descriptor instead.
func (*RegulatorCSG) Descriptor() ([]byte, []int) {
	return file_regulatormodule_regulatormodule_proto_rawDescGZIP(), []int{3}
}

func (x *RegulatorCSG) GetCrvPts() []*RegulatorPoint {
	if x != nil {
		return x.CrvPts
	}
	return nil
}

// OpenFMB specialization for control schedule using:  LN: Schedule   Name: FSCH
type RegulatorControlScheduleFSCH struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Discrete value in RegulatorCSG type
	ValDCSG *RegulatorCSG `protobuf:"bytes,1,opt,name=ValDCSG,proto3" json:"ValDCSG,omitempty"`
}

func (x *RegulatorControlScheduleFSCH) Reset() {
	*x = RegulatorControlScheduleFSCH{}
	if protoimpl.UnsafeEnabled {
		mi := &file_regulatormodule_regulatormodule_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegulatorControlScheduleFSCH) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegulatorControlScheduleFSCH) ProtoMessage() {}

func (x *RegulatorControlScheduleFSCH) ProtoReflect() protoreflect.Message {
	mi := &file_regulatormodule_regulatormodule_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegulatorControlScheduleFSCH.ProtoReflect.Descriptor instead.
func (*RegulatorControlScheduleFSCH) Descriptor() ([]byte, []int) {
	return file_regulatormodule_regulatormodule_proto_rawDescGZIP(), []int{4}
}

func (x *RegulatorControlScheduleFSCH) GetValDCSG() *RegulatorCSG {
	if x != nil {
		return x.ValDCSG
	}
	return nil
}

// Using 61850 FSCC for regulator control
type RegulatorControlFSCC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ControlFSCC *commonmodule.ControlFSCC `protobuf:"bytes,1,opt,name=controlFSCC,proto3" json:"controlFSCC,omitempty"`
	// MISSING DOCUMENTATION!!!
	RegulatorControlScheduleFSCH *RegulatorControlScheduleFSCH `protobuf:"bytes,2,opt,name=regulatorControlScheduleFSCH,proto3" json:"regulatorControlScheduleFSCH,omitempty"`
}

func (x *RegulatorControlFSCC) Reset() {
	*x = RegulatorControlFSCC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_regulatormodule_regulatormodule_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegulatorControlFSCC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegulatorControlFSCC) ProtoMessage() {}

func (x *RegulatorControlFSCC) ProtoReflect() protoreflect.Message {
	mi := &file_regulatormodule_regulatormodule_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegulatorControlFSCC.ProtoReflect.Descriptor instead.
func (*RegulatorControlFSCC) Descriptor() ([]byte, []int) {
	return file_regulatormodule_regulatormodule_proto_rawDescGZIP(), []int{5}
}

func (x *RegulatorControlFSCC) GetControlFSCC() *commonmodule.ControlFSCC {
	if x != nil {
		return x.ControlFSCC
	}
	return nil
}

func (x *RegulatorControlFSCC) GetRegulatorControlScheduleFSCH() *RegulatorControlScheduleFSCH {
	if x != nil {
		return x.RegulatorControlScheduleFSCH
	}
	return nil
}

// Regulator control
type RegulatorControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ControlValue *commonmodule.ControlValue `protobuf:"bytes,1,opt,name=controlValue,proto3" json:"controlValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	Check *commonmodule.CheckConditions `protobuf:"bytes,2,opt,name=check,proto3" json:"check,omitempty"`
	// MISSING DOCUMENTATION!!!
	RegulatorControlFSCC *RegulatorControlFSCC `protobuf:"bytes,3,opt,name=regulatorControlFSCC,proto3" json:"regulatorControlFSCC,omitempty"`
}

func (x *RegulatorControl) Reset() {
	*x = RegulatorControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_regulatormodule_regulatormodule_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegulatorControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegulatorControl) ProtoMessage() {}

func (x *RegulatorControl) ProtoReflect() protoreflect.Message {
	mi := &file_regulatormodule_regulatormodule_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegulatorControl.ProtoReflect.Descriptor instead.
func (*RegulatorControl) Descriptor() ([]byte, []int) {
	return file_regulatormodule_regulatormodule_proto_rawDescGZIP(), []int{6}
}

func (x *RegulatorControl) GetControlValue() *commonmodule.ControlValue {
	if x != nil {
		return x.ControlValue
	}
	return nil
}

func (x *RegulatorControl) GetCheck() *commonmodule.CheckConditions {
	if x != nil {
		return x.Check
	}
	return nil
}

func (x *RegulatorControl) GetRegulatorControlFSCC() *RegulatorControlFSCC {
	if x != nil {
		return x.RegulatorControlFSCC
	}
	return nil
}

// Pole-mounted fault interrupter with built-in phase and ground relays, current transformer (CT),
// and supplemental controls.
type RegulatorSystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ConductingEquipment *commonmodule.ConductingEquipment `protobuf:"bytes,1,opt,name=conductingEquipment,proto3" json:"conductingEquipment,omitempty"`
}

func (x *RegulatorSystem) Reset() {
	*x = RegulatorSystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_regulatormodule_regulatormodule_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegulatorSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegulatorSystem) ProtoMessage() {}

func (x *RegulatorSystem) ProtoReflect() protoreflect.Message {
	mi := &file_regulatormodule_regulatormodule_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegulatorSystem.ProtoReflect.Descriptor instead.
func (*RegulatorSystem) Descriptor() ([]byte, []int) {
	return file_regulatormodule_regulatormodule_proto_rawDescGZIP(), []int{7}
}

func (x *RegulatorSystem) GetConductingEquipment() *commonmodule.ConductingEquipment {
	if x != nil {
		return x.ConductingEquipment
	}
	return nil
}

// Regulator control profile.  Instructs an end device (or an end device group) to perform a
// specified action.
type RegulatorControlProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ControlMessageInfo *commonmodule.ControlMessageInfo `protobuf:"bytes,1,opt,name=controlMessageInfo,proto3" json:"controlMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	RegulatorControl *RegulatorControl `protobuf:"bytes,2,opt,name=regulatorControl,proto3" json:"regulatorControl,omitempty"`
	// MISSING DOCUMENTATION!!!
	RegulatorSystem *RegulatorSystem `protobuf:"bytes,3,opt,name=regulatorSystem,proto3" json:"regulatorSystem,omitempty"`
}

func (x *RegulatorControlProfile) Reset() {
	*x = RegulatorControlProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_regulatormodule_regulatormodule_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegulatorControlProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegulatorControlProfile) ProtoMessage() {}

func (x *RegulatorControlProfile) ProtoReflect() protoreflect.Message {
	mi := &file_regulatormodule_regulatormodule_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegulatorControlProfile.ProtoReflect.Descriptor instead.
func (*RegulatorControlProfile) Descriptor() ([]byte, []int) {
	return file_regulatormodule_regulatormodule_proto_rawDescGZIP(), []int{8}
}

func (x *RegulatorControlProfile) GetControlMessageInfo() *commonmodule.ControlMessageInfo {
	if x != nil {
		return x.ControlMessageInfo
	}
	return nil
}

func (x *RegulatorControlProfile) GetRegulatorControl() *RegulatorControl {
	if x != nil {
		return x.RegulatorControl
	}
	return nil
}

func (x *RegulatorControlProfile) GetRegulatorSystem() *RegulatorSystem {
	if x != nil {
		return x.RegulatorSystem
	}
	return nil
}

// Regulator control
type RegulatorDiscreteControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ControlValue *commonmodule.ControlValue `protobuf:"bytes,1,opt,name=controlValue,proto3" json:"controlValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	Check *commonmodule.CheckConditions `protobuf:"bytes,2,opt,name=check,proto3" json:"check,omitempty"`
	// MISSING DOCUMENTATION!!!
	RegulatorControlATCC *RegulatorControlATCC `protobuf:"bytes,3,opt,name=regulatorControlATCC,proto3" json:"regulatorControlATCC,omitempty"`
}

func (x *RegulatorDiscreteControl) Reset() {
	*x = RegulatorDiscreteControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_regulatormodule_regulatormodule_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegulatorDiscreteControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegulatorDiscreteControl) ProtoMessage() {}

func (x *RegulatorDiscreteControl) ProtoReflect() protoreflect.Message {
	mi := &file_regulatormodule_regulatormodule_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegulatorDiscreteControl.ProtoReflect.Descriptor instead.
func (*RegulatorDiscreteControl) Descriptor() ([]byte, []int) {
	return file_regulatormodule_regulatormodule_proto_rawDescGZIP(), []int{9}
}

func (x *RegulatorDiscreteControl) GetControlValue() *commonmodule.ControlValue {
	if x != nil {
		return x.ControlValue
	}
	return nil
}

func (x *RegulatorDiscreteControl) GetCheck() *commonmodule.CheckConditions {
	if x != nil {
		return x.Check
	}
	return nil
}

func (x *RegulatorDiscreteControl) GetRegulatorControlATCC() *RegulatorControlATCC {
	if x != nil {
		return x.RegulatorControlATCC
	}
	return nil
}

// Regulator control profile.  Instructs an end device (or an end device group) to perform a
// specified action.
type RegulatorDiscreteControlProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ControlMessageInfo *commonmodule.ControlMessageInfo `protobuf:"bytes,1,opt,name=controlMessageInfo,proto3" json:"controlMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	RegulatorDiscreteControl *RegulatorDiscreteControl `protobuf:"bytes,2,opt,name=regulatorDiscreteControl,proto3" json:"regulatorDiscreteControl,omitempty"`
	// MISSING DOCUMENTATION!!!
	RegulatorSystem *RegulatorSystem `protobuf:"bytes,3,opt,name=regulatorSystem,proto3" json:"regulatorSystem,omitempty"`
}

func (x *RegulatorDiscreteControlProfile) Reset() {
	*x = RegulatorDiscreteControlProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_regulatormodule_regulatormodule_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegulatorDiscreteControlProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegulatorDiscreteControlProfile) ProtoMessage() {}

func (x *RegulatorDiscreteControlProfile) ProtoReflect() protoreflect.Message {
	mi := &file_regulatormodule_regulatormodule_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegulatorDiscreteControlProfile.ProtoReflect.Descriptor instead.
func (*RegulatorDiscreteControlProfile) Descriptor() ([]byte, []int) {
	return file_regulatormodule_regulatormodule_proto_rawDescGZIP(), []int{10}
}

func (x *RegulatorDiscreteControlProfile) GetControlMessageInfo() *commonmodule.ControlMessageInfo {
	if x != nil {
		return x.ControlMessageInfo
	}
	return nil
}

func (x *RegulatorDiscreteControlProfile) GetRegulatorDiscreteControl() *RegulatorDiscreteControl {
	if x != nil {
		return x.RegulatorDiscreteControl
	}
	return nil
}

func (x *RegulatorDiscreteControlProfile) GetRegulatorSystem() *RegulatorSystem {
	if x != nil {
		return x.RegulatorSystem
	}
	return nil
}

// LN: Automatic tap changer controller   Name: ATCC
type RegulatorEventAndStatusATCC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Centre of voltage control bandwidth (forward power flow presumed).
	BndCtr *commonmodule.ASG `protobuf:"bytes,1,opt,name=BndCtr,proto3" json:"BndCtr,omitempty"`
	// Control (secondary) voltage bandwidth (i.e., range), given either as voltage value or percentage
	// of the nominal voltage (forward power flow presumed).
	BndWid *commonmodule.ASG `protobuf:"bytes,2,opt,name=BndWid,proto3" json:"BndWid,omitempty"`
	// Compensated Voltage Secondary compared with set point plus or minus Bandwidth
	BndWidHi *commonmodule.PhaseSPS `protobuf:"bytes,3,opt,name=BndWidHi,proto3" json:"BndWidHi,omitempty"`
	// Compensated Voltage Secondary compared with set point plus or minus Bandwidth
	BndWidLo *commonmodule.PhaseSPS `protobuf:"bytes,4,opt,name=BndWidLo,proto3" json:"BndWidLo,omitempty"`
	// Current Power Direction is the direction that regulator is regulating.
	DirCtlRev *commonmodule.PhaseSPS `protobuf:"bytes,5,opt,name=DirCtlRev,proto3" json:"DirCtlRev,omitempty"`
	// True if direction is indeterminate.
	DirIndt *commonmodule.PhaseSPS `protobuf:"bytes,6,opt,name=DirIndt,proto3" json:"DirIndt,omitempty"`
	// True if the current direction is the same as the System Direction
	DirRev *commonmodule.PhaseSPS `protobuf:"bytes,7,opt,name=DirRev,proto3" json:"DirRev,omitempty"`
	// Line drop voltage due to line resistance component (forward power flow presumed) at rated current.
	LDCR *commonmodule.ASG `protobuf:"bytes,8,opt,name=LDCR,proto3" json:"LDCR,omitempty"`
	// Line drop voltage due to line reactance component (forward power flow presumed) at rated current.
	LDCX *commonmodule.ASG `protobuf:"bytes,9,opt,name=LDCX,proto3" json:"LDCX,omitempty"`
	// (controllable) If true, transformers operate in parallel, otherwise they operate independently.
	ParOp *commonmodule.StatusSPS `protobuf:"bytes,10,opt,name=ParOp,proto3" json:"ParOp,omitempty"`
	// Ramp rates
	RampRates *commonmodule.RampRate `protobuf:"bytes,11,opt,name=rampRates,proto3" json:"rampRates,omitempty"`
	// State
	State *commonmodule.Optional_StateKind `protobuf:"bytes,12,opt,name=state,proto3" json:"state,omitempty"`
	// OpenFMB extension:  Status for the time to wait before operating (CtrlDlTmms)
	StDlTmms *commonmodule.StatusINC `protobuf:"bytes,13,opt,name=StDlTmms,proto3" json:"StDlTmms,omitempty"`
	// If true, there was an error in tap position change, or in tap indication (for instance, wrong
	// Binary Coded Decimal (BCD) code).
	TapOpErr *commonmodule.StatusSPS `protobuf:"bytes,14,opt,name=TapOpErr,proto3" json:"TapOpErr,omitempty"`
	// (controllable) Tap position change to the specified value.
	TapPos *commonmodule.PhaseINS `protobuf:"bytes,15,opt,name=TapPos,proto3" json:"TapPos,omitempty"`
	// Load Voltage Secondary compared with VolLmtHi
	VolLmtHi *commonmodule.PhaseSPS `protobuf:"bytes,16,opt,name=VolLmtHi,proto3" json:"VolLmtHi,omitempty"`
	// Load Voltage Secondary compared with VolLmtLo
	VolLmtLo *commonmodule.PhaseSPS `protobuf:"bytes,17,opt,name=VolLmtLo,proto3" json:"VolLmtLo,omitempty"`
	// (controllable) Voltage setpoint. Analog value (MX) feeds back the setpoint of the controller.
	VolSpt *commonmodule.PhaseAPC `protobuf:"bytes,18,opt,name=VolSpt,proto3" json:"VolSpt,omitempty"`
	// Voltage set point status
	VoltageSetPointEnabled *commonmodule.StatusSPS `protobuf:"bytes,19,opt,name=voltageSetPointEnabled,proto3" json:"voltageSetPointEnabled,omitempty"`
}

func (x *RegulatorEventAndStatusATCC) Reset() {
	*x = RegulatorEventAndStatusATCC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_regulatormodule_regulatormodule_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegulatorEventAndStatusATCC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegulatorEventAndStatusATCC) ProtoMessage() {}

func (x *RegulatorEventAndStatusATCC) ProtoReflect() protoreflect.Message {
	mi := &file_regulatormodule_regulatormodule_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegulatorEventAndStatusATCC.ProtoReflect.Descriptor instead.
func (*RegulatorEventAndStatusATCC) Descriptor() ([]byte, []int) {
	return file_regulatormodule_regulatormodule_proto_rawDescGZIP(), []int{11}
}

func (x *RegulatorEventAndStatusATCC) GetBndCtr() *commonmodule.ASG {
	if x != nil {
		return x.BndCtr
	}
	return nil
}

func (x *RegulatorEventAndStatusATCC) GetBndWid() *commonmodule.ASG {
	if x != nil {
		return x.BndWid
	}
	return nil
}

func (x *RegulatorEventAndStatusATCC) GetBndWidHi() *commonmodule.PhaseSPS {
	if x != nil {
		return x.BndWidHi
	}
	return nil
}

func (x *RegulatorEventAndStatusATCC) GetBndWidLo() *commonmodule.PhaseSPS {
	if x != nil {
		return x.BndWidLo
	}
	return nil
}

func (x *RegulatorEventAndStatusATCC) GetDirCtlRev() *commonmodule.PhaseSPS {
	if x != nil {
		return x.DirCtlRev
	}
	return nil
}

func (x *RegulatorEventAndStatusATCC) GetDirIndt() *commonmodule.PhaseSPS {
	if x != nil {
		return x.DirIndt
	}
	return nil
}

func (x *RegulatorEventAndStatusATCC) GetDirRev() *commonmodule.PhaseSPS {
	if x != nil {
		return x.DirRev
	}
	return nil
}

func (x *RegulatorEventAndStatusATCC) GetLDCR() *commonmodule.ASG {
	if x != nil {
		return x.LDCR
	}
	return nil
}

func (x *RegulatorEventAndStatusATCC) GetLDCX() *commonmodule.ASG {
	if x != nil {
		return x.LDCX
	}
	return nil
}

func (x *RegulatorEventAndStatusATCC) GetParOp() *commonmodule.StatusSPS {
	if x != nil {
		return x.ParOp
	}
	return nil
}

func (x *RegulatorEventAndStatusATCC) GetRampRates() *commonmodule.RampRate {
	if x != nil {
		return x.RampRates
	}
	return nil
}

func (x *RegulatorEventAndStatusATCC) GetState() *commonmodule.Optional_StateKind {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *RegulatorEventAndStatusATCC) GetStDlTmms() *commonmodule.StatusINC {
	if x != nil {
		return x.StDlTmms
	}
	return nil
}

func (x *RegulatorEventAndStatusATCC) GetTapOpErr() *commonmodule.StatusSPS {
	if x != nil {
		return x.TapOpErr
	}
	return nil
}

func (x *RegulatorEventAndStatusATCC) GetTapPos() *commonmodule.PhaseINS {
	if x != nil {
		return x.TapPos
	}
	return nil
}

func (x *RegulatorEventAndStatusATCC) GetVolLmtHi() *commonmodule.PhaseSPS {
	if x != nil {
		return x.VolLmtHi
	}
	return nil
}

func (x *RegulatorEventAndStatusATCC) GetVolLmtLo() *commonmodule.PhaseSPS {
	if x != nil {
		return x.VolLmtLo
	}
	return nil
}

func (x *RegulatorEventAndStatusATCC) GetVolSpt() *commonmodule.PhaseAPC {
	if x != nil {
		return x.VolSpt
	}
	return nil
}

func (x *RegulatorEventAndStatusATCC) GetVoltageSetPointEnabled() *commonmodule.StatusSPS {
	if x != nil {
		return x.VoltageSetPointEnabled
	}
	return nil
}

// OpenFMB 61850 specialization for both RegulatorEventProfile and RegulatorStatusProfile
type RegulatorEventAndStatusANCR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	LogicalNodeForEventAndStatus *commonmodule.LogicalNodeForEventAndStatus `protobuf:"bytes,1,opt,name=logicalNodeForEventAndStatus,proto3" json:"logicalNodeForEventAndStatus,omitempty"`
	// MISSING DOCUMENTATION!!!
	DynamicTest *commonmodule.ENS_DynamicTestKind `protobuf:"bytes,2,opt,name=DynamicTest,proto3" json:"DynamicTest,omitempty"`
	// MISSING DOCUMENTATION!!!
	PointStatus *RegulatorEventAndStatusATCC `protobuf:"bytes,3,opt,name=PointStatus,proto3" json:"PointStatus,omitempty"`
}

func (x *RegulatorEventAndStatusANCR) Reset() {
	*x = RegulatorEventAndStatusANCR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_regulatormodule_regulatormodule_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegulatorEventAndStatusANCR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegulatorEventAndStatusANCR) ProtoMessage() {}

func (x *RegulatorEventAndStatusANCR) ProtoReflect() protoreflect.Message {
	mi := &file_regulatormodule_regulatormodule_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegulatorEventAndStatusANCR.ProtoReflect.Descriptor instead.
func (*RegulatorEventAndStatusANCR) Descriptor() ([]byte, []int) {
	return file_regulatormodule_regulatormodule_proto_rawDescGZIP(), []int{12}
}

func (x *RegulatorEventAndStatusANCR) GetLogicalNodeForEventAndStatus() *commonmodule.LogicalNodeForEventAndStatus {
	if x != nil {
		return x.LogicalNodeForEventAndStatus
	}
	return nil
}

func (x *RegulatorEventAndStatusANCR) GetDynamicTest() *commonmodule.ENS_DynamicTestKind {
	if x != nil {
		return x.DynamicTest
	}
	return nil
}

func (x *RegulatorEventAndStatusANCR) GetPointStatus() *RegulatorEventAndStatusATCC {
	if x != nil {
		return x.PointStatus
	}
	return nil
}

// Regulator event
type RegulatorEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	EventValue *commonmodule.EventValue `protobuf:"bytes,1,opt,name=eventValue,proto3" json:"eventValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	RegulatorEventAndStatusANCR *RegulatorEventAndStatusANCR `protobuf:"bytes,2,opt,name=regulatorEventAndStatusANCR,proto3" json:"regulatorEventAndStatusANCR,omitempty"`
}

func (x *RegulatorEvent) Reset() {
	*x = RegulatorEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_regulatormodule_regulatormodule_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegulatorEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegulatorEvent) ProtoMessage() {}

func (x *RegulatorEvent) ProtoReflect() protoreflect.Message {
	mi := &file_regulatormodule_regulatormodule_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegulatorEvent.ProtoReflect.Descriptor instead.
func (*RegulatorEvent) Descriptor() ([]byte, []int) {
	return file_regulatormodule_regulatormodule_proto_rawDescGZIP(), []int{13}
}

func (x *RegulatorEvent) GetEventValue() *commonmodule.EventValue {
	if x != nil {
		return x.EventValue
	}
	return nil
}

func (x *RegulatorEvent) GetRegulatorEventAndStatusANCR() *RegulatorEventAndStatusANCR {
	if x != nil {
		return x.RegulatorEventAndStatusANCR
	}
	return nil
}

// Regulator event profile
type RegulatorEventProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	EventMessageInfo *commonmodule.EventMessageInfo `protobuf:"bytes,1,opt,name=eventMessageInfo,proto3" json:"eventMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	RegulatorEvent *RegulatorEvent `protobuf:"bytes,2,opt,name=regulatorEvent,proto3" json:"regulatorEvent,omitempty"`
	// MISSING DOCUMENTATION!!!
	RegulatorSystem *RegulatorSystem `protobuf:"bytes,3,opt,name=regulatorSystem,proto3" json:"regulatorSystem,omitempty"`
}

func (x *RegulatorEventProfile) Reset() {
	*x = RegulatorEventProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_regulatormodule_regulatormodule_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegulatorEventProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegulatorEventProfile) ProtoMessage() {}

func (x *RegulatorEventProfile) ProtoReflect() protoreflect.Message {
	mi := &file_regulatormodule_regulatormodule_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegulatorEventProfile.ProtoReflect.Descriptor instead.
func (*RegulatorEventProfile) Descriptor() ([]byte, []int) {
	return file_regulatormodule_regulatormodule_proto_rawDescGZIP(), []int{14}
}

func (x *RegulatorEventProfile) GetEventMessageInfo() *commonmodule.EventMessageInfo {
	if x != nil {
		return x.EventMessageInfo
	}
	return nil
}

func (x *RegulatorEventProfile) GetRegulatorEvent() *RegulatorEvent {
	if x != nil {
		return x.RegulatorEvent
	}
	return nil
}

func (x *RegulatorEventProfile) GetRegulatorSystem() *RegulatorSystem {
	if x != nil {
		return x.RegulatorSystem
	}
	return nil
}

// Regulator reading value
type RegulatorReading struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ConductingEquipmentTerminalReading *commonmodule.ConductingEquipmentTerminalReading `protobuf:"bytes,1,opt,name=conductingEquipmentTerminalReading,proto3" json:"conductingEquipmentTerminalReading,omitempty"`
	// MISSING DOCUMENTATION!!!
	PhaseMMTN *commonmodule.PhaseMMTN `protobuf:"bytes,2,opt,name=phaseMMTN,proto3" json:"phaseMMTN,omitempty"`
	// MISSING DOCUMENTATION!!!
	ReadingMMTR *commonmodule.ReadingMMTR `protobuf:"bytes,3,opt,name=readingMMTR,proto3" json:"readingMMTR,omitempty"`
	// MISSING DOCUMENTATION!!!
	ReadingMMXU *commonmodule.ReadingMMXU `protobuf:"bytes,4,opt,name=readingMMXU,proto3" json:"readingMMXU,omitempty"`
	// MISSING DOCUMENTATION!!!
	SecondaryReadingMMXU *commonmodule.ReadingMMXU `protobuf:"bytes,5,opt,name=secondaryReadingMMXU,proto3" json:"secondaryReadingMMXU,omitempty"`
}

func (x *RegulatorReading) Reset() {
	*x = RegulatorReading{}
	if protoimpl.UnsafeEnabled {
		mi := &file_regulatormodule_regulatormodule_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegulatorReading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegulatorReading) ProtoMessage() {}

func (x *RegulatorReading) ProtoReflect() protoreflect.Message {
	mi := &file_regulatormodule_regulatormodule_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegulatorReading.ProtoReflect.Descriptor instead.
func (*RegulatorReading) Descriptor() ([]byte, []int) {
	return file_regulatormodule_regulatormodule_proto_rawDescGZIP(), []int{15}
}

func (x *RegulatorReading) GetConductingEquipmentTerminalReading() *commonmodule.ConductingEquipmentTerminalReading {
	if x != nil {
		return x.ConductingEquipmentTerminalReading
	}
	return nil
}

func (x *RegulatorReading) GetPhaseMMTN() *commonmodule.PhaseMMTN {
	if x != nil {
		return x.PhaseMMTN
	}
	return nil
}

func (x *RegulatorReading) GetReadingMMTR() *commonmodule.ReadingMMTR {
	if x != nil {
		return x.ReadingMMTR
	}
	return nil
}

func (x *RegulatorReading) GetReadingMMXU() *commonmodule.ReadingMMXU {
	if x != nil {
		return x.ReadingMMXU
	}
	return nil
}

func (x *RegulatorReading) GetSecondaryReadingMMXU() *commonmodule.ReadingMMXU {
	if x != nil {
		return x.SecondaryReadingMMXU
	}
	return nil
}

// Regulator reading profile
type RegulatorReadingProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ReadingMessageInfo *commonmodule.ReadingMessageInfo `protobuf:"bytes,1,opt,name=readingMessageInfo,proto3" json:"readingMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	RegulatorReading []*RegulatorReading `protobuf:"bytes,2,rep,name=regulatorReading,proto3" json:"regulatorReading,omitempty"`
	// MISSING DOCUMENTATION!!!
	RegulatorSystem *RegulatorSystem `protobuf:"bytes,3,opt,name=regulatorSystem,proto3" json:"regulatorSystem,omitempty"`
}

func (x *RegulatorReadingProfile) Reset() {
	*x = RegulatorReadingProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_regulatormodule_regulatormodule_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegulatorReadingProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegulatorReadingProfile) ProtoMessage() {}

func (x *RegulatorReadingProfile) ProtoReflect() protoreflect.Message {
	mi := &file_regulatormodule_regulatormodule_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegulatorReadingProfile.ProtoReflect.Descriptor instead.
func (*RegulatorReadingProfile) Descriptor() ([]byte, []int) {
	return file_regulatormodule_regulatormodule_proto_rawDescGZIP(), []int{16}
}

func (x *RegulatorReadingProfile) GetReadingMessageInfo() *commonmodule.ReadingMessageInfo {
	if x != nil {
		return x.ReadingMessageInfo
	}
	return nil
}

func (x *RegulatorReadingProfile) GetRegulatorReading() []*RegulatorReading {
	if x != nil {
		return x.RegulatorReading
	}
	return nil
}

func (x *RegulatorReadingProfile) GetRegulatorSystem() *RegulatorSystem {
	if x != nil {
		return x.RegulatorSystem
	}
	return nil
}

// Regulator status
type RegulatorStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	StatusValue *commonmodule.StatusValue `protobuf:"bytes,1,opt,name=statusValue,proto3" json:"statusValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	RegulatorEventAndStatusANCR *RegulatorEventAndStatusANCR `protobuf:"bytes,2,opt,name=regulatorEventAndStatusANCR,proto3" json:"regulatorEventAndStatusANCR,omitempty"`
}

func (x *RegulatorStatus) Reset() {
	*x = RegulatorStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_regulatormodule_regulatormodule_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegulatorStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegulatorStatus) ProtoMessage() {}

func (x *RegulatorStatus) ProtoReflect() protoreflect.Message {
	mi := &file_regulatormodule_regulatormodule_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegulatorStatus.ProtoReflect.Descriptor instead.
func (*RegulatorStatus) Descriptor() ([]byte, []int) {
	return file_regulatormodule_regulatormodule_proto_rawDescGZIP(), []int{17}
}

func (x *RegulatorStatus) GetStatusValue() *commonmodule.StatusValue {
	if x != nil {
		return x.StatusValue
	}
	return nil
}

func (x *RegulatorStatus) GetRegulatorEventAndStatusANCR() *RegulatorEventAndStatusANCR {
	if x != nil {
		return x.RegulatorEventAndStatusANCR
	}
	return nil
}

// Regulator status profile
type RegulatorStatusProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	StatusMessageInfo *commonmodule.StatusMessageInfo `protobuf:"bytes,1,opt,name=statusMessageInfo,proto3" json:"statusMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	RegulatorStatus *RegulatorStatus `protobuf:"bytes,2,opt,name=regulatorStatus,proto3" json:"regulatorStatus,omitempty"`
	// MISSING DOCUMENTATION!!!
	RegulatorSystem *RegulatorSystem `protobuf:"bytes,3,opt,name=regulatorSystem,proto3" json:"regulatorSystem,omitempty"`
}

func (x *RegulatorStatusProfile) Reset() {
	*x = RegulatorStatusProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_regulatormodule_regulatormodule_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegulatorStatusProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegulatorStatusProfile) ProtoMessage() {}

func (x *RegulatorStatusProfile) ProtoReflect() protoreflect.Message {
	mi := &file_regulatormodule_regulatormodule_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegulatorStatusProfile.ProtoReflect.Descriptor instead.
func (*RegulatorStatusProfile) Descriptor() ([]byte, []int) {
	return file_regulatormodule_regulatormodule_proto_rawDescGZIP(), []int{18}
}

func (x *RegulatorStatusProfile) GetStatusMessageInfo() *commonmodule.StatusMessageInfo {
	if x != nil {
		return x.StatusMessageInfo
	}
	return nil
}

func (x *RegulatorStatusProfile) GetRegulatorStatus() *RegulatorStatus {
	if x != nil {
		return x.RegulatorStatus
	}
	return nil
}

func (x *RegulatorStatusProfile) GetRegulatorSystem() *RegulatorSystem {
	if x != nil {
		return x.RegulatorSystem
	}
	return nil
}

var File_regulatormodule_regulatormodule_proto protoreflect.FileDescriptor

var file_regulatormodule_regulatormodule_proto_rawDesc = []byte{
	0x0a, 0x25, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x1a, 0x09, 0x75, 0x6d, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcf, 0x02, 0x0a, 0x0f, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x54, 0x43, 0x43, 0x12, 0x2e, 0x0a, 0x06, 0x42, 0x6e, 0x64, 0x57,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x41, 0x50, 0x43,
	0x52, 0x06, 0x42, 0x6e, 0x64, 0x57, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x43, 0x74, 0x6c, 0x44,
	0x6c, 0x54, 0x6d, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x49, 0x53, 0x43, 0x52, 0x09, 0x43, 0x74, 0x6c, 0x44, 0x6c, 0x54, 0x6d, 0x6d, 0x73, 0x12, 0x2a,
	0x0a, 0x04, 0x4c, 0x44, 0x43, 0x52, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x41, 0x50, 0x43, 0x52, 0x04, 0x4c, 0x44, 0x43, 0x52, 0x12, 0x2a, 0x0a, 0x04, 0x4c, 0x44,
	0x43, 0x58, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x41, 0x50, 0x43,
	0x52, 0x04, 0x4c, 0x44, 0x43, 0x58, 0x12, 0x2e, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x53, 0x70, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x41, 0x50, 0x43, 0x52, 0x06,
	0x56, 0x6f, 0x6c, 0x53, 0x70, 0x74, 0x12, 0x4e, 0x0a, 0x16, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x44, 0x50, 0x43, 0x52, 0x16,
	0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x8d, 0x06, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x54, 0x43, 0x43, 0x12,
	0x5f, 0x0a, 0x15, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x15, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x12, 0x38, 0x0a, 0x06, 0x44, 0x69, 0x72, 0x46, 0x77, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x54,
	0x43, 0x43, 0x52, 0x06, 0x44, 0x69, 0x72, 0x46, 0x77, 0x64, 0x12, 0x42, 0x0a, 0x07, 0x44, 0x69,
	0x72, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x07, 0x44, 0x69, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x38,
	0x0a, 0x06, 0x44, 0x69, 0x72, 0x52, 0x65, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x54, 0x43, 0x43,
	0x52, 0x06, 0x44, 0x69, 0x72, 0x52, 0x65, 0x76, 0x12, 0x2e, 0x0a, 0x06, 0x44, 0x69, 0x72, 0x54,
	0x68, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x41, 0x50, 0x43,
	0x52, 0x06, 0x44, 0x69, 0x72, 0x54, 0x68, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x4f,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53, 0x50, 0x43, 0x52,
	0x05, 0x50, 0x61, 0x72, 0x4f, 0x70, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x61, 0x6d, 0x70, 0x52, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x61, 0x6d, 0x70, 0x52, 0x61, 0x74,
	0x65, 0x52, 0x09, 0x72, 0x61, 0x6d, 0x70, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x54, 0x61, 0x70, 0x4f, 0x70, 0x4c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53, 0x50, 0x43, 0x52, 0x06, 0x54, 0x61,
	0x70, 0x4f, 0x70, 0x4c, 0x12, 0x2e, 0x0a, 0x06, 0x54, 0x61, 0x70, 0x4f, 0x70, 0x52, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53, 0x50, 0x43, 0x52, 0x06, 0x54, 0x61,
	0x70, 0x4f, 0x70, 0x52, 0x12, 0x32, 0x0a, 0x08, 0x56, 0x6f, 0x6c, 0x4c, 0x6d, 0x74, 0x48, 0x69,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x41, 0x50, 0x43, 0x52, 0x08,
	0x56, 0x6f, 0x6c, 0x4c, 0x6d, 0x74, 0x48, 0x69, 0x12, 0x32, 0x0a, 0x08, 0x56, 0x6f, 0x6c, 0x4c,
	0x6d, 0x74, 0x4c, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x41,
	0x50, 0x43, 0x52, 0x08, 0x56, 0x6f, 0x6c, 0x4c, 0x6d, 0x74, 0x4c, 0x6f, 0x12, 0x48, 0x0a, 0x0a,
	0x56, 0x6f, 0x6c, 0x4c, 0x6d, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x56, 0x6f, 0x6c, 0x74, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0a, 0x56, 0x6f, 0x6c, 0x4c,
	0x6d, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x54, 0x43,
	0x43, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x3f, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x51, 0x0a, 0x0c, 0x52,
	0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x53, 0x47, 0x12, 0x41, 0x0a, 0x06, 0x63,
	0x72, 0x76, 0x50, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x08, 0x88, 0xb5,
	0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x06, 0x63, 0x72, 0x76, 0x50, 0x74, 0x73, 0x22, 0x61,
	0x0a, 0x1c, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x53, 0x43, 0x48, 0x12, 0x41,
	0x0a, 0x07, 0x56, 0x61, 0x6c, 0x44, 0x43, 0x53, 0x47, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x53, 0x47, 0x42, 0x08,
	0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x07, 0x56, 0x61, 0x6c, 0x44, 0x43, 0x53,
	0x47, 0x22, 0xcc, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x53, 0x43, 0x43, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x53, 0x43, 0x43, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x53, 0x43, 0x43, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x53, 0x43, 0x43, 0x12, 0x71, 0x0a,
	0x1c, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x53, 0x43, 0x48, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x53,
	0x43, 0x48, 0x52, 0x1c, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x53, 0x43, 0x48,
	0x22, 0xe8, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x12, 0x59, 0x0a, 0x14, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x46, 0x53, 0x43, 0x43, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x46, 0x53, 0x43, 0x43, 0x52, 0x14, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x53, 0x43, 0x43, 0x22, 0x6c, 0x0a, 0x0f, 0x52,
	0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x59,
	0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x01, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6e, 0x67,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xa6, 0x02, 0x0a, 0x17, 0x52, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x56, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x57, 0x0a,
	0x10, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x74, 0x6f, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01,
	0x90, 0xb5, 0x18, 0x01, 0x52, 0x10, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x54, 0x0a, 0x0f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x74, 0x6f, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0f, 0x72, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x3a, 0x04, 0xc0, 0xf3,
	0x18, 0x01, 0x22, 0xf0, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12,
	0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x59, 0x0a, 0x14, 0x72, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x54,
	0x43, 0x43, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x74, 0x6f, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x54, 0x43, 0x43, 0x52,
	0x14, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x41, 0x54, 0x43, 0x43, 0x22, 0xc6, 0x02, 0x0a, 0x1f, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x74, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x56, 0x0a, 0x12, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x12, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x6f, 0x0a, 0x18, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x69,
	0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x44,
	0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x08,
	0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x18, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x74, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x12, 0x54, 0x0a, 0x0f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x08, 0x88,
	0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x3a, 0x04, 0xc0, 0xf3, 0x18, 0x01, 0x22, 0xe1,
	0x07, 0x0a, 0x1b, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x54, 0x43, 0x43, 0x12, 0x29,
	0x0a, 0x06, 0x42, 0x6e, 0x64, 0x43, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53,
	0x47, 0x52, 0x06, 0x42, 0x6e, 0x64, 0x43, 0x74, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x42, 0x6e, 0x64,
	0x57, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53, 0x47, 0x52, 0x06, 0x42, 0x6e,
	0x64, 0x57, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x42, 0x6e, 0x64, 0x57, 0x69, 0x64, 0x48, 0x69,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53, 0x50, 0x53, 0x52, 0x08,
	0x42, 0x6e, 0x64, 0x57, 0x69, 0x64, 0x48, 0x69, 0x12, 0x32, 0x0a, 0x08, 0x42, 0x6e, 0x64, 0x57,
	0x69, 0x64, 0x4c, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53,
	0x50, 0x53, 0x52, 0x08, 0x42, 0x6e, 0x64, 0x57, 0x69, 0x64, 0x4c, 0x6f, 0x12, 0x34, 0x0a, 0x09,
	0x44, 0x69, 0x72, 0x43, 0x74, 0x6c, 0x52, 0x65, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x53, 0x50, 0x53, 0x52, 0x09, 0x44, 0x69, 0x72, 0x43, 0x74, 0x6c, 0x52,
	0x65, 0x76, 0x12, 0x30, 0x0a, 0x07, 0x44, 0x69, 0x72, 0x49, 0x6e, 0x64, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53, 0x50, 0x53, 0x52, 0x07, 0x44, 0x69, 0x72,
	0x49, 0x6e, 0x64, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x44, 0x69, 0x72, 0x52, 0x65, 0x76, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53, 0x50, 0x53, 0x52, 0x06, 0x44, 0x69,
	0x72, 0x52, 0x65, 0x76, 0x12, 0x25, 0x0a, 0x04, 0x4c, 0x44, 0x43, 0x52, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x41, 0x53, 0x47, 0x52, 0x04, 0x4c, 0x44, 0x43, 0x52, 0x12, 0x25, 0x0a, 0x04, 0x4c,
	0x44, 0x43, 0x58, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53, 0x47, 0x52, 0x04, 0x4c, 0x44,
	0x43, 0x58, 0x12, 0x2d, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x4f, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x05, 0x50, 0x61, 0x72, 0x4f,
	0x70, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x61, 0x6d, 0x70, 0x52, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x52, 0x61, 0x6d, 0x70, 0x52, 0x61, 0x74, 0x65, 0x52, 0x09, 0x72, 0x61,
	0x6d, 0x70, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x33, 0x0a, 0x08, 0x53, 0x74, 0x44, 0x6c, 0x54, 0x6d, 0x6d, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x4e, 0x43, 0x52, 0x08, 0x53, 0x74, 0x44, 0x6c,
	0x54, 0x6d, 0x6d, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x54, 0x61, 0x70, 0x4f, 0x70, 0x45, 0x72, 0x72,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52,
	0x08, 0x54, 0x61, 0x70, 0x4f, 0x70, 0x45, 0x72, 0x72, 0x12, 0x2e, 0x0a, 0x06, 0x54, 0x61, 0x70,
	0x50, 0x6f, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49, 0x4e,
	0x53, 0x52, 0x06, 0x54, 0x61, 0x70, 0x50, 0x6f, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x56, 0x6f, 0x6c,
	0x4c, 0x6d, 0x74, 0x48, 0x69, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x53, 0x50, 0x53, 0x52, 0x08, 0x56, 0x6f, 0x6c, 0x4c, 0x6d, 0x74, 0x48, 0x69, 0x12, 0x32, 0x0a,
	0x08, 0x56, 0x6f, 0x6c, 0x4c, 0x6d, 0x74, 0x4c, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x53, 0x50, 0x53, 0x52, 0x08, 0x56, 0x6f, 0x6c, 0x4c, 0x6d, 0x74, 0x4c,
	0x6f, 0x12, 0x2e, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x53, 0x70, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x41, 0x50, 0x43, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x53, 0x70,
	0x74, 0x12, 0x4f, 0x0a, 0x16, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x16, 0x76, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x22, 0xa8, 0x02, 0x0a, 0x1b, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x4e,
	0x43, 0x52, 0x12, 0x74, 0x0a, 0x1c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64,
	0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e,
	0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x1c, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x4e, 0x53,
	0x5f, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x4b, 0x69, 0x6e, 0x64,
	0x52, 0x0b, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a,
	0x0b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x54, 0x43, 0x43,
	0x52, 0x0b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc0, 0x01,
	0x0a, 0x0e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x3e, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x6e, 0x0a, 0x1b, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x4e, 0x43, 0x52, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f,
	0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41,
	0x4e, 0x43, 0x52, 0x52, 0x1b, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x4e, 0x43, 0x52,
	0x22, 0x98, 0x02, 0x0a, 0x15, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x50, 0x0a, 0x10, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x10, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x51, 0x0a, 0x0e,
	0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52,
	0x0e, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x54, 0x0a, 0x0f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x74, 0x6f, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x74, 0x6f, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01,
	0x90, 0xb5, 0x18, 0x01, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x3a, 0x04, 0xc0, 0xf3, 0x18, 0x01, 0x22, 0x9b, 0x03, 0x0a, 0x10,
	0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x86, 0x01, 0x0a, 0x22, 0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x22, 0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6e,
	0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x09, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x4d, 0x4d, 0x54, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x4d, 0x4d, 0x54, 0x4e, 0x52, 0x09, 0x70, 0x68, 0x61, 0x73, 0x65, 0x4d, 0x4d, 0x54, 0x4e,
	0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x54, 0x52, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x54, 0x52,
	0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x54, 0x52, 0x12, 0x3b, 0x0a,
	0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x58, 0x55, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x58, 0x55, 0x52, 0x0b, 0x72,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x58, 0x55, 0x12, 0x4d, 0x0a, 0x14, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d,
	0x58, 0x55, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d,
	0x4d, 0x58, 0x55, 0x52, 0x14, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x65,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x58, 0x55, 0x22, 0xaa, 0x02, 0x0a, 0x17, 0x52, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x56, 0x0a, 0x12, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x12, 0x72, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5b, 0x0a,
	0x10, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x74, 0x6f, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x0c, 0x88, 0xb5, 0x18, 0x01,
	0x90, 0xb5, 0x18, 0x01, 0x98, 0xb5, 0x18, 0x02, 0x52, 0x10, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x54, 0x0a, 0x0f, 0x72, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52,
	0x0f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x3a, 0x04, 0xc0, 0xf3, 0x18, 0x01, 0x22, 0xc4, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01,
	0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x6e, 0x0a,
	0x1b, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x4e, 0x43, 0x52, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x4e, 0x43, 0x52,
	0x52, 0x1b, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x4e, 0x43, 0x52, 0x22, 0x9f, 0x02,
	0x0a, 0x16, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x53, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x11, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x54, 0x0a,
	0x0f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5,
	0x18, 0x01, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x54, 0x0a, 0x0f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72,
	0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52,
	0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x08,
	0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x74, 0x6f, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x3a, 0x04, 0xc0, 0xf3, 0x18, 0x01, 0x42,
	0x8d, 0x01, 0x0a, 0x17, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2e, 0x72, 0x65, 0x67, 0x75,
	0x6c, 0x61, 0x74, 0x6f, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x01, 0x5a, 0x56, 0x67,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d,
	0x62, 0x2f, 0x70, 0x73, 0x6d, 0x2f, 0x6f, 0x70, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x67, 0x6f, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2d, 0x6f, 0x70,
	0x73, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x70,
	0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0xaa, 0x02, 0x17, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2e,
	0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_regulatormodule_regulatormodule_proto_rawDescOnce sync.Once
	file_regulatormodule_regulatormodule_proto_rawDescData = file_regulatormodule_regulatormodule_proto_rawDesc
)

func file_regulatormodule_regulatormodule_proto_rawDescGZIP() []byte {
	file_regulatormodule_regulatormodule_proto_rawDescOnce.Do(func() {
		file_regulatormodule_regulatormodule_proto_rawDescData = protoimpl.X.CompressGZIP(file_regulatormodule_regulatormodule_proto_rawDescData)
	})
	return file_regulatormodule_regulatormodule_proto_rawDescData
}

var file_regulatormodule_regulatormodule_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_regulatormodule_regulatormodule_proto_goTypes = []interface{}{
	(*DirectionalATCC)(nil),                                 // 0: regulatormodule.DirectionalATCC
	(*RegulatorControlATCC)(nil),                            // 1: regulatormodule.RegulatorControlATCC
	(*RegulatorPoint)(nil),                                  // 2: regulatormodule.RegulatorPoint
	(*RegulatorCSG)(nil),                                    // 3: regulatormodule.RegulatorCSG
	(*RegulatorControlScheduleFSCH)(nil),                    // 4: regulatormodule.RegulatorControlScheduleFSCH
	(*RegulatorControlFSCC)(nil),                            // 5: regulatormodule.RegulatorControlFSCC
	(*RegulatorControl)(nil),                                // 6: regulatormodule.RegulatorControl
	(*RegulatorSystem)(nil),                                 // 7: regulatormodule.RegulatorSystem
	(*RegulatorControlProfile)(nil),                         // 8: regulatormodule.RegulatorControlProfile
	(*RegulatorDiscreteControl)(nil),                        // 9: regulatormodule.RegulatorDiscreteControl
	(*RegulatorDiscreteControlProfile)(nil),                 // 10: regulatormodule.RegulatorDiscreteControlProfile
	(*RegulatorEventAndStatusATCC)(nil),                     // 11: regulatormodule.RegulatorEventAndStatusATCC
	(*RegulatorEventAndStatusANCR)(nil),                     // 12: regulatormodule.RegulatorEventAndStatusANCR
	(*RegulatorEvent)(nil),                                  // 13: regulatormodule.RegulatorEvent
	(*RegulatorEventProfile)(nil),                           // 14: regulatormodule.RegulatorEventProfile
	(*RegulatorReading)(nil),                                // 15: regulatormodule.RegulatorReading
	(*RegulatorReadingProfile)(nil),                         // 16: regulatormodule.RegulatorReadingProfile
	(*RegulatorStatus)(nil),                                 // 17: regulatormodule.RegulatorStatus
	(*RegulatorStatusProfile)(nil),                          // 18: regulatormodule.RegulatorStatusProfile
	(*commonmodule.PhaseAPC)(nil),                           // 19: commonmodule.PhaseAPC
	(*commonmodule.PhaseISC)(nil),                           // 20: commonmodule.PhaseISC
	(*commonmodule.PhaseDPC)(nil),                           // 21: commonmodule.PhaseDPC
	(*commonmodule.LogicalNodeForControl)(nil),              // 22: commonmodule.LogicalNodeForControl
	(*commonmodule.Optional_DirectionModeKind)(nil),         // 23: commonmodule.Optional_DirectionModeKind
	(*commonmodule.PhaseSPC)(nil),                           // 24: commonmodule.PhaseSPC
	(*commonmodule.RampRate)(nil),                           // 25: commonmodule.RampRate
	(*commonmodule.Optional_StateKind)(nil),                 // 26: commonmodule.Optional_StateKind
	(*commonmodule.Optional_VoltLimitModeKind)(nil),         // 27: commonmodule.Optional_VoltLimitModeKind
	(*commonmodule.Timestamp)(nil),                          // 28: commonmodule.Timestamp
	(*commonmodule.ControlFSCC)(nil),                        // 29: commonmodule.ControlFSCC
	(*commonmodule.ControlValue)(nil),                       // 30: commonmodule.ControlValue
	(*commonmodule.CheckConditions)(nil),                    // 31: commonmodule.CheckConditions
	(*commonmodule.ConductingEquipment)(nil),                // 32: commonmodule.ConductingEquipment
	(*commonmodule.ControlMessageInfo)(nil),                 // 33: commonmodule.ControlMessageInfo
	(*commonmodule.ASG)(nil),                                // 34: commonmodule.ASG
	(*commonmodule.PhaseSPS)(nil),                           // 35: commonmodule.PhaseSPS
	(*commonmodule.StatusSPS)(nil),                          // 36: commonmodule.StatusSPS
	(*commonmodule.StatusINC)(nil),                          // 37: commonmodule.StatusINC
	(*commonmodule.PhaseINS)(nil),                           // 38: commonmodule.PhaseINS
	(*commonmodule.LogicalNodeForEventAndStatus)(nil),       // 39: commonmodule.LogicalNodeForEventAndStatus
	(*commonmodule.ENS_DynamicTestKind)(nil),                // 40: commonmodule.ENS_DynamicTestKind
	(*commonmodule.EventValue)(nil),                         // 41: commonmodule.EventValue
	(*commonmodule.EventMessageInfo)(nil),                   // 42: commonmodule.EventMessageInfo
	(*commonmodule.ConductingEquipmentTerminalReading)(nil), // 43: commonmodule.ConductingEquipmentTerminalReading
	(*commonmodule.PhaseMMTN)(nil),                          // 44: commonmodule.PhaseMMTN
	(*commonmodule.ReadingMMTR)(nil),                        // 45: commonmodule.ReadingMMTR
	(*commonmodule.ReadingMMXU)(nil),                        // 46: commonmodule.ReadingMMXU
	(*commonmodule.ReadingMessageInfo)(nil),                 // 47: commonmodule.ReadingMessageInfo
	(*commonmodule.StatusValue)(nil),                        // 48: commonmodule.StatusValue
	(*commonmodule.StatusMessageInfo)(nil),                  // 49: commonmodule.StatusMessageInfo
}
var file_regulatormodule_regulatormodule_proto_depIdxs = []int32{
	19, // 0: regulatormodule.DirectionalATCC.BndWid:type_name -> commonmodule.PhaseAPC
	20, // 1: regulatormodule.DirectionalATCC.CtlDlTmms:type_name -> commonmodule.PhaseISC
	19, // 2: regulatormodule.DirectionalATCC.LDCR:type_name -> commonmodule.PhaseAPC
	19, // 3: regulatormodule.DirectionalATCC.LDCX:type_name -> commonmodule.PhaseAPC
	19, // 4: regulatormodule.DirectionalATCC.VolSpt:type_name -> commonmodule.PhaseAPC
	21, // 5: regulatormodule.DirectionalATCC.voltageSetPointEnabled:type_name -> commonmodule.PhaseDPC
	22, // 6: regulatormodule.RegulatorControlATCC.logicalNodeForControl:type_name -> commonmodule.LogicalNodeForControl
	0,  // 7: regulatormodule.RegulatorControlATCC.DirFwd:type_name -> regulatormodule.DirectionalATCC
	23, // 8: regulatormodule.RegulatorControlATCC.DirMode:type_name -> commonmodule.Optional_DirectionModeKind
	0,  // 9: regulatormodule.RegulatorControlATCC.DirRev:type_name -> regulatormodule.DirectionalATCC
	19, // 10: regulatormodule.RegulatorControlATCC.DirThd:type_name -> commonmodule.PhaseAPC
	24, // 11: regulatormodule.RegulatorControlATCC.ParOp:type_name -> commonmodule.PhaseSPC
	25, // 12: regulatormodule.RegulatorControlATCC.rampRates:type_name -> commonmodule.RampRate
	26, // 13: regulatormodule.RegulatorControlATCC.state:type_name -> commonmodule.Optional_StateKind
	24, // 14: regulatormodule.RegulatorControlATCC.TapOpL:type_name -> commonmodule.PhaseSPC
	24, // 15: regulatormodule.RegulatorControlATCC.TapOpR:type_name -> commonmodule.PhaseSPC
	19, // 16: regulatormodule.RegulatorControlATCC.VolLmtHi:type_name -> commonmodule.PhaseAPC
	19, // 17: regulatormodule.RegulatorControlATCC.VolLmtLo:type_name -> commonmodule.PhaseAPC
	27, // 18: regulatormodule.RegulatorControlATCC.VolLmtMode:type_name -> commonmodule.Optional_VoltLimitModeKind
	1,  // 19: regulatormodule.RegulatorPoint.control:type_name -> regulatormodule.RegulatorControlATCC
	28, // 20: regulatormodule.RegulatorPoint.startTime:type_name -> commonmodule.Timestamp
	2,  // 21: regulatormodule.RegulatorCSG.crvPts:type_name -> regulatormodule.RegulatorPoint
	3,  // 22: regulatormodule.RegulatorControlScheduleFSCH.ValDCSG:type_name -> regulatormodule.RegulatorCSG
	29, // 23: regulatormodule.RegulatorControlFSCC.controlFSCC:type_name -> commonmodule.ControlFSCC
	4,  // 24: regulatormodule.RegulatorControlFSCC.regulatorControlScheduleFSCH:type_name -> regulatormodule.RegulatorControlScheduleFSCH
	30, // 25: regulatormodule.RegulatorControl.controlValue:type_name -> commonmodule.ControlValue
	31, // 26: regulatormodule.RegulatorControl.check:type_name -> commonmodule.CheckConditions
	5,  // 27: regulatormodule.RegulatorControl.regulatorControlFSCC:type_name -> regulatormodule.RegulatorControlFSCC
	32, // 28: regulatormodule.RegulatorSystem.conductingEquipment:type_name -> commonmodule.ConductingEquipment
	33, // 29: regulatormodule.RegulatorControlProfile.controlMessageInfo:type_name -> commonmodule.ControlMessageInfo
	6,  // 30: regulatormodule.RegulatorControlProfile.regulatorControl:type_name -> regulatormodule.RegulatorControl
	7,  // 31: regulatormodule.RegulatorControlProfile.regulatorSystem:type_name -> regulatormodule.RegulatorSystem
	30, // 32: regulatormodule.RegulatorDiscreteControl.controlValue:type_name -> commonmodule.ControlValue
	31, // 33: regulatormodule.RegulatorDiscreteControl.check:type_name -> commonmodule.CheckConditions
	1,  // 34: regulatormodule.RegulatorDiscreteControl.regulatorControlATCC:type_name -> regulatormodule.RegulatorControlATCC
	33, // 35: regulatormodule.RegulatorDiscreteControlProfile.controlMessageInfo:type_name -> commonmodule.ControlMessageInfo
	9,  // 36: regulatormodule.RegulatorDiscreteControlProfile.regulatorDiscreteControl:type_name -> regulatormodule.RegulatorDiscreteControl
	7,  // 37: regulatormodule.RegulatorDiscreteControlProfile.regulatorSystem:type_name -> regulatormodule.RegulatorSystem
	34, // 38: regulatormodule.RegulatorEventAndStatusATCC.BndCtr:type_name -> commonmodule.ASG
	34, // 39: regulatormodule.RegulatorEventAndStatusATCC.BndWid:type_name -> commonmodule.ASG
	35, // 40: regulatormodule.RegulatorEventAndStatusATCC.BndWidHi:type_name -> commonmodule.PhaseSPS
	35, // 41: regulatormodule.RegulatorEventAndStatusATCC.BndWidLo:type_name -> commonmodule.PhaseSPS
	35, // 42: regulatormodule.RegulatorEventAndStatusATCC.DirCtlRev:type_name -> commonmodule.PhaseSPS
	35, // 43: regulatormodule.RegulatorEventAndStatusATCC.DirIndt:type_name -> commonmodule.PhaseSPS
	35, // 44: regulatormodule.RegulatorEventAndStatusATCC.DirRev:type_name -> commonmodule.PhaseSPS
	34, // 45: regulatormodule.RegulatorEventAndStatusATCC.LDCR:type_name -> commonmodule.ASG
	34, // 46: regulatormodule.RegulatorEventAndStatusATCC.LDCX:type_name -> commonmodule.ASG
	36, // 47: regulatormodule.RegulatorEventAndStatusATCC.ParOp:type_name -> commonmodule.StatusSPS
	25, // 48: regulatormodule.RegulatorEventAndStatusATCC.rampRates:type_name -> commonmodule.RampRate
	26, // 49: regulatormodule.RegulatorEventAndStatusATCC.state:type_name -> commonmodule.Optional_StateKind
	37, // 50: regulatormodule.RegulatorEventAndStatusATCC.StDlTmms:type_name -> commonmodule.StatusINC
	36, // 51: regulatormodule.RegulatorEventAndStatusATCC.TapOpErr:type_name -> commonmodule.StatusSPS
	38, // 52: regulatormodule.RegulatorEventAndStatusATCC.TapPos:type_name -> commonmodule.PhaseINS
	35, // 53: regulatormodule.RegulatorEventAndStatusATCC.VolLmtHi:type_name -> commonmodule.PhaseSPS
	35, // 54: regulatormodule.RegulatorEventAndStatusATCC.VolLmtLo:type_name -> commonmodule.PhaseSPS
	19, // 55: regulatormodule.RegulatorEventAndStatusATCC.VolSpt:type_name -> commonmodule.PhaseAPC
	36, // 56: regulatormodule.RegulatorEventAndStatusATCC.voltageSetPointEnabled:type_name -> commonmodule.StatusSPS
	39, // 57: regulatormodule.RegulatorEventAndStatusANCR.logicalNodeForEventAndStatus:type_name -> commonmodule.LogicalNodeForEventAndStatus
	40, // 58: regulatormodule.RegulatorEventAndStatusANCR.DynamicTest:type_name -> commonmodule.ENS_DynamicTestKind
	11, // 59: regulatormodule.RegulatorEventAndStatusANCR.PointStatus:type_name -> regulatormodule.RegulatorEventAndStatusATCC
	41, // 60: regulatormodule.RegulatorEvent.eventValue:type_name -> commonmodule.EventValue
	12, // 61: regulatormodule.RegulatorEvent.regulatorEventAndStatusANCR:type_name -> regulatormodule.RegulatorEventAndStatusANCR
	42, // 62: regulatormodule.RegulatorEventProfile.eventMessageInfo:type_name -> commonmodule.EventMessageInfo
	13, // 63: regulatormodule.RegulatorEventProfile.regulatorEvent:type_name -> regulatormodule.RegulatorEvent
	7,  // 64: regulatormodule.RegulatorEventProfile.regulatorSystem:type_name -> regulatormodule.RegulatorSystem
	43, // 65: regulatormodule.RegulatorReading.conductingEquipmentTerminalReading:type_name -> commonmodule.ConductingEquipmentTerminalReading
	44, // 66: regulatormodule.RegulatorReading.phaseMMTN:type_name -> commonmodule.PhaseMMTN
	45, // 67: regulatormodule.RegulatorReading.readingMMTR:type_name -> commonmodule.ReadingMMTR
	46, // 68: regulatormodule.RegulatorReading.readingMMXU:type_name -> commonmodule.ReadingMMXU
	46, // 69: regulatormodule.RegulatorReading.secondaryReadingMMXU:type_name -> commonmodule.ReadingMMXU
	47, // 70: regulatormodule.RegulatorReadingProfile.readingMessageInfo:type_name -> commonmodule.ReadingMessageInfo
	15, // 71: regulatormodule.RegulatorReadingProfile.regulatorReading:type_name -> regulatormodule.RegulatorReading
	7,  // 72: regulatormodule.RegulatorReadingProfile.regulatorSystem:type_name -> regulatormodule.RegulatorSystem
	48, // 73: regulatormodule.RegulatorStatus.statusValue:type_name -> commonmodule.StatusValue
	12, // 74: regulatormodule.RegulatorStatus.regulatorEventAndStatusANCR:type_name -> regulatormodule.RegulatorEventAndStatusANCR
	49, // 75: regulatormodule.RegulatorStatusProfile.statusMessageInfo:type_name -> commonmodule.StatusMessageInfo
	17, // 76: regulatormodule.RegulatorStatusProfile.regulatorStatus:type_name -> regulatormodule.RegulatorStatus
	7,  // 77: regulatormodule.RegulatorStatusProfile.regulatorSystem:type_name -> regulatormodule.RegulatorSystem
	78, // [78:78] is the sub-list for method output_type
	78, // [78:78] is the sub-list for method input_type
	78, // [78:78] is the sub-list for extension type_name
	78, // [78:78] is the sub-list for extension extendee
	0,  // [0:78] is the sub-list for field type_name
}

func init() { file_regulatormodule_regulatormodule_proto_init() }
func file_regulatormodule_regulatormodule_proto_init() {
	if File_regulatormodule_regulatormodule_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_regulatormodule_regulatormodule_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectionalATCC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_regulatormodule_regulatormodule_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegulatorControlATCC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_regulatormodule_regulatormodule_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegulatorPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_regulatormodule_regulatormodule_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegulatorCSG); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_regulatormodule_regulatormodule_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegulatorControlScheduleFSCH); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_regulatormodule_regulatormodule_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegulatorControlFSCC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_regulatormodule_regulatormodule_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegulatorControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_regulatormodule_regulatormodule_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegulatorSystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_regulatormodule_regulatormodule_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegulatorControlProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_regulatormodule_regulatormodule_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegulatorDiscreteControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_regulatormodule_regulatormodule_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegulatorDiscreteControlProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_regulatormodule_regulatormodule_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegulatorEventAndStatusATCC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_regulatormodule_regulatormodule_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegulatorEventAndStatusANCR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_regulatormodule_regulatormodule_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegulatorEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_regulatormodule_regulatormodule_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegulatorEventProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_regulatormodule_regulatormodule_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegulatorReading); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_regulatormodule_regulatormodule_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegulatorReadingProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_regulatormodule_regulatormodule_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegulatorStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_regulatormodule_regulatormodule_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegulatorStatusProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_regulatormodule_regulatormodule_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_regulatormodule_regulatormodule_proto_goTypes,
		DependencyIndexes: file_regulatormodule_regulatormodule_proto_depIdxs,
		MessageInfos:      file_regulatormodule_regulatormodule_proto_msgTypes,
	}.Build()
	File_regulatormodule_regulatormodule_proto = out.File
	file_regulatormodule_regulatormodule_proto_rawDesc = nil
	file_regulatormodule_regulatormodule_proto_goTypes = nil
	file_regulatormodule_regulatormodule_proto_depIdxs = nil
}
