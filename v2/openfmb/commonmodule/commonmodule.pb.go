// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.22.3
// source: commonmodule/commonmodule.proto

// OpenFMB Operational Model (61850-CIM) (v2.1.0).eapx
// Monday, April 3, 2023 7:34:35 PM UTC

package commonmodule

import (
	_ "gitlab.com/openfmb/psm/ops/protobuf/go-openfmb-ops-protobuf/v2/openfmb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Reclose action kind such as idle, cycling, or lockout.
type FaultDirectionKind int32

const (
	// Undefined
	FaultDirectionKind_FaultDirectionKind_UNDEFINED FaultDirectionKind = 0
	// MISSING DOCUMENTATION!!!
	FaultDirectionKind_FaultDirectionKind_unknown FaultDirectionKind = 1
	// MISSING DOCUMENTATION!!!
	FaultDirectionKind_FaultDirectionKind_forward FaultDirectionKind = 2
	// MISSING DOCUMENTATION!!!
	FaultDirectionKind_FaultDirectionKind_backward FaultDirectionKind = 3
	// MISSING DOCUMENTATION!!!
	FaultDirectionKind_FaultDirectionKind_both FaultDirectionKind = 4
)

// Enum value maps for FaultDirectionKind.
var (
	FaultDirectionKind_name = map[int32]string{
		0: "FaultDirectionKind_UNDEFINED",
		1: "FaultDirectionKind_unknown",
		2: "FaultDirectionKind_forward",
		3: "FaultDirectionKind_backward",
		4: "FaultDirectionKind_both",
	}
	FaultDirectionKind_value = map[string]int32{
		"FaultDirectionKind_UNDEFINED": 0,
		"FaultDirectionKind_unknown":   1,
		"FaultDirectionKind_forward":   2,
		"FaultDirectionKind_backward":  3,
		"FaultDirectionKind_both":      4,
	}
)

func (x FaultDirectionKind) Enum() *FaultDirectionKind {
	p := new(FaultDirectionKind)
	*p = x
	return p
}

func (x FaultDirectionKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FaultDirectionKind) Descriptor() protoreflect.EnumDescriptor {
	return file_commonmodule_commonmodule_proto_enumTypes[0].Descriptor()
}

func (FaultDirectionKind) Type() protoreflect.EnumType {
	return &file_commonmodule_commonmodule_proto_enumTypes[0]
}

func (x FaultDirectionKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FaultDirectionKind.Descriptor instead.
func (FaultDirectionKind) EnumDescriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{0}
}

// Reclose action kind such as idle, cycling, or lockout.
type PhaseFaultDirectionKind int32

const (
	// Undefined
	PhaseFaultDirectionKind_PhaseFaultDirectionKind_UNDEFINED PhaseFaultDirectionKind = 0
	// MISSING DOCUMENTATION!!!
	PhaseFaultDirectionKind_PhaseFaultDirectionKind_unknown PhaseFaultDirectionKind = 1
	// MISSING DOCUMENTATION!!!
	PhaseFaultDirectionKind_PhaseFaultDirectionKind_forward PhaseFaultDirectionKind = 2
	// MISSING DOCUMENTATION!!!
	PhaseFaultDirectionKind_PhaseFaultDirectionKind_backward PhaseFaultDirectionKind = 3
)

// Enum value maps for PhaseFaultDirectionKind.
var (
	PhaseFaultDirectionKind_name = map[int32]string{
		0: "PhaseFaultDirectionKind_UNDEFINED",
		1: "PhaseFaultDirectionKind_unknown",
		2: "PhaseFaultDirectionKind_forward",
		3: "PhaseFaultDirectionKind_backward",
	}
	PhaseFaultDirectionKind_value = map[string]int32{
		"PhaseFaultDirectionKind_UNDEFINED": 0,
		"PhaseFaultDirectionKind_unknown":   1,
		"PhaseFaultDirectionKind_forward":   2,
		"PhaseFaultDirectionKind_backward":  3,
	}
)

func (x PhaseFaultDirectionKind) Enum() *PhaseFaultDirectionKind {
	p := new(PhaseFaultDirectionKind)
	*p = x
	return p
}

func (x PhaseFaultDirectionKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PhaseFaultDirectionKind) Descriptor() protoreflect.EnumDescriptor {
	return file_commonmodule_commonmodule_proto_enumTypes[1].Descriptor()
}

func (PhaseFaultDirectionKind) Type() protoreflect.EnumType {
	return &file_commonmodule_commonmodule_proto_enumTypes[1]
}

func (x PhaseFaultDirectionKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PhaseFaultDirectionKind.Descriptor instead.
func (PhaseFaultDirectionKind) EnumDescriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{1}
}

// The units defined for usage in the CIM.
type UnitSymbolKind int32

const (
	// Dimension less quantity, e.g. count, per unit, etc.
	UnitSymbolKind_UnitSymbolKind_none UnitSymbolKind = 0
	// Length in meter.
	UnitSymbolKind_UnitSymbolKind_meter UnitSymbolKind = 2
	// Mass in gram.
	UnitSymbolKind_UnitSymbolKind_gram UnitSymbolKind = 3
	// Current in ampere.
	UnitSymbolKind_UnitSymbolKind_Amp UnitSymbolKind = 5
	// Plane angle in degrees.
	UnitSymbolKind_UnitSymbolKind_deg UnitSymbolKind = 9
	// Plane angle in radians.
	UnitSymbolKind_UnitSymbolKind_rad UnitSymbolKind = 10
	// Relative temperature in degrees Celsius. In the SI unit system the symbol is ºC. Electric charge
	// is measured in coulomb that has the unit symbol C. To distinguish degree Celsius form coulomb the
	// symbol used in the UML is degC. Reason for not using ºC is the special character º is difficult to
	// manage in software.
	UnitSymbolKind_UnitSymbolKind_degC UnitSymbolKind = 23
	// Capacitance in farad.
	UnitSymbolKind_UnitSymbolKind_Farad UnitSymbolKind = 25
	// Time in seconds.
	UnitSymbolKind_UnitSymbolKind_sec UnitSymbolKind = 27
	// Inductance in Henry.
	UnitSymbolKind_UnitSymbolKind_Henry UnitSymbolKind = 28
	// Voltage in volt.
	UnitSymbolKind_UnitSymbolKind_V UnitSymbolKind = 29
	// Resistance in ohm.
	UnitSymbolKind_UnitSymbolKind_ohm UnitSymbolKind = 30
	// Energy in joule.
	UnitSymbolKind_UnitSymbolKind_Joule UnitSymbolKind = 31
	// Force in newton.
	UnitSymbolKind_UnitSymbolKind_Newton UnitSymbolKind = 32
	// Frequency in hertz.
	UnitSymbolKind_UnitSymbolKind_Hz UnitSymbolKind = 33
	// Active power in watt.
	UnitSymbolKind_UnitSymbolKind_W UnitSymbolKind = 38
	// Pressure in pascal (n/m2).
	UnitSymbolKind_UnitSymbolKind_Pa UnitSymbolKind = 39
	// Area in square meters.
	UnitSymbolKind_UnitSymbolKind_m2 UnitSymbolKind = 41
	// Conductance in siemens.
	UnitSymbolKind_UnitSymbolKind_Siemens UnitSymbolKind = 53
	// Apparent power in volt ampere.
	UnitSymbolKind_UnitSymbolKind_VA UnitSymbolKind = 61
	// Reactive power in volt ampere reactive.
	UnitSymbolKind_UnitSymbolKind_VAr UnitSymbolKind = 63
	// Power factor
	UnitSymbolKind_UnitSymbolKind_wPerVA UnitSymbolKind = 65
	// Apparent energy in volt ampere hours.
	UnitSymbolKind_UnitSymbolKind_VAh UnitSymbolKind = 71
	// Real energy in what hours.
	UnitSymbolKind_UnitSymbolKind_Wh UnitSymbolKind = 72
	// Reactive energy in volt ampere reactive hours.
	UnitSymbolKind_UnitSymbolKind_VArh UnitSymbolKind = 73
	// MISSING DOCUMENTATION!!!
	UnitSymbolKind_UnitSymbolKind_hzPerS UnitSymbolKind = 75
	// MISSING DOCUMENTATION!!!
	UnitSymbolKind_UnitSymbolKind_wPerS UnitSymbolKind = 81
	// Other enum not listed
	UnitSymbolKind_UnitSymbolKind_other UnitSymbolKind = 100
	// Amp hour
	UnitSymbolKind_UnitSymbolKind_Ah UnitSymbolKind = 106
	// Time in minutes.
	UnitSymbolKind_UnitSymbolKind_min UnitSymbolKind = 159
	// Time in hours.
	UnitSymbolKind_UnitSymbolKind_hour UnitSymbolKind = 160
	// Volume in cubic meters.
	UnitSymbolKind_UnitSymbolKind_m3 UnitSymbolKind = 166
	// Watts per square meter
	UnitSymbolKind_UnitSymbolKind_wPerM2 UnitSymbolKind = 179
	// Relative temperature in degree fahrenheit.
	UnitSymbolKind_UnitSymbolKind_degF UnitSymbolKind = 279
	// Mile per hour
	UnitSymbolKind_UnitSymbolKind_mph UnitSymbolKind = 500
)

// Enum value maps for UnitSymbolKind.
var (
	UnitSymbolKind_name = map[int32]string{
		0:   "UnitSymbolKind_none",
		2:   "UnitSymbolKind_meter",
		3:   "UnitSymbolKind_gram",
		5:   "UnitSymbolKind_Amp",
		9:   "UnitSymbolKind_deg",
		10:  "UnitSymbolKind_rad",
		23:  "UnitSymbolKind_degC",
		25:  "UnitSymbolKind_Farad",
		27:  "UnitSymbolKind_sec",
		28:  "UnitSymbolKind_Henry",
		29:  "UnitSymbolKind_V",
		30:  "UnitSymbolKind_ohm",
		31:  "UnitSymbolKind_Joule",
		32:  "UnitSymbolKind_Newton",
		33:  "UnitSymbolKind_Hz",
		38:  "UnitSymbolKind_W",
		39:  "UnitSymbolKind_Pa",
		41:  "UnitSymbolKind_m2",
		53:  "UnitSymbolKind_Siemens",
		61:  "UnitSymbolKind_VA",
		63:  "UnitSymbolKind_VAr",
		65:  "UnitSymbolKind_wPerVA",
		71:  "UnitSymbolKind_VAh",
		72:  "UnitSymbolKind_Wh",
		73:  "UnitSymbolKind_VArh",
		75:  "UnitSymbolKind_hzPerS",
		81:  "UnitSymbolKind_wPerS",
		100: "UnitSymbolKind_other",
		106: "UnitSymbolKind_Ah",
		159: "UnitSymbolKind_min",
		160: "UnitSymbolKind_hour",
		166: "UnitSymbolKind_m3",
		179: "UnitSymbolKind_wPerM2",
		279: "UnitSymbolKind_degF",
		500: "UnitSymbolKind_mph",
	}
	UnitSymbolKind_value = map[string]int32{
		"UnitSymbolKind_none":    0,
		"UnitSymbolKind_meter":   2,
		"UnitSymbolKind_gram":    3,
		"UnitSymbolKind_Amp":     5,
		"UnitSymbolKind_deg":     9,
		"UnitSymbolKind_rad":     10,
		"UnitSymbolKind_degC":    23,
		"UnitSymbolKind_Farad":   25,
		"UnitSymbolKind_sec":     27,
		"UnitSymbolKind_Henry":   28,
		"UnitSymbolKind_V":       29,
		"UnitSymbolKind_ohm":     30,
		"UnitSymbolKind_Joule":   31,
		"UnitSymbolKind_Newton":  32,
		"UnitSymbolKind_Hz":      33,
		"UnitSymbolKind_W":       38,
		"UnitSymbolKind_Pa":      39,
		"UnitSymbolKind_m2":      41,
		"UnitSymbolKind_Siemens": 53,
		"UnitSymbolKind_VA":      61,
		"UnitSymbolKind_VAr":     63,
		"UnitSymbolKind_wPerVA":  65,
		"UnitSymbolKind_VAh":     71,
		"UnitSymbolKind_Wh":      72,
		"UnitSymbolKind_VArh":    73,
		"UnitSymbolKind_hzPerS":  75,
		"UnitSymbolKind_wPerS":   81,
		"UnitSymbolKind_other":   100,
		"UnitSymbolKind_Ah":      106,
		"UnitSymbolKind_min":     159,
		"UnitSymbolKind_hour":    160,
		"UnitSymbolKind_m3":      166,
		"UnitSymbolKind_wPerM2":  179,
		"UnitSymbolKind_degF":    279,
		"UnitSymbolKind_mph":     500,
	}
)

func (x UnitSymbolKind) Enum() *UnitSymbolKind {
	p := new(UnitSymbolKind)
	*p = x
	return p
}

func (x UnitSymbolKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnitSymbolKind) Descriptor() protoreflect.EnumDescriptor {
	return file_commonmodule_commonmodule_proto_enumTypes[2].Descriptor()
}

func (UnitSymbolKind) Type() protoreflect.EnumType {
	return &file_commonmodule_commonmodule_proto_enumTypes[2]
}

func (x UnitSymbolKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnitSymbolKind.Descriptor instead.
func (UnitSymbolKind) EnumDescriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{2}
}

// The unit multipliers defined for the CIM.
type UnitMultiplierKind int32

const (
	// Undefined
	UnitMultiplierKind_UnitMultiplierKind_UNDEFINED UnitMultiplierKind = 0
	// No multiplier or equivalently multiply by 1.
	UnitMultiplierKind_UnitMultiplierKind_none UnitMultiplierKind = 1
	// Other enum not listed
	UnitMultiplierKind_UnitMultiplierKind_other UnitMultiplierKind = 2
	// Centi 10**-2.
	UnitMultiplierKind_UnitMultiplierKind_centi UnitMultiplierKind = 3
	// Deci 10**-1.
	UnitMultiplierKind_UnitMultiplierKind_deci UnitMultiplierKind = 4
	// Giga 10**9.
	UnitMultiplierKind_UnitMultiplierKind_Giga UnitMultiplierKind = 5
	// Kilo 10**3.
	UnitMultiplierKind_UnitMultiplierKind_kilo UnitMultiplierKind = 6
	// Mega 10**6.
	UnitMultiplierKind_UnitMultiplierKind_Mega UnitMultiplierKind = 7
	// Micro 10**-6.
	UnitMultiplierKind_UnitMultiplierKind_micro UnitMultiplierKind = 8
	// Milli 10**-3.
	UnitMultiplierKind_UnitMultiplierKind_milli UnitMultiplierKind = 9
	// Nano 10**-9.
	UnitMultiplierKind_UnitMultiplierKind_nano UnitMultiplierKind = 10
	// Pico 10**-12.
	UnitMultiplierKind_UnitMultiplierKind_pico UnitMultiplierKind = 11
	// Tera 10**12.
	UnitMultiplierKind_UnitMultiplierKind_Tera UnitMultiplierKind = 12
)

// Enum value maps for UnitMultiplierKind.
var (
	UnitMultiplierKind_name = map[int32]string{
		0:  "UnitMultiplierKind_UNDEFINED",
		1:  "UnitMultiplierKind_none",
		2:  "UnitMultiplierKind_other",
		3:  "UnitMultiplierKind_centi",
		4:  "UnitMultiplierKind_deci",
		5:  "UnitMultiplierKind_Giga",
		6:  "UnitMultiplierKind_kilo",
		7:  "UnitMultiplierKind_Mega",
		8:  "UnitMultiplierKind_micro",
		9:  "UnitMultiplierKind_milli",
		10: "UnitMultiplierKind_nano",
		11: "UnitMultiplierKind_pico",
		12: "UnitMultiplierKind_Tera",
	}
	UnitMultiplierKind_value = map[string]int32{
		"UnitMultiplierKind_UNDEFINED": 0,
		"UnitMultiplierKind_none":      1,
		"UnitMultiplierKind_other":     2,
		"UnitMultiplierKind_centi":     3,
		"UnitMultiplierKind_deci":      4,
		"UnitMultiplierKind_Giga":      5,
		"UnitMultiplierKind_kilo":      6,
		"UnitMultiplierKind_Mega":      7,
		"UnitMultiplierKind_micro":     8,
		"UnitMultiplierKind_milli":     9,
		"UnitMultiplierKind_nano":      10,
		"UnitMultiplierKind_pico":      11,
		"UnitMultiplierKind_Tera":      12,
	}
)

func (x UnitMultiplierKind) Enum() *UnitMultiplierKind {
	p := new(UnitMultiplierKind)
	*p = x
	return p
}

func (x UnitMultiplierKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnitMultiplierKind) Descriptor() protoreflect.EnumDescriptor {
	return file_commonmodule_commonmodule_proto_enumTypes[3].Descriptor()
}

func (UnitMultiplierKind) Type() protoreflect.EnumType {
	return &file_commonmodule_commonmodule_proto_enumTypes[3]
}

func (x UnitMultiplierKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnitMultiplierKind.Descriptor instead.
func (UnitMultiplierKind) EnumDescriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{3}
}

// Enumeration of phase identifiers. Allows designation of phases for both transmission and
// distribution equipment, circuits and loads. Residential and small commercial loads are often served
// from single-phase, or split-phase, secondary circuits. For example of s12N, phases 1 and 2 refer to
// hot wires that are 180 degrees out of phase, while N refers to the neutral wire. Through single
// phase transformer connections, these secondary circuits may be served from one or two of the primary
// phases A, B, and C. For three-phase loads, use the A, B, C phase codes instead of s12N.
type PhaseCodeKind int32

const (
	// Not applicable
	PhaseCodeKind_PhaseCodeKind_none PhaseCodeKind = 0
	// Other enum not listed
	PhaseCodeKind_PhaseCodeKind_other PhaseCodeKind = 1
	// Neutral phase.
	PhaseCodeKind_PhaseCodeKind_N PhaseCodeKind = 16
	// Phase C.
	PhaseCodeKind_PhaseCodeKind_C PhaseCodeKind = 32
	// Phases C and neutral.
	PhaseCodeKind_PhaseCodeKind_CN PhaseCodeKind = 33
	// Phases A and C.
	PhaseCodeKind_PhaseCodeKind_AC PhaseCodeKind = 40
	// Phases A, C and neutral.
	PhaseCodeKind_PhaseCodeKind_ACN PhaseCodeKind = 41
	// Phase B.
	PhaseCodeKind_PhaseCodeKind_B PhaseCodeKind = 64
	// Phases B and neutral.
	PhaseCodeKind_PhaseCodeKind_BN PhaseCodeKind = 65
	// Phases B and C.
	PhaseCodeKind_PhaseCodeKind_BC PhaseCodeKind = 66
	// Phases B, C, and neutral.
	PhaseCodeKind_PhaseCodeKind_BCN PhaseCodeKind = 97
	// Phase A.
	PhaseCodeKind_PhaseCodeKind_A PhaseCodeKind = 128
	// Phases A and neutral.
	PhaseCodeKind_PhaseCodeKind_AN PhaseCodeKind = 129
	// Phases A and B.
	PhaseCodeKind_PhaseCodeKind_AB PhaseCodeKind = 132
	// Phases A, B, and neutral.
	PhaseCodeKind_PhaseCodeKind_ABN PhaseCodeKind = 193
	// Phases A, B, and C.
	PhaseCodeKind_PhaseCodeKind_ABC PhaseCodeKind = 224
	// Phases A, B, C, and N.
	PhaseCodeKind_PhaseCodeKind_ABCN PhaseCodeKind = 225
	// Secondary phase 2.
	PhaseCodeKind_PhaseCodeKind_s2 PhaseCodeKind = 256
	// Secondary phase 2 and neutral.
	PhaseCodeKind_PhaseCodeKind_s2N PhaseCodeKind = 257
	// Secondary phase 1.
	PhaseCodeKind_PhaseCodeKind_s1 PhaseCodeKind = 512
	// Secondary phase 1 and neutral.
	PhaseCodeKind_PhaseCodeKind_s1N PhaseCodeKind = 513
	// Secondary phase 1 and 2.
	PhaseCodeKind_PhaseCodeKind_s12 PhaseCodeKind = 768
	// Secondary phases 1, 2, and neutral.
	PhaseCodeKind_PhaseCodeKind_s12N PhaseCodeKind = 769
)

// Enum value maps for PhaseCodeKind.
var (
	PhaseCodeKind_name = map[int32]string{
		0:   "PhaseCodeKind_none",
		1:   "PhaseCodeKind_other",
		16:  "PhaseCodeKind_N",
		32:  "PhaseCodeKind_C",
		33:  "PhaseCodeKind_CN",
		40:  "PhaseCodeKind_AC",
		41:  "PhaseCodeKind_ACN",
		64:  "PhaseCodeKind_B",
		65:  "PhaseCodeKind_BN",
		66:  "PhaseCodeKind_BC",
		97:  "PhaseCodeKind_BCN",
		128: "PhaseCodeKind_A",
		129: "PhaseCodeKind_AN",
		132: "PhaseCodeKind_AB",
		193: "PhaseCodeKind_ABN",
		224: "PhaseCodeKind_ABC",
		225: "PhaseCodeKind_ABCN",
		256: "PhaseCodeKind_s2",
		257: "PhaseCodeKind_s2N",
		512: "PhaseCodeKind_s1",
		513: "PhaseCodeKind_s1N",
		768: "PhaseCodeKind_s12",
		769: "PhaseCodeKind_s12N",
	}
	PhaseCodeKind_value = map[string]int32{
		"PhaseCodeKind_none":  0,
		"PhaseCodeKind_other": 1,
		"PhaseCodeKind_N":     16,
		"PhaseCodeKind_C":     32,
		"PhaseCodeKind_CN":    33,
		"PhaseCodeKind_AC":    40,
		"PhaseCodeKind_ACN":   41,
		"PhaseCodeKind_B":     64,
		"PhaseCodeKind_BN":    65,
		"PhaseCodeKind_BC":    66,
		"PhaseCodeKind_BCN":   97,
		"PhaseCodeKind_A":     128,
		"PhaseCodeKind_AN":    129,
		"PhaseCodeKind_AB":    132,
		"PhaseCodeKind_ABN":   193,
		"PhaseCodeKind_ABC":   224,
		"PhaseCodeKind_ABCN":  225,
		"PhaseCodeKind_s2":    256,
		"PhaseCodeKind_s2N":   257,
		"PhaseCodeKind_s1":    512,
		"PhaseCodeKind_s1N":   513,
		"PhaseCodeKind_s12":   768,
		"PhaseCodeKind_s12N":  769,
	}
)

func (x PhaseCodeKind) Enum() *PhaseCodeKind {
	p := new(PhaseCodeKind)
	*p = x
	return p
}

func (x PhaseCodeKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PhaseCodeKind) Descriptor() protoreflect.EnumDescriptor {
	return file_commonmodule_commonmodule_proto_enumTypes[4].Descriptor()
}

func (PhaseCodeKind) Type() protoreflect.EnumType {
	return &file_commonmodule_commonmodule_proto_enumTypes[4]
}

func (x PhaseCodeKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PhaseCodeKind.Descriptor instead.
func (PhaseCodeKind) EnumDescriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{4}
}

// Validity of the value, as condensed information for the client. In case this value is not
// 'good', some reasons may be found in the 'detailQual'.
type ValidityKind int32

const (
	// Undefined
	ValidityKind_ValidityKind_UNDEFINED ValidityKind = 0
	// Supervision function has detected no abnormal condition of either the acquisition function or
	// the information source.
	ValidityKind_ValidityKind_good ValidityKind = 1
	// Supervision function has detected an abnormal condition of the acquisition function or the
	// information source (missing or non-operating updating devices). The value is not defined under this
	// condition. It shall be used to indicate to the client that the value may be incorrect and shall not
	// be used.  EXAMPLE If an input unit detects an oscillation of one input it will mark the related
	// information as invalid.
	ValidityKind_ValidityKind_invalid ValidityKind = 2
	// Reserved
	ValidityKind_ValidityKind_reserved ValidityKind = 3
	// Supervision function has detected any abnormal behaviour. However, the value could still be
	// valid. It is client's responsibility to determine whether the values should be used.
	ValidityKind_ValidityKind_questionable ValidityKind = 4
)

// Enum value maps for ValidityKind.
var (
	ValidityKind_name = map[int32]string{
		0: "ValidityKind_UNDEFINED",
		1: "ValidityKind_good",
		2: "ValidityKind_invalid",
		3: "ValidityKind_reserved",
		4: "ValidityKind_questionable",
	}
	ValidityKind_value = map[string]int32{
		"ValidityKind_UNDEFINED":    0,
		"ValidityKind_good":         1,
		"ValidityKind_invalid":      2,
		"ValidityKind_reserved":     3,
		"ValidityKind_questionable": 4,
	}
)

func (x ValidityKind) Enum() *ValidityKind {
	p := new(ValidityKind)
	*p = x
	return p
}

func (x ValidityKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValidityKind) Descriptor() protoreflect.EnumDescriptor {
	return file_commonmodule_commonmodule_proto_enumTypes[5].Descriptor()
}

func (ValidityKind) Type() protoreflect.EnumType {
	return &file_commonmodule_commonmodule_proto_enumTypes[5]
}

func (x ValidityKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValidityKind.Descriptor instead.
func (ValidityKind) EnumDescriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{5}
}

// (default=process) Defines the source of a value. NOTE 1 Substitution may be done locally or via
// the communication services. In the second case, specific attributes with a FC=SV are used. NOTE 2
// There are various means to clear a substitution. As an example, a substitution that was done
// following an invalid condition may be cleared automatically if the invalid condition is cleared.
// However, this is a local issue and therefore
type SourceKind int32

const (
	// Undefined
	SourceKind_SourceKind_UNDEFINED SourceKind = 0
	// The value is provided by an input function from the process I/O or is calculated from some
	// application function.
	SourceKind_SourceKind_process SourceKind = 1
	// The value is provided by an operator input or by an automatic source.
	SourceKind_SourceKind_substituted SourceKind = 2
)

// Enum value maps for SourceKind.
var (
	SourceKind_name = map[int32]string{
		0: "SourceKind_UNDEFINED",
		1: "SourceKind_process",
		2: "SourceKind_substituted",
	}
	SourceKind_value = map[string]int32{
		"SourceKind_UNDEFINED":   0,
		"SourceKind_process":     1,
		"SourceKind_substituted": 2,
	}
)

func (x SourceKind) Enum() *SourceKind {
	p := new(SourceKind)
	*p = x
	return p
}

func (x SourceKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SourceKind) Descriptor() protoreflect.EnumDescriptor {
	return file_commonmodule_commonmodule_proto_enumTypes[6].Descriptor()
}

func (SourceKind) Type() protoreflect.EnumType {
	return &file_commonmodule_commonmodule_proto_enumTypes[6]
}

func (x SourceKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SourceKind.Descriptor instead.
func (SourceKind) EnumDescriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{6}
}

// Validity of the value, as condensed information for the client. In case this value is not
// 'good', some reasons may be found in the 'detailQual'.
type TimeAccuracyKind int32

const (
	// Undefined
	TimeAccuracyKind_TimeAccuracyKind_UNDEFINED TimeAccuracyKind = 0
	// 10 ms (class T0)
	TimeAccuracyKind_TimeAccuracyKind_T0 TimeAccuracyKind = 7
	// 1 ms (class T1)
	TimeAccuracyKind_TimeAccuracyKind_T1 TimeAccuracyKind = 10
	// 100 us (class T2)
	TimeAccuracyKind_TimeAccuracyKind_T2 TimeAccuracyKind = 14
	// 25 us (class T3)
	TimeAccuracyKind_TimeAccuracyKind_T3 TimeAccuracyKind = 16
	// 4 us (class T4)
	TimeAccuracyKind_TimeAccuracyKind_T4 TimeAccuracyKind = 18
	// 1 us (class T5)
	TimeAccuracyKind_TimeAccuracyKind_T5 TimeAccuracyKind = 20
	// Undefined
	TimeAccuracyKind_TimeAccuracyKind_unspecified TimeAccuracyKind = 31
)

// Enum value maps for TimeAccuracyKind.
var (
	TimeAccuracyKind_name = map[int32]string{
		0:  "TimeAccuracyKind_UNDEFINED",
		7:  "TimeAccuracyKind_T0",
		10: "TimeAccuracyKind_T1",
		14: "TimeAccuracyKind_T2",
		16: "TimeAccuracyKind_T3",
		18: "TimeAccuracyKind_T4",
		20: "TimeAccuracyKind_T5",
		31: "TimeAccuracyKind_unspecified",
	}
	TimeAccuracyKind_value = map[string]int32{
		"TimeAccuracyKind_UNDEFINED":   0,
		"TimeAccuracyKind_T0":          7,
		"TimeAccuracyKind_T1":          10,
		"TimeAccuracyKind_T2":          14,
		"TimeAccuracyKind_T3":          16,
		"TimeAccuracyKind_T4":          18,
		"TimeAccuracyKind_T5":          20,
		"TimeAccuracyKind_unspecified": 31,
	}
)

func (x TimeAccuracyKind) Enum() *TimeAccuracyKind {
	p := new(TimeAccuracyKind)
	*p = x
	return p
}

func (x TimeAccuracyKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeAccuracyKind) Descriptor() protoreflect.EnumDescriptor {
	return file_commonmodule_commonmodule_proto_enumTypes[7].Descriptor()
}

func (TimeAccuracyKind) Type() protoreflect.EnumType {
	return &file_commonmodule_commonmodule_proto_enumTypes[7]
}

func (x TimeAccuracyKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeAccuracyKind.Descriptor instead.
func (TimeAccuracyKind) EnumDescriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{7}
}

// Schedule parameter kind
type ScheduleParameterKind int32

const (
	// Undefined
	ScheduleParameterKind_ScheduleParameterKind_UNDEFINED ScheduleParameterKind = 0
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_none ScheduleParameterKind = 1
	// Other enum not listed
	ScheduleParameterKind_ScheduleParameterKind_other ScheduleParameterKind = 2
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_A_net_mag ScheduleParameterKind = 3
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_A_neut_mag ScheduleParameterKind = 4
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_A_phsA_mag ScheduleParameterKind = 5
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_A_phsB_mag ScheduleParameterKind = 6
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_A_phsC_mag ScheduleParameterKind = 7
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_Hz_mag ScheduleParameterKind = 8
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_PF_net_mag ScheduleParameterKind = 9
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_PF_neut_mag ScheduleParameterKind = 10
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_PF_phsA_mag ScheduleParameterKind = 11
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_PF_phsB_mag ScheduleParameterKind = 12
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_PF_phsC_mag ScheduleParameterKind = 13
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_PhV_net_ang ScheduleParameterKind = 14
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_PhV_net_mag ScheduleParameterKind = 15
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_PhV_neut_ang ScheduleParameterKind = 16
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_PhV_neut_mag ScheduleParameterKind = 17
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_PhV_phsA_ang ScheduleParameterKind = 18
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_PhV_phsA_mag ScheduleParameterKind = 19
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_PhV_phsB_ang ScheduleParameterKind = 20
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_PhV_phsB_mag ScheduleParameterKind = 21
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_PhV_phsC_ang ScheduleParameterKind = 22
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_PhV_phsC_mag ScheduleParameterKind = 23
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_PPV_phsAB_ang ScheduleParameterKind = 24
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_PPV_phsAB_mag ScheduleParameterKind = 25
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_PPV_phsBC_ang ScheduleParameterKind = 26
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_PPV_phsBC_mag ScheduleParameterKind = 27
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_PPV_phsCA_ang ScheduleParameterKind = 28
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_PPV_phsCA_mag ScheduleParameterKind = 29
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_VA_net_mag ScheduleParameterKind = 30
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_VA_neut_mag ScheduleParameterKind = 31
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_VA_phsA_mag ScheduleParameterKind = 32
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_VA_phsB_mag ScheduleParameterKind = 33
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_VA_phsC_mag ScheduleParameterKind = 34
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_VAr_net_mag ScheduleParameterKind = 35
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_VAr_neut_mag ScheduleParameterKind = 36
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_VAr_phsA_mag ScheduleParameterKind = 37
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_VAr_phsB_mag ScheduleParameterKind = 38
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_VAr_phsC_mag ScheduleParameterKind = 39
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_W_net_mag ScheduleParameterKind = 40
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_W_neut_mag ScheduleParameterKind = 41
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_W_phsA_mag ScheduleParameterKind = 42
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_W_phsB_mag ScheduleParameterKind = 43
	// MISSING DOCUMENTATION!!!
	ScheduleParameterKind_ScheduleParameterKind_W_phsC_mag ScheduleParameterKind = 44
)

// Enum value maps for ScheduleParameterKind.
var (
	ScheduleParameterKind_name = map[int32]string{
		0:  "ScheduleParameterKind_UNDEFINED",
		1:  "ScheduleParameterKind_none",
		2:  "ScheduleParameterKind_other",
		3:  "ScheduleParameterKind_A_net_mag",
		4:  "ScheduleParameterKind_A_neut_mag",
		5:  "ScheduleParameterKind_A_phsA_mag",
		6:  "ScheduleParameterKind_A_phsB_mag",
		7:  "ScheduleParameterKind_A_phsC_mag",
		8:  "ScheduleParameterKind_Hz_mag",
		9:  "ScheduleParameterKind_PF_net_mag",
		10: "ScheduleParameterKind_PF_neut_mag",
		11: "ScheduleParameterKind_PF_phsA_mag",
		12: "ScheduleParameterKind_PF_phsB_mag",
		13: "ScheduleParameterKind_PF_phsC_mag",
		14: "ScheduleParameterKind_PhV_net_ang",
		15: "ScheduleParameterKind_PhV_net_mag",
		16: "ScheduleParameterKind_PhV_neut_ang",
		17: "ScheduleParameterKind_PhV_neut_mag",
		18: "ScheduleParameterKind_PhV_phsA_ang",
		19: "ScheduleParameterKind_PhV_phsA_mag",
		20: "ScheduleParameterKind_PhV_phsB_ang",
		21: "ScheduleParameterKind_PhV_phsB_mag",
		22: "ScheduleParameterKind_PhV_phsC_ang",
		23: "ScheduleParameterKind_PhV_phsC_mag",
		24: "ScheduleParameterKind_PPV_phsAB_ang",
		25: "ScheduleParameterKind_PPV_phsAB_mag",
		26: "ScheduleParameterKind_PPV_phsBC_ang",
		27: "ScheduleParameterKind_PPV_phsBC_mag",
		28: "ScheduleParameterKind_PPV_phsCA_ang",
		29: "ScheduleParameterKind_PPV_phsCA_mag",
		30: "ScheduleParameterKind_VA_net_mag",
		31: "ScheduleParameterKind_VA_neut_mag",
		32: "ScheduleParameterKind_VA_phsA_mag",
		33: "ScheduleParameterKind_VA_phsB_mag",
		34: "ScheduleParameterKind_VA_phsC_mag",
		35: "ScheduleParameterKind_VAr_net_mag",
		36: "ScheduleParameterKind_VAr_neut_mag",
		37: "ScheduleParameterKind_VAr_phsA_mag",
		38: "ScheduleParameterKind_VAr_phsB_mag",
		39: "ScheduleParameterKind_VAr_phsC_mag",
		40: "ScheduleParameterKind_W_net_mag",
		41: "ScheduleParameterKind_W_neut_mag",
		42: "ScheduleParameterKind_W_phsA_mag",
		43: "ScheduleParameterKind_W_phsB_mag",
		44: "ScheduleParameterKind_W_phsC_mag",
	}
	ScheduleParameterKind_value = map[string]int32{
		"ScheduleParameterKind_UNDEFINED":     0,
		"ScheduleParameterKind_none":          1,
		"ScheduleParameterKind_other":         2,
		"ScheduleParameterKind_A_net_mag":     3,
		"ScheduleParameterKind_A_neut_mag":    4,
		"ScheduleParameterKind_A_phsA_mag":    5,
		"ScheduleParameterKind_A_phsB_mag":    6,
		"ScheduleParameterKind_A_phsC_mag":    7,
		"ScheduleParameterKind_Hz_mag":        8,
		"ScheduleParameterKind_PF_net_mag":    9,
		"ScheduleParameterKind_PF_neut_mag":   10,
		"ScheduleParameterKind_PF_phsA_mag":   11,
		"ScheduleParameterKind_PF_phsB_mag":   12,
		"ScheduleParameterKind_PF_phsC_mag":   13,
		"ScheduleParameterKind_PhV_net_ang":   14,
		"ScheduleParameterKind_PhV_net_mag":   15,
		"ScheduleParameterKind_PhV_neut_ang":  16,
		"ScheduleParameterKind_PhV_neut_mag":  17,
		"ScheduleParameterKind_PhV_phsA_ang":  18,
		"ScheduleParameterKind_PhV_phsA_mag":  19,
		"ScheduleParameterKind_PhV_phsB_ang":  20,
		"ScheduleParameterKind_PhV_phsB_mag":  21,
		"ScheduleParameterKind_PhV_phsC_ang":  22,
		"ScheduleParameterKind_PhV_phsC_mag":  23,
		"ScheduleParameterKind_PPV_phsAB_ang": 24,
		"ScheduleParameterKind_PPV_phsAB_mag": 25,
		"ScheduleParameterKind_PPV_phsBC_ang": 26,
		"ScheduleParameterKind_PPV_phsBC_mag": 27,
		"ScheduleParameterKind_PPV_phsCA_ang": 28,
		"ScheduleParameterKind_PPV_phsCA_mag": 29,
		"ScheduleParameterKind_VA_net_mag":    30,
		"ScheduleParameterKind_VA_neut_mag":   31,
		"ScheduleParameterKind_VA_phsA_mag":   32,
		"ScheduleParameterKind_VA_phsB_mag":   33,
		"ScheduleParameterKind_VA_phsC_mag":   34,
		"ScheduleParameterKind_VAr_net_mag":   35,
		"ScheduleParameterKind_VAr_neut_mag":  36,
		"ScheduleParameterKind_VAr_phsA_mag":  37,
		"ScheduleParameterKind_VAr_phsB_mag":  38,
		"ScheduleParameterKind_VAr_phsC_mag":  39,
		"ScheduleParameterKind_W_net_mag":     40,
		"ScheduleParameterKind_W_neut_mag":    41,
		"ScheduleParameterKind_W_phsA_mag":    42,
		"ScheduleParameterKind_W_phsB_mag":    43,
		"ScheduleParameterKind_W_phsC_mag":    44,
	}
)

func (x ScheduleParameterKind) Enum() *ScheduleParameterKind {
	p := new(ScheduleParameterKind)
	*p = x
	return p
}

func (x ScheduleParameterKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScheduleParameterKind) Descriptor() protoreflect.EnumDescriptor {
	return file_commonmodule_commonmodule_proto_enumTypes[8].Descriptor()
}

func (ScheduleParameterKind) Type() protoreflect.EnumType {
	return &file_commonmodule_commonmodule_proto_enumTypes[8]
}

func (x ScheduleParameterKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScheduleParameterKind.Descriptor instead.
func (ScheduleParameterKind) EnumDescriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{8}
}

// Calculation method (CalcMethodKind enumeration)
type CalcMethodKind int32

const (
	// Undefined enum value which can be used for Protobuf generation and be consistent with other
	// technologies.
	CalcMethodKind_CalcMethodKind_UNDEFINED CalcMethodKind = 0
	// All analogue values (i.e., all common attributes 'i' and 'f') meet the sampling and filtering
	// characteristics specified in IEEE C37.118.1 for P-CLASS.
	CalcMethodKind_CalcMethodKind_P_CLASS CalcMethodKind = 11
	// All analogue values (i.e., all common attributes 'i' and 'f') meet the sampling and filtering
	// characteristics specified in IEEE C37.118.1 for M-CLASS.
	CalcMethodKind_CalcMethodKind_M_CLASS CalcMethodKind = 12
	// All analogue values are [F(t+T)-F(t)] for a calculation interval T (in the same unit as the
	// original entity). Note: The client can still calculate rate so: RATE = DIFF/T.
	CalcMethodKind_CalcMethodKind_DIFF CalcMethodKind = 13
)

// Enum value maps for CalcMethodKind.
var (
	CalcMethodKind_name = map[int32]string{
		0:  "CalcMethodKind_UNDEFINED",
		11: "CalcMethodKind_P_CLASS",
		12: "CalcMethodKind_M_CLASS",
		13: "CalcMethodKind_DIFF",
	}
	CalcMethodKind_value = map[string]int32{
		"CalcMethodKind_UNDEFINED": 0,
		"CalcMethodKind_P_CLASS":   11,
		"CalcMethodKind_M_CLASS":   12,
		"CalcMethodKind_DIFF":      13,
	}
)

func (x CalcMethodKind) Enum() *CalcMethodKind {
	p := new(CalcMethodKind)
	*p = x
	return p
}

func (x CalcMethodKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CalcMethodKind) Descriptor() protoreflect.EnumDescriptor {
	return file_commonmodule_commonmodule_proto_enumTypes[9].Descriptor()
}

func (CalcMethodKind) Type() protoreflect.EnumType {
	return &file_commonmodule_commonmodule_proto_enumTypes[9]
}

func (x CalcMethodKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CalcMethodKind.Descriptor instead.
func (CalcMethodKind) EnumDescriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{9}
}

// Power system connect modes to the power grid (GridConnectModeKind)
type GridConnectModeKind int32

const (
	// Undefined
	GridConnectModeKind_GridConnectModeKind_UNDEFINED GridConnectModeKind = 0
	// Current-source inverter (CSI)
	GridConnectModeKind_GridConnectModeKind_CSI GridConnectModeKind = 1
	// Voltage-controlled voltage-source inverter (VC-VSI)
	GridConnectModeKind_GridConnectModeKind_VC_VSI GridConnectModeKind = 2
	// Current-controlled voltage-source inverter (CC-VSI)
	GridConnectModeKind_GridConnectModeKind_CC_VSI GridConnectModeKind = 3
	// Not applicable / Unknown
	GridConnectModeKind_GridConnectModeKind_none GridConnectModeKind = 98
	// MISSING DOCUMENTATION!!!
	GridConnectModeKind_GridConnectModeKind_other GridConnectModeKind = 99
	// Voltage source inverter regulating to P and Q references (VSI PQ)
	GridConnectModeKind_GridConnectModeKind_VSI_PQ GridConnectModeKind = 2000
	// Voltage source inverter regulating to voltage and frequency references paralleling other
	// generation and not grid forming (VSI VF).
	GridConnectModeKind_GridConnectModeKind_VSI_VF GridConnectModeKind = 2001
	// Voltage source inverter regulating to voltage and frequency references as primary grid forming
	// generation (VSI ISO).
	GridConnectModeKind_GridConnectModeKind_VSI_ISO GridConnectModeKind = 2002
)

// Enum value maps for GridConnectModeKind.
var (
	GridConnectModeKind_name = map[int32]string{
		0:    "GridConnectModeKind_UNDEFINED",
		1:    "GridConnectModeKind_CSI",
		2:    "GridConnectModeKind_VC_VSI",
		3:    "GridConnectModeKind_CC_VSI",
		98:   "GridConnectModeKind_none",
		99:   "GridConnectModeKind_other",
		2000: "GridConnectModeKind_VSI_PQ",
		2001: "GridConnectModeKind_VSI_VF",
		2002: "GridConnectModeKind_VSI_ISO",
	}
	GridConnectModeKind_value = map[string]int32{
		"GridConnectModeKind_UNDEFINED": 0,
		"GridConnectModeKind_CSI":       1,
		"GridConnectModeKind_VC_VSI":    2,
		"GridConnectModeKind_CC_VSI":    3,
		"GridConnectModeKind_none":      98,
		"GridConnectModeKind_other":     99,
		"GridConnectModeKind_VSI_PQ":    2000,
		"GridConnectModeKind_VSI_VF":    2001,
		"GridConnectModeKind_VSI_ISO":   2002,
	}
)

func (x GridConnectModeKind) Enum() *GridConnectModeKind {
	p := new(GridConnectModeKind)
	*p = x
	return p
}

func (x GridConnectModeKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GridConnectModeKind) Descriptor() protoreflect.EnumDescriptor {
	return file_commonmodule_commonmodule_proto_enumTypes[10].Descriptor()
}

func (GridConnectModeKind) Type() protoreflect.EnumType {
	return &file_commonmodule_commonmodule_proto_enumTypes[10]
}

func (x GridConnectModeKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GridConnectModeKind.Descriptor instead.
func (GridConnectModeKind) EnumDescriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{10}
}

// Power factor sign (PFSignKind enumeration)
type PFSignKind int32

const (
	// Undefined enum value which can be used for Protobuf generation and be consistent with other
	// technologies.
	PFSignKind_PFSignKind_UNDEFINED PFSignKind = 0
	// All analogue values are [F(t+T)-F(t)] for a calculation interval T (in the same unit as the
	// original entity). Note: The client can still calculate rate so: RATE = DIFF/T.
	PFSignKind_PFSignKind_IEC PFSignKind = 1
	// All analogue values (i.e., all common attributes 'i' and 'f') meet the sampling and filtering
	// characteristics specified in IEEE C37.118.1 for M-CLASS.
	PFSignKind_PFSignKind_EEI PFSignKind = 2
)

// Enum value maps for PFSignKind.
var (
	PFSignKind_name = map[int32]string{
		0: "PFSignKind_UNDEFINED",
		1: "PFSignKind_IEC",
		2: "PFSignKind_EEI",
	}
	PFSignKind_value = map[string]int32{
		"PFSignKind_UNDEFINED": 0,
		"PFSignKind_IEC":       1,
		"PFSignKind_EEI":       2,
	}
)

func (x PFSignKind) Enum() *PFSignKind {
	p := new(PFSignKind)
	*p = x
	return p
}

func (x PFSignKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PFSignKind) Descriptor() protoreflect.EnumDescriptor {
	return file_commonmodule_commonmodule_proto_enumTypes[11].Descriptor()
}

func (PFSignKind) Type() protoreflect.EnumType {
	return &file_commonmodule_commonmodule_proto_enumTypes[11]
}

func (x PFSignKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PFSignKind.Descriptor instead.
func (PFSignKind) EnumDescriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{11}
}

// Behaviour or mode (BehaviourModeKind enumeration)
type BehaviourModeKind int32

const (
	// Undefined
	BehaviourModeKind_BehaviourModeKind_UNDEFINED BehaviourModeKind = 0
	// Normal enabled state.
	BehaviourModeKind_BehaviourModeKind_on BehaviourModeKind = 1
	// Process is passively supervised.
	BehaviourModeKind_BehaviourModeKind_blocked BehaviourModeKind = 2
	// Function is operated but results are indicated as test results.
	BehaviourModeKind_BehaviourModeKind_test BehaviourModeKind = 3
	// Function is operated in test mode, but with no impact to the process.
	BehaviourModeKind_BehaviourModeKind_test_blocked BehaviourModeKind = 4
	// Function is inactive but shows its configuration capability.
	BehaviourModeKind_BehaviourModeKind_off BehaviourModeKind = 5
)

// Enum value maps for BehaviourModeKind.
var (
	BehaviourModeKind_name = map[int32]string{
		0: "BehaviourModeKind_UNDEFINED",
		1: "BehaviourModeKind_on",
		2: "BehaviourModeKind_blocked",
		3: "BehaviourModeKind_test",
		4: "BehaviourModeKind_test_blocked",
		5: "BehaviourModeKind_off",
	}
	BehaviourModeKind_value = map[string]int32{
		"BehaviourModeKind_UNDEFINED":    0,
		"BehaviourModeKind_on":           1,
		"BehaviourModeKind_blocked":      2,
		"BehaviourModeKind_test":         3,
		"BehaviourModeKind_test_blocked": 4,
		"BehaviourModeKind_off":          5,
	}
)

func (x BehaviourModeKind) Enum() *BehaviourModeKind {
	p := new(BehaviourModeKind)
	*p = x
	return p
}

func (x BehaviourModeKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BehaviourModeKind) Descriptor() protoreflect.EnumDescriptor {
	return file_commonmodule_commonmodule_proto_enumTypes[12].Descriptor()
}

func (BehaviourModeKind) Type() protoreflect.EnumType {
	return &file_commonmodule_commonmodule_proto_enumTypes[12]
}

func (x BehaviourModeKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BehaviourModeKind.Descriptor instead.
func (BehaviourModeKind) EnumDescriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{12}
}

// DER operational state (DERGeneratorStateKind)
type DERGeneratorStateKind int32

const (
	// Undefined enum value which can be used for Protobuf generation and be consistent with other
	// technologies.
	DERGeneratorStateKind_DERGeneratorStateKind_UNDEFINED DERGeneratorStateKind = 0
	// MISSING DOCUMENTATION!!!
	DERGeneratorStateKind_DERGeneratorStateKind_Not_operating DERGeneratorStateKind = 1
	// MISSING DOCUMENTATION!!!
	DERGeneratorStateKind_DERGeneratorStateKind_Operating DERGeneratorStateKind = 2
	// MISSING DOCUMENTATION!!!
	DERGeneratorStateKind_DERGeneratorStateKind_Starting_up DERGeneratorStateKind = 3
	// MISSING DOCUMENTATION!!!
	DERGeneratorStateKind_DERGeneratorStateKind_Shutting_down DERGeneratorStateKind = 4
	// MISSING DOCUMENTATION!!!
	DERGeneratorStateKind_DERGeneratorStateKind_At_disconnect_level DERGeneratorStateKind = 5
	// MISSING DOCUMENTATION!!!
	DERGeneratorStateKind_DERGeneratorStateKind_Ramping_in_power DERGeneratorStateKind = 6
	// MISSING DOCUMENTATION!!!
	DERGeneratorStateKind_DERGeneratorStateKind_Ramping_in_reactive_power DERGeneratorStateKind = 7
	// MISSING DOCUMENTATION!!!
	DERGeneratorStateKind_DERGeneratorStateKind_Standby DERGeneratorStateKind = 8
	// MISSING DOCUMENTATION!!!
	DERGeneratorStateKind_DERGeneratorStateKind_Not_applicable_Unknown DERGeneratorStateKind = 98
	// MISSING DOCUMENTATION!!!
	DERGeneratorStateKind_DERGeneratorStateKind_Other DERGeneratorStateKind = 99
)

// Enum value maps for DERGeneratorStateKind.
var (
	DERGeneratorStateKind_name = map[int32]string{
		0:  "DERGeneratorStateKind_UNDEFINED",
		1:  "DERGeneratorStateKind_Not_operating",
		2:  "DERGeneratorStateKind_Operating",
		3:  "DERGeneratorStateKind_Starting_up",
		4:  "DERGeneratorStateKind_Shutting_down",
		5:  "DERGeneratorStateKind_At_disconnect_level",
		6:  "DERGeneratorStateKind_Ramping_in_power",
		7:  "DERGeneratorStateKind_Ramping_in_reactive_power",
		8:  "DERGeneratorStateKind_Standby",
		98: "DERGeneratorStateKind_Not_applicable_Unknown",
		99: "DERGeneratorStateKind_Other",
	}
	DERGeneratorStateKind_value = map[string]int32{
		"DERGeneratorStateKind_UNDEFINED":                 0,
		"DERGeneratorStateKind_Not_operating":             1,
		"DERGeneratorStateKind_Operating":                 2,
		"DERGeneratorStateKind_Starting_up":               3,
		"DERGeneratorStateKind_Shutting_down":             4,
		"DERGeneratorStateKind_At_disconnect_level":       5,
		"DERGeneratorStateKind_Ramping_in_power":          6,
		"DERGeneratorStateKind_Ramping_in_reactive_power": 7,
		"DERGeneratorStateKind_Standby":                   8,
		"DERGeneratorStateKind_Not_applicable_Unknown":    98,
		"DERGeneratorStateKind_Other":                     99,
	}
)

func (x DERGeneratorStateKind) Enum() *DERGeneratorStateKind {
	p := new(DERGeneratorStateKind)
	*p = x
	return p
}

func (x DERGeneratorStateKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DERGeneratorStateKind) Descriptor() protoreflect.EnumDescriptor {
	return file_commonmodule_commonmodule_proto_enumTypes[13].Descriptor()
}

func (DERGeneratorStateKind) Type() protoreflect.EnumType {
	return &file_commonmodule_commonmodule_proto_enumTypes[13]
}

func (x DERGeneratorStateKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DERGeneratorStateKind.Descriptor instead.
func (DERGeneratorStateKind) EnumDescriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{13}
}

// Dynamic test status (see IEC61850-7-2 section 20.2.1 Direct control with normal security, state
// machine diagram)   A simplified state machine diagram (from Herb F.) is provided.
type DynamicTestKind int32

const (
	// Undefined
	DynamicTestKind_DynamicTestKind_UNDEFINED DynamicTestKind = 0
	// None
	DynamicTestKind_DynamicTestKind_none DynamicTestKind = 1
	// Testing status
	DynamicTestKind_DynamicTestKind_testing DynamicTestKind = 2
	// Operating status
	DynamicTestKind_DynamicTestKind_operating DynamicTestKind = 3
	// Failed status
	DynamicTestKind_DynamicTestKind_failed DynamicTestKind = 4
)

// Enum value maps for DynamicTestKind.
var (
	DynamicTestKind_name = map[int32]string{
		0: "DynamicTestKind_UNDEFINED",
		1: "DynamicTestKind_none",
		2: "DynamicTestKind_testing",
		3: "DynamicTestKind_operating",
		4: "DynamicTestKind_failed",
	}
	DynamicTestKind_value = map[string]int32{
		"DynamicTestKind_UNDEFINED": 0,
		"DynamicTestKind_none":      1,
		"DynamicTestKind_testing":   2,
		"DynamicTestKind_operating": 3,
		"DynamicTestKind_failed":    4,
	}
)

func (x DynamicTestKind) Enum() *DynamicTestKind {
	p := new(DynamicTestKind)
	*p = x
	return p
}

func (x DynamicTestKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DynamicTestKind) Descriptor() protoreflect.EnumDescriptor {
	return file_commonmodule_commonmodule_proto_enumTypes[14].Descriptor()
}

func (DynamicTestKind) Type() protoreflect.EnumType {
	return &file_commonmodule_commonmodule_proto_enumTypes[14]
}

func (x DynamicTestKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DynamicTestKind.Descriptor instead.
func (DynamicTestKind) EnumDescriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{14}
}

// State kind
type HealthKind int32

const (
	// No problems, normal operation ("green").
	HealthKind_HealthKind_UNDEFINED HealthKind = 0
	// MISSING DOCUMENTATION!!!
	HealthKind_HealthKind_none HealthKind = 1
	// No problems, normal operation ("green").
	HealthKind_HealthKind_OK HealthKind = 2
	// Minor problems, but in safe operating mode ("yellow"). The exact meaning is a local issue,
	// depending on the dedicated function/device.
	HealthKind_HealthKind_Warning HealthKind = 3
	// Severe problem, no operation possible ("red").
	HealthKind_HealthKind_Alarm HealthKind = 4
)

// Enum value maps for HealthKind.
var (
	HealthKind_name = map[int32]string{
		0: "HealthKind_UNDEFINED",
		1: "HealthKind_none",
		2: "HealthKind_OK",
		3: "HealthKind_Warning",
		4: "HealthKind_Alarm",
	}
	HealthKind_value = map[string]int32{
		"HealthKind_UNDEFINED": 0,
		"HealthKind_none":      1,
		"HealthKind_OK":        2,
		"HealthKind_Warning":   3,
		"HealthKind_Alarm":     4,
	}
)

func (x HealthKind) Enum() *HealthKind {
	p := new(HealthKind)
	*p = x
	return p
}

func (x HealthKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthKind) Descriptor() protoreflect.EnumDescriptor {
	return file_commonmodule_commonmodule_proto_enumTypes[15].Descriptor()
}

func (HealthKind) Type() protoreflect.EnumType {
	return &file_commonmodule_commonmodule_proto_enumTypes[15]
}

func (x HealthKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthKind.Descriptor instead.
func (HealthKind) EnumDescriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{15}
}

// MISSING DOCUMENTATION!!!
type SwitchingCapabilityKind int32

const (
	// Undefined
	SwitchingCapabilityKind_SwitchingCapabilityKind_UNDEFINED SwitchingCapabilityKind = 0
	// MISSING DOCUMENTATION!!!
	SwitchingCapabilityKind_SwitchingCapabilityKind_none SwitchingCapabilityKind = 1
	// Open
	SwitchingCapabilityKind_SwitchingCapabilityKind_open SwitchingCapabilityKind = 2
	// Close
	SwitchingCapabilityKind_SwitchingCapabilityKind_close SwitchingCapabilityKind = 3
	// Open and Close
	SwitchingCapabilityKind_SwitchingCapabilityKind_open_and_close SwitchingCapabilityKind = 4
)

// Enum value maps for SwitchingCapabilityKind.
var (
	SwitchingCapabilityKind_name = map[int32]string{
		0: "SwitchingCapabilityKind_UNDEFINED",
		1: "SwitchingCapabilityKind_none",
		2: "SwitchingCapabilityKind_open",
		3: "SwitchingCapabilityKind_close",
		4: "SwitchingCapabilityKind_open_and_close",
	}
	SwitchingCapabilityKind_value = map[string]int32{
		"SwitchingCapabilityKind_UNDEFINED":      0,
		"SwitchingCapabilityKind_none":           1,
		"SwitchingCapabilityKind_open":           2,
		"SwitchingCapabilityKind_close":          3,
		"SwitchingCapabilityKind_open_and_close": 4,
	}
)

func (x SwitchingCapabilityKind) Enum() *SwitchingCapabilityKind {
	p := new(SwitchingCapabilityKind)
	*p = x
	return p
}

func (x SwitchingCapabilityKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SwitchingCapabilityKind) Descriptor() protoreflect.EnumDescriptor {
	return file_commonmodule_commonmodule_proto_enumTypes[16].Descriptor()
}

func (SwitchingCapabilityKind) Type() protoreflect.EnumType {
	return &file_commonmodule_commonmodule_proto_enumTypes[16]
}

func (x SwitchingCapabilityKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SwitchingCapabilityKind.Descriptor instead.
func (SwitchingCapabilityKind) EnumDescriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{16}
}

// Double point position status
type DbPosKind int32

const (
	// Undefined
	DbPosKind_DbPosKind_UNDEFINED DbPosKind = 0
	// Transient status
	DbPosKind_DbPosKind_transient DbPosKind = 1
	// Closed status
	DbPosKind_DbPosKind_closed DbPosKind = 2
	// Open status
	DbPosKind_DbPosKind_open DbPosKind = 3
	// Invalid status
	DbPosKind_DbPosKind_invalid DbPosKind = 4
)

// Enum value maps for DbPosKind.
var (
	DbPosKind_name = map[int32]string{
		0: "DbPosKind_UNDEFINED",
		1: "DbPosKind_transient",
		2: "DbPosKind_closed",
		3: "DbPosKind_open",
		4: "DbPosKind_invalid",
	}
	DbPosKind_value = map[string]int32{
		"DbPosKind_UNDEFINED": 0,
		"DbPosKind_transient": 1,
		"DbPosKind_closed":    2,
		"DbPosKind_open":      3,
		"DbPosKind_invalid":   4,
	}
)

func (x DbPosKind) Enum() *DbPosKind {
	p := new(DbPosKind)
	*p = x
	return p
}

func (x DbPosKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DbPosKind) Descriptor() protoreflect.EnumDescriptor {
	return file_commonmodule_commonmodule_proto_enumTypes[17].Descriptor()
}

func (DbPosKind) Type() protoreflect.EnumType {
	return &file_commonmodule_commonmodule_proto_enumTypes[17]
}

func (x DbPosKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DbPosKind.Descriptor instead.
func (DbPosKind) EnumDescriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{17}
}

// Reclose action kind such as idle, cycling, or lockout.
type RecloseActionKind int32

const (
	// Undefined
	RecloseActionKind_RecloseActionKind_UNDEFINED RecloseActionKind = 0
	// Idle state
	RecloseActionKind_RecloseActionKind_idle RecloseActionKind = 1
	// Cycling state
	RecloseActionKind_RecloseActionKind_cycling RecloseActionKind = 2
	// Lockout state
	RecloseActionKind_RecloseActionKind_lockout RecloseActionKind = 3
)

// Enum value maps for RecloseActionKind.
var (
	RecloseActionKind_name = map[int32]string{
		0: "RecloseActionKind_UNDEFINED",
		1: "RecloseActionKind_idle",
		2: "RecloseActionKind_cycling",
		3: "RecloseActionKind_lockout",
	}
	RecloseActionKind_value = map[string]int32{
		"RecloseActionKind_UNDEFINED": 0,
		"RecloseActionKind_idle":      1,
		"RecloseActionKind_cycling":   2,
		"RecloseActionKind_lockout":   3,
	}
)

func (x RecloseActionKind) Enum() *RecloseActionKind {
	p := new(RecloseActionKind)
	*p = x
	return p
}

func (x RecloseActionKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecloseActionKind) Descriptor() protoreflect.EnumDescriptor {
	return file_commonmodule_commonmodule_proto_enumTypes[18].Descriptor()
}

func (RecloseActionKind) Type() protoreflect.EnumType {
	return &file_commonmodule_commonmodule_proto_enumTypes[18]
}

func (x RecloseActionKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecloseActionKind.Descriptor instead.
func (RecloseActionKind) EnumDescriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{18}
}

// Abnormal Operating Performance Category
type NorOpCatKind int32

const (
	// Undefined
	NorOpCatKind_NorOpCatKind_UNDEFINED NorOpCatKind = 0
	// MISSING DOCUMENTATION!!!
	NorOpCatKind_NorOpCatKind_A NorOpCatKind = 1
	// MISSING DOCUMENTATION!!!
	NorOpCatKind_NorOpCatKind_B NorOpCatKind = 2
)

// Enum value maps for NorOpCatKind.
var (
	NorOpCatKind_name = map[int32]string{
		0: "NorOpCatKind_UNDEFINED",
		1: "NorOpCatKind_A",
		2: "NorOpCatKind_B",
	}
	NorOpCatKind_value = map[string]int32{
		"NorOpCatKind_UNDEFINED": 0,
		"NorOpCatKind_A":         1,
		"NorOpCatKind_B":         2,
	}
)

func (x NorOpCatKind) Enum() *NorOpCatKind {
	p := new(NorOpCatKind)
	*p = x
	return p
}

func (x NorOpCatKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NorOpCatKind) Descriptor() protoreflect.EnumDescriptor {
	return file_commonmodule_commonmodule_proto_enumTypes[19].Descriptor()
}

func (NorOpCatKind) Type() protoreflect.EnumType {
	return &file_commonmodule_commonmodule_proto_enumTypes[19]
}

func (x NorOpCatKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NorOpCatKind.Descriptor instead.
func (NorOpCatKind) EnumDescriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{19}
}

// Normal Operating Performance Category
type AbnOpCatKind int32

const (
	// Undefined
	AbnOpCatKind_AbnOpCatKind_UNDEFINED AbnOpCatKind = 0
	// MISSING DOCUMENTATION!!!
	AbnOpCatKind_AbnOpCatKind_I AbnOpCatKind = 1
	// MISSING DOCUMENTATION!!!
	AbnOpCatKind_AbnOpCatKind_II AbnOpCatKind = 2
	// MISSING DOCUMENTATION!!!
	AbnOpCatKind_AbnOpCatKind_III AbnOpCatKind = 3
)

// Enum value maps for AbnOpCatKind.
var (
	AbnOpCatKind_name = map[int32]string{
		0: "AbnOpCatKind_UNDEFINED",
		1: "AbnOpCatKind_I",
		2: "AbnOpCatKind_II",
		3: "AbnOpCatKind_III",
	}
	AbnOpCatKind_value = map[string]int32{
		"AbnOpCatKind_UNDEFINED": 0,
		"AbnOpCatKind_I":         1,
		"AbnOpCatKind_II":        2,
		"AbnOpCatKind_III":       3,
	}
)

func (x AbnOpCatKind) Enum() *AbnOpCatKind {
	p := new(AbnOpCatKind)
	*p = x
	return p
}

func (x AbnOpCatKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AbnOpCatKind) Descriptor() protoreflect.EnumDescriptor {
	return file_commonmodule_commonmodule_proto_enumTypes[20].Descriptor()
}

func (AbnOpCatKind) Type() protoreflect.EnumType {
	return &file_commonmodule_commonmodule_proto_enumTypes[20]
}

func (x AbnOpCatKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AbnOpCatKind.Descriptor instead.
func (AbnOpCatKind) EnumDescriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{20}
}

// State kind
type AlrmKind int32

const (
	// MISSING DOCUMENTATION!!!
	AlrmKind_AlrmKind_ground_fault AlrmKind = 0
	// MISSING DOCUMENTATION!!!
	AlrmKind_AlrmKind_dc_over_voltage AlrmKind = 1
	// MISSING DOCUMENTATION!!!
	AlrmKind_AlrmKind_ac_disconnect_open AlrmKind = 2
	// MISSING DOCUMENTATION!!!
	AlrmKind_AlrmKind_dc_disconnect_open AlrmKind = 3
	// MISSING DOCUMENTATION!!!
	AlrmKind_AlrmKind_grid_disconnect AlrmKind = 4
	// MISSING DOCUMENTATION!!!
	AlrmKind_AlrmKind_cabinet_open AlrmKind = 5
	// MISSING DOCUMENTATION!!!
	AlrmKind_AlrmKind_manual_shutdown AlrmKind = 6
	// MISSING DOCUMENTATION!!!
	AlrmKind_AlrmKind_over_temperature AlrmKind = 7
	// MISSING DOCUMENTATION!!!
	AlrmKind_AlrmKind_frequency_above_limit AlrmKind = 8
	// MISSING DOCUMENTATION!!!
	AlrmKind_AlrmKind_frequency_under_limit AlrmKind = 9
	// MISSING DOCUMENTATION!!!
	AlrmKind_AlrmKind_ac_voltage_above_limit AlrmKind = 10
	// MISSING DOCUMENTATION!!!
	AlrmKind_AlrmKind_ac_voltage_under_limit AlrmKind = 11
	// MISSING DOCUMENTATION!!!
	AlrmKind_AlrmKind_blown_string_fuse_on_input AlrmKind = 12
	// MISSING DOCUMENTATION!!!
	AlrmKind_AlrmKind_under_temperature AlrmKind = 13
	// MISSING DOCUMENTATION!!!
	AlrmKind_AlrmKind_generic_memory_or_communication_error AlrmKind = 14
	// MISSING DOCUMENTATION!!!
	AlrmKind_AlrmKind_hardware_test_failure AlrmKind = 15
	// MISSING DOCUMENTATION!!!
	AlrmKind_AlrmKind_manufacturer_alarm AlrmKind = 16
)

// Enum value maps for AlrmKind.
var (
	AlrmKind_name = map[int32]string{
		0:  "AlrmKind_ground_fault",
		1:  "AlrmKind_dc_over_voltage",
		2:  "AlrmKind_ac_disconnect_open",
		3:  "AlrmKind_dc_disconnect_open",
		4:  "AlrmKind_grid_disconnect",
		5:  "AlrmKind_cabinet_open",
		6:  "AlrmKind_manual_shutdown",
		7:  "AlrmKind_over_temperature",
		8:  "AlrmKind_frequency_above_limit",
		9:  "AlrmKind_frequency_under_limit",
		10: "AlrmKind_ac_voltage_above_limit",
		11: "AlrmKind_ac_voltage_under_limit",
		12: "AlrmKind_blown_string_fuse_on_input",
		13: "AlrmKind_under_temperature",
		14: "AlrmKind_generic_memory_or_communication_error",
		15: "AlrmKind_hardware_test_failure",
		16: "AlrmKind_manufacturer_alarm",
	}
	AlrmKind_value = map[string]int32{
		"AlrmKind_ground_fault":                          0,
		"AlrmKind_dc_over_voltage":                       1,
		"AlrmKind_ac_disconnect_open":                    2,
		"AlrmKind_dc_disconnect_open":                    3,
		"AlrmKind_grid_disconnect":                       4,
		"AlrmKind_cabinet_open":                          5,
		"AlrmKind_manual_shutdown":                       6,
		"AlrmKind_over_temperature":                      7,
		"AlrmKind_frequency_above_limit":                 8,
		"AlrmKind_frequency_under_limit":                 9,
		"AlrmKind_ac_voltage_above_limit":                10,
		"AlrmKind_ac_voltage_under_limit":                11,
		"AlrmKind_blown_string_fuse_on_input":            12,
		"AlrmKind_under_temperature":                     13,
		"AlrmKind_generic_memory_or_communication_error": 14,
		"AlrmKind_hardware_test_failure":                 15,
		"AlrmKind_manufacturer_alarm":                    16,
	}
)

func (x AlrmKind) Enum() *AlrmKind {
	p := new(AlrmKind)
	*p = x
	return p
}

func (x AlrmKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlrmKind) Descriptor() protoreflect.EnumDescriptor {
	return file_commonmodule_commonmodule_proto_enumTypes[21].Descriptor()
}

func (AlrmKind) Type() protoreflect.EnumType {
	return &file_commonmodule_commonmodule_proto_enumTypes[21]
}

func (x AlrmKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlrmKind.Descriptor instead.
func (AlrmKind) EnumDescriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{21}
}

// Dynamic test status (see IEC61850-7-2 section 20.2.1 Direct control with normal security, state
// machine diagram)   A simplified state machine diagram (from Herb F.) is provided.
type ControlModeKind int32

const (
	// Undefined
	ControlModeKind_ControlModeKind_UNDEFINED ControlModeKind = 0
	// MISSING DOCUMENTATION!!!
	ControlModeKind_ControlModeKind_auto ControlModeKind = 1
	// MISSING DOCUMENTATION!!!
	ControlModeKind_ControlModeKind_manual ControlModeKind = 2
	// MISSING DOCUMENTATION!!!
	ControlModeKind_ControlModeKind_override ControlModeKind = 3
	// MISSING DOCUMENTATION!!!
	ControlModeKind_ControlModeKind_remote ControlModeKind = 4
)

// Enum value maps for ControlModeKind.
var (
	ControlModeKind_name = map[int32]string{
		0: "ControlModeKind_UNDEFINED",
		1: "ControlModeKind_auto",
		2: "ControlModeKind_manual",
		3: "ControlModeKind_override",
		4: "ControlModeKind_remote",
	}
	ControlModeKind_value = map[string]int32{
		"ControlModeKind_UNDEFINED": 0,
		"ControlModeKind_auto":      1,
		"ControlModeKind_manual":    2,
		"ControlModeKind_override":  3,
		"ControlModeKind_remote":    4,
	}
)

func (x ControlModeKind) Enum() *ControlModeKind {
	p := new(ControlModeKind)
	*p = x
	return p
}

func (x ControlModeKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ControlModeKind) Descriptor() protoreflect.EnumDescriptor {
	return file_commonmodule_commonmodule_proto_enumTypes[22].Descriptor()
}

func (ControlModeKind) Type() protoreflect.EnumType {
	return &file_commonmodule_commonmodule_proto_enumTypes[22]
}

func (x ControlModeKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ControlModeKind.Descriptor instead.
func (ControlModeKind) EnumDescriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{22}
}

// The control characteristics for power flow operation
type DirectionModeKind int32

const (
	// Undefined
	DirectionModeKind_DirectionModeKind_UNDEFINED DirectionModeKind = 0
	// Testing status
	DirectionModeKind_DirectionModeKind_locked_forward DirectionModeKind = 1
	// MISSING DOCUMENTATION!!!
	DirectionModeKind_DirectionModeKind_locked_reverse DirectionModeKind = 2
	// MISSING DOCUMENTATION!!!
	DirectionModeKind_DirectionModeKind_reverse_idle DirectionModeKind = 3
	// MISSING DOCUMENTATION!!!
	DirectionModeKind_DirectionModeKind_bidirectional DirectionModeKind = 4
	// MISSING DOCUMENTATION!!!
	DirectionModeKind_DirectionModeKind_neutral_idle DirectionModeKind = 5
	// MISSING DOCUMENTATION!!!
	DirectionModeKind_DirectionModeKind_cogeneration DirectionModeKind = 6
	// MISSING DOCUMENTATION!!!
	DirectionModeKind_DirectionModeKind_reactive_bidirectional DirectionModeKind = 7
	// MISSING DOCUMENTATION!!!
	DirectionModeKind_DirectionModeKind_bias_bidirectional DirectionModeKind = 8
	// MISSING DOCUMENTATION!!!
	DirectionModeKind_DirectionModeKind_bias_cogeneration DirectionModeKind = 9
	// MISSING DOCUMENTATION!!!
	DirectionModeKind_DirectionModeKind_reverse_cogeneration DirectionModeKind = 10
)

// Enum value maps for DirectionModeKind.
var (
	DirectionModeKind_name = map[int32]string{
		0:  "DirectionModeKind_UNDEFINED",
		1:  "DirectionModeKind_locked_forward",
		2:  "DirectionModeKind_locked_reverse",
		3:  "DirectionModeKind_reverse_idle",
		4:  "DirectionModeKind_bidirectional",
		5:  "DirectionModeKind_neutral_idle",
		6:  "DirectionModeKind_cogeneration",
		7:  "DirectionModeKind_reactive_bidirectional",
		8:  "DirectionModeKind_bias_bidirectional",
		9:  "DirectionModeKind_bias_cogeneration",
		10: "DirectionModeKind_reverse_cogeneration",
	}
	DirectionModeKind_value = map[string]int32{
		"DirectionModeKind_UNDEFINED":              0,
		"DirectionModeKind_locked_forward":         1,
		"DirectionModeKind_locked_reverse":         2,
		"DirectionModeKind_reverse_idle":           3,
		"DirectionModeKind_bidirectional":          4,
		"DirectionModeKind_neutral_idle":           5,
		"DirectionModeKind_cogeneration":           6,
		"DirectionModeKind_reactive_bidirectional": 7,
		"DirectionModeKind_bias_bidirectional":     8,
		"DirectionModeKind_bias_cogeneration":      9,
		"DirectionModeKind_reverse_cogeneration":   10,
	}
)

func (x DirectionModeKind) Enum() *DirectionModeKind {
	p := new(DirectionModeKind)
	*p = x
	return p
}

func (x DirectionModeKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DirectionModeKind) Descriptor() protoreflect.EnumDescriptor {
	return file_commonmodule_commonmodule_proto_enumTypes[23].Descriptor()
}

func (DirectionModeKind) Type() protoreflect.EnumType {
	return &file_commonmodule_commonmodule_proto_enumTypes[23]
}

func (x DirectionModeKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DirectionModeKind.Descriptor instead.
func (DirectionModeKind) EnumDescriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{23}
}

// State kind
type GridConnectionStateKind int32

const (
	// MISSING DOCUMENTATION!!!
	GridConnectionStateKind_GridConnectionStateKind_disconnected GridConnectionStateKind = 0
	// MISSING DOCUMENTATION!!!
	GridConnectionStateKind_GridConnectionStateKind_connected GridConnectionStateKind = 1
)

// Enum value maps for GridConnectionStateKind.
var (
	GridConnectionStateKind_name = map[int32]string{
		0: "GridConnectionStateKind_disconnected",
		1: "GridConnectionStateKind_connected",
	}
	GridConnectionStateKind_value = map[string]int32{
		"GridConnectionStateKind_disconnected": 0,
		"GridConnectionStateKind_connected":    1,
	}
)

func (x GridConnectionStateKind) Enum() *GridConnectionStateKind {
	p := new(GridConnectionStateKind)
	*p = x
	return p
}

func (x GridConnectionStateKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GridConnectionStateKind) Descriptor() protoreflect.EnumDescriptor {
	return file_commonmodule_commonmodule_proto_enumTypes[24].Descriptor()
}

func (GridConnectionStateKind) Type() protoreflect.EnumType {
	return &file_commonmodule_commonmodule_proto_enumTypes[24]
}

func (x GridConnectionStateKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GridConnectionStateKind.Descriptor instead.
func (GridConnectionStateKind) EnumDescriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{24}
}

// State kind
type OperatingStateKind int32

const (
	// MISSING DOCUMENTATION!!!
	OperatingStateKind_OperatingStateKind_UNDEFINED OperatingStateKind = 0
	// MISSING DOCUMENTATION!!!
	OperatingStateKind_OperatingStateKind_off OperatingStateKind = 1
	// MISSING DOCUMENTATION!!!
	OperatingStateKind_OperatingStateKind_disconnected_and_standby OperatingStateKind = 2
	// MISSING DOCUMENTATION!!!
	OperatingStateKind_OperatingStateKind_disconnected_and_available OperatingStateKind = 3
	// MISSING DOCUMENTATION!!!
	OperatingStateKind_OperatingStateKind_disconnected_and_authorized OperatingStateKind = 4
	// MISSING DOCUMENTATION!!!
	OperatingStateKind_OperatingStateKind_starting_and_synchronizing OperatingStateKind = 5
	// MISSING DOCUMENTATION!!!
	OperatingStateKind_OperatingStateKind_connected_and_idle OperatingStateKind = 6
	// MISSING DOCUMENTATION!!!
	OperatingStateKind_OperatingStateKind_connected_and_generating OperatingStateKind = 7
	// MISSING DOCUMENTATION!!!
	OperatingStateKind_OperatingStateKind_connected_and_consuming OperatingStateKind = 8
	// MISSING DOCUMENTATION!!!
	OperatingStateKind_OperatingStateKind_stopping OperatingStateKind = 9
	// MISSING DOCUMENTATION!!!
	OperatingStateKind_OperatingStateKind_disconnected_and_blocked OperatingStateKind = 10
	// MISSING DOCUMENTATION!!!
	OperatingStateKind_OperatingStateKind_disconnected_and_in_maintenance OperatingStateKind = 11
	// MISSING DOCUMENTATION!!!
	OperatingStateKind_OperatingStateKind_ceased_to_energize OperatingStateKind = 12
	// MISSING DOCUMENTATION!!!
	OperatingStateKind_OperatingStateKind_failed OperatingStateKind = 13
)

// Enum value maps for OperatingStateKind.
var (
	OperatingStateKind_name = map[int32]string{
		0:  "OperatingStateKind_UNDEFINED",
		1:  "OperatingStateKind_off",
		2:  "OperatingStateKind_disconnected_and_standby",
		3:  "OperatingStateKind_disconnected_and_available",
		4:  "OperatingStateKind_disconnected_and_authorized",
		5:  "OperatingStateKind_starting_and_synchronizing",
		6:  "OperatingStateKind_connected_and_idle",
		7:  "OperatingStateKind_connected_and_generating",
		8:  "OperatingStateKind_connected_and_consuming",
		9:  "OperatingStateKind_stopping",
		10: "OperatingStateKind_disconnected_and_blocked",
		11: "OperatingStateKind_disconnected_and_in_maintenance",
		12: "OperatingStateKind_ceased_to_energize",
		13: "OperatingStateKind_failed",
	}
	OperatingStateKind_value = map[string]int32{
		"OperatingStateKind_UNDEFINED":                       0,
		"OperatingStateKind_off":                             1,
		"OperatingStateKind_disconnected_and_standby":        2,
		"OperatingStateKind_disconnected_and_available":      3,
		"OperatingStateKind_disconnected_and_authorized":     4,
		"OperatingStateKind_starting_and_synchronizing":      5,
		"OperatingStateKind_connected_and_idle":              6,
		"OperatingStateKind_connected_and_generating":        7,
		"OperatingStateKind_connected_and_consuming":         8,
		"OperatingStateKind_stopping":                        9,
		"OperatingStateKind_disconnected_and_blocked":        10,
		"OperatingStateKind_disconnected_and_in_maintenance": 11,
		"OperatingStateKind_ceased_to_energize":              12,
		"OperatingStateKind_failed":                          13,
	}
)

func (x OperatingStateKind) Enum() *OperatingStateKind {
	p := new(OperatingStateKind)
	*p = x
	return p
}

func (x OperatingStateKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperatingStateKind) Descriptor() protoreflect.EnumDescriptor {
	return file_commonmodule_commonmodule_proto_enumTypes[25].Descriptor()
}

func (OperatingStateKind) Type() protoreflect.EnumType {
	return &file_commonmodule_commonmodule_proto_enumTypes[25]
}

func (x OperatingStateKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperatingStateKind.Descriptor instead.
func (OperatingStateKind) EnumDescriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{25}
}

// Real power control kind
type ReactivePowerControlKind int32

const (
	// MISSING DOCUMENTATION!!!
	ReactivePowerControlKind_ReactivePowerControlKind_UNDEFINED ReactivePowerControlKind = 0
	// MISSING DOCUMENTATION!!!
	ReactivePowerControlKind_ReactivePowerControlKind_advanced ReactivePowerControlKind = 1
	// MISSING DOCUMENTATION!!!
	ReactivePowerControlKind_ReactivePowerControlKind_droop ReactivePowerControlKind = 2
	// Voltage setpoint
	ReactivePowerControlKind_ReactivePowerControlKind_voltage ReactivePowerControlKind = 3
	// Reactive power setpoint
	ReactivePowerControlKind_ReactivePowerControlKind_reactivePower ReactivePowerControlKind = 4
	// MISSING DOCUMENTATION!!!
	ReactivePowerControlKind_ReactivePowerControlKind_powerFactor ReactivePowerControlKind = 5
)

// Enum value maps for ReactivePowerControlKind.
var (
	ReactivePowerControlKind_name = map[int32]string{
		0: "ReactivePowerControlKind_UNDEFINED",
		1: "ReactivePowerControlKind_advanced",
		2: "ReactivePowerControlKind_droop",
		3: "ReactivePowerControlKind_voltage",
		4: "ReactivePowerControlKind_reactivePower",
		5: "ReactivePowerControlKind_powerFactor",
	}
	ReactivePowerControlKind_value = map[string]int32{
		"ReactivePowerControlKind_UNDEFINED":     0,
		"ReactivePowerControlKind_advanced":      1,
		"ReactivePowerControlKind_droop":         2,
		"ReactivePowerControlKind_voltage":       3,
		"ReactivePowerControlKind_reactivePower": 4,
		"ReactivePowerControlKind_powerFactor":   5,
	}
)

func (x ReactivePowerControlKind) Enum() *ReactivePowerControlKind {
	p := new(ReactivePowerControlKind)
	*p = x
	return p
}

func (x ReactivePowerControlKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReactivePowerControlKind) Descriptor() protoreflect.EnumDescriptor {
	return file_commonmodule_commonmodule_proto_enumTypes[26].Descriptor()
}

func (ReactivePowerControlKind) Type() protoreflect.EnumType {
	return &file_commonmodule_commonmodule_proto_enumTypes[26]
}

func (x ReactivePowerControlKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReactivePowerControlKind.Descriptor instead.
func (ReactivePowerControlKind) EnumDescriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{26}
}

// Real power control kind
type RealPowerControlKind int32

const (
	// MISSING DOCUMENTATION!!!
	RealPowerControlKind_RealPowerControlKind_UNDEFINED RealPowerControlKind = 0
	// MISSING DOCUMENTATION!!!
	RealPowerControlKind_RealPowerControlKind_advanced RealPowerControlKind = 1
	// MISSING DOCUMENTATION!!!
	RealPowerControlKind_RealPowerControlKind_droop RealPowerControlKind = 2
	// MISSING DOCUMENTATION!!!
	RealPowerControlKind_RealPowerControlKind_isochronous RealPowerControlKind = 3
	// Real power setpoint
	RealPowerControlKind_RealPowerControlKind_realPower RealPowerControlKind = 4
)

// Enum value maps for RealPowerControlKind.
var (
	RealPowerControlKind_name = map[int32]string{
		0: "RealPowerControlKind_UNDEFINED",
		1: "RealPowerControlKind_advanced",
		2: "RealPowerControlKind_droop",
		3: "RealPowerControlKind_isochronous",
		4: "RealPowerControlKind_realPower",
	}
	RealPowerControlKind_value = map[string]int32{
		"RealPowerControlKind_UNDEFINED":   0,
		"RealPowerControlKind_advanced":    1,
		"RealPowerControlKind_droop":       2,
		"RealPowerControlKind_isochronous": 3,
		"RealPowerControlKind_realPower":   4,
	}
)

func (x RealPowerControlKind) Enum() *RealPowerControlKind {
	p := new(RealPowerControlKind)
	*p = x
	return p
}

func (x RealPowerControlKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RealPowerControlKind) Descriptor() protoreflect.EnumDescriptor {
	return file_commonmodule_commonmodule_proto_enumTypes[27].Descriptor()
}

func (RealPowerControlKind) Type() protoreflect.EnumType {
	return &file_commonmodule_commonmodule_proto_enumTypes[27]
}

func (x RealPowerControlKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RealPowerControlKind.Descriptor instead.
func (RealPowerControlKind) EnumDescriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{27}
}

// State kind
type StateKind int32

const (
	// MISSING DOCUMENTATION!!!
	StateKind_StateKind_UNDEFINED StateKind = 0
	// MISSING DOCUMENTATION!!!
	StateKind_StateKind_off StateKind = 1
	// MISSING DOCUMENTATION!!!
	StateKind_StateKind_on StateKind = 2
	// MISSING DOCUMENTATION!!!
	StateKind_StateKind_standby StateKind = 3
)

// Enum value maps for StateKind.
var (
	StateKind_name = map[int32]string{
		0: "StateKind_UNDEFINED",
		1: "StateKind_off",
		2: "StateKind_on",
		3: "StateKind_standby",
	}
	StateKind_value = map[string]int32{
		"StateKind_UNDEFINED": 0,
		"StateKind_off":       1,
		"StateKind_on":        2,
		"StateKind_standby":   3,
	}
)

func (x StateKind) Enum() *StateKind {
	p := new(StateKind)
	*p = x
	return p
}

func (x StateKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StateKind) Descriptor() protoreflect.EnumDescriptor {
	return file_commonmodule_commonmodule_proto_enumTypes[28].Descriptor()
}

func (StateKind) Type() protoreflect.EnumType {
	return &file_commonmodule_commonmodule_proto_enumTypes[28]
}

func (x StateKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StateKind.Descriptor instead.
func (StateKind) EnumDescriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{28}
}

// Voltage-limiting types
type VoltLimitModeKind int32

const (
	// Undefined
	VoltLimitModeKind_VoltLimitModeKind_UNDEFINED VoltLimitModeKind = 0
	// Testing status
	VoltLimitModeKind_VoltLimitModeKind_off VoltLimitModeKind = 1
	// MISSING DOCUMENTATION!!!
	VoltLimitModeKind_VoltLimitModeKind_high_limit_only VoltLimitModeKind = 2
	// MISSING DOCUMENTATION!!!
	VoltLimitModeKind_VoltLimitModeKind_low_limit_only VoltLimitModeKind = 3
	// MISSING DOCUMENTATION!!!
	VoltLimitModeKind_VoltLimitModeKind_high_low_limits VoltLimitModeKind = 4
	// MISSING DOCUMENTATION!!!
	VoltLimitModeKind_VoltLimitModeKind_ivvc_high_limit_only VoltLimitModeKind = 5
	// MISSING DOCUMENTATION!!!
	VoltLimitModeKind_VoltLimitModeKind_ivvc_low_limit_only VoltLimitModeKind = 6
	// MISSING DOCUMENTATION!!!
	VoltLimitModeKind_VoltLimitModeKind_ivvc_high_low_limits VoltLimitModeKind = 7
)

// Enum value maps for VoltLimitModeKind.
var (
	VoltLimitModeKind_name = map[int32]string{
		0: "VoltLimitModeKind_UNDEFINED",
		1: "VoltLimitModeKind_off",
		2: "VoltLimitModeKind_high_limit_only",
		3: "VoltLimitModeKind_low_limit_only",
		4: "VoltLimitModeKind_high_low_limits",
		5: "VoltLimitModeKind_ivvc_high_limit_only",
		6: "VoltLimitModeKind_ivvc_low_limit_only",
		7: "VoltLimitModeKind_ivvc_high_low_limits",
	}
	VoltLimitModeKind_value = map[string]int32{
		"VoltLimitModeKind_UNDEFINED":            0,
		"VoltLimitModeKind_off":                  1,
		"VoltLimitModeKind_high_limit_only":      2,
		"VoltLimitModeKind_low_limit_only":       3,
		"VoltLimitModeKind_high_low_limits":      4,
		"VoltLimitModeKind_ivvc_high_limit_only": 5,
		"VoltLimitModeKind_ivvc_low_limit_only":  6,
		"VoltLimitModeKind_ivvc_high_low_limits": 7,
	}
)

func (x VoltLimitModeKind) Enum() *VoltLimitModeKind {
	p := new(VoltLimitModeKind)
	*p = x
	return p
}

func (x VoltLimitModeKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VoltLimitModeKind) Descriptor() protoreflect.EnumDescriptor {
	return file_commonmodule_commonmodule_proto_enumTypes[29].Descriptor()
}

func (VoltLimitModeKind) Type() protoreflect.EnumType {
	return &file_commonmodule_commonmodule_proto_enumTypes[29]
}

func (x VoltLimitModeKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VoltLimitModeKind.Descriptor instead.
func (VoltLimitModeKind) EnumDescriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{29}
}

type Optional_FaultDirectionKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value FaultDirectionKind `protobuf:"varint,1,opt,name=value,proto3,enum=commonmodule.FaultDirectionKind" json:"value,omitempty"`
}

func (x *Optional_FaultDirectionKind) Reset() {
	*x = Optional_FaultDirectionKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Optional_FaultDirectionKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optional_FaultDirectionKind) ProtoMessage() {}

func (x *Optional_FaultDirectionKind) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optional_FaultDirectionKind.ProtoReflect.Descriptor instead.
func (*Optional_FaultDirectionKind) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{0}
}

func (x *Optional_FaultDirectionKind) GetValue() FaultDirectionKind {
	if x != nil {
		return x.Value
	}
	return FaultDirectionKind_FaultDirectionKind_UNDEFINED
}

type Optional_PhaseFaultDirectionKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value PhaseFaultDirectionKind `protobuf:"varint,1,opt,name=value,proto3,enum=commonmodule.PhaseFaultDirectionKind" json:"value,omitempty"`
}

func (x *Optional_PhaseFaultDirectionKind) Reset() {
	*x = Optional_PhaseFaultDirectionKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Optional_PhaseFaultDirectionKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optional_PhaseFaultDirectionKind) ProtoMessage() {}

func (x *Optional_PhaseFaultDirectionKind) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optional_PhaseFaultDirectionKind.ProtoReflect.Descriptor instead.
func (*Optional_PhaseFaultDirectionKind) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{1}
}

func (x *Optional_PhaseFaultDirectionKind) GetValue() PhaseFaultDirectionKind {
	if x != nil {
		return x.Value
	}
	return PhaseFaultDirectionKind_PhaseFaultDirectionKind_UNDEFINED
}

// Directional protection indication information (ACD)
type ACD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// General direction of the fault. If the faults of individual phases have different directions,
	// this attribute shall be set to 'dirGeneral'='both'.
	DirGeneral FaultDirectionKind `protobuf:"varint,1,opt,name=dirGeneral,proto3,enum=commonmodule.FaultDirectionKind" json:"dirGeneral,omitempty"`
	// Direction of the fault for earth current.
	DirNeut *Optional_PhaseFaultDirectionKind `protobuf:"bytes,2,opt,name=dirNeut,proto3" json:"dirNeut,omitempty"`
	// Direction of the fault for phase A.
	DirPhsA *Optional_PhaseFaultDirectionKind `protobuf:"bytes,3,opt,name=dirPhsA,proto3" json:"dirPhsA,omitempty"`
	// Direction of the fault for phase B.
	DirPhsB *Optional_PhaseFaultDirectionKind `protobuf:"bytes,4,opt,name=dirPhsB,proto3" json:"dirPhsB,omitempty"`
	// Direction of the fault for phase C.
	DirPhsC *Optional_PhaseFaultDirectionKind `protobuf:"bytes,5,opt,name=dirPhsC,proto3" json:"dirPhsC,omitempty"`
	// General indication of a protection activation (e.g. by the fault). Depending on the function,
	// 'general' may or may not be resulting from the phase attributes (phsA', 'phsB', 'phsC', 'neut').
	General bool `protobuf:"varint,6,opt,name=general,proto3" json:"general,omitempty"`
	// See 'ACT.neut'.
	Neut *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=neut,proto3" json:"neut,omitempty"`
	// Value true indicates a trip or a start event of phase A.
	PhsA *wrapperspb.BoolValue `protobuf:"bytes,8,opt,name=phsA,proto3" json:"phsA,omitempty"`
	// Value true indicates a trip or a start event of phase B.
	PhsB *wrapperspb.BoolValue `protobuf:"bytes,9,opt,name=phsB,proto3" json:"phsB,omitempty"`
	// Value true indicates a trip or a start event of phase C.
	PhsC *wrapperspb.BoolValue `protobuf:"bytes,10,opt,name=phsC,proto3" json:"phsC,omitempty"`
}

func (x *ACD) Reset() {
	*x = ACD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACD) ProtoMessage() {}

func (x *ACD) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACD.ProtoReflect.Descriptor instead.
func (*ACD) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{2}
}

func (x *ACD) GetDirGeneral() FaultDirectionKind {
	if x != nil {
		return x.DirGeneral
	}
	return FaultDirectionKind_FaultDirectionKind_UNDEFINED
}

func (x *ACD) GetDirNeut() *Optional_PhaseFaultDirectionKind {
	if x != nil {
		return x.DirNeut
	}
	return nil
}

func (x *ACD) GetDirPhsA() *Optional_PhaseFaultDirectionKind {
	if x != nil {
		return x.DirPhsA
	}
	return nil
}

func (x *ACD) GetDirPhsB() *Optional_PhaseFaultDirectionKind {
	if x != nil {
		return x.DirPhsB
	}
	return nil
}

func (x *ACD) GetDirPhsC() *Optional_PhaseFaultDirectionKind {
	if x != nil {
		return x.DirPhsC
	}
	return nil
}

func (x *ACD) GetGeneral() bool {
	if x != nil {
		return x.General
	}
	return false
}

func (x *ACD) GetNeut() *wrapperspb.BoolValue {
	if x != nil {
		return x.Neut
	}
	return nil
}

func (x *ACD) GetPhsA() *wrapperspb.BoolValue {
	if x != nil {
		return x.PhsA
	}
	return nil
}

func (x *ACD) GetPhsB() *wrapperspb.BoolValue {
	if x != nil {
		return x.PhsB
	}
	return nil
}

func (x *ACD) GetPhsC() *wrapperspb.BoolValue {
	if x != nil {
		return x.PhsC
	}
	return nil
}

// This is a root class to provide common identification for all classes needing identification and
// naming attributes.
type IdentifiedObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MISSING DOCUMENTATION!!!
	Description *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// Master resource identifier issued by a model authority. The mRID must semantically be a UUID as
	// specified in RFC 4122. The mRID is globally unique.
	MRID *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=mRID,proto3" json:"mRID,omitempty"`
	// The name is any free human readable and possibly non unique text naming the object.
	Name *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *IdentifiedObject) Reset() {
	*x = IdentifiedObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentifiedObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentifiedObject) ProtoMessage() {}

func (x *IdentifiedObject) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentifiedObject.ProtoReflect.Descriptor instead.
func (*IdentifiedObject) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{3}
}

func (x *IdentifiedObject) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *IdentifiedObject) GetMRID() *wrapperspb.StringValue {
	if x != nil {
		return x.MRID
	}
	return nil
}

func (x *IdentifiedObject) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

// An electrical connection point (AC or DC) to a piece of conducting equipment. Terminals are
// connected at physical connection points called connectivity nodes.
type ACDCTerminal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	IdentifiedObject *IdentifiedObject `protobuf:"bytes,1,opt,name=identifiedObject,proto3" json:"identifiedObject,omitempty"`
	// The connected status is related to a bus-branch model and the topological node to terminal
	// relation.  True implies the terminal is connected to the related topological node and false implies
	// it is not.  In a bus-branch model, the connected status is used to tell if equipment is disconnected
	// without having to change the connectivity described by the topological node to terminal relation. A
	// valid case is that conducting equipment can be connected in one end and open in the other. In
	// particular for an AC line segment, where the reactive line charging can be significant, this is a
	// relevant case.
	Connected *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=connected,proto3" json:"connected,omitempty"`
	// The orientation of the terminal connections for a multiple terminal conducting equipment.  The
	// sequence numbering starts with 1 and additional terminals should follow in increasing order.   The
	// first terminal is the "starting point" for a two terminal branch.
	SequenceNumber *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=sequenceNumber,proto3" json:"sequenceNumber,omitempty"`
}

func (x *ACDCTerminal) Reset() {
	*x = ACDCTerminal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACDCTerminal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACDCTerminal) ProtoMessage() {}

func (x *ACDCTerminal) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACDCTerminal.ProtoReflect.Descriptor instead.
func (*ACDCTerminal) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{4}
}

func (x *ACDCTerminal) GetIdentifiedObject() *IdentifiedObject {
	if x != nil {
		return x.IdentifiedObject
	}
	return nil
}

func (x *ACDCTerminal) GetConnected() *wrapperspb.BoolValue {
	if x != nil {
		return x.Connected
	}
	return nil
}

func (x *ACDCTerminal) GetSequenceNumber() *wrapperspb.Int32Value {
	if x != nil {
		return x.SequenceNumber
	}
	return nil
}

type Optional_UnitSymbolKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value UnitSymbolKind `protobuf:"varint,1,opt,name=value,proto3,enum=commonmodule.UnitSymbolKind" json:"value,omitempty"`
}

func (x *Optional_UnitSymbolKind) Reset() {
	*x = Optional_UnitSymbolKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Optional_UnitSymbolKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optional_UnitSymbolKind) ProtoMessage() {}

func (x *Optional_UnitSymbolKind) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optional_UnitSymbolKind.ProtoReflect.Descriptor instead.
func (*Optional_UnitSymbolKind) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{5}
}

func (x *Optional_UnitSymbolKind) GetValue() UnitSymbolKind {
	if x != nil {
		return x.Value
	}
	return UnitSymbolKind_UnitSymbolKind_none
}

type Optional_UnitMultiplierKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value UnitMultiplierKind `protobuf:"varint,1,opt,name=value,proto3,enum=commonmodule.UnitMultiplierKind" json:"value,omitempty"`
}

func (x *Optional_UnitMultiplierKind) Reset() {
	*x = Optional_UnitMultiplierKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Optional_UnitMultiplierKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optional_UnitMultiplierKind) ProtoMessage() {}

func (x *Optional_UnitMultiplierKind) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optional_UnitMultiplierKind.ProtoReflect.Descriptor instead.
func (*Optional_UnitMultiplierKind) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{6}
}

func (x *Optional_UnitMultiplierKind) GetValue() UnitMultiplierKind {
	if x != nil {
		return x.Value
	}
	return UnitMultiplierKind_UnitMultiplierKind_UNDEFINED
}

// MISSING DOCUMENTATION!!!
type ActivePower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MISSING DOCUMENTATION!!!
	Multiplier *Optional_UnitMultiplierKind `protobuf:"bytes,1,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
	// MISSING DOCUMENTATION!!!
	Unit *Optional_UnitSymbolKind `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`
	// MISSING DOCUMENTATION!!!
	Value *wrapperspb.FloatValue `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ActivePower) Reset() {
	*x = ActivePower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivePower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivePower) ProtoMessage() {}

func (x *ActivePower) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivePower.ProtoReflect.Descriptor instead.
func (*ActivePower) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{7}
}

func (x *ActivePower) GetMultiplier() *Optional_UnitMultiplierKind {
	if x != nil {
		return x.Multiplier
	}
	return nil
}

func (x *ActivePower) GetUnit() *Optional_UnitSymbolKind {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *ActivePower) GetValue() *wrapperspb.FloatValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type Optional_PhaseCodeKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value PhaseCodeKind `protobuf:"varint,1,opt,name=value,proto3,enum=commonmodule.PhaseCodeKind" json:"value,omitempty"`
}

func (x *Optional_PhaseCodeKind) Reset() {
	*x = Optional_PhaseCodeKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Optional_PhaseCodeKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optional_PhaseCodeKind) ProtoMessage() {}

func (x *Optional_PhaseCodeKind) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optional_PhaseCodeKind.ProtoReflect.Descriptor instead.
func (*Optional_PhaseCodeKind) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{8}
}

func (x *Optional_PhaseCodeKind) GetValue() PhaseCodeKind {
	if x != nil {
		return x.Value
	}
	return PhaseCodeKind_PhaseCodeKind_none
}

// Unit definition (Unit)
type Unit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (default='') Unit multiplier.
	Multiplier *Optional_UnitMultiplierKind `protobuf:"bytes,1,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
	// SI unit of measure.
	SIUnit UnitSymbolKind `protobuf:"varint,2,opt,name=SIUnit,proto3,enum=commonmodule.UnitSymbolKind" json:"SIUnit,omitempty"`
}

func (x *Unit) Reset() {
	*x = Unit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Unit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Unit) ProtoMessage() {}

func (x *Unit) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Unit.ProtoReflect.Descriptor instead.
func (*Unit) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{9}
}

func (x *Unit) GetMultiplier() *Optional_UnitMultiplierKind {
	if x != nil {
		return x.Multiplier
	}
	return nil
}

func (x *Unit) GetSIUnit() UnitSymbolKind {
	if x != nil {
		return x.SIUnit
	}
	return UnitSymbolKind_UnitSymbolKind_none
}

type Optional_ValidityKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value ValidityKind `protobuf:"varint,1,opt,name=value,proto3,enum=commonmodule.ValidityKind" json:"value,omitempty"`
}

func (x *Optional_ValidityKind) Reset() {
	*x = Optional_ValidityKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Optional_ValidityKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optional_ValidityKind) ProtoMessage() {}

func (x *Optional_ValidityKind) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optional_ValidityKind.ProtoReflect.Descriptor instead.
func (*Optional_ValidityKind) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{10}
}

func (x *Optional_ValidityKind) GetValue() ValidityKind {
	if x != nil {
		return x.Value
	}
	return ValidityKind_ValidityKind_UNDEFINED
}

// Describes some reasons in case 'validity' is not 'good'.
type DetailQual struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (default=false) If true, the value may not be a correct value due to a reference being out of
	// calibration. The server shall decide if validity shall be set to invalid or questionable (used for
	// measurand information and binary counter information only).
	BadReference bool `protobuf:"varint,1,opt,name=badReference,proto3" json:"badReference,omitempty"`
	// (default=false) If true, a supervision function has detected an internal or external failure.
	Failure bool `protobuf:"varint,2,opt,name=failure,proto3" json:"failure,omitempty"`
	// (default=false) If true, the value does not meet the stated accuracy of the source. EXAMPLE The
	// measured value of power factor may be noisy (inaccurate) when the current is very small.
	Inaccurate bool `protobuf:"varint,3,opt,name=inaccurate,proto3" json:"inaccurate,omitempty"`
	// (default=false) If true, an evaluation function has detected an inconsistency.
	Inconsistent bool `protobuf:"varint,4,opt,name=inconsistent,proto3" json:"inconsistent,omitempty"`
	// (default=false) If true, an update is not made during a specific time interval. The value may be
	// an old value that may have changed in the meantime. This specific time interval may be defined by an
	// allowed-age attribute. NOTE "Fail silent" errors, where the equipment stops sending data, will cause
	// setting this flag to true. In this case, the last received information was correct.
	OldData bool `protobuf:"varint,5,opt,name=oldData,proto3" json:"oldData,omitempty"`
	// (default=false) To prevent overloading of event driven communication channels, it is desirable
	// to detect and suppress oscillating (fast changing) binary inputs. If a signal changes in a defined
	// time (tosc) twice in the same direction (from 0 to 1 or from 1 to 0), then it shall be defined as an
	// oscillation and this attribute shall be set to true. If a configured number of transient changes is
	// detected, they shall be suppressed. In this time, the 'Quality.validity' shall be set to
	// 'questionable'. If the signal is still in the oscillating state after the defined number of changes,
	// the value shall be left in the state it was in when this flag was set. In this case, the 'Quality
	// validity' shall be changed from 'questionable' to 'invalid' and kept so as long as the signal is
	// oscillating.  If the configuration is such that all transient changes should be suppressed, the
	// 'Quality.validity' shall be set immediately to 'invalid' and this flag to true (used for status
	// information only).
	Oscillatory bool `protobuf:"varint,6,opt,name=oscillatory,proto3" json:"oscillatory,omitempty"`
	// (default=false) If true, the attribute to which the quality has been associated is beyond a
	// predefined range of values. The server shall decide if validity shall be set to invalid or
	// questionable (used for measurand information only). EXAMPLE A measured value may exceed a predefined
	// range, however the selected data type can still represent the value, for example the data type is a
	// 16-bit unsigned integer, the predefined range is 0 to 40 000, if the value is between 40 001 and 65
	// 535 it is considered to be out of range.
	OutOfRange bool `protobuf:"varint,7,opt,name=outOfRange,proto3" json:"outOfRange,omitempty"`
	// (default=false) If true, the value of the attribute to which the quality has been associated is
	// beyond the capability of being represented properly (used for measurand information only). EXAMPLE A
	// measured value may exceed the range that may be represented by the selected data type, for example
	// the data type is a 16-bit unsigned integer and the value exceeds 65 535.
	Overflow bool `protobuf:"varint,8,opt,name=overflow,proto3" json:"overflow,omitempty"`
}

func (x *DetailQual) Reset() {
	*x = DetailQual{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailQual) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailQual) ProtoMessage() {}

func (x *DetailQual) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailQual.ProtoReflect.Descriptor instead.
func (*DetailQual) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{11}
}

func (x *DetailQual) GetBadReference() bool {
	if x != nil {
		return x.BadReference
	}
	return false
}

func (x *DetailQual) GetFailure() bool {
	if x != nil {
		return x.Failure
	}
	return false
}

func (x *DetailQual) GetInaccurate() bool {
	if x != nil {
		return x.Inaccurate
	}
	return false
}

func (x *DetailQual) GetInconsistent() bool {
	if x != nil {
		return x.Inconsistent
	}
	return false
}

func (x *DetailQual) GetOldData() bool {
	if x != nil {
		return x.OldData
	}
	return false
}

func (x *DetailQual) GetOscillatory() bool {
	if x != nil {
		return x.Oscillatory
	}
	return false
}

func (x *DetailQual) GetOutOfRange() bool {
	if x != nil {
		return x.OutOfRange
	}
	return false
}

func (x *DetailQual) GetOverflow() bool {
	if x != nil {
		return x.Overflow
	}
	return false
}

type Optional_SourceKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value SourceKind `protobuf:"varint,1,opt,name=value,proto3,enum=commonmodule.SourceKind" json:"value,omitempty"`
}

func (x *Optional_SourceKind) Reset() {
	*x = Optional_SourceKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Optional_SourceKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optional_SourceKind) ProtoMessage() {}

func (x *Optional_SourceKind) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optional_SourceKind.ProtoReflect.Descriptor instead.
func (*Optional_SourceKind) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{12}
}

func (x *Optional_SourceKind) GetValue() SourceKind {
	if x != nil {
		return x.Value
	}
	return SourceKind_SourceKind_UNDEFINED
}

// Quality contains data that describe the quality of the data from the server. Quality of the data
// is also related to the mode of a logical node. Further details can be found in IEC 61850-7-4. The
// different quality attributes are <i>not</i> independent.The default value shall be applied if the
// functionality of the related attribute is not supported. The mapping may specify to exclude the
// attribute from the message if it is not supported or if the default value applies.
type Quality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Describes some reasons in case 'validity' is not 'good'.
	DetailQual *DetailQual `protobuf:"bytes,1,opt,name=detailQual,proto3" json:"detailQual,omitempty"`
	// (default=false) If true, further update of the value has been blocked by an operator. The value
	// shall be the information that was acquired before blocking. If this flag is set, then the
	// 'detailQual.oldData' shall also be set. The operator shall use the data attribute 'CDC.blkEna' to
	// block the update of the value. NOTE Both an operator as well as an automatic function may freeze
	// communication updating as well as input updating. In both cases, 'detailQual.oldData' will be set.
	// If the blocking is done by an operator, then this flag is set additionally, and an operator activity
	// is required to clear the condition.
	OperatorBlocked bool `protobuf:"varint,2,opt,name=operatorBlocked,proto3" json:"operatorBlocked,omitempty"`
	// (default=process) Defines the source of a value. NOTE 1 Substitution may be done locally or via
	// the communication services. In the second case, specific attributes with a FC=SV are used. NOTE 2
	// There are various means to clear a substitution. As an example, a substitution that was done
	// following an invalid condition may be cleared automatically if the invalid condition is cleared.
	// However, this is a local issue and therefore not within the scope of this standard.
	Source SourceKind `protobuf:"varint,3,opt,name=source,proto3,enum=commonmodule.SourceKind" json:"source,omitempty"`
	// (default=false) If true, the value is a test value. The processing of the test quality in the
	// client shall be as described in IEC 61850-7-4. This bit shall be completely independent from the
	// other bits within the quality descriptor.
	Test bool `protobuf:"varint,4,opt,name=test,proto3" json:"test,omitempty"`
	// Validity of the value, as condensed information for the client. In case this value is not
	// 'good', some reasons may be found in the 'detailQual'.
	Validity ValidityKind `protobuf:"varint,5,opt,name=validity,proto3,enum=commonmodule.ValidityKind" json:"validity,omitempty"`
}

func (x *Quality) Reset() {
	*x = Quality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quality) ProtoMessage() {}

func (x *Quality) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quality.ProtoReflect.Descriptor instead.
func (*Quality) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{13}
}

func (x *Quality) GetDetailQual() *DetailQual {
	if x != nil {
		return x.DetailQual
	}
	return nil
}

func (x *Quality) GetOperatorBlocked() bool {
	if x != nil {
		return x.OperatorBlocked
	}
	return false
}

func (x *Quality) GetSource() SourceKind {
	if x != nil {
		return x.Source
	}
	return SourceKind_SourceKind_UNDEFINED
}

func (x *Quality) GetTest() bool {
	if x != nil {
		return x.Test
	}
	return false
}

func (x *Quality) GetValidity() ValidityKind {
	if x != nil {
		return x.Validity
	}
	return ValidityKind_ValidityKind_UNDEFINED
}

type Optional_TimeAccuracyKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value TimeAccuracyKind `protobuf:"varint,1,opt,name=value,proto3,enum=commonmodule.TimeAccuracyKind" json:"value,omitempty"`
}

func (x *Optional_TimeAccuracyKind) Reset() {
	*x = Optional_TimeAccuracyKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Optional_TimeAccuracyKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optional_TimeAccuracyKind) ProtoMessage() {}

func (x *Optional_TimeAccuracyKind) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optional_TimeAccuracyKind.ProtoReflect.Descriptor instead.
func (*Optional_TimeAccuracyKind) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{14}
}

func (x *Optional_TimeAccuracyKind) GetValue() TimeAccuracyKind {
	if x != nil {
		return x.Value
	}
	return TimeAccuracyKind_TimeAccuracyKind_UNDEFINED
}

// Information about the quality of the time source of the sending IED.
type TimeQuality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, the time source of the sending device is unreliable and the value of the time stamp
	// shall be ignored.
	ClockFailure bool `protobuf:"varint,1,opt,name=clockFailure,proto3" json:"clockFailure,omitempty"`
	// If true, the time source of the sending device is not synchronised with the external UTC time.
	ClockNotSynchronized bool `protobuf:"varint,2,opt,name=clockNotSynchronized,proto3" json:"clockNotSynchronized,omitempty"`
	// If true, the value in 'P_Timestamp.SecondSinceEpoch' contains all leap seconds occurred.
	// Otherwise, it does not take into account the leap seconds that occurred before the initialization of
	// the time source of the device. Instead, the seconds since start of the epoch are calculated from the
	// current date assuming a constant day length of 86 400 seconds. Note: If a UTC time master clock is
	// used and accessible, this value should always be true.
	LeapSecondsKnown bool `protobuf:"varint,3,opt,name=leapSecondsKnown,proto3" json:"leapSecondsKnown,omitempty"`
	// Information about the quality of the time source of the sending IED.
	TimeAccuracy TimeAccuracyKind `protobuf:"varint,4,opt,name=timeAccuracy,proto3,enum=commonmodule.TimeAccuracyKind" json:"timeAccuracy,omitempty"`
}

func (x *TimeQuality) Reset() {
	*x = TimeQuality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeQuality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeQuality) ProtoMessage() {}

func (x *TimeQuality) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeQuality.ProtoReflect.Descriptor instead.
func (*TimeQuality) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{15}
}

func (x *TimeQuality) GetClockFailure() bool {
	if x != nil {
		return x.ClockFailure
	}
	return false
}

func (x *TimeQuality) GetClockNotSynchronized() bool {
	if x != nil {
		return x.ClockNotSynchronized
	}
	return false
}

func (x *TimeQuality) GetLeapSecondsKnown() bool {
	if x != nil {
		return x.LeapSecondsKnown
	}
	return false
}

func (x *TimeQuality) GetTimeAccuracy() TimeAccuracyKind {
	if x != nil {
		return x.TimeAccuracy
	}
	return TimeAccuracyKind_TimeAccuracyKind_UNDEFINED
}

// UTC time with the epoch of midnight (00:00:00) of 1970-01-01. The presentation is defined in the
// SCSMs.The NULL time stamp has all fields set to 0 (zero).The relation between a timestamp value, the
// synchronization of an internal time with an external time source (for example, UTC time), and other
// information related to time model are available as requirements in Clause 21.
type Timestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Second since epoch (1970-01-01T00:00:00Z)
	Seconds uint64 `protobuf:"varint,2,opt,name=seconds,proto3" json:"seconds,omitempty"`
	// IEC61850 time quality
	Tq *TimeQuality `protobuf:"bytes,3,opt,name=tq,proto3" json:"tq,omitempty"`
	// Partial (sub) second expressed in nanoseconds (10<sup>-9</sup> second).
	Nanoseconds uint32 `protobuf:"varint,4,opt,name=nanoseconds,proto3" json:"nanoseconds,omitempty"`
}

func (x *Timestamp) Reset() {
	*x = Timestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timestamp) ProtoMessage() {}

func (x *Timestamp) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timestamp.ProtoReflect.Descriptor instead.
func (*Timestamp) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{16}
}

func (x *Timestamp) GetSeconds() uint64 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *Timestamp) GetTq() *TimeQuality {
	if x != nil {
		return x.Tq
	}
	return nil
}

func (x *Timestamp) GetNanoseconds() uint32 {
	if x != nil {
		return x.Nanoseconds
	}
	return 0
}

// Measured value (MV)
type MV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value of the magnitude based on a deadband calculation from the instantaneous value 'instMag'.
	// The value of 'mag' shall be updated to the current instantaneous value 'instMag' when the value has
	// changed according to the configuration parameter 'db'. If 'db'=0, 'mag'='instMag'.NOTE 1 This value
	// is typically used to create reports for analogue values. Such a report sent "by exception" is not
	// comparable to the transfer of sampled measured values as supported by the CDC SAV.NOTE 2 This 'mag'
	// is not the same as 'mag' of the constructed attribute class 'Vector'.
	Mag float64 `protobuf:"fixed64,1,opt,name=mag,proto3" json:"mag,omitempty"`
	// Quality of the values in 'instMag', 'mag', 'range'.
	Q *Quality `protobuf:"bytes,2,opt,name=q,proto3" json:"q,omitempty"`
	// Timestamp of the last refresh of the value in 'mag' or of the last change of the value in any of
	// 'range' or 'q'.
	T *Timestamp `protobuf:"bytes,3,opt,name=t,proto3" json:"t,omitempty"`
	// Unit for: 'instMag', 'mag', 'subMag', 'rangeC'.
	Units *Unit `protobuf:"bytes,4,opt,name=units,proto3" json:"units,omitempty"`
}

func (x *MV) Reset() {
	*x = MV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MV) ProtoMessage() {}

func (x *MV) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MV.ProtoReflect.Descriptor instead.
func (*MV) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{17}
}

func (x *MV) GetMag() float64 {
	if x != nil {
		return x.Mag
	}
	return 0
}

func (x *MV) GetQ() *Quality {
	if x != nil {
		return x.Q
	}
	return nil
}

func (x *MV) GetT() *Timestamp {
	if x != nil {
		return x.T
	}
	return nil
}

func (x *MV) GetUnits() *Unit {
	if x != nil {
		return x.Units
	}
	return nil
}

// IEC61850 logical node.
type LogicalNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	IdentifiedObject *IdentifiedObject `protobuf:"bytes,1,opt,name=identifiedObject,proto3" json:"identifiedObject,omitempty"`
}

func (x *LogicalNode) Reset() {
	*x = LogicalNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicalNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalNode) ProtoMessage() {}

func (x *LogicalNode) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalNode.ProtoReflect.Descriptor instead.
func (*LogicalNode) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{18}
}

func (x *LogicalNode) GetIdentifiedObject() *IdentifiedObject {
	if x != nil {
		return x.IdentifiedObject
	}
	return nil
}

// LN: Generic process I/O   Name: GGIO
type AnalogEventAndStatusGGIO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	LogicalNode *LogicalNode `protobuf:"bytes,1,opt,name=logicalNode,proto3" json:"logicalNode,omitempty"`
	// Generic analogue input <i>n</i>.
	AnIn *MV `protobuf:"bytes,2,opt,name=AnIn,proto3" json:"AnIn,omitempty"`
	// Phase code
	Phase *Optional_PhaseCodeKind `protobuf:"bytes,3,opt,name=Phase,proto3" json:"Phase,omitempty"`
}

func (x *AnalogEventAndStatusGGIO) Reset() {
	*x = AnalogEventAndStatusGGIO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalogEventAndStatusGGIO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalogEventAndStatusGGIO) ProtoMessage() {}

func (x *AnalogEventAndStatusGGIO) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalogEventAndStatusGGIO.ProtoReflect.Descriptor instead.
func (*AnalogEventAndStatusGGIO) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{19}
}

func (x *AnalogEventAndStatusGGIO) GetLogicalNode() *LogicalNode {
	if x != nil {
		return x.LogicalNode
	}
	return nil
}

func (x *AnalogEventAndStatusGGIO) GetAnIn() *MV {
	if x != nil {
		return x.AnIn
	}
	return nil
}

func (x *AnalogEventAndStatusGGIO) GetPhase() *Optional_PhaseCodeKind {
	if x != nil {
		return x.Phase
	}
	return nil
}

// This is a root class similar to IdentifiedObject but without the mRID. The reason to separate
// the two classes is because the mRID may need to be defined as a separate key field for technology
// such as the DDS implementation.
type NamedObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MISSING DOCUMENTATION!!!
	Description *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// The name is any free human readable and possibly non unique text naming the object.
	Name *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *NamedObject) Reset() {
	*x = NamedObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamedObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedObject) ProtoMessage() {}

func (x *NamedObject) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedObject.ProtoReflect.Descriptor instead.
func (*NamedObject) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{20}
}

func (x *NamedObject) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *NamedObject) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

// The parts of a power system that are physical devices, electronic or mechanical.
type ApplicationSystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	NamedObject *NamedObject `protobuf:"bytes,1,opt,name=namedObject,proto3" json:"namedObject,omitempty"`
	// MISSING DOCUMENTATION!!!
	MRID string `protobuf:"bytes,2,opt,name=mRID,proto3" json:"mRID,omitempty"`
}

func (x *ApplicationSystem) Reset() {
	*x = ApplicationSystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationSystem) ProtoMessage() {}

func (x *ApplicationSystem) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationSystem.ProtoReflect.Descriptor instead.
func (*ApplicationSystem) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{21}
}

func (x *ApplicationSystem) GetNamedObject() *NamedObject {
	if x != nil {
		return x.NamedObject
	}
	return nil
}

func (x *ApplicationSystem) GetMRID() string {
	if x != nil {
		return x.MRID
	}
	return ""
}

// Analogue setting (FC=SP) (ASG_SP)
type ASG struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The value of the analogue setting.
	SetMag float64 `protobuf:"fixed64,1,opt,name=setMag,proto3" json:"setMag,omitempty"`
}

func (x *ASG) Reset() {
	*x = ASG{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ASG) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASG) ProtoMessage() {}

func (x *ASG) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASG.ProtoReflect.Descriptor instead.
func (*ASG) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{22}
}

func (x *ASG) GetSetMag() float64 {
	if x != nil {
		return x.SetMag
	}
	return 0
}

// Binary counter reading (BCR)
type BCR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Binary counter status represented as an integer value; wraps to 0 at the maximum or minimum
	// value of INT64.
	ActVal int64 `protobuf:"varint,1,opt,name=actVal,proto3" json:"actVal,omitempty"`
	// Quality of the values in 'actVal', 'frVal'.
	Q *Quality `protobuf:"bytes,2,opt,name=q,proto3" json:"q,omitempty"`
	// Timestamp of the last change of value in 'actVal' or 'q'.
	T *Timestamp `protobuf:"bytes,3,opt,name=t,proto3" json:"t,omitempty"`
}

func (x *BCR) Reset() {
	*x = BCR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BCR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BCR) ProtoMessage() {}

func (x *BCR) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BCR.ProtoReflect.Descriptor instead.
func (*BCR) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{23}
}

func (x *BCR) GetActVal() int64 {
	if x != nil {
		return x.ActVal
	}
	return 0
}

func (x *BCR) GetQ() *Quality {
	if x != nil {
		return x.Q
	}
	return nil
}

func (x *BCR) GetT() *Timestamp {
	if x != nil {
		return x.T
	}
	return nil
}

// Specialized 61850 SPS class
type StatusSPS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MISSING DOCUMENTATION!!!
	Q *Quality `protobuf:"bytes,1,opt,name=q,proto3" json:"q,omitempty"`
	// MISSING DOCUMENTATION!!!
	StVal bool `protobuf:"varint,2,opt,name=stVal,proto3" json:"stVal,omitempty"`
	// MISSING DOCUMENTATION!!!
	T *Timestamp `protobuf:"bytes,3,opt,name=t,proto3" json:"t,omitempty"`
}

func (x *StatusSPS) Reset() {
	*x = StatusSPS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusSPS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusSPS) ProtoMessage() {}

func (x *StatusSPS) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusSPS.ProtoReflect.Descriptor instead.
func (*StatusSPS) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{24}
}

func (x *StatusSPS) GetQ() *Quality {
	if x != nil {
		return x.Q
	}
	return nil
}

func (x *StatusSPS) GetStVal() bool {
	if x != nil {
		return x.StVal
	}
	return false
}

func (x *StatusSPS) GetT() *Timestamp {
	if x != nil {
		return x.T
	}
	return nil
}

// LN: Generic process I/O   Name: GGIO
type BooleanEventAndStatusGGIO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	LogicalNode *LogicalNode `protobuf:"bytes,1,opt,name=logicalNode,proto3" json:"logicalNode,omitempty"`
	// If true, indication <i>n</i> is present.
	Ind *StatusSPS `protobuf:"bytes,2,opt,name=Ind,proto3" json:"Ind,omitempty"`
	// Phase code
	Phase *Optional_PhaseCodeKind `protobuf:"bytes,3,opt,name=Phase,proto3" json:"Phase,omitempty"`
}

func (x *BooleanEventAndStatusGGIO) Reset() {
	*x = BooleanEventAndStatusGGIO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BooleanEventAndStatusGGIO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BooleanEventAndStatusGGIO) ProtoMessage() {}

func (x *BooleanEventAndStatusGGIO) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BooleanEventAndStatusGGIO.ProtoReflect.Descriptor instead.
func (*BooleanEventAndStatusGGIO) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{25}
}

func (x *BooleanEventAndStatusGGIO) GetLogicalNode() *LogicalNode {
	if x != nil {
		return x.LogicalNode
	}
	return nil
}

func (x *BooleanEventAndStatusGGIO) GetInd() *StatusSPS {
	if x != nil {
		return x.Ind
	}
	return nil
}

func (x *BooleanEventAndStatusGGIO) GetPhase() *Optional_PhaseCodeKind {
	if x != nil {
		return x.Phase
	}
	return nil
}

// Generic control message info.
type MessageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	IdentifiedObject *IdentifiedObject `protobuf:"bytes,1,opt,name=identifiedObject,proto3" json:"identifiedObject,omitempty"`
	// MISSING DOCUMENTATION!!!
	MessageTimeStamp *Timestamp `protobuf:"bytes,2,opt,name=messageTimeStamp,proto3" json:"messageTimeStamp,omitempty"`
}

func (x *MessageInfo) Reset() {
	*x = MessageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageInfo) ProtoMessage() {}

func (x *MessageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageInfo.ProtoReflect.Descriptor instead.
func (*MessageInfo) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{26}
}

func (x *MessageInfo) GetIdentifiedObject() *IdentifiedObject {
	if x != nil {
		return x.IdentifiedObject
	}
	return nil
}

func (x *MessageInfo) GetMessageTimeStamp() *Timestamp {
	if x != nil {
		return x.MessageTimeStamp
	}
	return nil
}

// Generic capability message info.
type CapabilityMessageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	MessageInfo *MessageInfo `protobuf:"bytes,1,opt,name=messageInfo,proto3" json:"messageInfo,omitempty"`
}

func (x *CapabilityMessageInfo) Reset() {
	*x = CapabilityMessageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapabilityMessageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapabilityMessageInfo) ProtoMessage() {}

func (x *CapabilityMessageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapabilityMessageInfo.ProtoReflect.Descriptor instead.
func (*CapabilityMessageInfo) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{27}
}

func (x *CapabilityMessageInfo) GetMessageInfo() *MessageInfo {
	if x != nil {
		return x.MessageInfo
	}
	return nil
}

// IEC61850-7-2 Service parameter for conditions checking
type CheckConditions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// InterlockCheck is used for the device to be controlled to check if other devices are in proper
	// state for the control command.  One example is that 2 circuit breakers on a busbar need to be
	// interlocked so one is open and one is closed, but not both on.
	InterlockCheck *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=interlockCheck,proto3" json:"interlockCheck,omitempty"`
	// To check if a device is synchrous to the system.
	SynchroCheck *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=synchroCheck,proto3" json:"synchroCheck,omitempty"`
}

func (x *CheckConditions) Reset() {
	*x = CheckConditions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckConditions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckConditions) ProtoMessage() {}

func (x *CheckConditions) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckConditions.ProtoReflect.Descriptor instead.
func (*CheckConditions) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{28}
}

func (x *CheckConditions) GetInterlockCheck() *wrapperspb.BoolValue {
	if x != nil {
		return x.InterlockCheck
	}
	return nil
}

func (x *CheckConditions) GetSynchroCheck() *wrapperspb.BoolValue {
	if x != nil {
		return x.SynchroCheck
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type ClearingTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MISSING DOCUMENTATION!!!
	Seconds uint64 `protobuf:"varint,2,opt,name=seconds,proto3" json:"seconds,omitempty"`
	// Partial (sub) second expressed in nanoseconds (10<sup>-9</sup> second).
	Nanoseconds uint32 `protobuf:"varint,3,opt,name=nanoseconds,proto3" json:"nanoseconds,omitempty"`
}

func (x *ClearingTime) Reset() {
	*x = ClearingTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearingTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearingTime) ProtoMessage() {}

func (x *ClearingTime) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearingTime.ProtoReflect.Descriptor instead.
func (*ClearingTime) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{29}
}

func (x *ClearingTime) GetSeconds() uint64 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *ClearingTime) GetNanoseconds() uint32 {
	if x != nil {
		return x.Nanoseconds
	}
	return 0
}

// Vector definition (Vector)
type Vector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (range=[-180...180]) Angle of the complex value (Unit.SIUnit='deg' and Unit.multiplier='');
	// angle reference is defined in the context where this type is used.
	Ang *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=ang,proto3" json:"ang,omitempty"`
	// Magnitude of the complex value.
	Mag float64 `protobuf:"fixed64,2,opt,name=mag,proto3" json:"mag,omitempty"`
}

func (x *Vector) Reset() {
	*x = Vector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector) ProtoMessage() {}

func (x *Vector) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector.ProtoReflect.Descriptor instead.
func (*Vector) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{30}
}

func (x *Vector) GetAng() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Ang
	}
	return nil
}

func (x *Vector) GetMag() float64 {
	if x != nil {
		return x.Mag
	}
	return 0
}

// Complex measured value (CMV)
type CMV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Complex value based on a deadband calculation from the instantaneous value 'instCVal.mag'. The
	// deadband calculation is done both on 'instCVal.mag' (based on 'db') and on 'instCVal.ang' (based on
	// 'dbAng'), independently. See  'MV.mag'.
	CVal *Vector `protobuf:"bytes,1,opt,name=cVal,proto3" json:"cVal,omitempty"`
	// Quality of the values in 'instCVal', 'cVal', 'range', ‘rangeAng’.
	Q *Quality `protobuf:"bytes,2,opt,name=q,proto3" json:"q,omitempty"`
	// Timestamp of the last refresh of the value in 'cVal' or of the last change of the value in any
	// of 'range', 'rangeAng' or 'q'.
	T *Timestamp `protobuf:"bytes,3,opt,name=t,proto3" json:"t,omitempty"`
}

func (x *CMV) Reset() {
	*x = CMV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMV) ProtoMessage() {}

func (x *CMV) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMV.ProtoReflect.Descriptor instead.
func (*CMV) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{31}
}

func (x *CMV) GetCVal() *Vector {
	if x != nil {
		return x.CVal
	}
	return nil
}

func (x *CMV) GetQ() *Quality {
	if x != nil {
		return x.Q
	}
	return nil
}

func (x *CMV) GetT() *Timestamp {
	if x != nil {
		return x.T
	}
	return nil
}

// Asset representation of a ConductingEquipment.
type ConductingEquipment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	NamedObject *NamedObject `protobuf:"bytes,1,opt,name=namedObject,proto3" json:"namedObject,omitempty"`
	// MISSING DOCUMENTATION!!!
	MRID string `protobuf:"bytes,2,opt,name=mRID,proto3" json:"mRID,omitempty"`
}

func (x *ConductingEquipment) Reset() {
	*x = ConductingEquipment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConductingEquipment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConductingEquipment) ProtoMessage() {}

func (x *ConductingEquipment) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConductingEquipment.ProtoReflect.Descriptor instead.
func (*ConductingEquipment) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{32}
}

func (x *ConductingEquipment) GetNamedObject() *NamedObject {
	if x != nil {
		return x.NamedObject
	}
	return nil
}

func (x *ConductingEquipment) GetMRID() string {
	if x != nil {
		return x.MRID
	}
	return ""
}

// An AC electrical connection point to a piece of conducting equipment. Terminals are connected at
// physical connection points called connectivity nodes.
type Terminal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ACDCTerminal *ACDCTerminal `protobuf:"bytes,1,opt,name=aCDCTerminal,proto3" json:"aCDCTerminal,omitempty"`
	// Represents the normal network phasing condition. If the attribute is missing three phases (ABC
	// or ABCN) shall be assumed.
	Phases *Optional_PhaseCodeKind `protobuf:"bytes,2,opt,name=phases,proto3" json:"phases,omitempty"`
}

func (x *Terminal) Reset() {
	*x = Terminal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Terminal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Terminal) ProtoMessage() {}

func (x *Terminal) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Terminal.ProtoReflect.Descriptor instead.
func (*Terminal) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{33}
}

func (x *Terminal) GetACDCTerminal() *ACDCTerminal {
	if x != nil {
		return x.ACDCTerminal
	}
	return nil
}

func (x *Terminal) GetPhases() *Optional_PhaseCodeKind {
	if x != nil {
		return x.Phases
	}
	return nil
}

// Reading associated with an equipment such as a recloser.
type ConductingEquipmentTerminalReading struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MISSING DOCUMENTATION!!!
	Terminal *Terminal `protobuf:"bytes,1,opt,name=terminal,proto3" json:"terminal,omitempty"`
}

func (x *ConductingEquipmentTerminalReading) Reset() {
	*x = ConductingEquipmentTerminalReading{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConductingEquipmentTerminalReading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConductingEquipmentTerminalReading) ProtoMessage() {}

func (x *ConductingEquipmentTerminalReading) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConductingEquipmentTerminalReading.ProtoReflect.Descriptor instead.
func (*ConductingEquipmentTerminalReading) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{34}
}

func (x *ConductingEquipmentTerminalReading) GetTerminal() *Terminal {
	if x != nil {
		return x.Terminal
	}
	return nil
}

// <<statistics>> Controllable analogue process value (APC)
type ControlAPC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Service parameter that determines the control activity.
	CtlVal float64 `protobuf:"fixed64,1,opt,name=ctlVal,proto3" json:"ctlVal,omitempty"`
}

func (x *ControlAPC) Reset() {
	*x = ControlAPC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlAPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlAPC) ProtoMessage() {}

func (x *ControlAPC) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlAPC.ProtoReflect.Descriptor instead.
func (*ControlAPC) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{35}
}

func (x *ControlAPC) GetCtlVal() float64 {
	if x != nil {
		return x.CtlVal
	}
	return 0
}

// Specialized DPC 61850 CDC class  Because objects in OpenFMB are optional fields, OpenFMB has
// elected to send a "True" or "False" control state when a DPC state is sent. In a poll-based system,
// the DPC will have two Booleans for "close" and "open", allowing a 'no-op' state if neither are true,
// and a winning state (usually open) if both are true. OpenFMB simply elects to not populate the
// control when no op is required. All state being sent will either be commanding a close or open for
// the PhaseDPS &amp; StatusDPS.
type ControlDPC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Service parameter that determines the control activity ('false' for off, 'true' for on).
	CtlVal bool `protobuf:"varint,1,opt,name=ctlVal,proto3" json:"ctlVal,omitempty"`
}

func (x *ControlDPC) Reset() {
	*x = ControlDPC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlDPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlDPC) ProtoMessage() {}

func (x *ControlDPC) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlDPC.ProtoReflect.Descriptor instead.
func (*ControlDPC) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{36}
}

func (x *ControlDPC) GetCtlVal() bool {
	if x != nil {
		return x.CtlVal
	}
	return false
}

// UTC time with the epoch of midnight (00:00:00) of 1970-01-01. The presentation is defined in the
// SCSMs.The NULL time stamp has all fields set to 0 (zero).The relation between a timestamp value, the
// synchronization of an internal time with an external time source (for example, UTC time), and other
// information related to time model are available as requirements in Clause 21.  ControlTimestamp is a
// timestamp for future time point so it does not contain the time quality as the one contained in the
// normal Timestamp data type.
type ControlTimestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Second since epoch (1970-01-01T00:00:00Z)
	Seconds uint64 `protobuf:"varint,2,opt,name=seconds,proto3" json:"seconds,omitempty"`
	// Partial (sub) second expressed in nanoseconds (10<sup>-9</sup> second).
	Nanoseconds uint32 `protobuf:"varint,3,opt,name=nanoseconds,proto3" json:"nanoseconds,omitempty"`
}

func (x *ControlTimestamp) Reset() {
	*x = ControlTimestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlTimestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlTimestamp) ProtoMessage() {}

func (x *ControlTimestamp) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlTimestamp.ProtoReflect.Descriptor instead.
func (*ControlTimestamp) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{37}
}

func (x *ControlTimestamp) GetSeconds() uint64 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *ControlTimestamp) GetNanoseconds() uint32 {
	if x != nil {
		return x.Nanoseconds
	}
	return 0
}

type Optional_ScheduleParameterKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value ScheduleParameterKind `protobuf:"varint,1,opt,name=value,proto3,enum=commonmodule.ScheduleParameterKind" json:"value,omitempty"`
}

func (x *Optional_ScheduleParameterKind) Reset() {
	*x = Optional_ScheduleParameterKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Optional_ScheduleParameterKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optional_ScheduleParameterKind) ProtoMessage() {}

func (x *Optional_ScheduleParameterKind) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optional_ScheduleParameterKind.ProtoReflect.Descriptor instead.
func (*Optional_ScheduleParameterKind) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{38}
}

func (x *Optional_ScheduleParameterKind) GetValue() ScheduleParameterKind {
	if x != nil {
		return x.Value
	}
	return ScheduleParameterKind_ScheduleParameterKind_UNDEFINED
}

// Grid connect mode kind
type ENG_ScheduleParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Schedule parameter type
	ScheduleParameterType ScheduleParameterKind `protobuf:"varint,1,opt,name=scheduleParameterType,proto3,enum=commonmodule.ScheduleParameterKind" json:"scheduleParameterType,omitempty"`
	// MISSING DOCUMENTATION!!!
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ENG_ScheduleParameter) Reset() {
	*x = ENG_ScheduleParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ENG_ScheduleParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ENG_ScheduleParameter) ProtoMessage() {}

func (x *ENG_ScheduleParameter) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ENG_ScheduleParameter.ProtoReflect.Descriptor instead.
func (*ENG_ScheduleParameter) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{39}
}

func (x *ENG_ScheduleParameter) GetScheduleParameterType() ScheduleParameterKind {
	if x != nil {
		return x.ScheduleParameterType
	}
	return ScheduleParameterKind_ScheduleParameterKind_UNDEFINED
}

func (x *ENG_ScheduleParameter) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Point definition (Point)
type SchedulePoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Schedule parameter
	ScheduleParameter []*ENG_ScheduleParameter `protobuf:"bytes,1,rep,name=scheduleParameter,proto3" json:"scheduleParameter,omitempty"`
	// Start time
	StartTime *ControlTimestamp `protobuf:"bytes,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
}

func (x *SchedulePoint) Reset() {
	*x = SchedulePoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedulePoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulePoint) ProtoMessage() {}

func (x *SchedulePoint) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulePoint.ProtoReflect.Descriptor instead.
func (*SchedulePoint) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{40}
}

func (x *SchedulePoint) GetScheduleParameter() []*ENG_ScheduleParameter {
	if x != nil {
		return x.ScheduleParameter
	}
	return nil
}

func (x *SchedulePoint) GetStartTime() *ControlTimestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

// Curve shape setting (FC=SP) (CSG_SP)
type ScheduleCSG struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The array with the points specifying a time schedule
	SchPts []*SchedulePoint `protobuf:"bytes,1,rep,name=schPts,proto3" json:"schPts,omitempty"`
}

func (x *ScheduleCSG) Reset() {
	*x = ScheduleCSG{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleCSG) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleCSG) ProtoMessage() {}

func (x *ScheduleCSG) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleCSG.ProtoReflect.Descriptor instead.
func (*ScheduleCSG) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{41}
}

func (x *ScheduleCSG) GetSchPts() []*SchedulePoint {
	if x != nil {
		return x.SchPts
	}
	return nil
}

// OpenFMB specialization for control schedule using:  LN: Schedule   Name: FSCH
type ControlScheduleFSCH struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Analog CSG
	ValACSG *ScheduleCSG `protobuf:"bytes,1,opt,name=ValACSG,proto3" json:"ValACSG,omitempty"`
}

func (x *ControlScheduleFSCH) Reset() {
	*x = ControlScheduleFSCH{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlScheduleFSCH) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlScheduleFSCH) ProtoMessage() {}

func (x *ControlScheduleFSCH) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlScheduleFSCH.ProtoReflect.Descriptor instead.
func (*ControlScheduleFSCH) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{42}
}

func (x *ControlScheduleFSCH) GetValACSG() *ScheduleCSG {
	if x != nil {
		return x.ValACSG
	}
	return nil
}

// OpenFMB specialization for logical node control
type LogicalNodeForControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	LogicalNode *LogicalNode `protobuf:"bytes,1,opt,name=logicalNode,proto3" json:"logicalNode,omitempty"`
}

func (x *LogicalNodeForControl) Reset() {
	*x = LogicalNodeForControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicalNodeForControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalNodeForControl) ProtoMessage() {}

func (x *LogicalNodeForControl) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalNodeForControl.ProtoReflect.Descriptor instead.
func (*LogicalNodeForControl) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{43}
}

func (x *LogicalNodeForControl) GetLogicalNode() *LogicalNode {
	if x != nil {
		return x.LogicalNode
	}
	return nil
}

// LN: Schedule controller   Name: FSCC  F:    Function (generic) SC:  Schedule Controller C:
// Control (execution)
type ControlFSCC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	LogicalNodeForControl *LogicalNodeForControl `protobuf:"bytes,1,opt,name=logicalNodeForControl,proto3" json:"logicalNodeForControl,omitempty"`
	// MISSING DOCUMENTATION!!!
	ControlScheduleFSCH *ControlScheduleFSCH `protobuf:"bytes,2,opt,name=controlScheduleFSCH,proto3" json:"controlScheduleFSCH,omitempty"`
	// MISSING DOCUMENTATION!!!
	IslandControlScheduleFSCH *ControlScheduleFSCH `protobuf:"bytes,3,opt,name=islandControlScheduleFSCH,proto3" json:"islandControlScheduleFSCH,omitempty"`
}

func (x *ControlFSCC) Reset() {
	*x = ControlFSCC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlFSCC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlFSCC) ProtoMessage() {}

func (x *ControlFSCC) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlFSCC.ProtoReflect.Descriptor instead.
func (*ControlFSCC) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{44}
}

func (x *ControlFSCC) GetLogicalNodeForControl() *LogicalNodeForControl {
	if x != nil {
		return x.LogicalNodeForControl
	}
	return nil
}

func (x *ControlFSCC) GetControlScheduleFSCH() *ControlScheduleFSCH {
	if x != nil {
		return x.ControlScheduleFSCH
	}
	return nil
}

func (x *ControlFSCC) GetIslandControlScheduleFSCH() *ControlScheduleFSCH {
	if x != nil {
		return x.IslandControlScheduleFSCH
	}
	return nil
}

// &lt;&lt;statistics&gt;&gt; Controllable integer status (INC)
type ControlINC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Service parameter that determines the control activity.
	CtlVal int32 `protobuf:"varint,1,opt,name=ctlVal,proto3" json:"ctlVal,omitempty"`
}

func (x *ControlINC) Reset() {
	*x = ControlINC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlINC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlINC) ProtoMessage() {}

func (x *ControlINC) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlINC.ProtoReflect.Descriptor instead.
func (*ControlINC) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{45}
}

func (x *ControlINC) GetCtlVal() int32 {
	if x != nil {
		return x.CtlVal
	}
	return 0
}

// Integer status setting (FC=SP) (ING_SP)
type ControlING struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The value of the status setting.
	SetVal int32 `protobuf:"varint,1,opt,name=setVal,proto3" json:"setVal,omitempty"`
	// Unit for 'setVal', 'minVal', 'maxVal', 'stepSize'.
	Units *Unit `protobuf:"bytes,2,opt,name=units,proto3" json:"units,omitempty"`
}

func (x *ControlING) Reset() {
	*x = ControlING{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlING) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlING) ProtoMessage() {}

func (x *ControlING) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlING.ProtoReflect.Descriptor instead.
func (*ControlING) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{46}
}

func (x *ControlING) GetSetVal() int32 {
	if x != nil {
		return x.SetVal
	}
	return 0
}

func (x *ControlING) GetUnits() *Unit {
	if x != nil {
		return x.Units
	}
	return nil
}

// &lt;&lt;statistics&gt;&gt; Integer controlled step position information (ISC)
type ControlISC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Service parameter that determines the control activity.
	CtlVal int32 `protobuf:"varint,1,opt,name=ctlVal,proto3" json:"ctlVal,omitempty"`
}

func (x *ControlISC) Reset() {
	*x = ControlISC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlISC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlISC) ProtoMessage() {}

func (x *ControlISC) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlISC.ProtoReflect.Descriptor instead.
func (*ControlISC) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{47}
}

func (x *ControlISC) GetCtlVal() int32 {
	if x != nil {
		return x.CtlVal
	}
	return 0
}

// Generic control message info.
type ControlMessageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	MessageInfo *MessageInfo `protobuf:"bytes,1,opt,name=messageInfo,proto3" json:"messageInfo,omitempty"`
}

func (x *ControlMessageInfo) Reset() {
	*x = ControlMessageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlMessageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlMessageInfo) ProtoMessage() {}

func (x *ControlMessageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlMessageInfo.ProtoReflect.Descriptor instead.
func (*ControlMessageInfo) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{48}
}

func (x *ControlMessageInfo) GetMessageInfo() *MessageInfo {
	if x != nil {
		return x.MessageInfo
	}
	return nil
}

// Controllable single point (SPC)
type ControlSPC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Service parameter that determines the control activity ('false' for off or deactivation, 'true'
	// for on or activation).
	CtlVal bool `protobuf:"varint,1,opt,name=ctlVal,proto3" json:"ctlVal,omitempty"`
}

func (x *ControlSPC) Reset() {
	*x = ControlSPC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlSPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlSPC) ProtoMessage() {}

func (x *ControlSPC) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlSPC.ProtoReflect.Descriptor instead.
func (*ControlSPC) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{49}
}

func (x *ControlSPC) GetCtlVal() bool {
	if x != nil {
		return x.CtlVal
	}
	return false
}

// The value of a control command which could either be a setpoint or a control schedule in curve.
// The attribute modBlk is used to tag out a device. if it is TRUE, any setpoints and control schedule
// in a message payload should be ignored.   It should also be presented in a status profile.  Any
// modBlk value change (i.e. TRUE to FALSE and vice versa) should trigger an event.
type ControlValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	IdentifiedObject *IdentifiedObject `protobuf:"bytes,1,opt,name=identifiedObject,proto3" json:"identifiedObject,omitempty"`
	// The attribute modBlk is used to tag out a device. If it is TRUE, any setpoints and control in a
	// message payload should be ignored.   It should also be presented in a status profile.  Any modBlk
	// value change (i.e. TRUE to FALSE and vice versa) should trigger an event.
	ModBlk *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=modBlk,proto3" json:"modBlk,omitempty"`
	// If true, reset the device before executing any other controls.
	Reset_ *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=reset,proto3" json:"reset,omitempty"`
}

func (x *ControlValue) Reset() {
	*x = ControlValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlValue) ProtoMessage() {}

func (x *ControlValue) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlValue.ProtoReflect.Descriptor instead.
func (*ControlValue) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{50}
}

func (x *ControlValue) GetIdentifiedObject() *IdentifiedObject {
	if x != nil {
		return x.IdentifiedObject
	}
	return nil
}

func (x *ControlValue) GetModBlk() *wrapperspb.BoolValue {
	if x != nil {
		return x.ModBlk
	}
	return nil
}

func (x *ControlValue) GetReset_() *wrapperspb.BoolValue {
	if x != nil {
		return x.Reset_
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type CumulativeTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MISSING DOCUMENTATION!!!
	Seconds uint64 `protobuf:"varint,2,opt,name=seconds,proto3" json:"seconds,omitempty"`
	// Partial (sub) second expressed in nanoseconds (10<sup>-9</sup> second).
	Nanoseconds uint32 `protobuf:"varint,3,opt,name=nanoseconds,proto3" json:"nanoseconds,omitempty"`
}

func (x *CumulativeTime) Reset() {
	*x = CumulativeTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CumulativeTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CumulativeTime) ProtoMessage() {}

func (x *CumulativeTime) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CumulativeTime.ProtoReflect.Descriptor instead.
func (*CumulativeTime) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{51}
}

func (x *CumulativeTime) GetSeconds() uint64 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *CumulativeTime) GetNanoseconds() uint32 {
	if x != nil {
		return x.Nanoseconds
	}
	return 0
}

// Interval between two date and time points.
type DateTimeInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// End date and time of this interval.
	End *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=end,proto3" json:"end,omitempty"`
	// Start date and time of this interval.
	Start *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"`
}

func (x *DateTimeInterval) Reset() {
	*x = DateTimeInterval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateTimeInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateTimeInterval) ProtoMessage() {}

func (x *DateTimeInterval) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateTimeInterval.ProtoReflect.Descriptor instead.
func (*DateTimeInterval) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{52}
}

func (x *DateTimeInterval) GetEnd() *wrapperspb.Int64Value {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *DateTimeInterval) GetStart() *wrapperspb.Int64Value {
	if x != nil {
		return x.Start
	}
	return nil
}

// Phase to phase related measured values of a three-phase system (DEL)
type DEL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value of phase A to phase B measurement.
	PhsAB *CMV `protobuf:"bytes,1,opt,name=phsAB,proto3" json:"phsAB,omitempty"`
	// Value of phase B to phase C measurement.
	PhsBC *CMV `protobuf:"bytes,2,opt,name=phsBC,proto3" json:"phsBC,omitempty"`
	// Value of phase C to phase A measurement.
	PhsCA *CMV `protobuf:"bytes,3,opt,name=phsCA,proto3" json:"phsCA,omitempty"`
}

func (x *DEL) Reset() {
	*x = DEL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DEL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DEL) ProtoMessage() {}

func (x *DEL) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DEL.ProtoReflect.Descriptor instead.
func (*DEL) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{53}
}

func (x *DEL) GetPhsAB() *CMV {
	if x != nil {
		return x.PhsAB
	}
	return nil
}

func (x *DEL) GetPhsBC() *CMV {
	if x != nil {
		return x.PhsBC
	}
	return nil
}

func (x *DEL) GetPhsCA() *CMV {
	if x != nil {
		return x.PhsCA
	}
	return nil
}

// [OpenFMB CDC extension] Per Phase DPC. Because objects in OpenFMB are optional fields, OpenFMB
// has elected to send a "True" or "False" control state when a DPC state is sent. In a poll-based
// system, the DPC will have two Booleans for "close" and "open", allowing a 'no-op' state if neither
// are true, and a winning state (usually open) if both are true. OpenFMB simply elects to not populate
// the control when no op is required. All state being sent will either be commanding a close or open
// for the PhaseDPS &amp; StatusDPS.
type PhaseDPC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 3 Phase control.
	Phs3 *ControlDPC `protobuf:"bytes,1,opt,name=phs3,proto3" json:"phs3,omitempty"`
	// Phase A control.
	PhsA *ControlDPC `protobuf:"bytes,2,opt,name=phsA,proto3" json:"phsA,omitempty"`
	// Phase B control.
	PhsB *ControlDPC `protobuf:"bytes,3,opt,name=phsB,proto3" json:"phsB,omitempty"`
	// Phase C control.
	PhsC *ControlDPC `protobuf:"bytes,4,opt,name=phsC,proto3" json:"phsC,omitempty"`
}

func (x *PhaseDPC) Reset() {
	*x = PhaseDPC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhaseDPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhaseDPC) ProtoMessage() {}

func (x *PhaseDPC) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhaseDPC.ProtoReflect.Descriptor instead.
func (*PhaseDPC) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{54}
}

func (x *PhaseDPC) GetPhs3() *ControlDPC {
	if x != nil {
		return x.Phs3
	}
	return nil
}

func (x *PhaseDPC) GetPhsA() *ControlDPC {
	if x != nil {
		return x.PhsA
	}
	return nil
}

func (x *PhaseDPC) GetPhsB() *ControlDPC {
	if x != nil {
		return x.PhsB
	}
	return nil
}

func (x *PhaseDPC) GetPhsC() *ControlDPC {
	if x != nil {
		return x.PhsC
	}
	return nil
}

// Reclose enabled
type DiscreteControlXCBR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	LogicalNodeForControl *LogicalNodeForControl `protobuf:"bytes,1,opt,name=logicalNodeForControl,proto3" json:"logicalNodeForControl,omitempty"`
	// MISSING DOCUMENTATION!!!
	Pos *PhaseDPC `protobuf:"bytes,2,opt,name=Pos,proto3" json:"Pos,omitempty"`
	// Protection mode such as a group setting or pre-defined curve profile. It is usually pre-defined
	// by a circuit segment service.
	ProtectionMode *ControlINC `protobuf:"bytes,3,opt,name=ProtectionMode,proto3" json:"ProtectionMode,omitempty"`
	// MISSING DOCUMENTATION!!!
	RecloseEnabled *ControlSPC `protobuf:"bytes,4,opt,name=RecloseEnabled,proto3" json:"RecloseEnabled,omitempty"`
	// MISSING DOCUMENTATION!!!
	ResetProtectionPickup *ControlSPC `protobuf:"bytes,5,opt,name=ResetProtectionPickup,proto3" json:"ResetProtectionPickup,omitempty"`
}

func (x *DiscreteControlXCBR) Reset() {
	*x = DiscreteControlXCBR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscreteControlXCBR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscreteControlXCBR) ProtoMessage() {}

func (x *DiscreteControlXCBR) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscreteControlXCBR.ProtoReflect.Descriptor instead.
func (*DiscreteControlXCBR) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{55}
}

func (x *DiscreteControlXCBR) GetLogicalNodeForControl() *LogicalNodeForControl {
	if x != nil {
		return x.LogicalNodeForControl
	}
	return nil
}

func (x *DiscreteControlXCBR) GetPos() *PhaseDPC {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *DiscreteControlXCBR) GetProtectionMode() *ControlINC {
	if x != nil {
		return x.ProtectionMode
	}
	return nil
}

func (x *DiscreteControlXCBR) GetRecloseEnabled() *ControlSPC {
	if x != nil {
		return x.RecloseEnabled
	}
	return nil
}

func (x *DiscreteControlXCBR) GetResetProtectionPickup() *ControlSPC {
	if x != nil {
		return x.ResetProtectionPickup
	}
	return nil
}

// Generic user of energy - a  point of consumption on the power system model.
type EnergyConsumer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ConductingEquipment *ConductingEquipment `protobuf:"bytes,1,opt,name=conductingEquipment,proto3" json:"conductingEquipment,omitempty"`
	// MISSING DOCUMENTATION!!!
	OperatingLimit *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=operatingLimit,proto3" json:"operatingLimit,omitempty"`
}

func (x *EnergyConsumer) Reset() {
	*x = EnergyConsumer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnergyConsumer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnergyConsumer) ProtoMessage() {}

func (x *EnergyConsumer) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnergyConsumer.ProtoReflect.Descriptor instead.
func (*EnergyConsumer) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{56}
}

func (x *EnergyConsumer) GetConductingEquipment() *ConductingEquipment {
	if x != nil {
		return x.ConductingEquipment
	}
	return nil
}

func (x *EnergyConsumer) GetOperatingLimit() *wrapperspb.StringValue {
	if x != nil {
		return x.OperatingLimit
	}
	return nil
}

type Optional_CalcMethodKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value CalcMethodKind `protobuf:"varint,1,opt,name=value,proto3,enum=commonmodule.CalcMethodKind" json:"value,omitempty"`
}

func (x *Optional_CalcMethodKind) Reset() {
	*x = Optional_CalcMethodKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Optional_CalcMethodKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optional_CalcMethodKind) ProtoMessage() {}

func (x *Optional_CalcMethodKind) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optional_CalcMethodKind.ProtoReflect.Descriptor instead.
func (*Optional_CalcMethodKind) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{57}
}

func (x *Optional_CalcMethodKind) GetValue() CalcMethodKind {
	if x != nil {
		return x.Value
	}
	return CalcMethodKind_CalcMethodKind_UNDEFINED
}

// Calc method kind
type ENG_CalcMethodKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The value of the status setting.
	SetVal CalcMethodKind `protobuf:"varint,1,opt,name=setVal,proto3,enum=commonmodule.CalcMethodKind" json:"setVal,omitempty"`
}

func (x *ENG_CalcMethodKind) Reset() {
	*x = ENG_CalcMethodKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ENG_CalcMethodKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ENG_CalcMethodKind) ProtoMessage() {}

func (x *ENG_CalcMethodKind) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ENG_CalcMethodKind.ProtoReflect.Descriptor instead.
func (*ENG_CalcMethodKind) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{58}
}

func (x *ENG_CalcMethodKind) GetSetVal() CalcMethodKind {
	if x != nil {
		return x.SetVal
	}
	return CalcMethodKind_CalcMethodKind_UNDEFINED
}

type Optional_GridConnectModeKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value GridConnectModeKind `protobuf:"varint,1,opt,name=value,proto3,enum=commonmodule.GridConnectModeKind" json:"value,omitempty"`
}

func (x *Optional_GridConnectModeKind) Reset() {
	*x = Optional_GridConnectModeKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Optional_GridConnectModeKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optional_GridConnectModeKind) ProtoMessage() {}

func (x *Optional_GridConnectModeKind) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optional_GridConnectModeKind.ProtoReflect.Descriptor instead.
func (*Optional_GridConnectModeKind) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{59}
}

func (x *Optional_GridConnectModeKind) GetValue() GridConnectModeKind {
	if x != nil {
		return x.Value
	}
	return GridConnectModeKind_GridConnectModeKind_UNDEFINED
}

// Grid connect mode kind
type ENG_GridConnectModeKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The value of the status setting.
	SetVal GridConnectModeKind `protobuf:"varint,1,opt,name=setVal,proto3,enum=commonmodule.GridConnectModeKind" json:"setVal,omitempty"`
	// MISSING DOCUMENTATION!!!
	SetValExtension *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=setValExtension,proto3" json:"setValExtension,omitempty"`
}

func (x *ENG_GridConnectModeKind) Reset() {
	*x = ENG_GridConnectModeKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ENG_GridConnectModeKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ENG_GridConnectModeKind) ProtoMessage() {}

func (x *ENG_GridConnectModeKind) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ENG_GridConnectModeKind.ProtoReflect.Descriptor instead.
func (*ENG_GridConnectModeKind) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{60}
}

func (x *ENG_GridConnectModeKind) GetSetVal() GridConnectModeKind {
	if x != nil {
		return x.SetVal
	}
	return GridConnectModeKind_GridConnectModeKind_UNDEFINED
}

func (x *ENG_GridConnectModeKind) GetSetValExtension() *wrapperspb.StringValue {
	if x != nil {
		return x.SetValExtension
	}
	return nil
}

type Optional_PFSignKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value PFSignKind `protobuf:"varint,1,opt,name=value,proto3,enum=commonmodule.PFSignKind" json:"value,omitempty"`
}

func (x *Optional_PFSignKind) Reset() {
	*x = Optional_PFSignKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Optional_PFSignKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optional_PFSignKind) ProtoMessage() {}

func (x *Optional_PFSignKind) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optional_PFSignKind.ProtoReflect.Descriptor instead.
func (*Optional_PFSignKind) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{61}
}

func (x *Optional_PFSignKind) GetValue() PFSignKind {
	if x != nil {
		return x.Value
	}
	return PFSignKind_PFSignKind_UNDEFINED
}

// Enumerated status setting (FC=SP) (ENG_SP)
type ENG_PFSignKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The value of the status setting.
	SetVal PFSignKind `protobuf:"varint,1,opt,name=setVal,proto3,enum=commonmodule.PFSignKind" json:"setVal,omitempty"`
}

func (x *ENG_PFSignKind) Reset() {
	*x = ENG_PFSignKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ENG_PFSignKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ENG_PFSignKind) ProtoMessage() {}

func (x *ENG_PFSignKind) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ENG_PFSignKind.ProtoReflect.Descriptor instead.
func (*ENG_PFSignKind) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{62}
}

func (x *ENG_PFSignKind) GetSetVal() PFSignKind {
	if x != nil {
		return x.SetVal
	}
	return PFSignKind_PFSignKind_UNDEFINED
}

type Optional_BehaviourModeKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value BehaviourModeKind `protobuf:"varint,1,opt,name=value,proto3,enum=commonmodule.BehaviourModeKind" json:"value,omitempty"`
}

func (x *Optional_BehaviourModeKind) Reset() {
	*x = Optional_BehaviourModeKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Optional_BehaviourModeKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optional_BehaviourModeKind) ProtoMessage() {}

func (x *Optional_BehaviourModeKind) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optional_BehaviourModeKind.ProtoReflect.Descriptor instead.
func (*Optional_BehaviourModeKind) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{63}
}

func (x *Optional_BehaviourModeKind) GetValue() BehaviourModeKind {
	if x != nil {
		return x.Value
	}
	return BehaviourModeKind_BehaviourModeKind_UNDEFINED
}

// Behavior mode kind. ENS stands for Enumerated status
type ENS_BehaviourModeKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Quality of the value in 'stVal'.
	Q *Quality `protobuf:"bytes,1,opt,name=q,proto3" json:"q,omitempty"`
	// Value of the data.
	StVal BehaviourModeKind `protobuf:"varint,2,opt,name=stVal,proto3,enum=commonmodule.BehaviourModeKind" json:"stVal,omitempty"`
	// Timestamp of the last change or update event of 'stVal' or the last change of value in 'q'.
	T *Timestamp `protobuf:"bytes,3,opt,name=t,proto3" json:"t,omitempty"`
}

func (x *ENS_BehaviourModeKind) Reset() {
	*x = ENS_BehaviourModeKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ENS_BehaviourModeKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ENS_BehaviourModeKind) ProtoMessage() {}

func (x *ENS_BehaviourModeKind) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ENS_BehaviourModeKind.ProtoReflect.Descriptor instead.
func (*ENS_BehaviourModeKind) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{64}
}

func (x *ENS_BehaviourModeKind) GetQ() *Quality {
	if x != nil {
		return x.Q
	}
	return nil
}

func (x *ENS_BehaviourModeKind) GetStVal() BehaviourModeKind {
	if x != nil {
		return x.StVal
	}
	return BehaviourModeKind_BehaviourModeKind_UNDEFINED
}

func (x *ENS_BehaviourModeKind) GetT() *Timestamp {
	if x != nil {
		return x.T
	}
	return nil
}

type Optional_DERGeneratorStateKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value DERGeneratorStateKind `protobuf:"varint,1,opt,name=value,proto3,enum=commonmodule.DERGeneratorStateKind" json:"value,omitempty"`
}

func (x *Optional_DERGeneratorStateKind) Reset() {
	*x = Optional_DERGeneratorStateKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Optional_DERGeneratorStateKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optional_DERGeneratorStateKind) ProtoMessage() {}

func (x *Optional_DERGeneratorStateKind) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optional_DERGeneratorStateKind.ProtoReflect.Descriptor instead.
func (*Optional_DERGeneratorStateKind) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{65}
}

func (x *Optional_DERGeneratorStateKind) GetValue() DERGeneratorStateKind {
	if x != nil {
		return x.Value
	}
	return DERGeneratorStateKind_DERGeneratorStateKind_UNDEFINED
}

// DER generation state kind. ENS stands for Enumerated status
type ENS_DERGeneratorStateKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Quality of the value in 'stVal'.
	Q *Quality `protobuf:"bytes,1,opt,name=q,proto3" json:"q,omitempty"`
	// Value of the data.
	StVal DERGeneratorStateKind `protobuf:"varint,2,opt,name=stVal,proto3,enum=commonmodule.DERGeneratorStateKind" json:"stVal,omitempty"`
	// Timestamp of the last change or update event of 'stVal' or the last change of value in 'q'.
	T *Timestamp `protobuf:"bytes,3,opt,name=t,proto3" json:"t,omitempty"`
}

func (x *ENS_DERGeneratorStateKind) Reset() {
	*x = ENS_DERGeneratorStateKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ENS_DERGeneratorStateKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ENS_DERGeneratorStateKind) ProtoMessage() {}

func (x *ENS_DERGeneratorStateKind) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ENS_DERGeneratorStateKind.ProtoReflect.Descriptor instead.
func (*ENS_DERGeneratorStateKind) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{66}
}

func (x *ENS_DERGeneratorStateKind) GetQ() *Quality {
	if x != nil {
		return x.Q
	}
	return nil
}

func (x *ENS_DERGeneratorStateKind) GetStVal() DERGeneratorStateKind {
	if x != nil {
		return x.StVal
	}
	return DERGeneratorStateKind_DERGeneratorStateKind_UNDEFINED
}

func (x *ENS_DERGeneratorStateKind) GetT() *Timestamp {
	if x != nil {
		return x.T
	}
	return nil
}

type Optional_DynamicTestKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value DynamicTestKind `protobuf:"varint,1,opt,name=value,proto3,enum=commonmodule.DynamicTestKind" json:"value,omitempty"`
}

func (x *Optional_DynamicTestKind) Reset() {
	*x = Optional_DynamicTestKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Optional_DynamicTestKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optional_DynamicTestKind) ProtoMessage() {}

func (x *Optional_DynamicTestKind) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optional_DynamicTestKind.ProtoReflect.Descriptor instead.
func (*Optional_DynamicTestKind) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{67}
}

func (x *Optional_DynamicTestKind) GetValue() DynamicTestKind {
	if x != nil {
		return x.Value
	}
	return DynamicTestKind_DynamicTestKind_UNDEFINED
}

// Dynamic test kind. ENS stands for Enumerated status
type ENS_DynamicTestKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Quality of the value in 'stVal'.
	Q *Quality `protobuf:"bytes,1,opt,name=q,proto3" json:"q,omitempty"`
	// Value of the data.
	StVal DynamicTestKind `protobuf:"varint,2,opt,name=stVal,proto3,enum=commonmodule.DynamicTestKind" json:"stVal,omitempty"`
	// Timestamp of the last change or update event of 'stVal' or the last change of value in 'q'.
	T *Timestamp `protobuf:"bytes,3,opt,name=t,proto3" json:"t,omitempty"`
}

func (x *ENS_DynamicTestKind) Reset() {
	*x = ENS_DynamicTestKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ENS_DynamicTestKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ENS_DynamicTestKind) ProtoMessage() {}

func (x *ENS_DynamicTestKind) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ENS_DynamicTestKind.ProtoReflect.Descriptor instead.
func (*ENS_DynamicTestKind) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{68}
}

func (x *ENS_DynamicTestKind) GetQ() *Quality {
	if x != nil {
		return x.Q
	}
	return nil
}

func (x *ENS_DynamicTestKind) GetStVal() DynamicTestKind {
	if x != nil {
		return x.StVal
	}
	return DynamicTestKind_DynamicTestKind_UNDEFINED
}

func (x *ENS_DynamicTestKind) GetT() *Timestamp {
	if x != nil {
		return x.T
	}
	return nil
}

// Grid connect event &amp; status mode kind
type ENS_GridConnectModeKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Actual Grid Connection Mode
	StVal GridConnectModeKind `protobuf:"varint,1,opt,name=stVal,proto3,enum=commonmodule.GridConnectModeKind" json:"stVal,omitempty"`
	// MISSING DOCUMENTATION!!!
	StValExtension string `protobuf:"bytes,2,opt,name=stValExtension,proto3" json:"stValExtension,omitempty"`
}

func (x *ENS_GridConnectModeKind) Reset() {
	*x = ENS_GridConnectModeKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ENS_GridConnectModeKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ENS_GridConnectModeKind) ProtoMessage() {}

func (x *ENS_GridConnectModeKind) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ENS_GridConnectModeKind.ProtoReflect.Descriptor instead.
func (*ENS_GridConnectModeKind) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{69}
}

func (x *ENS_GridConnectModeKind) GetStVal() GridConnectModeKind {
	if x != nil {
		return x.StVal
	}
	return GridConnectModeKind_GridConnectModeKind_UNDEFINED
}

func (x *ENS_GridConnectModeKind) GetStValExtension() string {
	if x != nil {
		return x.StValExtension
	}
	return ""
}

type Optional_HealthKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value HealthKind `protobuf:"varint,1,opt,name=value,proto3,enum=commonmodule.HealthKind" json:"value,omitempty"`
}

func (x *Optional_HealthKind) Reset() {
	*x = Optional_HealthKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Optional_HealthKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optional_HealthKind) ProtoMessage() {}

func (x *Optional_HealthKind) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optional_HealthKind.ProtoReflect.Descriptor instead.
func (*Optional_HealthKind) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{70}
}

func (x *Optional_HealthKind) GetValue() HealthKind {
	if x != nil {
		return x.Value
	}
	return HealthKind_HealthKind_UNDEFINED
}

// &lt;&gt; Enumerated status (ENS)
type ENS_HealthKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Textual description of the data. In case it is used within the CDC LPL, the description refers
	// to the logical node.
	D *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=d,proto3" json:"d,omitempty"`
	// Value of the data.
	StVal HealthKind `protobuf:"varint,2,opt,name=stVal,proto3,enum=commonmodule.HealthKind" json:"stVal,omitempty"`
}

func (x *ENS_HealthKind) Reset() {
	*x = ENS_HealthKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ENS_HealthKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ENS_HealthKind) ProtoMessage() {}

func (x *ENS_HealthKind) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ENS_HealthKind.ProtoReflect.Descriptor instead.
func (*ENS_HealthKind) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{71}
}

func (x *ENS_HealthKind) GetD() *wrapperspb.StringValue {
	if x != nil {
		return x.D
	}
	return nil
}

func (x *ENS_HealthKind) GetStVal() HealthKind {
	if x != nil {
		return x.StVal
	}
	return HealthKind_HealthKind_UNDEFINED
}

type Optional_SwitchingCapabilityKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value SwitchingCapabilityKind `protobuf:"varint,1,opt,name=value,proto3,enum=commonmodule.SwitchingCapabilityKind" json:"value,omitempty"`
}

func (x *Optional_SwitchingCapabilityKind) Reset() {
	*x = Optional_SwitchingCapabilityKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Optional_SwitchingCapabilityKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optional_SwitchingCapabilityKind) ProtoMessage() {}

func (x *Optional_SwitchingCapabilityKind) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optional_SwitchingCapabilityKind.ProtoReflect.Descriptor instead.
func (*Optional_SwitchingCapabilityKind) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{72}
}

func (x *Optional_SwitchingCapabilityKind) GetValue() SwitchingCapabilityKind {
	if x != nil {
		return x.Value
	}
	return SwitchingCapabilityKind_SwitchingCapabilityKind_UNDEFINED
}

// <<abstract>> Enumerated status (ENS)
type ENS_SwitchingCapabilityKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, 'q.operatorBlocked'=true, and the process value is no longer updated.
	BlkEna *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=blkEna,proto3" json:"blkEna,omitempty"`
	// Value of the data.
	StVal SwitchingCapabilityKind `protobuf:"varint,2,opt,name=stVal,proto3,enum=commonmodule.SwitchingCapabilityKind" json:"stVal,omitempty"`
}

func (x *ENS_SwitchingCapabilityKind) Reset() {
	*x = ENS_SwitchingCapabilityKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ENS_SwitchingCapabilityKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ENS_SwitchingCapabilityKind) ProtoMessage() {}

func (x *ENS_SwitchingCapabilityKind) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ENS_SwitchingCapabilityKind.ProtoReflect.Descriptor instead.
func (*ENS_SwitchingCapabilityKind) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{73}
}

func (x *ENS_SwitchingCapabilityKind) GetBlkEna() *wrapperspb.BoolValue {
	if x != nil {
		return x.BlkEna
	}
	return nil
}

func (x *ENS_SwitchingCapabilityKind) GetStVal() SwitchingCapabilityKind {
	if x != nil {
		return x.StVal
	}
	return SwitchingCapabilityKind_SwitchingCapabilityKind_UNDEFINED
}

// MISSING DOCUMENTATION!!!
type OperationDCTE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MISSING DOCUMENTATION!!!
	RndDlTmms *ControlING `protobuf:"bytes,1,opt,name=rndDlTmms,proto3" json:"rndDlTmms,omitempty"`
	// MISSING DOCUMENTATION!!!
	RtnDlTmms *ControlING `protobuf:"bytes,2,opt,name=rtnDlTmms,proto3" json:"rtnDlTmms,omitempty"`
	// MISSING DOCUMENTATION!!!
	RtnRmpTmms *ControlING `protobuf:"bytes,3,opt,name=rtnRmpTmms,proto3" json:"rtnRmpTmms,omitempty"`
}

func (x *OperationDCTE) Reset() {
	*x = OperationDCTE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationDCTE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationDCTE) ProtoMessage() {}

func (x *OperationDCTE) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationDCTE.ProtoReflect.Descriptor instead.
func (*OperationDCTE) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{74}
}

func (x *OperationDCTE) GetRndDlTmms() *ControlING {
	if x != nil {
		return x.RndDlTmms
	}
	return nil
}

func (x *OperationDCTE) GetRtnDlTmms() *ControlING {
	if x != nil {
		return x.RtnDlTmms
	}
	return nil
}

func (x *OperationDCTE) GetRtnRmpTmms() *ControlING {
	if x != nil {
		return x.RtnRmpTmms
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type EnterServiceAPC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MISSING DOCUMENTATION!!!
	EnterServiceParameter *OperationDCTE `protobuf:"bytes,1,opt,name=enterServiceParameter,proto3" json:"enterServiceParameter,omitempty"`
	// This field is for an absolute value. ES Frequency High
	HzHiLim float32 `protobuf:"fixed32,2,opt,name=hzHiLim,proto3" json:"hzHiLim,omitempty"`
	// This field is for an absolute value. ES Frequency Low
	HzLoLim float32 `protobuf:"fixed32,3,opt,name=hzLoLim,proto3" json:"hzLoLim,omitempty"`
	// Permit service. If (RtnSrvAuto) true, the DER is authorized to automatically return to service;
	// if false, the DER must wait until an external RtnSrvAuth is received to allow it to return to
	// service.
	RtnSrvAuto bool `protobuf:"varint,4,opt,name=rtnSrvAuto,proto3" json:"rtnSrvAuto,omitempty"`
	// This is an absolute value field.  ES Voltage High
	VHiLim float32 `protobuf:"fixed32,5,opt,name=vHiLim,proto3" json:"vHiLim,omitempty"`
	// This is an absolute value field.  ES Voltage Low
	VLoLim float32 `protobuf:"fixed32,6,opt,name=vLoLim,proto3" json:"vLoLim,omitempty"`
}

func (x *EnterServiceAPC) Reset() {
	*x = EnterServiceAPC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterServiceAPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterServiceAPC) ProtoMessage() {}

func (x *EnterServiceAPC) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterServiceAPC.ProtoReflect.Descriptor instead.
func (*EnterServiceAPC) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{75}
}

func (x *EnterServiceAPC) GetEnterServiceParameter() *OperationDCTE {
	if x != nil {
		return x.EnterServiceParameter
	}
	return nil
}

func (x *EnterServiceAPC) GetHzHiLim() float32 {
	if x != nil {
		return x.HzHiLim
	}
	return 0
}

func (x *EnterServiceAPC) GetHzLoLim() float32 {
	if x != nil {
		return x.HzLoLim
	}
	return 0
}

func (x *EnterServiceAPC) GetRtnSrvAuto() bool {
	if x != nil {
		return x.RtnSrvAuto
	}
	return false
}

func (x *EnterServiceAPC) GetVHiLim() float32 {
	if x != nil {
		return x.VHiLim
	}
	return 0
}

func (x *EnterServiceAPC) GetVLoLim() float32 {
	if x != nil {
		return x.VLoLim
	}
	return 0
}

// MISSING DOCUMENTATION!!!
type ESS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ConductingEquipment *ConductingEquipment `protobuf:"bytes,1,opt,name=conductingEquipment,proto3" json:"conductingEquipment,omitempty"`
}

func (x *ESS) Reset() {
	*x = ESS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ESS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ESS) ProtoMessage() {}

func (x *ESS) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ESS.ProtoReflect.Descriptor instead.
func (*ESS) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{76}
}

func (x *ESS) GetConductingEquipment() *ConductingEquipment {
	if x != nil {
		return x.ConductingEquipment
	}
	return nil
}

// Generic event message information
type EventMessageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	MessageInfo *MessageInfo `protobuf:"bytes,1,opt,name=messageInfo,proto3" json:"messageInfo,omitempty"`
}

func (x *EventMessageInfo) Reset() {
	*x = EventMessageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventMessageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventMessageInfo) ProtoMessage() {}

func (x *EventMessageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventMessageInfo.ProtoReflect.Descriptor instead.
func (*EventMessageInfo) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{77}
}

func (x *EventMessageInfo) GetMessageInfo() *MessageInfo {
	if x != nil {
		return x.MessageInfo
	}
	return nil
}

// Event value
type EventValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	IdentifiedObject *IdentifiedObject `protobuf:"bytes,1,opt,name=identifiedObject,proto3" json:"identifiedObject,omitempty"`
	// MISSING DOCUMENTATION!!!
	ModBlk *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=modBlk,proto3" json:"modBlk,omitempty"`
}

func (x *EventValue) Reset() {
	*x = EventValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventValue) ProtoMessage() {}

func (x *EventValue) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventValue.ProtoReflect.Descriptor instead.
func (*EventValue) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{78}
}

func (x *EventValue) GetIdentifiedObject() *IdentifiedObject {
	if x != nil {
		return x.IdentifiedObject
	}
	return nil
}

func (x *EventValue) GetModBlk() *wrapperspb.BoolValue {
	if x != nil {
		return x.ModBlk
	}
	return nil
}

// The source where a forecast value is issued.
type ForecastValueSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	IdentifiedObject *IdentifiedObject `protobuf:"bytes,1,opt,name=identifiedObject,proto3" json:"identifiedObject,omitempty"`
}

func (x *ForecastValueSource) Reset() {
	*x = ForecastValueSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForecastValueSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForecastValueSource) ProtoMessage() {}

func (x *ForecastValueSource) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForecastValueSource.ProtoReflect.Descriptor instead.
func (*ForecastValueSource) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{79}
}

func (x *ForecastValueSource) GetIdentifiedObject() *IdentifiedObject {
	if x != nil {
		return x.IdentifiedObject
	}
	return nil
}

// Intelligent Electronic Device is a device with a microprocessor that can contain one or more
// (IEC61850) SERVERs. In the context of IEC61850, IED could be an electronic protection device, a
// controller or even a laptop/desktop computer. <b>Modelling note</b>: This class is not explicitly
// defined in IEC61850-7-2 (but only in SCL: IEC61850-6). However, it is an important concept that
// deserves its place in the meta-model. When the meta-model gets instantiated from a direct link to an
// IED with an IEC61850 SERVER, we typically create an instance of the meta-model IED per connection.
// When the meta-model gets instantiated from an SCL file, there is the full description of IED and its
// functions.
type ForecastIED struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ForecastValueSource *ForecastValueSource `protobuf:"bytes,1,opt,name=forecastValueSource,proto3" json:"forecastValueSource,omitempty"`
	// For control, this is an application ID, unique within communication system, and if the message
	// is transformed between gateway the original source application ID should be kept.
	SourceApplicationID string `protobuf:"bytes,2,opt,name=sourceApplicationID,proto3" json:"sourceApplicationID,omitempty"`
	// Message publication date time
	SourceDateTime int64 `protobuf:"varint,3,opt,name=sourceDateTime,proto3" json:"sourceDateTime,omitempty"`
}

func (x *ForecastIED) Reset() {
	*x = ForecastIED{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForecastIED) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForecastIED) ProtoMessage() {}

func (x *ForecastIED) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForecastIED.ProtoReflect.Descriptor instead.
func (*ForecastIED) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{80}
}

func (x *ForecastIED) GetForecastValueSource() *ForecastValueSource {
	if x != nil {
		return x.ForecastValueSource
	}
	return nil
}

func (x *ForecastIED) GetSourceApplicationID() string {
	if x != nil {
		return x.SourceApplicationID
	}
	return ""
}

func (x *ForecastIED) GetSourceDateTime() int64 {
	if x != nil {
		return x.SourceDateTime
	}
	return 0
}

// Forecast value
type ForecastValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	IdentifiedObject *IdentifiedObject `protobuf:"bytes,1,opt,name=identifiedObject,proto3" json:"identifiedObject,omitempty"`
}

func (x *ForecastValue) Reset() {
	*x = ForecastValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForecastValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForecastValue) ProtoMessage() {}

func (x *ForecastValue) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForecastValue.ProtoReflect.Descriptor instead.
func (*ForecastValue) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{81}
}

func (x *ForecastValue) GetIdentifiedObject() *IdentifiedObject {
	if x != nil {
		return x.IdentifiedObject
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type OperationDHFW struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MISSING DOCUMENTATION!!!
	ModEna bool `protobuf:"varint,1,opt,name=modEna,proto3" json:"modEna,omitempty"`
	// Open Loop Response Time
	OplTmmsMax *ClearingTime `protobuf:"bytes,2,opt,name=OplTmmsMax,proto3" json:"OplTmmsMax,omitempty"`
}

func (x *OperationDHFW) Reset() {
	*x = OperationDHFW{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationDHFW) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationDHFW) ProtoMessage() {}

func (x *OperationDHFW) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationDHFW.ProtoReflect.Descriptor instead.
func (*OperationDHFW) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{82}
}

func (x *OperationDHFW) GetModEna() bool {
	if x != nil {
		return x.ModEna
	}
	return false
}

func (x *OperationDHFW) GetOplTmmsMax() *ClearingTime {
	if x != nil {
		return x.OplTmmsMax
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type OperationDLFW struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MISSING DOCUMENTATION!!!
	ModEna bool `protobuf:"varint,1,opt,name=modEna,proto3" json:"modEna,omitempty"`
	// MISSING DOCUMENTATION!!!
	OplTmmsMax *ClearingTime `protobuf:"bytes,2,opt,name=OplTmmsMax,proto3" json:"OplTmmsMax,omitempty"`
}

func (x *OperationDLFW) Reset() {
	*x = OperationDLFW{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationDLFW) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationDLFW) ProtoMessage() {}

func (x *OperationDLFW) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationDLFW.ProtoReflect.Descriptor instead.
func (*OperationDLFW) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{83}
}

func (x *OperationDLFW) GetModEna() bool {
	if x != nil {
		return x.ModEna
	}
	return false
}

func (x *OperationDLFW) GetOplTmmsMax() *ClearingTime {
	if x != nil {
		return x.OplTmmsMax
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type HzWPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is an absolute value field
	DeadbandHzVal float32 `protobuf:"fixed32,1,opt,name=deadbandHzVal,proto3" json:"deadbandHzVal,omitempty"`
	// MISSING DOCUMENTATION!!!
	SlopeVal float32 `protobuf:"fixed32,2,opt,name=slopeVal,proto3" json:"slopeVal,omitempty"`
}

func (x *HzWPoint) Reset() {
	*x = HzWPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HzWPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HzWPoint) ProtoMessage() {}

func (x *HzWPoint) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HzWPoint.ProtoReflect.Descriptor instead.
func (*HzWPoint) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{84}
}

func (x *HzWPoint) GetDeadbandHzVal() float32 {
	if x != nil {
		return x.DeadbandHzVal
	}
	return 0
}

func (x *HzWPoint) GetSlopeVal() float32 {
	if x != nil {
		return x.SlopeVal
	}
	return 0
}

// Frequency Droop Function
type HzWAPC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Overfrequency Droop <i>db</i>OF  The frequency which must be higher than the reference frequency
	// at which to start reducing power output.
	OverHzWPt *HzWPoint `protobuf:"bytes,1,opt,name=overHzWPt,proto3" json:"overHzWPt,omitempty"`
	// MISSING DOCUMENTATION!!!
	OverHzWParameter *OperationDHFW `protobuf:"bytes,2,opt,name=overHzWParameter,proto3" json:"overHzWParameter,omitempty"`
	// Underfrequency Droop <i>db</i>UF  The frequency which must be lower than the reference frequency
	// at which to start increasing power output.
	UnderHzWPt *HzWPoint `protobuf:"bytes,3,opt,name=underHzWPt,proto3" json:"underHzWPt,omitempty"`
	// MISSING DOCUMENTATION!!!
	UnderHzWParameter *OperationDLFW `protobuf:"bytes,4,opt,name=underHzWParameter,proto3" json:"underHzWParameter,omitempty"`
}

func (x *HzWAPC) Reset() {
	*x = HzWAPC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HzWAPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HzWAPC) ProtoMessage() {}

func (x *HzWAPC) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HzWAPC.ProtoReflect.Descriptor instead.
func (*HzWAPC) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{85}
}

func (x *HzWAPC) GetOverHzWPt() *HzWPoint {
	if x != nil {
		return x.OverHzWPt
	}
	return nil
}

func (x *HzWAPC) GetOverHzWParameter() *OperationDHFW {
	if x != nil {
		return x.OverHzWParameter
	}
	return nil
}

func (x *HzWAPC) GetUnderHzWPt() *HzWPoint {
	if x != nil {
		return x.UnderHzWPt
	}
	return nil
}

func (x *HzWAPC) GetUnderHzWParameter() *OperationDLFW {
	if x != nil {
		return x.UnderHzWParameter
	}
	return nil
}

// <<statistics>> Integer status (INS)
type StatusINS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Quality of the value in 'stVal'.
	Q *Quality `protobuf:"bytes,1,opt,name=q,proto3" json:"q,omitempty"`
	// Value of the data.
	StVal int32 `protobuf:"varint,2,opt,name=stVal,proto3" json:"stVal,omitempty"`
	// Timestamp of the last change or update event of 'stVal' or the last change of value in 'q'.
	T *Timestamp `protobuf:"bytes,3,opt,name=t,proto3" json:"t,omitempty"`
}

func (x *StatusINS) Reset() {
	*x = StatusINS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusINS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusINS) ProtoMessage() {}

func (x *StatusINS) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusINS.ProtoReflect.Descriptor instead.
func (*StatusINS) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{86}
}

func (x *StatusINS) GetQ() *Quality {
	if x != nil {
		return x.Q
	}
	return nil
}

func (x *StatusINS) GetStVal() int32 {
	if x != nil {
		return x.StVal
	}
	return 0
}

func (x *StatusINS) GetT() *Timestamp {
	if x != nil {
		return x.T
	}
	return nil
}

// Status expressed in integer based on IEC61850 GGIO.
type IntegerEventAndStatusGGIO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	LogicalNode *LogicalNode `protobuf:"bytes,1,opt,name=logicalNode,proto3" json:"logicalNode,omitempty"`
	// Generic integer status input <i>n</i>.
	IntIn *StatusINS `protobuf:"bytes,2,opt,name=IntIn,proto3" json:"IntIn,omitempty"`
	// Phase code
	Phase *Optional_PhaseCodeKind `protobuf:"bytes,3,opt,name=Phase,proto3" json:"Phase,omitempty"`
}

func (x *IntegerEventAndStatusGGIO) Reset() {
	*x = IntegerEventAndStatusGGIO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegerEventAndStatusGGIO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegerEventAndStatusGGIO) ProtoMessage() {}

func (x *IntegerEventAndStatusGGIO) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegerEventAndStatusGGIO.ProtoReflect.Descriptor instead.
func (*IntegerEventAndStatusGGIO) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{87}
}

func (x *IntegerEventAndStatusGGIO) GetLogicalNode() *LogicalNode {
	if x != nil {
		return x.LogicalNode
	}
	return nil
}

func (x *IntegerEventAndStatusGGIO) GetIntIn() *StatusINS {
	if x != nil {
		return x.IntIn
	}
	return nil
}

func (x *IntegerEventAndStatusGGIO) GetPhase() *Optional_PhaseCodeKind {
	if x != nil {
		return x.Phase
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type OperationDWMX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Limit Active Power Enable
	ModEna bool `protobuf:"varint,1,opt,name=modEna,proto3" json:"modEna,omitempty"`
}

func (x *OperationDWMX) Reset() {
	*x = OperationDWMX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationDWMX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationDWMX) ProtoMessage() {}

func (x *OperationDWMX) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationDWMX.ProtoReflect.Descriptor instead.
func (*OperationDWMX) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{88}
}

func (x *OperationDWMX) GetModEna() bool {
	if x != nil {
		return x.ModEna
	}
	return false
}

// MISSING DOCUMENTATION!!!
type OperationDWMN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MISSING DOCUMENTATION!!!
	ModEna bool `protobuf:"varint,1,opt,name=modEna,proto3" json:"modEna,omitempty"`
}

func (x *OperationDWMN) Reset() {
	*x = OperationDWMN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationDWMN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationDWMN) ProtoMessage() {}

func (x *OperationDWMN) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationDWMN.ProtoReflect.Descriptor instead.
func (*OperationDWMN) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{89}
}

func (x *OperationDWMN) GetModEna() bool {
	if x != nil {
		return x.ModEna
	}
	return false
}

// MISSING DOCUMENTATION!!!
type LimitWAPC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MISSING DOCUMENTATION!!!
	MaxLimParameter *OperationDWMX `protobuf:"bytes,1,opt,name=maxLimParameter,proto3" json:"maxLimParameter,omitempty"`
	// MISSING DOCUMENTATION!!!
	MinLimParameter *OperationDWMN `protobuf:"bytes,2,opt,name=minLimParameter,proto3" json:"minLimParameter,omitempty"`
	// This is an absolute value field.  Maximum Active Power
	WMaxSptVal float32 `protobuf:"fixed32,3,opt,name=wMaxSptVal,proto3" json:"wMaxSptVal,omitempty"`
	// This is an absolute value field.  Minimum Active Power
	WMinSptVal float32 `protobuf:"fixed32,4,opt,name=wMinSptVal,proto3" json:"wMinSptVal,omitempty"`
}

func (x *LimitWAPC) Reset() {
	*x = LimitWAPC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitWAPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitWAPC) ProtoMessage() {}

func (x *LimitWAPC) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitWAPC.ProtoReflect.Descriptor instead.
func (*LimitWAPC) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{90}
}

func (x *LimitWAPC) GetMaxLimParameter() *OperationDWMX {
	if x != nil {
		return x.MaxLimParameter
	}
	return nil
}

func (x *LimitWAPC) GetMinLimParameter() *OperationDWMN {
	if x != nil {
		return x.MinLimParameter
	}
	return nil
}

func (x *LimitWAPC) GetWMaxSptVal() float32 {
	if x != nil {
		return x.WMaxSptVal
	}
	return 0
}

func (x *LimitWAPC) GetWMinSptVal() float32 {
	if x != nil {
		return x.WMinSptVal
	}
	return 0
}

// Logical node for event and status
type LogicalNodeForEventAndStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	LogicalNode *LogicalNode `protobuf:"bytes,1,opt,name=logicalNode,proto3" json:"logicalNode,omitempty"`
	// Behavior of the function
	Beh *ENS_BehaviourModeKind `protobuf:"bytes,2,opt,name=Beh,proto3" json:"Beh,omitempty"`
	// Asset health
	EEHealth *ENS_HealthKind `protobuf:"bytes,3,opt,name=EEHealth,proto3" json:"EEHealth,omitempty"`
	// Hot line tag.
	HotLineTag *StatusSPS `protobuf:"bytes,4,opt,name=HotLineTag,proto3" json:"HotLineTag,omitempty"`
	// Remote control block.
	RemoteBlk *StatusSPS `protobuf:"bytes,5,opt,name=RemoteBlk,proto3" json:"RemoteBlk,omitempty"`
}

func (x *LogicalNodeForEventAndStatus) Reset() {
	*x = LogicalNodeForEventAndStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicalNodeForEventAndStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalNodeForEventAndStatus) ProtoMessage() {}

func (x *LogicalNodeForEventAndStatus) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalNodeForEventAndStatus.ProtoReflect.Descriptor instead.
func (*LogicalNodeForEventAndStatus) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{91}
}

func (x *LogicalNodeForEventAndStatus) GetLogicalNode() *LogicalNode {
	if x != nil {
		return x.LogicalNode
	}
	return nil
}

func (x *LogicalNodeForEventAndStatus) GetBeh() *ENS_BehaviourModeKind {
	if x != nil {
		return x.Beh
	}
	return nil
}

func (x *LogicalNodeForEventAndStatus) GetEEHealth() *ENS_HealthKind {
	if x != nil {
		return x.EEHealth
	}
	return nil
}

func (x *LogicalNodeForEventAndStatus) GetHotLineTag() *StatusSPS {
	if x != nil {
		return x.HotLineTag
	}
	return nil
}

func (x *LogicalNodeForEventAndStatus) GetRemoteBlk() *StatusSPS {
	if x != nil {
		return x.RemoteBlk
	}
	return nil
}

// The current state for a measurement. A state value is an instance of a measurement from a
// specific source. Measurements can be associated with many state values, each representing a
// different source for the measurement.
type MeasurementValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	IdentifiedObject *IdentifiedObject `protobuf:"bytes,1,opt,name=identifiedObject,proto3" json:"identifiedObject,omitempty"`
}

func (x *MeasurementValue) Reset() {
	*x = MeasurementValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasurementValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasurementValue) ProtoMessage() {}

func (x *MeasurementValue) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasurementValue.ProtoReflect.Descriptor instead.
func (*MeasurementValue) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{92}
}

func (x *MeasurementValue) GetIdentifiedObject() *IdentifiedObject {
	if x != nil {
		return x.IdentifiedObject
	}
	return nil
}

// Physical asset that performs the metering role of the usage point. Used for measuring
// consumption and detection of events.
type Meter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ConductingEquipment *ConductingEquipment `protobuf:"bytes,1,opt,name=conductingEquipment,proto3" json:"conductingEquipment,omitempty"`
}

func (x *Meter) Reset() {
	*x = Meter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meter) ProtoMessage() {}

func (x *Meter) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meter.ProtoReflect.Descriptor instead.
func (*Meter) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{93}
}

func (x *Meter) GetConductingEquipment() *ConductingEquipment {
	if x != nil {
		return x.ConductingEquipment
	}
	return nil
}

// Generic nameplate value such as name and description.
type NameplateValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	IdentifiedObject *IdentifiedObject `protobuf:"bytes,1,opt,name=identifiedObject,proto3" json:"identifiedObject,omitempty"`
	// Model
	Model *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	// Serial Number
	Sernum *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=sernum,proto3" json:"sernum,omitempty"`
	// Version
	SwRev *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=swRev,proto3" json:"swRev,omitempty"`
	// Manufacturer
	Vendor *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=vendor,proto3" json:"vendor,omitempty"`
}

func (x *NameplateValue) Reset() {
	*x = NameplateValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameplateValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameplateValue) ProtoMessage() {}

func (x *NameplateValue) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameplateValue.ProtoReflect.Descriptor instead.
func (*NameplateValue) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{94}
}

func (x *NameplateValue) GetIdentifiedObject() *IdentifiedObject {
	if x != nil {
		return x.IdentifiedObject
	}
	return nil
}

func (x *NameplateValue) GetModel() *wrapperspb.StringValue {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *NameplateValue) GetSernum() *wrapperspb.StringValue {
	if x != nil {
		return x.Sernum
	}
	return nil
}

func (x *NameplateValue) GetSwRev() *wrapperspb.StringValue {
	if x != nil {
		return x.SwRev
	}
	return nil
}

func (x *NameplateValue) GetVendor() *wrapperspb.StringValue {
	if x != nil {
		return x.Vendor
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type OperationDFPF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MISSING DOCUMENTATION!!!
	ModEna bool `protobuf:"varint,1,opt,name=modEna,proto3" json:"modEna,omitempty"`
	// Constant power factor excitation setting  PFExtSet: PFExtSet set to true = overexcited; PFExtSet
	// set to false = underexcited
	PFExtSet bool `protobuf:"varint,2,opt,name=pFExtSet,proto3" json:"pFExtSet,omitempty"`
	// Applies when generating.  Target power factor setting when generating.  The power factor target
	// is a number between -1 and 1, and is used in conjunction with PFExtSet to indicate whether it to
	// make it over or under excited.
	PFGnTgtMxVal float32 `protobuf:"fixed32,3,opt,name=pFGnTgtMxVal,proto3" json:"pFGnTgtMxVal,omitempty"`
}

func (x *OperationDFPF) Reset() {
	*x = OperationDFPF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationDFPF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationDFPF) ProtoMessage() {}

func (x *OperationDFPF) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationDFPF.ProtoReflect.Descriptor instead.
func (*OperationDFPF) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{95}
}

func (x *OperationDFPF) GetModEna() bool {
	if x != nil {
		return x.ModEna
	}
	return false
}

func (x *OperationDFPF) GetPFExtSet() bool {
	if x != nil {
		return x.PFExtSet
	}
	return false
}

func (x *OperationDFPF) GetPFGnTgtMxVal() float32 {
	if x != nil {
		return x.PFGnTgtMxVal
	}
	return 0
}

// MISSING DOCUMENTATION!!!
type OperationDVAR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is an absolute value field.  Constant Reactive Power
	VarTgtSpt float32 `protobuf:"fixed32,1,opt,name=varTgtSpt,proto3" json:"varTgtSpt,omitempty"`
}

func (x *OperationDVAR) Reset() {
	*x = OperationDVAR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationDVAR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationDVAR) ProtoMessage() {}

func (x *OperationDVAR) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationDVAR.ProtoReflect.Descriptor instead.
func (*OperationDVAR) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{96}
}

func (x *OperationDVAR) GetVarTgtSpt() float32 {
	if x != nil {
		return x.VarTgtSpt
	}
	return 0
}

// MISSING DOCUMENTATION!!!
type OperationDVVR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Voltage-Reactive Power Mode Enable
	ModEna bool `protobuf:"varint,1,opt,name=modEna,proto3" json:"modEna,omitempty"`
	// Open Loop Response Time
	OplTmmsMax *ClearingTime `protobuf:"bytes,2,opt,name=OplTmmsMax,proto3" json:"OplTmmsMax,omitempty"`
	// V<sub>Ref</sub> Reference voltage
	VRef float32 `protobuf:"fixed32,3,opt,name=VRef,proto3" json:"VRef,omitempty"`
	// Autonomous <i>V</i><i><sub>Ref</sub></i><i>  </i>adjustment enable
	VRefAdjEna bool `protobuf:"varint,4,opt,name=VRefAdjEna,proto3" json:"VRefAdjEna,omitempty"`
	// <i>V</i><i><sub>Ref</sub></i><i>  </i>adjustment time constant
	VRefTmms *ControlING `protobuf:"bytes,5,opt,name=VRefTmms,proto3" json:"VRefTmms,omitempty"`
}

func (x *OperationDVVR) Reset() {
	*x = OperationDVVR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationDVVR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationDVVR) ProtoMessage() {}

func (x *OperationDVVR) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationDVVR.ProtoReflect.Descriptor instead.
func (*OperationDVVR) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{97}
}

func (x *OperationDVVR) GetModEna() bool {
	if x != nil {
		return x.ModEna
	}
	return false
}

func (x *OperationDVVR) GetOplTmmsMax() *ClearingTime {
	if x != nil {
		return x.OplTmmsMax
	}
	return nil
}

func (x *OperationDVVR) GetVRef() float32 {
	if x != nil {
		return x.VRef
	}
	return 0
}

func (x *OperationDVVR) GetVRefAdjEna() bool {
	if x != nil {
		return x.VRefAdjEna
	}
	return false
}

func (x *OperationDVVR) GetVRefTmms() *ControlING {
	if x != nil {
		return x.VRefTmms
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type OperationDVWC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Voltage-Active Power Mode Enable
	ModEna bool `protobuf:"varint,1,opt,name=modEna,proto3" json:"modEna,omitempty"`
	// Open Loop Response Time
	OplTmmsMax *ClearingTime `protobuf:"bytes,2,opt,name=OplTmmsMax,proto3" json:"OplTmmsMax,omitempty"`
}

func (x *OperationDVWC) Reset() {
	*x = OperationDVWC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationDVWC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationDVWC) ProtoMessage() {}

func (x *OperationDVWC) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationDVWC.ProtoReflect.Descriptor instead.
func (*OperationDVWC) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{98}
}

func (x *OperationDVWC) GetModEna() bool {
	if x != nil {
		return x.ModEna
	}
	return false
}

func (x *OperationDVWC) GetOplTmmsMax() *ClearingTime {
	if x != nil {
		return x.OplTmmsMax
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type OperationDWGC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Active power setpoint. Its mxVal attribute reflects the value of the setpoint that is requested.
	WSpt float32 `protobuf:"fixed32,1,opt,name=wSpt,proto3" json:"wSpt,omitempty"`
}

func (x *OperationDWGC) Reset() {
	*x = OperationDWGC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationDWGC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationDWGC) ProtoMessage() {}

func (x *OperationDWGC) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationDWGC.ProtoReflect.Descriptor instead.
func (*OperationDWGC) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{99}
}

func (x *OperationDWGC) GetWSpt() float32 {
	if x != nil {
		return x.WSpt
	}
	return 0
}

// Curve shape setting (FC=SP) (CSG_SP)
type OperationDWVR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Active-Reactive Power Mode Enable
	ModEna bool `protobuf:"varint,1,opt,name=modEna,proto3" json:"modEna,omitempty"`
}

func (x *OperationDWVR) Reset() {
	*x = OperationDWVR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationDWVR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationDWVR) ProtoMessage() {}

func (x *OperationDWVR) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationDWVR.ProtoReflect.Descriptor instead.
func (*OperationDWVR) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{100}
}

func (x *OperationDWVR) GetModEna() bool {
	if x != nil {
		return x.ModEna
	}
	return false
}

// Generic event message information
type OptimizationMessageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	MessageInfo *MessageInfo `protobuf:"bytes,1,opt,name=messageInfo,proto3" json:"messageInfo,omitempty"`
}

func (x *OptimizationMessageInfo) Reset() {
	*x = OptimizationMessageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptimizationMessageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptimizationMessageInfo) ProtoMessage() {}

func (x *OptimizationMessageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptimizationMessageInfo.ProtoReflect.Descriptor instead.
func (*OptimizationMessageInfo) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{101}
}

func (x *OptimizationMessageInfo) GetMessageInfo() *MessageInfo {
	if x != nil {
		return x.MessageInfo
	}
	return nil
}

// Constant power factor control function
type PFSPC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MISSING DOCUMENTATION!!!
	CtlVal bool `protobuf:"varint,1,opt,name=ctlVal,proto3" json:"ctlVal,omitempty"`
	// MISSING DOCUMENTATION!!!
	PFParameter *OperationDFPF `protobuf:"bytes,2,opt,name=pFParameter,proto3" json:"pFParameter,omitempty"`
}

func (x *PFSPC) Reset() {
	*x = PFSPC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PFSPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PFSPC) ProtoMessage() {}

func (x *PFSPC) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PFSPC.ProtoReflect.Descriptor instead.
func (*PFSPC) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{102}
}

func (x *PFSPC) GetCtlVal() bool {
	if x != nil {
		return x.CtlVal
	}
	return false
}

func (x *PFSPC) GetPFParameter() *OperationDFPF {
	if x != nil {
		return x.PFParameter
	}
	return nil
}

// [OpenFMB CDC extension] Per Phase ISC.
type PhaseAPC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 3 Phase control.
	Phs3 *ControlAPC `protobuf:"bytes,1,opt,name=phs3,proto3" json:"phs3,omitempty"`
	// Phase A control.
	PhsA *ControlAPC `protobuf:"bytes,2,opt,name=phsA,proto3" json:"phsA,omitempty"`
	// Phase B control.
	PhsB *ControlAPC `protobuf:"bytes,3,opt,name=phsB,proto3" json:"phsB,omitempty"`
	// Phase C control.
	PhsC *ControlAPC `protobuf:"bytes,4,opt,name=phsC,proto3" json:"phsC,omitempty"`
}

func (x *PhaseAPC) Reset() {
	*x = PhaseAPC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhaseAPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhaseAPC) ProtoMessage() {}

func (x *PhaseAPC) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhaseAPC.ProtoReflect.Descriptor instead.
func (*PhaseAPC) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{103}
}

func (x *PhaseAPC) GetPhs3() *ControlAPC {
	if x != nil {
		return x.Phs3
	}
	return nil
}

func (x *PhaseAPC) GetPhsA() *ControlAPC {
	if x != nil {
		return x.PhsA
	}
	return nil
}

func (x *PhaseAPC) GetPhsB() *ControlAPC {
	if x != nil {
		return x.PhsB
	}
	return nil
}

func (x *PhaseAPC) GetPhsC() *ControlAPC {
	if x != nil {
		return x.PhsC
	}
	return nil
}

type Optional_DbPosKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value DbPosKind `protobuf:"varint,1,opt,name=value,proto3,enum=commonmodule.DbPosKind" json:"value,omitempty"`
}

func (x *Optional_DbPosKind) Reset() {
	*x = Optional_DbPosKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Optional_DbPosKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optional_DbPosKind) ProtoMessage() {}

func (x *Optional_DbPosKind) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optional_DbPosKind.ProtoReflect.Descriptor instead.
func (*Optional_DbPosKind) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{104}
}

func (x *Optional_DbPosKind) GetValue() DbPosKind {
	if x != nil {
		return x.Value
	}
	return DbPosKind_DbPosKind_UNDEFINED
}

// Specialized 61850 DPS class
type StatusDPS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MISSING DOCUMENTATION!!!
	Q *Quality `protobuf:"bytes,1,opt,name=q,proto3" json:"q,omitempty"`
	// Status value of the controllable data object.
	StVal DbPosKind `protobuf:"varint,2,opt,name=stVal,proto3,enum=commonmodule.DbPosKind" json:"stVal,omitempty"`
	// Timestamp of the last change of the value in any of 'stVal' or 'q'.
	T *Timestamp `protobuf:"bytes,3,opt,name=t,proto3" json:"t,omitempty"`
}

func (x *StatusDPS) Reset() {
	*x = StatusDPS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusDPS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusDPS) ProtoMessage() {}

func (x *StatusDPS) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusDPS.ProtoReflect.Descriptor instead.
func (*StatusDPS) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{105}
}

func (x *StatusDPS) GetQ() *Quality {
	if x != nil {
		return x.Q
	}
	return nil
}

func (x *StatusDPS) GetStVal() DbPosKind {
	if x != nil {
		return x.StVal
	}
	return DbPosKind_DbPosKind_UNDEFINED
}

func (x *StatusDPS) GetT() *Timestamp {
	if x != nil {
		return x.T
	}
	return nil
}

// [OpenFMB CDC extension] Per Phase DPS.
type PhaseDPS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 3 Phase status.
	Phs3 *StatusDPS `protobuf:"bytes,1,opt,name=phs3,proto3" json:"phs3,omitempty"`
	// Phase A status.
	PhsA *StatusDPS `protobuf:"bytes,2,opt,name=phsA,proto3" json:"phsA,omitempty"`
	// Phase B status.
	PhsB *StatusDPS `protobuf:"bytes,3,opt,name=phsB,proto3" json:"phsB,omitempty"`
	// Phase C status.
	PhsC *StatusDPS `protobuf:"bytes,4,opt,name=phsC,proto3" json:"phsC,omitempty"`
}

func (x *PhaseDPS) Reset() {
	*x = PhaseDPS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhaseDPS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhaseDPS) ProtoMessage() {}

func (x *PhaseDPS) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhaseDPS.ProtoReflect.Descriptor instead.
func (*PhaseDPS) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{106}
}

func (x *PhaseDPS) GetPhs3() *StatusDPS {
	if x != nil {
		return x.Phs3
	}
	return nil
}

func (x *PhaseDPS) GetPhsA() *StatusDPS {
	if x != nil {
		return x.PhsA
	}
	return nil
}

func (x *PhaseDPS) GetPhsB() *StatusDPS {
	if x != nil {
		return x.PhsB
	}
	return nil
}

func (x *PhaseDPS) GetPhsC() *StatusDPS {
	if x != nil {
		return x.PhsC
	}
	return nil
}

// [OpenFMB CDC extension] Per Phase INS.
type PhaseINS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 3 Phase control.
	Phs3 *StatusINS `protobuf:"bytes,1,opt,name=phs3,proto3" json:"phs3,omitempty"`
	// Phase A control.
	PhsA *StatusINS `protobuf:"bytes,2,opt,name=phsA,proto3" json:"phsA,omitempty"`
	// Phase B control.
	PhsB *StatusINS `protobuf:"bytes,3,opt,name=phsB,proto3" json:"phsB,omitempty"`
	// Phase C control.
	PhsC *StatusINS `protobuf:"bytes,4,opt,name=phsC,proto3" json:"phsC,omitempty"`
}

func (x *PhaseINS) Reset() {
	*x = PhaseINS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhaseINS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhaseINS) ProtoMessage() {}

func (x *PhaseINS) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhaseINS.ProtoReflect.Descriptor instead.
func (*PhaseINS) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{107}
}

func (x *PhaseINS) GetPhs3() *StatusINS {
	if x != nil {
		return x.Phs3
	}
	return nil
}

func (x *PhaseINS) GetPhsA() *StatusINS {
	if x != nil {
		return x.PhsA
	}
	return nil
}

func (x *PhaseINS) GetPhsB() *StatusINS {
	if x != nil {
		return x.PhsB
	}
	return nil
}

func (x *PhaseINS) GetPhsC() *StatusINS {
	if x != nil {
		return x.PhsC
	}
	return nil
}

// [OpenFMB CDC extension] Per Phase ISC.
type PhaseISC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 3 Phase control.
	Phs3 *ControlISC `protobuf:"bytes,1,opt,name=phs3,proto3" json:"phs3,omitempty"`
	// Phase A control.
	PhsA *ControlISC `protobuf:"bytes,2,opt,name=phsA,proto3" json:"phsA,omitempty"`
	// Phase B control.
	PhsB *ControlISC `protobuf:"bytes,3,opt,name=phsB,proto3" json:"phsB,omitempty"`
	// Phase C control.
	PhsC *ControlISC `protobuf:"bytes,4,opt,name=phsC,proto3" json:"phsC,omitempty"`
}

func (x *PhaseISC) Reset() {
	*x = PhaseISC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhaseISC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhaseISC) ProtoMessage() {}

func (x *PhaseISC) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhaseISC.ProtoReflect.Descriptor instead.
func (*PhaseISC) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{108}
}

func (x *PhaseISC) GetPhs3() *ControlISC {
	if x != nil {
		return x.Phs3
	}
	return nil
}

func (x *PhaseISC) GetPhsA() *ControlISC {
	if x != nil {
		return x.PhsA
	}
	return nil
}

func (x *PhaseISC) GetPhsB() *ControlISC {
	if x != nil {
		return x.PhsB
	}
	return nil
}

func (x *PhaseISC) GetPhsC() *ControlISC {
	if x != nil {
		return x.PhsC
	}
	return nil
}

// Specialized 61850 MMTN LN class
type ReadingMMTN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	LogicalNode *LogicalNode `protobuf:"bytes,1,opt,name=logicalNode,proto3" json:"logicalNode,omitempty"`
	// Apparent energy demand (direction: from busbar).
	DmdVAh *BCR `protobuf:"bytes,2,opt,name=DmdVAh,proto3" json:"DmdVAh,omitempty"`
	// Reactive energy demand (direction: from busbar).
	DmdVArh *BCR `protobuf:"bytes,3,opt,name=DmdVArh,proto3" json:"DmdVArh,omitempty"`
	// Real energy demand (direction: from busbar).
	DmdWh *BCR `protobuf:"bytes,4,opt,name=DmdWh,proto3" json:"DmdWh,omitempty"`
	// Apparent energy supply (default direction: towards busbar).
	SupVAh *BCR `protobuf:"bytes,5,opt,name=SupVAh,proto3" json:"SupVAh,omitempty"`
	// Reactive energy supply (default direction: towards busbar).
	SupVArh *BCR `protobuf:"bytes,6,opt,name=SupVArh,proto3" json:"SupVArh,omitempty"`
	// Real energy supply (default direction: towards busbar).
	SupWh *BCR `protobuf:"bytes,7,opt,name=SupWh,proto3" json:"SupWh,omitempty"`
	// Net apparent energy since last reset.
	TotVAh *BCR `protobuf:"bytes,8,opt,name=TotVAh,proto3" json:"TotVAh,omitempty"`
	// Net reactive energy since last reset.
	TotVArh *BCR `protobuf:"bytes,9,opt,name=TotVArh,proto3" json:"TotVArh,omitempty"`
	// Net real energy since last reset.
	TotWh *BCR `protobuf:"bytes,10,opt,name=TotWh,proto3" json:"TotWh,omitempty"`
}

func (x *ReadingMMTN) Reset() {
	*x = ReadingMMTN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadingMMTN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadingMMTN) ProtoMessage() {}

func (x *ReadingMMTN) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadingMMTN.ProtoReflect.Descriptor instead.
func (*ReadingMMTN) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{109}
}

func (x *ReadingMMTN) GetLogicalNode() *LogicalNode {
	if x != nil {
		return x.LogicalNode
	}
	return nil
}

func (x *ReadingMMTN) GetDmdVAh() *BCR {
	if x != nil {
		return x.DmdVAh
	}
	return nil
}

func (x *ReadingMMTN) GetDmdVArh() *BCR {
	if x != nil {
		return x.DmdVArh
	}
	return nil
}

func (x *ReadingMMTN) GetDmdWh() *BCR {
	if x != nil {
		return x.DmdWh
	}
	return nil
}

func (x *ReadingMMTN) GetSupVAh() *BCR {
	if x != nil {
		return x.SupVAh
	}
	return nil
}

func (x *ReadingMMTN) GetSupVArh() *BCR {
	if x != nil {
		return x.SupVArh
	}
	return nil
}

func (x *ReadingMMTN) GetSupWh() *BCR {
	if x != nil {
		return x.SupWh
	}
	return nil
}

func (x *ReadingMMTN) GetTotVAh() *BCR {
	if x != nil {
		return x.TotVAh
	}
	return nil
}

func (x *ReadingMMTN) GetTotVArh() *BCR {
	if x != nil {
		return x.TotVArh
	}
	return nil
}

func (x *ReadingMMTN) GetTotWh() *BCR {
	if x != nil {
		return x.TotWh
	}
	return nil
}

// Specialized 61850 MMTN LN class
type PhaseMMTN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MISSING DOCUMENTATION!!!
	PhsA *ReadingMMTN `protobuf:"bytes,1,opt,name=phsA,proto3" json:"phsA,omitempty"`
	// MISSING DOCUMENTATION!!!
	PhsAB *ReadingMMTN `protobuf:"bytes,2,opt,name=phsAB,proto3" json:"phsAB,omitempty"`
	// MISSING DOCUMENTATION!!!
	PhsB *ReadingMMTN `protobuf:"bytes,3,opt,name=phsB,proto3" json:"phsB,omitempty"`
	// MISSING DOCUMENTATION!!!
	PhsBC *ReadingMMTN `protobuf:"bytes,4,opt,name=phsBC,proto3" json:"phsBC,omitempty"`
	// MISSING DOCUMENTATION!!!
	PhsC *ReadingMMTN `protobuf:"bytes,5,opt,name=phsC,proto3" json:"phsC,omitempty"`
	// MISSING DOCUMENTATION!!!
	PhsCA *ReadingMMTN `protobuf:"bytes,6,opt,name=phsCA,proto3" json:"phsCA,omitempty"`
}

func (x *PhaseMMTN) Reset() {
	*x = PhaseMMTN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhaseMMTN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhaseMMTN) ProtoMessage() {}

func (x *PhaseMMTN) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhaseMMTN.ProtoReflect.Descriptor instead.
func (*PhaseMMTN) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{110}
}

func (x *PhaseMMTN) GetPhsA() *ReadingMMTN {
	if x != nil {
		return x.PhsA
	}
	return nil
}

func (x *PhaseMMTN) GetPhsAB() *ReadingMMTN {
	if x != nil {
		return x.PhsAB
	}
	return nil
}

func (x *PhaseMMTN) GetPhsB() *ReadingMMTN {
	if x != nil {
		return x.PhsB
	}
	return nil
}

func (x *PhaseMMTN) GetPhsBC() *ReadingMMTN {
	if x != nil {
		return x.PhsBC
	}
	return nil
}

func (x *PhaseMMTN) GetPhsC() *ReadingMMTN {
	if x != nil {
		return x.PhsC
	}
	return nil
}

func (x *PhaseMMTN) GetPhsCA() *ReadingMMTN {
	if x != nil {
		return x.PhsCA
	}
	return nil
}

type Optional_RecloseActionKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value RecloseActionKind `protobuf:"varint,1,opt,name=value,proto3,enum=commonmodule.RecloseActionKind" json:"value,omitempty"`
}

func (x *Optional_RecloseActionKind) Reset() {
	*x = Optional_RecloseActionKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Optional_RecloseActionKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optional_RecloseActionKind) ProtoMessage() {}

func (x *Optional_RecloseActionKind) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optional_RecloseActionKind.ProtoReflect.Descriptor instead.
func (*Optional_RecloseActionKind) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{111}
}

func (x *Optional_RecloseActionKind) GetValue() RecloseActionKind {
	if x != nil {
		return x.Value
	}
	return RecloseActionKind_RecloseActionKind_UNDEFINED
}

// [OpenFMB CDC extension] Per Phase reclose action kind.
type PhaseRecloseAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 3 Phase control.
	Phs3 *Optional_RecloseActionKind `protobuf:"bytes,1,opt,name=phs3,proto3" json:"phs3,omitempty"`
	// Phase A control.
	PhsA *Optional_RecloseActionKind `protobuf:"bytes,2,opt,name=phsA,proto3" json:"phsA,omitempty"`
	// Phase B control.
	PhsB *Optional_RecloseActionKind `protobuf:"bytes,3,opt,name=phsB,proto3" json:"phsB,omitempty"`
	// Phase C control.
	PhsC *Optional_RecloseActionKind `protobuf:"bytes,4,opt,name=phsC,proto3" json:"phsC,omitempty"`
}

func (x *PhaseRecloseAction) Reset() {
	*x = PhaseRecloseAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhaseRecloseAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhaseRecloseAction) ProtoMessage() {}

func (x *PhaseRecloseAction) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhaseRecloseAction.ProtoReflect.Descriptor instead.
func (*PhaseRecloseAction) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{112}
}

func (x *PhaseRecloseAction) GetPhs3() *Optional_RecloseActionKind {
	if x != nil {
		return x.Phs3
	}
	return nil
}

func (x *PhaseRecloseAction) GetPhsA() *Optional_RecloseActionKind {
	if x != nil {
		return x.PhsA
	}
	return nil
}

func (x *PhaseRecloseAction) GetPhsB() *Optional_RecloseActionKind {
	if x != nil {
		return x.PhsB
	}
	return nil
}

func (x *PhaseRecloseAction) GetPhsC() *Optional_RecloseActionKind {
	if x != nil {
		return x.PhsC
	}
	return nil
}

// [OpenFMB CDC extension] Per Phase SPC.
type PhaseSPC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 3 Phase control.
	Phs3 *ControlSPC `protobuf:"bytes,1,opt,name=phs3,proto3" json:"phs3,omitempty"`
	// Phase A control.
	PhsA *ControlSPC `protobuf:"bytes,2,opt,name=phsA,proto3" json:"phsA,omitempty"`
	// Phase B control.
	PhsB *ControlSPC `protobuf:"bytes,3,opt,name=phsB,proto3" json:"phsB,omitempty"`
	// Phase C control.
	PhsC *ControlSPC `protobuf:"bytes,4,opt,name=phsC,proto3" json:"phsC,omitempty"`
}

func (x *PhaseSPC) Reset() {
	*x = PhaseSPC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhaseSPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhaseSPC) ProtoMessage() {}

func (x *PhaseSPC) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhaseSPC.ProtoReflect.Descriptor instead.
func (*PhaseSPC) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{113}
}

func (x *PhaseSPC) GetPhs3() *ControlSPC {
	if x != nil {
		return x.Phs3
	}
	return nil
}

func (x *PhaseSPC) GetPhsA() *ControlSPC {
	if x != nil {
		return x.PhsA
	}
	return nil
}

func (x *PhaseSPC) GetPhsB() *ControlSPC {
	if x != nil {
		return x.PhsB
	}
	return nil
}

func (x *PhaseSPC) GetPhsC() *ControlSPC {
	if x != nil {
		return x.PhsC
	}
	return nil
}

// [OpenFMB CDC extension] Per Phase DPS.
type PhaseSPS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 3 Phase status.
	Phs3 *StatusSPS `protobuf:"bytes,1,opt,name=phs3,proto3" json:"phs3,omitempty"`
	// Phase A status.
	PhsA *StatusSPS `protobuf:"bytes,2,opt,name=phsA,proto3" json:"phsA,omitempty"`
	// Phase B status.
	PhsB *StatusSPS `protobuf:"bytes,3,opt,name=phsB,proto3" json:"phsB,omitempty"`
	// Phase C status.
	PhsC *StatusSPS `protobuf:"bytes,4,opt,name=phsC,proto3" json:"phsC,omitempty"`
}

func (x *PhaseSPS) Reset() {
	*x = PhaseSPS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhaseSPS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhaseSPS) ProtoMessage() {}

func (x *PhaseSPS) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhaseSPS.ProtoReflect.Descriptor instead.
func (*PhaseSPS) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{114}
}

func (x *PhaseSPS) GetPhs3() *StatusSPS {
	if x != nil {
		return x.Phs3
	}
	return nil
}

func (x *PhaseSPS) GetPhsA() *StatusSPS {
	if x != nil {
		return x.PhsA
	}
	return nil
}

func (x *PhaseSPS) GetPhsB() *StatusSPS {
	if x != nil {
		return x.PhsB
	}
	return nil
}

func (x *PhaseSPS) GetPhsC() *StatusSPS {
	if x != nil {
		return x.PhsC
	}
	return nil
}

// [OpenFMB CDC extension] Phase magnitude (PMG). Phase to ground/neutral related per-phase
// measured values.
type PMG struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Net current, as the algebraic sum of the instantaneous values of currents flowing through all
	// live conductors and the neutral of a circuit at one point of the electrical installation ('phsA
	// instCVal'+'phsB.instCVal'+'phsC.instCVal'+'neut.instCVal').
	Net *MV `protobuf:"bytes,1,opt,name=net,proto3" json:"net,omitempty"`
	// Value of phase A.
	PhsA *MV `protobuf:"bytes,2,opt,name=phsA,proto3" json:"phsA,omitempty"`
	// Value of phase B.
	PhsB *MV `protobuf:"bytes,3,opt,name=phsB,proto3" json:"phsB,omitempty"`
	// Value of phase C.
	PhsC *MV `protobuf:"bytes,4,opt,name=phsC,proto3" json:"phsC,omitempty"`
}

func (x *PMG) Reset() {
	*x = PMG{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PMG) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PMG) ProtoMessage() {}

func (x *PMG) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PMG.ProtoReflect.Descriptor instead.
func (*PMG) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{115}
}

func (x *PMG) GetNet() *MV {
	if x != nil {
		return x.Net
	}
	return nil
}

func (x *PMG) GetPhsA() *MV {
	if x != nil {
		return x.PhsA
	}
	return nil
}

func (x *PMG) GetPhsB() *MV {
	if x != nil {
		return x.PhsB
	}
	return nil
}

func (x *PMG) GetPhsC() *MV {
	if x != nil {
		return x.PhsC
	}
	return nil
}

// Grid connect mode kind
type RampRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MISSING DOCUMENTATION!!!
	NegativeReactivePowerKVArPerMin *wrapperspb.FloatValue `protobuf:"bytes,1,opt,name=negativeReactivePowerKVArPerMin,proto3" json:"negativeReactivePowerKVArPerMin,omitempty"`
	// MISSING DOCUMENTATION!!!
	NegativeRealPowerKWPerMin *wrapperspb.FloatValue `protobuf:"bytes,2,opt,name=negativeRealPowerKWPerMin,proto3" json:"negativeRealPowerKWPerMin,omitempty"`
	// MISSING DOCUMENTATION!!!
	PositiveReactivePowerKVArPerMin *wrapperspb.FloatValue `protobuf:"bytes,3,opt,name=positiveReactivePowerKVArPerMin,proto3" json:"positiveReactivePowerKVArPerMin,omitempty"`
	// MISSING DOCUMENTATION!!!
	PositiveRealPowerKWPerMin *wrapperspb.FloatValue `protobuf:"bytes,4,opt,name=positiveRealPowerKWPerMin,proto3" json:"positiveRealPowerKWPerMin,omitempty"`
}

func (x *RampRate) Reset() {
	*x = RampRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RampRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RampRate) ProtoMessage() {}

func (x *RampRate) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RampRate.ProtoReflect.Descriptor instead.
func (*RampRate) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{116}
}

func (x *RampRate) GetNegativeReactivePowerKVArPerMin() *wrapperspb.FloatValue {
	if x != nil {
		return x.NegativeReactivePowerKVArPerMin
	}
	return nil
}

func (x *RampRate) GetNegativeRealPowerKWPerMin() *wrapperspb.FloatValue {
	if x != nil {
		return x.NegativeRealPowerKWPerMin
	}
	return nil
}

func (x *RampRate) GetPositiveReactivePowerKVArPerMin() *wrapperspb.FloatValue {
	if x != nil {
		return x.PositiveReactivePowerKVArPerMin
	}
	return nil
}

func (x *RampRate) GetPositiveRealPowerKWPerMin() *wrapperspb.FloatValue {
	if x != nil {
		return x.PositiveRealPowerKWPerMin
	}
	return nil
}

// Generic reading message information
type ReadingMessageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	MessageInfo *MessageInfo `protobuf:"bytes,1,opt,name=messageInfo,proto3" json:"messageInfo,omitempty"`
}

func (x *ReadingMessageInfo) Reset() {
	*x = ReadingMessageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadingMessageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadingMessageInfo) ProtoMessage() {}

func (x *ReadingMessageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadingMessageInfo.ProtoReflect.Descriptor instead.
func (*ReadingMessageInfo) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{117}
}

func (x *ReadingMessageInfo) GetMessageInfo() *MessageInfo {
	if x != nil {
		return x.MessageInfo
	}
	return nil
}

// Specialized 61850 MMTR class
type ReadingMMTR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	LogicalNode *LogicalNode `protobuf:"bytes,1,opt,name=logicalNode,proto3" json:"logicalNode,omitempty"`
	// Apparent energy demand (direction: from busbar).
	DmdVAh *BCR `protobuf:"bytes,2,opt,name=DmdVAh,proto3" json:"DmdVAh,omitempty"`
	// Reactive energy demand (direction: from busbar).
	DmdVArh *BCR `protobuf:"bytes,3,opt,name=DmdVArh,proto3" json:"DmdVArh,omitempty"`
	// Real energy demand (direction: from busbar).
	DmdWh *BCR `protobuf:"bytes,4,opt,name=DmdWh,proto3" json:"DmdWh,omitempty"`
	// Apparent energy supply (default direction: towards busbar).
	SupVAh *BCR `protobuf:"bytes,5,opt,name=SupVAh,proto3" json:"SupVAh,omitempty"`
	// Reactive energy supply (default direction: towards busbar).
	SupVArh *BCR `protobuf:"bytes,6,opt,name=SupVArh,proto3" json:"SupVArh,omitempty"`
	// Real energy supply (default direction: towards busbar).
	SupWh *BCR `protobuf:"bytes,7,opt,name=SupWh,proto3" json:"SupWh,omitempty"`
	// Net apparent energy since last reset.
	TotVAh *BCR `protobuf:"bytes,8,opt,name=TotVAh,proto3" json:"TotVAh,omitempty"`
	// Net reactive energy since last reset.
	TotVArh *BCR `protobuf:"bytes,9,opt,name=TotVArh,proto3" json:"TotVArh,omitempty"`
	// Net real energy since last reset.
	TotWh *BCR `protobuf:"bytes,10,opt,name=TotWh,proto3" json:"TotWh,omitempty"`
}

func (x *ReadingMMTR) Reset() {
	*x = ReadingMMTR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadingMMTR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadingMMTR) ProtoMessage() {}

func (x *ReadingMMTR) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadingMMTR.ProtoReflect.Descriptor instead.
func (*ReadingMMTR) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{118}
}

func (x *ReadingMMTR) GetLogicalNode() *LogicalNode {
	if x != nil {
		return x.LogicalNode
	}
	return nil
}

func (x *ReadingMMTR) GetDmdVAh() *BCR {
	if x != nil {
		return x.DmdVAh
	}
	return nil
}

func (x *ReadingMMTR) GetDmdVArh() *BCR {
	if x != nil {
		return x.DmdVArh
	}
	return nil
}

func (x *ReadingMMTR) GetDmdWh() *BCR {
	if x != nil {
		return x.DmdWh
	}
	return nil
}

func (x *ReadingMMTR) GetSupVAh() *BCR {
	if x != nil {
		return x.SupVAh
	}
	return nil
}

func (x *ReadingMMTR) GetSupVArh() *BCR {
	if x != nil {
		return x.SupVArh
	}
	return nil
}

func (x *ReadingMMTR) GetSupWh() *BCR {
	if x != nil {
		return x.SupWh
	}
	return nil
}

func (x *ReadingMMTR) GetTotVAh() *BCR {
	if x != nil {
		return x.TotVAh
	}
	return nil
}

func (x *ReadingMMTR) GetTotVArh() *BCR {
	if x != nil {
		return x.TotVArh
	}
	return nil
}

func (x *ReadingMMTR) GetTotWh() *BCR {
	if x != nil {
		return x.TotWh
	}
	return nil
}

// Phase to ground/neutral related measured values of a three-phase system (WYE)
type WYE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Net current, as the algebraic sum of the instantaneous values of currents flowing through all
	// live conductors and the neutral of a circuit at one point of the electrical installation ('phsA
	// instCVal'+'phsB.instCVal'+'phsC.instCVal'+'neut.instCVal').
	Net *CMV `protobuf:"bytes,1,opt,name=net,proto3" json:"net,omitempty"`
	// Value of the measured phase neutral. If a direct measurement of this value is not available, it
	// is acceptable to substitute an estimate computed by creating the algebraic sum of the instantaneous
	// values of currents flowing through all live conductors ('phsA.instCVal'+'phsB.instCVal'+'phsC
	// instCVal'); in that case, 'neut'='res'.
	Neut *CMV `protobuf:"bytes,2,opt,name=neut,proto3" json:"neut,omitempty"`
	// Value of phase A.
	PhsA *CMV `protobuf:"bytes,3,opt,name=phsA,proto3" json:"phsA,omitempty"`
	// Value of phase B.
	PhsB *CMV `protobuf:"bytes,4,opt,name=phsB,proto3" json:"phsB,omitempty"`
	// Value of phase C.
	PhsC *CMV `protobuf:"bytes,5,opt,name=phsC,proto3" json:"phsC,omitempty"`
	// Residual current, as the algebraic sum of the instantaneous values of currents flowing through
	// all live conductors of a circuit at one point of the electrical installation ('phsA.instCVal'+'phsB
	// instCVal'+'phsC.instCVal').
	Res *CMV `protobuf:"bytes,6,opt,name=res,proto3" json:"res,omitempty"`
}

func (x *WYE) Reset() {
	*x = WYE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WYE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WYE) ProtoMessage() {}

func (x *WYE) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WYE.ProtoReflect.Descriptor instead.
func (*WYE) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{119}
}

func (x *WYE) GetNet() *CMV {
	if x != nil {
		return x.Net
	}
	return nil
}

func (x *WYE) GetNeut() *CMV {
	if x != nil {
		return x.Neut
	}
	return nil
}

func (x *WYE) GetPhsA() *CMV {
	if x != nil {
		return x.PhsA
	}
	return nil
}

func (x *WYE) GetPhsB() *CMV {
	if x != nil {
		return x.PhsB
	}
	return nil
}

func (x *WYE) GetPhsC() *CMV {
	if x != nil {
		return x.PhsC
	}
	return nil
}

func (x *WYE) GetRes() *CMV {
	if x != nil {
		return x.Res
	}
	return nil
}

// Specialized 61850 MMXU LN class
type ReadingMMXU struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	LogicalNode *LogicalNode `protobuf:"bytes,1,opt,name=logicalNode,proto3" json:"logicalNode,omitempty"`
	// Phase to ground/phase to neutral three phase currents.
	A *WYE `protobuf:"bytes,2,opt,name=A,proto3" json:"A,omitempty"`
	// Kind of statistical calculation, specifying how the data attributes that represent analogue
	// values have been calculated. The calculation method shall be the same for all data objects of the
	// logical node instance.If the value is 'PEAK_FUNDAMENTAL', angle may be present in a data object of
	// complex measured value type (CMV, such as in WYE, DEL, etc.), otherwise angle is not used (if
	// ‘TRUE_RMS’ and ‘RMS_FUNDAMENTAL’).If the value is 'unspecified', the dependent data objects may be
	// meaningless.
	ClcMth *ENG_CalcMethodKind `protobuf:"bytes,3,opt,name=ClcMth,proto3" json:"ClcMth,omitempty"`
	// Frequency [Hz].
	Hz *MV `protobuf:"bytes,4,opt,name=Hz,proto3" json:"Hz,omitempty"`
	// Phase to ground/phase to neutral power factors.The power factor is defined as P (active power) /
	// S (apparent power), so the value range is 0...1. If current (I) and voltage (U) are sinusoidal and
	// displaced by the angle phi, then the power factor is |cos phi|, again with the value range 0...1.
	// Therefore, for the power factor per phase, value is contained in 'mag' and 'ang' is not used.
	PF *WYE `protobuf:"bytes,5,opt,name=PF,proto3" json:"PF,omitempty"`
	// Sign convention for power factor 'PF' (and reactive power 'VAr').
	PFSign *ENG_PFSignKind `protobuf:"bytes,6,opt,name=PFSign,proto3" json:"PFSign,omitempty"`
	// Phase to ground (line) voltages.
	PhV *WYE `protobuf:"bytes,7,opt,name=PhV,proto3" json:"PhV,omitempty"`
	// Phase to phase voltages.
	PPV *DEL `protobuf:"bytes,8,opt,name=PPV,proto3" json:"PPV,omitempty"`
	// Phase to ground/phase to neutral apparent powers S.
	VA *WYE `protobuf:"bytes,9,opt,name=VA,proto3" json:"VA,omitempty"`
	// Phase to ground/phase to neutral reactive powers Q.
	VAr *WYE `protobuf:"bytes,10,opt,name=VAr,proto3" json:"VAr,omitempty"`
	// Phase to ground/phase to neutral real powers P.
	W *WYE `protobuf:"bytes,11,opt,name=W,proto3" json:"W,omitempty"`
}

func (x *ReadingMMXU) Reset() {
	*x = ReadingMMXU{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadingMMXU) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadingMMXU) ProtoMessage() {}

func (x *ReadingMMXU) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadingMMXU.ProtoReflect.Descriptor instead.
func (*ReadingMMXU) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{120}
}

func (x *ReadingMMXU) GetLogicalNode() *LogicalNode {
	if x != nil {
		return x.LogicalNode
	}
	return nil
}

func (x *ReadingMMXU) GetA() *WYE {
	if x != nil {
		return x.A
	}
	return nil
}

func (x *ReadingMMXU) GetClcMth() *ENG_CalcMethodKind {
	if x != nil {
		return x.ClcMth
	}
	return nil
}

func (x *ReadingMMXU) GetHz() *MV {
	if x != nil {
		return x.Hz
	}
	return nil
}

func (x *ReadingMMXU) GetPF() *WYE {
	if x != nil {
		return x.PF
	}
	return nil
}

func (x *ReadingMMXU) GetPFSign() *ENG_PFSignKind {
	if x != nil {
		return x.PFSign
	}
	return nil
}

func (x *ReadingMMXU) GetPhV() *WYE {
	if x != nil {
		return x.PhV
	}
	return nil
}

func (x *ReadingMMXU) GetPPV() *DEL {
	if x != nil {
		return x.PPV
	}
	return nil
}

func (x *ReadingMMXU) GetVA() *WYE {
	if x != nil {
		return x.VA
	}
	return nil
}

func (x *ReadingMMXU) GetVAr() *WYE {
	if x != nil {
		return x.VAr
	}
	return nil
}

func (x *ReadingMMXU) GetW() *WYE {
	if x != nil {
		return x.W
	}
	return nil
}

// Source configured setting
type SourceCapabilityConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	LogicalNode *LogicalNode `protobuf:"bytes,1,opt,name=logicalNode,proto3" json:"logicalNode,omitempty"`
	// Amp Maximum configured value
	AMax *ASG `protobuf:"bytes,2,opt,name=AMax,proto3" json:"AMax,omitempty"`
	// Apparent Power Maximum configured value
	VAMax *ASG `protobuf:"bytes,3,opt,name=VAMax,proto3" json:"VAMax,omitempty"`
	// Reactive Power Absorbed Maximum configured value
	VarMaxAbs *ASG `protobuf:"bytes,4,opt,name=VarMaxAbs,proto3" json:"VarMaxAbs,omitempty"`
	// Reactive Power Injected Maximum configured value
	VarMaxInj *ASG `protobuf:"bytes,5,opt,name=VarMaxInj,proto3" json:"VarMaxInj,omitempty"`
	// AC voltage maximum configured value
	VMax *ASG `protobuf:"bytes,6,opt,name=VMax,proto3" json:"VMax,omitempty"`
	// AC voltage minimum configured value
	VMin *ASG `protobuf:"bytes,7,opt,name=VMin,proto3" json:"VMin,omitempty"`
	// AC voltage nominal configured value
	VNom *ASG `protobuf:"bytes,8,opt,name=VNom,proto3" json:"VNom,omitempty"`
	// Active Power Max configured value
	WMax *ASG `protobuf:"bytes,9,opt,name=WMax,proto3" json:"WMax,omitempty"`
	// Active Power (Over-Excited) configured value
	WOvrExt *ASG `protobuf:"bytes,10,opt,name=WOvrExt,proto3" json:"WOvrExt,omitempty"`
	// Active power configured value at specified over-excited power factor
	WOvrExtPF *ASG `protobuf:"bytes,11,opt,name=WOvrExtPF,proto3" json:"WOvrExtPF,omitempty"`
	// Active Power (Under-Excited) configured value
	WUndExt *ASG `protobuf:"bytes,12,opt,name=WUndExt,proto3" json:"WUndExt,omitempty"`
	// Active power configured value at specified under-excited power factor
	WUndExtPF *ASG `protobuf:"bytes,13,opt,name=WUndExtPF,proto3" json:"WUndExtPF,omitempty"`
}

func (x *SourceCapabilityConfiguration) Reset() {
	*x = SourceCapabilityConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceCapabilityConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceCapabilityConfiguration) ProtoMessage() {}

func (x *SourceCapabilityConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceCapabilityConfiguration.ProtoReflect.Descriptor instead.
func (*SourceCapabilityConfiguration) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{121}
}

func (x *SourceCapabilityConfiguration) GetLogicalNode() *LogicalNode {
	if x != nil {
		return x.LogicalNode
	}
	return nil
}

func (x *SourceCapabilityConfiguration) GetAMax() *ASG {
	if x != nil {
		return x.AMax
	}
	return nil
}

func (x *SourceCapabilityConfiguration) GetVAMax() *ASG {
	if x != nil {
		return x.VAMax
	}
	return nil
}

func (x *SourceCapabilityConfiguration) GetVarMaxAbs() *ASG {
	if x != nil {
		return x.VarMaxAbs
	}
	return nil
}

func (x *SourceCapabilityConfiguration) GetVarMaxInj() *ASG {
	if x != nil {
		return x.VarMaxInj
	}
	return nil
}

func (x *SourceCapabilityConfiguration) GetVMax() *ASG {
	if x != nil {
		return x.VMax
	}
	return nil
}

func (x *SourceCapabilityConfiguration) GetVMin() *ASG {
	if x != nil {
		return x.VMin
	}
	return nil
}

func (x *SourceCapabilityConfiguration) GetVNom() *ASG {
	if x != nil {
		return x.VNom
	}
	return nil
}

func (x *SourceCapabilityConfiguration) GetWMax() *ASG {
	if x != nil {
		return x.WMax
	}
	return nil
}

func (x *SourceCapabilityConfiguration) GetWOvrExt() *ASG {
	if x != nil {
		return x.WOvrExt
	}
	return nil
}

func (x *SourceCapabilityConfiguration) GetWOvrExtPF() *ASG {
	if x != nil {
		return x.WOvrExtPF
	}
	return nil
}

func (x *SourceCapabilityConfiguration) GetWUndExt() *ASG {
	if x != nil {
		return x.WUndExt
	}
	return nil
}

func (x *SourceCapabilityConfiguration) GetWUndExtPF() *ASG {
	if x != nil {
		return x.WUndExtPF
	}
	return nil
}

type Optional_NorOpCatKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value NorOpCatKind `protobuf:"varint,1,opt,name=value,proto3,enum=commonmodule.NorOpCatKind" json:"value,omitempty"`
}

func (x *Optional_NorOpCatKind) Reset() {
	*x = Optional_NorOpCatKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Optional_NorOpCatKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optional_NorOpCatKind) ProtoMessage() {}

func (x *Optional_NorOpCatKind) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optional_NorOpCatKind.ProtoReflect.Descriptor instead.
func (*Optional_NorOpCatKind) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{122}
}

func (x *Optional_NorOpCatKind) GetValue() NorOpCatKind {
	if x != nil {
		return x.Value
	}
	return NorOpCatKind_NorOpCatKind_UNDEFINED
}

type Optional_AbnOpCatKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value AbnOpCatKind `protobuf:"varint,1,opt,name=value,proto3,enum=commonmodule.AbnOpCatKind" json:"value,omitempty"`
}

func (x *Optional_AbnOpCatKind) Reset() {
	*x = Optional_AbnOpCatKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Optional_AbnOpCatKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optional_AbnOpCatKind) ProtoMessage() {}

func (x *Optional_AbnOpCatKind) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optional_AbnOpCatKind.ProtoReflect.Descriptor instead.
func (*Optional_AbnOpCatKind) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{123}
}

func (x *Optional_AbnOpCatKind) GetValue() AbnOpCatKind {
	if x != nil {
		return x.Value
	}
	return AbnOpCatKind_AbnOpCatKind_UNDEFINED
}

// Source capability ratings
type SourceCapabilityRatings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	LogicalNode *LogicalNode `protobuf:"bytes,1,opt,name=logicalNode,proto3" json:"logicalNode,omitempty"`
	// Abnormal Operating Performance Category  Text stating: “IEEE 1547:2018 Either “I”, “II”, or
	// “III” is stated for the Abnormal Category
	AbnOpCatRtg AbnOpCatKind `protobuf:"varint,2,opt,name=AbnOpCatRtg,proto3,enum=commonmodule.AbnOpCatKind" json:"AbnOpCatRtg,omitempty"`
	// Amp Maximum Rating  SunSpec has this field but not in IEEE1547
	AMaxRtg *ASG `protobuf:"bytes,3,opt,name=AMaxRtg,proto3" json:"AMaxRtg,omitempty"`
	// Frequency nominal rating, default to 60 hz if not provide and cannot be configured.
	FreqNomRtg *ASG `protobuf:"bytes,4,opt,name=FreqNomRtg,proto3" json:"FreqNomRtg,omitempty"`
	// Normal operating performance category
	NorOpCatRtg NorOpCatKind `protobuf:"varint,5,opt,name=NorOpCatRtg,proto3,enum=commonmodule.NorOpCatKind" json:"NorOpCatRtg,omitempty"`
	// Reactive susceptance that remains connected to the Area EPS in the cease to energize and trip state
	ReactSusceptRtg *ASG `protobuf:"bytes,6,opt,name=ReactSusceptRtg,proto3" json:"ReactSusceptRtg,omitempty"`
	// Apparent Power Maximum Rating
	VAMaxRtg *ASG `protobuf:"bytes,7,opt,name=VAMaxRtg,proto3" json:"VAMaxRtg,omitempty"`
	// Reactive Power Absorbed Maximum Rating
	VarMaxAbsRtg *ASG `protobuf:"bytes,8,opt,name=VarMaxAbsRtg,proto3" json:"VarMaxAbsRtg,omitempty"`
	// Reactive Power Injected Maximum Rating
	VarMaxInjRtg *ASG `protobuf:"bytes,9,opt,name=VarMaxInjRtg,proto3" json:"VarMaxInjRtg,omitempty"`
	// AC voltage maximum rating
	VMaxRtg *ASG `protobuf:"bytes,10,opt,name=VMaxRtg,proto3" json:"VMaxRtg,omitempty"`
	// AC voltage minimum rating
	VMinRtg *ASG `protobuf:"bytes,11,opt,name=VMinRtg,proto3" json:"VMinRtg,omitempty"`
	// AC voltage nominal rating
	VNomRtg *ASG `protobuf:"bytes,12,opt,name=VNomRtg,proto3" json:"VNomRtg,omitempty"`
	// Active Power Max Rating
	WMaxRtg *ASG `protobuf:"bytes,13,opt,name=WMaxRtg,proto3" json:"WMaxRtg,omitempty"`
	// Active Power (Over-Excited) Rating
	WOvrExtRtg *ASG `protobuf:"bytes,14,opt,name=WOvrExtRtg,proto3" json:"WOvrExtRtg,omitempty"`
	// Active power rating at specified over-excited power factor
	WOvrExtRtgPF *ASG `protobuf:"bytes,15,opt,name=WOvrExtRtgPF,proto3" json:"WOvrExtRtgPF,omitempty"`
	// Active Power (Under-Excited) Rating
	WUndExtRtg *ASG `protobuf:"bytes,16,opt,name=WUndExtRtg,proto3" json:"WUndExtRtg,omitempty"`
	// Active power rating at specified under-excited power factor
	WUndExtRtgPF *ASG `protobuf:"bytes,17,opt,name=WUndExtRtgPF,proto3" json:"WUndExtRtgPF,omitempty"`
}

func (x *SourceCapabilityRatings) Reset() {
	*x = SourceCapabilityRatings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceCapabilityRatings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceCapabilityRatings) ProtoMessage() {}

func (x *SourceCapabilityRatings) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceCapabilityRatings.ProtoReflect.Descriptor instead.
func (*SourceCapabilityRatings) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{124}
}

func (x *SourceCapabilityRatings) GetLogicalNode() *LogicalNode {
	if x != nil {
		return x.LogicalNode
	}
	return nil
}

func (x *SourceCapabilityRatings) GetAbnOpCatRtg() AbnOpCatKind {
	if x != nil {
		return x.AbnOpCatRtg
	}
	return AbnOpCatKind_AbnOpCatKind_UNDEFINED
}

func (x *SourceCapabilityRatings) GetAMaxRtg() *ASG {
	if x != nil {
		return x.AMaxRtg
	}
	return nil
}

func (x *SourceCapabilityRatings) GetFreqNomRtg() *ASG {
	if x != nil {
		return x.FreqNomRtg
	}
	return nil
}

func (x *SourceCapabilityRatings) GetNorOpCatRtg() NorOpCatKind {
	if x != nil {
		return x.NorOpCatRtg
	}
	return NorOpCatKind_NorOpCatKind_UNDEFINED
}

func (x *SourceCapabilityRatings) GetReactSusceptRtg() *ASG {
	if x != nil {
		return x.ReactSusceptRtg
	}
	return nil
}

func (x *SourceCapabilityRatings) GetVAMaxRtg() *ASG {
	if x != nil {
		return x.VAMaxRtg
	}
	return nil
}

func (x *SourceCapabilityRatings) GetVarMaxAbsRtg() *ASG {
	if x != nil {
		return x.VarMaxAbsRtg
	}
	return nil
}

func (x *SourceCapabilityRatings) GetVarMaxInjRtg() *ASG {
	if x != nil {
		return x.VarMaxInjRtg
	}
	return nil
}

func (x *SourceCapabilityRatings) GetVMaxRtg() *ASG {
	if x != nil {
		return x.VMaxRtg
	}
	return nil
}

func (x *SourceCapabilityRatings) GetVMinRtg() *ASG {
	if x != nil {
		return x.VMinRtg
	}
	return nil
}

func (x *SourceCapabilityRatings) GetVNomRtg() *ASG {
	if x != nil {
		return x.VNomRtg
	}
	return nil
}

func (x *SourceCapabilityRatings) GetWMaxRtg() *ASG {
	if x != nil {
		return x.WMaxRtg
	}
	return nil
}

func (x *SourceCapabilityRatings) GetWOvrExtRtg() *ASG {
	if x != nil {
		return x.WOvrExtRtg
	}
	return nil
}

func (x *SourceCapabilityRatings) GetWOvrExtRtgPF() *ASG {
	if x != nil {
		return x.WOvrExtRtgPF
	}
	return nil
}

func (x *SourceCapabilityRatings) GetWUndExtRtg() *ASG {
	if x != nil {
		return x.WUndExtRtg
	}
	return nil
}

func (x *SourceCapabilityRatings) GetWUndExtRtgPF() *ASG {
	if x != nil {
		return x.WUndExtRtgPF
	}
	return nil
}

// OpenFMB specialization for breaker, recloser and switch status and event profiles:  LN: Circuit
// breaker   Name: XCBR
type StatusAndEventXCBR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	LogicalNodeForEventAndStatus *LogicalNodeForEventAndStatus `protobuf:"bytes,1,opt,name=logicalNodeForEventAndStatus,proto3" json:"logicalNodeForEventAndStatus,omitempty"`
	// MISSING DOCUMENTATION!!!
	DynamicTest *ENS_DynamicTestKind `protobuf:"bytes,2,opt,name=DynamicTest,proto3" json:"DynamicTest,omitempty"`
	// MISSING DOCUMENTATION!!!
	Pos *PhaseDPS `protobuf:"bytes,3,opt,name=Pos,proto3" json:"Pos,omitempty"`
	// Fault latch: LT01=51A OR 51B OR 51C
	ProtectionPickup *ACD `protobuf:"bytes,4,opt,name=ProtectionPickup,proto3" json:"ProtectionPickup,omitempty"`
	// Protection mode such as a group setting or pre-defined curve profile. It is usually pre-defined
	// by a circuit segment service.
	ProtectionMode *StatusINS `protobuf:"bytes,5,opt,name=ProtectionMode,proto3" json:"ProtectionMode,omitempty"`
	// Reclose enabled
	RecloseEnabled *PhaseSPS `protobuf:"bytes,6,opt,name=RecloseEnabled,proto3" json:"RecloseEnabled,omitempty"`
	// Reclose mode such idle, cycling and lockout.
	ReclosingAction *PhaseRecloseAction `protobuf:"bytes,7,opt,name=ReclosingAction,proto3" json:"ReclosingAction,omitempty"`
}

func (x *StatusAndEventXCBR) Reset() {
	*x = StatusAndEventXCBR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusAndEventXCBR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusAndEventXCBR) ProtoMessage() {}

func (x *StatusAndEventXCBR) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusAndEventXCBR.ProtoReflect.Descriptor instead.
func (*StatusAndEventXCBR) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{125}
}

func (x *StatusAndEventXCBR) GetLogicalNodeForEventAndStatus() *LogicalNodeForEventAndStatus {
	if x != nil {
		return x.LogicalNodeForEventAndStatus
	}
	return nil
}

func (x *StatusAndEventXCBR) GetDynamicTest() *ENS_DynamicTestKind {
	if x != nil {
		return x.DynamicTest
	}
	return nil
}

func (x *StatusAndEventXCBR) GetPos() *PhaseDPS {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *StatusAndEventXCBR) GetProtectionPickup() *ACD {
	if x != nil {
		return x.ProtectionPickup
	}
	return nil
}

func (x *StatusAndEventXCBR) GetProtectionMode() *StatusINS {
	if x != nil {
		return x.ProtectionMode
	}
	return nil
}

func (x *StatusAndEventXCBR) GetRecloseEnabled() *PhaseSPS {
	if x != nil {
		return x.RecloseEnabled
	}
	return nil
}

func (x *StatusAndEventXCBR) GetReclosingAction() *PhaseRecloseAction {
	if x != nil {
		return x.ReclosingAction
	}
	return nil
}

// Integer control status
type StatusINC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Quality of the value in 'stVal'.
	Q *Quality `protobuf:"bytes,1,opt,name=q,proto3" json:"q,omitempty"`
	// Value of the data.
	StVal int32 `protobuf:"varint,2,opt,name=stVal,proto3" json:"stVal,omitempty"`
	// Timestamp of the last change or update event of 'stVal' or the last change of value in 'q'.
	T *Timestamp `protobuf:"bytes,3,opt,name=t,proto3" json:"t,omitempty"`
}

func (x *StatusINC) Reset() {
	*x = StatusINC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusINC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusINC) ProtoMessage() {}

func (x *StatusINC) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusINC.ProtoReflect.Descriptor instead.
func (*StatusINC) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{126}
}

func (x *StatusINC) GetQ() *Quality {
	if x != nil {
		return x.Q
	}
	return nil
}

func (x *StatusINC) GetStVal() int32 {
	if x != nil {
		return x.StVal
	}
	return 0
}

func (x *StatusINC) GetT() *Timestamp {
	if x != nil {
		return x.T
	}
	return nil
}

// &lt;&lt;statistics&gt;&gt; Integer controlled step position information (ISC)
type StatusISC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Quality of the value in 'valWTr'.
	Q *Quality `protobuf:"bytes,1,opt,name=q,proto3" json:"q,omitempty"`
	// Status value
	StVal int32 `protobuf:"varint,2,opt,name=stVal,proto3" json:"stVal,omitempty"`
	// Timestamp of the last change of the value in any of 'valWTr' or 'q'.
	T *Timestamp `protobuf:"bytes,3,opt,name=t,proto3" json:"t,omitempty"`
}

func (x *StatusISC) Reset() {
	*x = StatusISC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusISC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusISC) ProtoMessage() {}

func (x *StatusISC) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusISC.ProtoReflect.Descriptor instead.
func (*StatusISC) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{127}
}

func (x *StatusISC) GetQ() *Quality {
	if x != nil {
		return x.Q
	}
	return nil
}

func (x *StatusISC) GetStVal() int32 {
	if x != nil {
		return x.StVal
	}
	return 0
}

func (x *StatusISC) GetT() *Timestamp {
	if x != nil {
		return x.T
	}
	return nil
}

// Generic status message information
type StatusMessageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	MessageInfo *MessageInfo `protobuf:"bytes,1,opt,name=messageInfo,proto3" json:"messageInfo,omitempty"`
}

func (x *StatusMessageInfo) Reset() {
	*x = StatusMessageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusMessageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusMessageInfo) ProtoMessage() {}

func (x *StatusMessageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusMessageInfo.ProtoReflect.Descriptor instead.
func (*StatusMessageInfo) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{128}
}

func (x *StatusMessageInfo) GetMessageInfo() *MessageInfo {
	if x != nil {
		return x.MessageInfo
	}
	return nil
}

// Status value
type StatusValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	IdentifiedObject *IdentifiedObject `protobuf:"bytes,1,opt,name=identifiedObject,proto3" json:"identifiedObject,omitempty"`
	// MISSING DOCUMENTATION!!!
	ModBlk *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=modBlk,proto3" json:"modBlk,omitempty"`
}

func (x *StatusValue) Reset() {
	*x = StatusValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusValue) ProtoMessage() {}

func (x *StatusValue) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusValue.ProtoReflect.Descriptor instead.
func (*StatusValue) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{129}
}

func (x *StatusValue) GetIdentifiedObject() *IdentifiedObject {
	if x != nil {
		return x.IdentifiedObject
	}
	return nil
}

func (x *StatusValue) GetModBlk() *wrapperspb.BoolValue {
	if x != nil {
		return x.ModBlk
	}
	return nil
}

// Visible string status (VSS)
type VSS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Quality of the value in 'stVal'.
	Q *Quality `protobuf:"bytes,1,opt,name=q,proto3" json:"q,omitempty"`
	// Value of the data.
	StVal string `protobuf:"bytes,2,opt,name=stVal,proto3" json:"stVal,omitempty"`
	// Timestamp of the last change of the value in any of 'stVal' or 'q'.
	T *Timestamp `protobuf:"bytes,3,opt,name=t,proto3" json:"t,omitempty"`
}

func (x *VSS) Reset() {
	*x = VSS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VSS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VSS) ProtoMessage() {}

func (x *VSS) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VSS.ProtoReflect.Descriptor instead.
func (*VSS) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{130}
}

func (x *VSS) GetQ() *Quality {
	if x != nil {
		return x.Q
	}
	return nil
}

func (x *VSS) GetStVal() string {
	if x != nil {
		return x.StVal
	}
	return ""
}

func (x *VSS) GetT() *Timestamp {
	if x != nil {
		return x.T
	}
	return nil
}

// LN: Generic process I/O   Name: GGIO
type StringEventAndStatusGGIO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	LogicalNode *LogicalNode `protobuf:"bytes,1,opt,name=logicalNode,proto3" json:"logicalNode,omitempty"`
	// Phase code
	Phase *Optional_PhaseCodeKind `protobuf:"bytes,2,opt,name=Phase,proto3" json:"Phase,omitempty"`
	// String status
	StrIn *VSS `protobuf:"bytes,3,opt,name=StrIn,proto3" json:"StrIn,omitempty"`
}

func (x *StringEventAndStatusGGIO) Reset() {
	*x = StringEventAndStatusGGIO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringEventAndStatusGGIO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringEventAndStatusGGIO) ProtoMessage() {}

func (x *StringEventAndStatusGGIO) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringEventAndStatusGGIO.ProtoReflect.Descriptor instead.
func (*StringEventAndStatusGGIO) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{131}
}

func (x *StringEventAndStatusGGIO) GetLogicalNode() *LogicalNode {
	if x != nil {
		return x.LogicalNode
	}
	return nil
}

func (x *StringEventAndStatusGGIO) GetPhase() *Optional_PhaseCodeKind {
	if x != nil {
		return x.Phase
	}
	return nil
}

func (x *StringEventAndStatusGGIO) GetStrIn() *VSS {
	if x != nil {
		return x.StrIn
	}
	return nil
}

// Point definition (Point)
type SwitchPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Switch position
	Pos *ControlDPC `protobuf:"bytes,1,opt,name=Pos,proto3" json:"Pos,omitempty"`
	// Start time
	StartTime *ControlTimestamp `protobuf:"bytes,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
}

func (x *SwitchPoint) Reset() {
	*x = SwitchPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchPoint) ProtoMessage() {}

func (x *SwitchPoint) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchPoint.ProtoReflect.Descriptor instead.
func (*SwitchPoint) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{132}
}

func (x *SwitchPoint) GetPos() *ControlDPC {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SwitchPoint) GetStartTime() *ControlTimestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

// Curve shape setting (FC=SP) (CSG_SP)
type SwitchCSG struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The array with the points specifying a curve shape.
	CrvPts []*SwitchPoint `protobuf:"bytes,1,rep,name=crvPts,proto3" json:"crvPts,omitempty"`
}

func (x *SwitchCSG) Reset() {
	*x = SwitchCSG{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchCSG) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchCSG) ProtoMessage() {}

func (x *SwitchCSG) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchCSG.ProtoReflect.Descriptor instead.
func (*SwitchCSG) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{133}
}

func (x *SwitchCSG) GetCrvPts() []*SwitchPoint {
	if x != nil {
		return x.CrvPts
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type TmHzPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is an absolute value field.
	HzVal float32 `protobuf:"fixed32,1,opt,name=hzVal,proto3" json:"hzVal,omitempty"`
	// MISSING DOCUMENTATION!!!
	TmVal *ClearingTime `protobuf:"bytes,2,opt,name=tmVal,proto3" json:"tmVal,omitempty"`
}

func (x *TmHzPoint) Reset() {
	*x = TmHzPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TmHzPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TmHzPoint) ProtoMessage() {}

func (x *TmHzPoint) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TmHzPoint.ProtoReflect.Descriptor instead.
func (*TmHzPoint) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{134}
}

func (x *TmHzPoint) GetHzVal() float32 {
	if x != nil {
		return x.HzVal
	}
	return 0
}

func (x *TmHzPoint) GetTmVal() *ClearingTime {
	if x != nil {
		return x.TmVal
	}
	return nil
}

// Frequency-Trip Function
type TmHzCSG struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HF Trip Curve Points
	OverCrvPts []*TmHzPoint `protobuf:"bytes,1,rep,name=overCrvPts,proto3" json:"overCrvPts,omitempty"`
	// LF Trip Curve Points
	UnderCrvPts []*TmHzPoint `protobuf:"bytes,2,rep,name=underCrvPts,proto3" json:"underCrvPts,omitempty"`
}

func (x *TmHzCSG) Reset() {
	*x = TmHzCSG{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TmHzCSG) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TmHzCSG) ProtoMessage() {}

func (x *TmHzCSG) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TmHzCSG.ProtoReflect.Descriptor instead.
func (*TmHzCSG) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{135}
}

func (x *TmHzCSG) GetOverCrvPts() []*TmHzPoint {
	if x != nil {
		return x.OverCrvPts
	}
	return nil
}

func (x *TmHzCSG) GetUnderCrvPts() []*TmHzPoint {
	if x != nil {
		return x.UnderCrvPts
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type TmVoltPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MISSING DOCUMENTATION!!!
	TmVal *ClearingTime `protobuf:"bytes,1,opt,name=tmVal,proto3" json:"tmVal,omitempty"`
	// This is an absolute value field.
	VoltVal float32 `protobuf:"fixed32,2,opt,name=voltVal,proto3" json:"voltVal,omitempty"`
}

func (x *TmVoltPoint) Reset() {
	*x = TmVoltPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TmVoltPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TmVoltPoint) ProtoMessage() {}

func (x *TmVoltPoint) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TmVoltPoint.ProtoReflect.Descriptor instead.
func (*TmVoltPoint) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{136}
}

func (x *TmVoltPoint) GetTmVal() *ClearingTime {
	if x != nil {
		return x.TmVal
	}
	return nil
}

func (x *TmVoltPoint) GetVoltVal() float32 {
	if x != nil {
		return x.VoltVal
	}
	return 0
}

// MISSING DOCUMENTATION!!!
type TmVoltCSG struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HV Trip Curve Points
	OverCrvPts []*TmVoltPoint `protobuf:"bytes,1,rep,name=overCrvPts,proto3" json:"overCrvPts,omitempty"`
	// LV Trip Curve Points
	UnderCrvPts []*TmVoltPoint `protobuf:"bytes,2,rep,name=underCrvPts,proto3" json:"underCrvPts,omitempty"`
}

func (x *TmVoltCSG) Reset() {
	*x = TmVoltCSG{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TmVoltCSG) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TmVoltCSG) ProtoMessage() {}

func (x *TmVoltCSG) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TmVoltCSG.ProtoReflect.Descriptor instead.
func (*TmVoltCSG) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{137}
}

func (x *TmVoltCSG) GetOverCrvPts() []*TmVoltPoint {
	if x != nil {
		return x.OverCrvPts
	}
	return nil
}

func (x *TmVoltCSG) GetUnderCrvPts() []*TmVoltPoint {
	if x != nil {
		return x.UnderCrvPts
	}
	return nil
}

// Constant Reactive Power (Fixed VAr) Function
type VarSPC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Constant Reactive Power Mode Enable
	ModEna bool `protobuf:"varint,1,opt,name=modEna,proto3" json:"modEna,omitempty"`
	// MISSING DOCUMENTATION!!!
	VarParameter *OperationDVAR `protobuf:"bytes,2,opt,name=varParameter,proto3" json:"varParameter,omitempty"`
}

func (x *VarSPC) Reset() {
	*x = VarSPC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VarSPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VarSPC) ProtoMessage() {}

func (x *VarSPC) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VarSPC.ProtoReflect.Descriptor instead.
func (*VarSPC) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{138}
}

func (x *VarSPC) GetModEna() bool {
	if x != nil {
		return x.ModEna
	}
	return false
}

func (x *VarSPC) GetVarParameter() *OperationDVAR {
	if x != nil {
		return x.VarParameter
	}
	return nil
}

// Point definition (Point)
type VoltVarPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is an absolute value field.
	VarVal float32 `protobuf:"fixed32,1,opt,name=varVal,proto3" json:"varVal,omitempty"`
	// This is an absolute value field.
	VoltVal float32 `protobuf:"fixed32,2,opt,name=voltVal,proto3" json:"voltVal,omitempty"`
}

func (x *VoltVarPoint) Reset() {
	*x = VoltVarPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoltVarPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoltVarPoint) ProtoMessage() {}

func (x *VoltVarPoint) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoltVarPoint.ProtoReflect.Descriptor instead.
func (*VoltVarPoint) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{139}
}

func (x *VoltVarPoint) GetVarVal() float32 {
	if x != nil {
		return x.VarVal
	}
	return 0
}

func (x *VoltVarPoint) GetVoltVal() float32 {
	if x != nil {
		return x.VoltVal
	}
	return 0
}

// Voltage-Reactive Power (Volt-VAr) Function
type VoltVarCSG struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MISSING DOCUMENTATION!!!
	CrvPts []*VoltVarPoint `protobuf:"bytes,1,rep,name=crvPts,proto3" json:"crvPts,omitempty"`
	// MISSING DOCUMENTATION!!!
	VVarParameter *OperationDVVR `protobuf:"bytes,2,opt,name=vVarParameter,proto3" json:"vVarParameter,omitempty"`
}

func (x *VoltVarCSG) Reset() {
	*x = VoltVarCSG{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoltVarCSG) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoltVarCSG) ProtoMessage() {}

func (x *VoltVarCSG) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoltVarCSG.ProtoReflect.Descriptor instead.
func (*VoltVarCSG) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{140}
}

func (x *VoltVarCSG) GetCrvPts() []*VoltVarPoint {
	if x != nil {
		return x.CrvPts
	}
	return nil
}

func (x *VoltVarCSG) GetVVarParameter() *OperationDVVR {
	if x != nil {
		return x.VVarParameter
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type VoltWPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is an absolute value field.
	VoltVal float32 `protobuf:"fixed32,1,opt,name=voltVal,proto3" json:"voltVal,omitempty"`
	// This is an absolute value field.
	WVal float32 `protobuf:"fixed32,2,opt,name=wVal,proto3" json:"wVal,omitempty"`
}

func (x *VoltWPoint) Reset() {
	*x = VoltWPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoltWPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoltWPoint) ProtoMessage() {}

func (x *VoltWPoint) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoltWPoint.ProtoReflect.Descriptor instead.
func (*VoltWPoint) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{141}
}

func (x *VoltWPoint) GetVoltVal() float32 {
	if x != nil {
		return x.VoltVal
	}
	return 0
}

func (x *VoltWPoint) GetWVal() float32 {
	if x != nil {
		return x.WVal
	}
	return 0
}

// MISSING DOCUMENTATION!!!
type VoltWCSG struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MISSING DOCUMENTATION!!!
	CrvPts []*VoltWPoint `protobuf:"bytes,1,rep,name=crvPts,proto3" json:"crvPts,omitempty"`
	// Voltage-Active Power (Volt-Watt) Function
	VoltWParameter *OperationDVWC `protobuf:"bytes,2,opt,name=voltWParameter,proto3" json:"voltWParameter,omitempty"`
}

func (x *VoltWCSG) Reset() {
	*x = VoltWCSG{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoltWCSG) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoltWCSG) ProtoMessage() {}

func (x *VoltWCSG) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoltWCSG.ProtoReflect.Descriptor instead.
func (*VoltWCSG) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{142}
}

func (x *VoltWCSG) GetCrvPts() []*VoltWPoint {
	if x != nil {
		return x.CrvPts
	}
	return nil
}

func (x *VoltWCSG) GetVoltWParameter() *OperationDVWC {
	if x != nil {
		return x.VoltWParameter
	}
	return nil
}

// Visible string status (VSS)
type VSC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [OpenFMB Extension]  String control value.
	CtlVal string `protobuf:"bytes,1,opt,name=ctlVal,proto3" json:"ctlVal,omitempty"`
}

func (x *VSC) Reset() {
	*x = VSC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VSC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VSC) ProtoMessage() {}

func (x *VSC) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VSC.ProtoReflect.Descriptor instead.
func (*VSC) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{143}
}

func (x *VSC) GetCtlVal() string {
	if x != nil {
		return x.CtlVal
	}
	return ""
}

// Constant Reactive Power (Fixed VAr) Function
type WSPC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Constant Reactive Power Mode Enable
	ModEna bool `protobuf:"varint,1,opt,name=modEna,proto3" json:"modEna,omitempty"`
	// MISSING DOCUMENTATION!!!
	WParameter *OperationDWGC `protobuf:"bytes,2,opt,name=wParameter,proto3" json:"wParameter,omitempty"`
}

func (x *WSPC) Reset() {
	*x = WSPC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WSPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WSPC) ProtoMessage() {}

func (x *WSPC) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WSPC.ProtoReflect.Descriptor instead.
func (*WSPC) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{144}
}

func (x *WSPC) GetModEna() bool {
	if x != nil {
		return x.ModEna
	}
	return false
}

func (x *WSPC) GetWParameter() *OperationDWGC {
	if x != nil {
		return x.WParameter
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type WVarPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is an absolute value field.
	VarVal float32 `protobuf:"fixed32,1,opt,name=varVal,proto3" json:"varVal,omitempty"`
	// This is an absolute value field.
	WVal float32 `protobuf:"fixed32,2,opt,name=wVal,proto3" json:"wVal,omitempty"`
}

func (x *WVarPoint) Reset() {
	*x = WVarPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WVarPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WVarPoint) ProtoMessage() {}

func (x *WVarPoint) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WVarPoint.ProtoReflect.Descriptor instead.
func (*WVarPoint) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{145}
}

func (x *WVarPoint) GetVarVal() float32 {
	if x != nil {
		return x.VarVal
	}
	return 0
}

func (x *WVarPoint) GetWVal() float32 {
	if x != nil {
		return x.WVal
	}
	return 0
}

// Active Power-Reactive Power (Watt-VAr) Function
type WVarCSG struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MISSING DOCUMENTATION!!!
	CrvPts []*WVarPoint `protobuf:"bytes,1,rep,name=crvPts,proto3" json:"crvPts,omitempty"`
	// MISSING DOCUMENTATION!!!
	WVarParameter *OperationDWVR `protobuf:"bytes,2,opt,name=wVarParameter,proto3" json:"wVarParameter,omitempty"`
}

func (x *WVarCSG) Reset() {
	*x = WVarCSG{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WVarCSG) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WVarCSG) ProtoMessage() {}

func (x *WVarCSG) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WVarCSG.ProtoReflect.Descriptor instead.
func (*WVarCSG) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{146}
}

func (x *WVarCSG) GetCrvPts() []*WVarPoint {
	if x != nil {
		return x.CrvPts
	}
	return nil
}

func (x *WVarCSG) GetWVarParameter() *OperationDWVR {
	if x != nil {
		return x.WVarParameter
	}
	return nil
}

type Optional_AlrmKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value AlrmKind `protobuf:"varint,1,opt,name=value,proto3,enum=commonmodule.AlrmKind" json:"value,omitempty"`
}

func (x *Optional_AlrmKind) Reset() {
	*x = Optional_AlrmKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Optional_AlrmKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optional_AlrmKind) ProtoMessage() {}

func (x *Optional_AlrmKind) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optional_AlrmKind.ProtoReflect.Descriptor instead.
func (*Optional_AlrmKind) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{147}
}

func (x *Optional_AlrmKind) GetValue() AlrmKind {
	if x != nil {
		return x.Value
	}
	return AlrmKind_AlrmKind_ground_fault
}

type Optional_ControlModeKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value ControlModeKind `protobuf:"varint,1,opt,name=value,proto3,enum=commonmodule.ControlModeKind" json:"value,omitempty"`
}

func (x *Optional_ControlModeKind) Reset() {
	*x = Optional_ControlModeKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Optional_ControlModeKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optional_ControlModeKind) ProtoMessage() {}

func (x *Optional_ControlModeKind) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optional_ControlModeKind.ProtoReflect.Descriptor instead.
func (*Optional_ControlModeKind) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{148}
}

func (x *Optional_ControlModeKind) GetValue() ControlModeKind {
	if x != nil {
		return x.Value
	}
	return ControlModeKind_ControlModeKind_UNDEFINED
}

type Optional_DirectionModeKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value DirectionModeKind `protobuf:"varint,1,opt,name=value,proto3,enum=commonmodule.DirectionModeKind" json:"value,omitempty"`
}

func (x *Optional_DirectionModeKind) Reset() {
	*x = Optional_DirectionModeKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Optional_DirectionModeKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optional_DirectionModeKind) ProtoMessage() {}

func (x *Optional_DirectionModeKind) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optional_DirectionModeKind.ProtoReflect.Descriptor instead.
func (*Optional_DirectionModeKind) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{149}
}

func (x *Optional_DirectionModeKind) GetValue() DirectionModeKind {
	if x != nil {
		return x.Value
	}
	return DirectionModeKind_DirectionModeKind_UNDEFINED
}

type Optional_GridConnectionStateKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value GridConnectionStateKind `protobuf:"varint,1,opt,name=value,proto3,enum=commonmodule.GridConnectionStateKind" json:"value,omitempty"`
}

func (x *Optional_GridConnectionStateKind) Reset() {
	*x = Optional_GridConnectionStateKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Optional_GridConnectionStateKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optional_GridConnectionStateKind) ProtoMessage() {}

func (x *Optional_GridConnectionStateKind) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optional_GridConnectionStateKind.ProtoReflect.Descriptor instead.
func (*Optional_GridConnectionStateKind) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{150}
}

func (x *Optional_GridConnectionStateKind) GetValue() GridConnectionStateKind {
	if x != nil {
		return x.Value
	}
	return GridConnectionStateKind_GridConnectionStateKind_disconnected
}

type Optional_OperatingStateKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value OperatingStateKind `protobuf:"varint,1,opt,name=value,proto3,enum=commonmodule.OperatingStateKind" json:"value,omitempty"`
}

func (x *Optional_OperatingStateKind) Reset() {
	*x = Optional_OperatingStateKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Optional_OperatingStateKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optional_OperatingStateKind) ProtoMessage() {}

func (x *Optional_OperatingStateKind) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optional_OperatingStateKind.ProtoReflect.Descriptor instead.
func (*Optional_OperatingStateKind) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{151}
}

func (x *Optional_OperatingStateKind) GetValue() OperatingStateKind {
	if x != nil {
		return x.Value
	}
	return OperatingStateKind_OperatingStateKind_UNDEFINED
}

type Optional_ReactivePowerControlKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value ReactivePowerControlKind `protobuf:"varint,1,opt,name=value,proto3,enum=commonmodule.ReactivePowerControlKind" json:"value,omitempty"`
}

func (x *Optional_ReactivePowerControlKind) Reset() {
	*x = Optional_ReactivePowerControlKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Optional_ReactivePowerControlKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optional_ReactivePowerControlKind) ProtoMessage() {}

func (x *Optional_ReactivePowerControlKind) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optional_ReactivePowerControlKind.ProtoReflect.Descriptor instead.
func (*Optional_ReactivePowerControlKind) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{152}
}

func (x *Optional_ReactivePowerControlKind) GetValue() ReactivePowerControlKind {
	if x != nil {
		return x.Value
	}
	return ReactivePowerControlKind_ReactivePowerControlKind_UNDEFINED
}

type Optional_RealPowerControlKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value RealPowerControlKind `protobuf:"varint,1,opt,name=value,proto3,enum=commonmodule.RealPowerControlKind" json:"value,omitempty"`
}

func (x *Optional_RealPowerControlKind) Reset() {
	*x = Optional_RealPowerControlKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Optional_RealPowerControlKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optional_RealPowerControlKind) ProtoMessage() {}

func (x *Optional_RealPowerControlKind) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optional_RealPowerControlKind.ProtoReflect.Descriptor instead.
func (*Optional_RealPowerControlKind) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{153}
}

func (x *Optional_RealPowerControlKind) GetValue() RealPowerControlKind {
	if x != nil {
		return x.Value
	}
	return RealPowerControlKind_RealPowerControlKind_UNDEFINED
}

type Optional_StateKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value StateKind `protobuf:"varint,1,opt,name=value,proto3,enum=commonmodule.StateKind" json:"value,omitempty"`
}

func (x *Optional_StateKind) Reset() {
	*x = Optional_StateKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Optional_StateKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optional_StateKind) ProtoMessage() {}

func (x *Optional_StateKind) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optional_StateKind.ProtoReflect.Descriptor instead.
func (*Optional_StateKind) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{154}
}

func (x *Optional_StateKind) GetValue() StateKind {
	if x != nil {
		return x.Value
	}
	return StateKind_StateKind_UNDEFINED
}

type Optional_VoltLimitModeKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value VoltLimitModeKind `protobuf:"varint,1,opt,name=value,proto3,enum=commonmodule.VoltLimitModeKind" json:"value,omitempty"`
}

func (x *Optional_VoltLimitModeKind) Reset() {
	*x = Optional_VoltLimitModeKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonmodule_commonmodule_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Optional_VoltLimitModeKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optional_VoltLimitModeKind) ProtoMessage() {}

func (x *Optional_VoltLimitModeKind) ProtoReflect() protoreflect.Message {
	mi := &file_commonmodule_commonmodule_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optional_VoltLimitModeKind.ProtoReflect.Descriptor instead.
func (*Optional_VoltLimitModeKind) Descriptor() ([]byte, []int) {
	return file_commonmodule_commonmodule_proto_rawDescGZIP(), []int{155}
}

func (x *Optional_VoltLimitModeKind) GetValue() VoltLimitModeKind {
	if x != nil {
		return x.Value
	}
	return VoltLimitModeKind_VoltLimitModeKind_UNDEFINED
}

var File_commonmodule_commonmodule_proto protoreflect.FileDescriptor

var file_commonmodule_commonmodule_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x1a,
	0x09, 0x75, 0x6d, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x55, 0x0a, 0x1b, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x5f, 0x0a, 0x20, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xdd, 0x04, 0x0a, 0x03, 0x41, 0x43, 0x44, 0x12, 0x4a, 0x0a, 0x0a, 0x64, 0x69,
	0x72, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x46, 0x61,
	0x75, 0x6c, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64,
	0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x48, 0x0a, 0x07, 0x64, 0x69, 0x72, 0x4e, 0x65, 0x75,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x07, 0x64, 0x69, 0x72, 0x4e, 0x65, 0x75, 0x74,
	0x12, 0x48, 0x0a, 0x07, 0x64, 0x69, 0x72, 0x50, 0x68, 0x73, 0x41, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x50, 0x68, 0x61, 0x73, 0x65, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e,
	0x64, 0x52, 0x07, 0x64, 0x69, 0x72, 0x50, 0x68, 0x73, 0x41, 0x12, 0x48, 0x0a, 0x07, 0x64, 0x69,
	0x72, 0x50, 0x68, 0x73, 0x42, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x50, 0x68, 0x61, 0x73, 0x65, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x07, 0x64, 0x69, 0x72,
	0x50, 0x68, 0x73, 0x42, 0x12, 0x48, 0x0a, 0x07, 0x64, 0x69, 0x72, 0x50, 0x68, 0x73, 0x43, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x07, 0x64, 0x69, 0x72, 0x50, 0x68, 0x73, 0x43, 0x12, 0x22,
	0x0a, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x65, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x65,
	0x75, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x70, 0x68, 0x73, 0x41, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x70, 0x68,
	0x73, 0x41, 0x12, 0x2e, 0x0a, 0x04, 0x70, 0x68, 0x73, 0x42, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x70, 0x68,
	0x73, 0x42, 0x12, 0x2e, 0x0a, 0x04, 0x70, 0x68, 0x73, 0x43, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x70, 0x68,
	0x73, 0x43, 0x22, 0xbc, 0x01, 0x0a, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x04, 0x6d, 0x52, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x04, 0xa0, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x6d, 0x52, 0x49, 0x44, 0x12,
	0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xdf, 0x01, 0x0a, 0x0c, 0x41, 0x43, 0x44, 0x43, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x12, 0x50, 0x0a, 0x10, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x01, 0x52, 0x10, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x43,
	0x0a, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0x4d, 0x0a, 0x17, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x55, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x32,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x55, 0x6e, 0x69,
	0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x55, 0x0a, 0x1b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x55,
	0x6e, 0x69, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x55, 0x6e, 0x69, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4b, 0x69,
	0x6e, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x0b, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x0a, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12,
	0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x4b, 0x0a, 0x16, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x91, 0x01, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x49, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x06, 0x53, 0x49, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x69, 0x6e,
	0x64, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x06, 0x53, 0x49, 0x55,
	0x6e, 0x69, 0x74, 0x22, 0x49, 0x0a, 0x15, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd6,
	0x02, 0x0a, 0x0a, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x12, 0x2c, 0x0a,
	0x0c, 0x62, 0x61, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0c, 0x62,
	0x61, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x07, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x08, 0x88, 0xb5,
	0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12,
	0x28, 0x0a, 0x0a, 0x69, 0x6e, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x69,
	0x6e, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x0c, 0x69, 0x6e, 0x63,
	0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0c, 0x69, 0x6e, 0x63, 0x6f, 0x6e,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x07, 0x6f, 0x6c, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5,
	0x18, 0x01, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x0b, 0x6f,
	0x73, 0x63, 0x69, 0x6c, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x6f, 0x73, 0x63, 0x69,
	0x6c, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x4f, 0x66,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x08, 0x88, 0xb5, 0x18,
	0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x4f, 0x66, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x24, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x08, 0x6f,
	0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0x45, 0x0a, 0x13, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x2e,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9d,
	0x02, 0x0a, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x0a, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5,
	0x18, 0x01, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x12, 0x32,
	0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18,
	0x01, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x08, 0x88, 0xb5,
	0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c,
	0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x08, 0x88, 0xb5,
	0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x74, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x08,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01,
	0x90, 0xb5, 0x18, 0x01, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x22, 0x51,
	0x0a, 0x19, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x54, 0x69, 0x6d, 0x65, 0x41,
	0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x34, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x63,
	0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xfd, 0x01, 0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x2c, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18,
	0x01, 0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12,
	0x3c, 0x0a, 0x14, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x68,
	0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x08, 0x88,
	0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x14, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f,
	0x74, 0x53, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x34, 0x0a,
	0x10, 0x6c, 0x65, 0x61, 0x70, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x4b, 0x6e, 0x6f, 0x77,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18,
	0x01, 0x52, 0x10, 0x6c, 0x65, 0x61, 0x70, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x4b, 0x6e,
	0x6f, 0x77, 0x6e, 0x12, 0x4c, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x75, 0x72,
	0x61, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x63,
	0x75, 0x72, 0x61, 0x63, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90,
	0xb5, 0x18, 0x01, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63,
	0x79, 0x22, 0x8c, 0x01, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x22, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x02, 0x74, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x02, 0x74, 0x71, 0x12, 0x2a,
	0x0a, 0x0b, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x6e,
	0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02,
	0x22, 0x96, 0x01, 0x0a, 0x02, 0x4d, 0x56, 0x12, 0x1a, 0x0a, 0x03, 0x6d, 0x61, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x03,
	0x6d, 0x61, 0x67, 0x12, 0x23, 0x0a, 0x01, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x01, 0x71, 0x12, 0x25, 0x0a, 0x01, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x01, 0x74, 0x12,
	0x28, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x22, 0x5f, 0x0a, 0x0b, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x10, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x10, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xc9, 0x01, 0x0a, 0x18, 0x41,
	0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x47, 0x47, 0x49, 0x4f, 0x12, 0x41, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x41, 0x6e,
	0x49, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4d, 0x56, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01,
	0x90, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x41, 0x6e, 0x49, 0x6e, 0x12, 0x3a, 0x0a, 0x05, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52,
	0x05, 0x50, 0x68, 0x61, 0x73, 0x65, 0x22, 0x7f, 0x0a, 0x0b, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x78, 0x0a, 0x11, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x41, 0x0a, 0x0b,
	0x6e, 0x61, 0x6d, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x01, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x20, 0x0a, 0x04, 0x6d, 0x52, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0x88,
	0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0xa0, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x6d, 0x52, 0x49,
	0x44, 0x22, 0x27, 0x0a, 0x03, 0x41, 0x53, 0x47, 0x12, 0x20, 0x0a, 0x06, 0x73, 0x65, 0x74, 0x4d,
	0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5,
	0x18, 0x01, 0x52, 0x06, 0x73, 0x65, 0x74, 0x4d, 0x61, 0x67, 0x22, 0x79, 0x0a, 0x03, 0x42, 0x43,
	0x52, 0x12, 0x20, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x56, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x01, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x01, 0x71, 0x12, 0x25, 0x0a, 0x01, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x01, 0x74, 0x4a,
	0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0x77, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53,
	0x50, 0x53, 0x12, 0x23, 0x0a, 0x01, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x01, 0x71, 0x12, 0x1e, 0x0a, 0x05, 0x73, 0x74, 0x56, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01,
	0x52, 0x05, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x01, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x01, 0x74, 0x22, 0xcf,
	0x01, 0x0a, 0x19, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x47, 0x47, 0x49, 0x4f, 0x12, 0x41, 0x0a, 0x0b,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x01, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x33, 0x0a, 0x03, 0x49, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x53, 0x50, 0x53, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52,
	0x03, 0x49, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x50, 0x68, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x22, 0xae, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x50, 0x0a, 0x10, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01,
	0x52, 0x10, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x4d, 0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52,
	0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x5a, 0x0a, 0x15, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x0b, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01,
	0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x95, 0x01,
	0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x6f, 0x63, 0x6b,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x22, 0x64, 0x0a, 0x0c, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01,
	0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x0b, 0x6e, 0x61, 0x6e,
	0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x08,
	0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x54, 0x0a, 0x06, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x03, 0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x03, 0x61, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x03, 0x6d, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x03, 0x6d, 0x61,
	0x67, 0x22, 0x8b, 0x01, 0x0a, 0x03, 0x43, 0x4d, 0x56, 0x12, 0x32, 0x0a, 0x04, 0x63, 0x56, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x08, 0x88,
	0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x63, 0x56, 0x61, 0x6c, 0x12, 0x23, 0x0a,
	0x01, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x01, 0x71, 0x12, 0x25, 0x0a, 0x01, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x01, 0x74, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22,
	0x7e, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x6e, 0x61,
	0x6d, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x6d, 0x52, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18,
	0x01, 0xa0, 0xb5, 0x18, 0x01, 0xa8, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x6d, 0x52, 0x49, 0x44, 0x22,
	0x8e, 0x01, 0x0a, 0x08, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x44, 0x0a, 0x0c,
	0x61, 0x43, 0x44, 0x43, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x41, 0x43, 0x44, 0x43, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x01, 0x52, 0x0c, 0x61, 0x43, 0x44, 0x43, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x06, 0x70, 0x68, 0x61, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x06, 0x70, 0x68, 0x61, 0x73, 0x65, 0x73,
	0x22, 0x62, 0x0a, 0x22, 0x43, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x52,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x08, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x08, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x22, 0x2e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41,
	0x50, 0x43, 0x12, 0x20, 0x0a, 0x06, 0x63, 0x74, 0x6c, 0x56, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x06, 0x63, 0x74,
	0x6c, 0x56, 0x61, 0x6c, 0x22, 0x2e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44,
	0x50, 0x43, 0x12, 0x20, 0x0a, 0x06, 0x63, 0x74, 0x6c, 0x56, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x06, 0x63, 0x74,
	0x6c, 0x56, 0x61, 0x6c, 0x22, 0x68, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90,
	0xb5, 0x18, 0x01, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x0b,
	0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x6e, 0x61, 0x6e,
	0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x5b,
	0x0a, 0x1e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x15,
	0x45, 0x4e, 0x47, 0x5f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x63, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90,
	0xb5, 0x18, 0x01, 0x52, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90,
	0xb5, 0x18, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x0d, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x11,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x4e, 0x47, 0x5f, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x42, 0x08, 0x88, 0xb5,
	0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0x88, 0xb5,
	0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x4c, 0x0a, 0x0b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x53, 0x47,
	0x12, 0x3d, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x50, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x08, 0x88,
	0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x06, 0x73, 0x63, 0x68, 0x50, 0x74, 0x73, 0x22,
	0x54, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x46, 0x53, 0x43, 0x48, 0x12, 0x3d, 0x0a, 0x07, 0x56, 0x61, 0x6c, 0x41, 0x43, 0x53,
	0x47, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x43,
	0x53, 0x47, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x07, 0x56, 0x61,
	0x6c, 0x41, 0x43, 0x53, 0x47, 0x22, 0x5a, 0x0a, 0x15, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x41,
	0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64,
	0x65, 0x22, 0xa4, 0x02, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x53, 0x43,
	0x43, 0x12, 0x5f, 0x0a, 0x15, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65,
	0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x15, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x12, 0x53, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x53, 0x43, 0x48, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x53,
	0x43, 0x48, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x46, 0x53, 0x43, 0x48, 0x12, 0x5f, 0x0a, 0x19, 0x69, 0x73, 0x6c, 0x61, 0x6e,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x46, 0x53, 0x43, 0x48, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x53, 0x43, 0x48, 0x52, 0x19, 0x69,
	0x73, 0x6c, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x46, 0x53, 0x43, 0x48, 0x22, 0x2e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x49, 0x4e, 0x43, 0x12, 0x20, 0x0a, 0x06, 0x63, 0x74, 0x6c, 0x56, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01,
	0x52, 0x06, 0x63, 0x74, 0x6c, 0x56, 0x61, 0x6c, 0x22, 0x58, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x49, 0x4e, 0x47, 0x12, 0x20, 0x0a, 0x06, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01,
	0x52, 0x06, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x05, 0x75, 0x6e, 0x69,
	0x74, 0x73, 0x22, 0x2e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x53, 0x43,
	0x12, 0x20, 0x0a, 0x06, 0x63, 0x74, 0x6c, 0x56, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x06, 0x63, 0x74, 0x6c, 0x56,
	0x61, 0x6c, 0x22, 0x57, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2e, 0x0a, 0x0a, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x50, 0x43, 0x12, 0x20, 0x0a, 0x06, 0x63, 0x74, 0x6c,
	0x56, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90,
	0xb5, 0x18, 0x01, 0x52, 0x06, 0x63, 0x74, 0x6c, 0x56, 0x61, 0x6c, 0x22, 0xc6, 0x01, 0x0a, 0x0c,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x50, 0x0a, 0x10,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x10, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x32,
	0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x42, 0x6c, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x42,
	0x6c, 0x6b, 0x12, 0x30, 0x0a, 0x05, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x22, 0x66, 0x0a, 0x0e, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18,
	0x01, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x0b, 0x6e, 0x61,
	0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x6e, 0x61, 0x6e, 0x6f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x74, 0x0a, 0x10,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x2d, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12,
	0x31, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x03, 0x44, 0x45, 0x4c, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x68,
	0x73, 0x41, 0x42, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x4d, 0x56, 0x52, 0x05, 0x70, 0x68,
	0x73, 0x41, 0x42, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x68, 0x73, 0x42, 0x43, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x43, 0x4d, 0x56, 0x52, 0x05, 0x70, 0x68, 0x73, 0x42, 0x43, 0x12, 0x27, 0x0a, 0x05,
	0x70, 0x68, 0x73, 0x43, 0x41, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x4d, 0x56, 0x52, 0x05,
	0x70, 0x68, 0x73, 0x43, 0x41, 0x22, 0xc2, 0x01, 0x0a, 0x08, 0x50, 0x68, 0x61, 0x73, 0x65, 0x44,
	0x50, 0x43, 0x12, 0x2c, 0x0a, 0x04, 0x70, 0x68, 0x73, 0x33, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x50, 0x43, 0x52, 0x04, 0x70, 0x68, 0x73, 0x33,
	0x12, 0x2c, 0x0a, 0x04, 0x70, 0x68, 0x73, 0x41, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x50, 0x43, 0x52, 0x04, 0x70, 0x68, 0x73, 0x41, 0x12, 0x2c,
	0x0a, 0x04, 0x70, 0x68, 0x73, 0x42, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x44, 0x50, 0x43, 0x52, 0x04, 0x70, 0x68, 0x73, 0x42, 0x12, 0x2c, 0x0a, 0x04,
	0x70, 0x68, 0x73, 0x43, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x44, 0x50, 0x43, 0x52, 0x04, 0x70, 0x68, 0x73, 0x43, 0x22, 0xf4, 0x02, 0x0a, 0x13, 0x44,
	0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x58, 0x43,
	0x42, 0x52, 0x12, 0x5f, 0x0a, 0x15, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64,
	0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x15, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x12, 0x28, 0x0a, 0x03, 0x50, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x44, 0x50, 0x43, 0x52, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x40, 0x0a,
	0x0e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x4e, 0x43, 0x52,
	0x0e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x40, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x50,
	0x43, 0x52, 0x0e, 0x52, 0x65, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x4e, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x50, 0x43, 0x52, 0x15, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x63, 0x6b, 0x75,
	0x70, 0x22, 0xb1, 0x01, 0x0a, 0x0e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x44, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x4d, 0x0a, 0x17, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x43, 0x61, 0x6c, 0x63, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43,
	0x61, 0x6c, 0x63, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x54, 0x0a, 0x12, 0x45, 0x4e, 0x47, 0x5f, 0x43, 0x61, 0x6c, 0x63,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5,
	0x18, 0x01, 0x52, 0x06, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x22, 0x57, 0x0a, 0x1c, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x47, 0x72, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x47, 0x72, 0x69, 0x64, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x17, 0x45, 0x4e, 0x47, 0x5f, 0x47, 0x72, 0x69, 0x64,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x43, 0x0a, 0x06, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x47,
	0x72, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69,
	0x6e, 0x64, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x06, 0x73, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x12, 0x46, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x73, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x45, 0x0a, 0x13,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x50, 0x46, 0x53, 0x69, 0x67, 0x6e, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x50, 0x46, 0x53, 0x69, 0x67, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x4c, 0x0a, 0x0e, 0x45, 0x4e, 0x47, 0x5f, 0x50, 0x46, 0x53, 0x69, 0x67,
	0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x46, 0x53, 0x69, 0x67, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x42,
	0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x06, 0x73, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x22, 0x53, 0x0a, 0x1a, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x42, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x42, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x15, 0x45, 0x4e, 0x53, 0x5f, 0x42,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x23, 0x0a, 0x01, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x01, 0x71, 0x12, 0x3f, 0x0a, 0x05, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x4d, 0x6f, 0x64,
	0x65, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52,
	0x05, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x01, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x01, 0x74, 0x22, 0x5b, 0x0a,
	0x1e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x44, 0x45, 0x52, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x44, 0x45,
	0x52, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b,
	0x69, 0x6e, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x19, 0x45,
	0x4e, 0x53, 0x5f, 0x44, 0x45, 0x52, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x01, 0x71, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x01, 0x71, 0x12, 0x43, 0x0a,
	0x05, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x44, 0x45, 0x52, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e,
	0x64, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x05, 0x73, 0x74, 0x56,
	0x61, 0x6c, 0x12, 0x25, 0x0a, 0x01, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x01, 0x74, 0x22, 0x4f, 0x0a, 0x18, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x65, 0x73,
	0x74, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x4b,
	0x69, 0x6e, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x13, 0x45,
	0x4e, 0x53, 0x5f, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x23, 0x0a, 0x01, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x01, 0x71, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x74, 0x56, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x65, 0x73,
	0x74, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52,
	0x05, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x01, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x01, 0x74, 0x22, 0x8e, 0x01,
	0x0a, 0x17, 0x45, 0x4e, 0x53, 0x5f, 0x47, 0x72, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x74, 0x56,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x47, 0x72, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x08, 0x88, 0xb5, 0x18,
	0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x05, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x0e,
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0e,
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x45,
	0x0a, 0x13, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x76, 0x0a, 0x0e, 0x45, 0x4e, 0x53, 0x5f, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x01, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x01, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x08, 0x88, 0xb5,
	0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x05, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x22, 0x5f, 0x0a,
	0x20, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x98,
	0x01, 0x0a, 0x1b, 0x45, 0x4e, 0x53, 0x5f, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x32,
	0x0a, 0x06, 0x62, 0x6c, 0x6b, 0x45, 0x6e, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x62, 0x6c, 0x6b, 0x45,
	0x6e, 0x61, 0x12, 0x45, 0x0a, 0x05, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5,
	0x18, 0x01, 0x52, 0x05, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x22, 0xd7, 0x01, 0x0a, 0x0d, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x43, 0x54, 0x45, 0x12, 0x40, 0x0a, 0x09, 0x72,
	0x6e, 0x64, 0x44, 0x6c, 0x54, 0x6d, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x4e, 0x47, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5,
	0x18, 0x01, 0x52, 0x09, 0x72, 0x6e, 0x64, 0x44, 0x6c, 0x54, 0x6d, 0x6d, 0x73, 0x12, 0x40, 0x0a,
	0x09, 0x72, 0x74, 0x6e, 0x44, 0x6c, 0x54, 0x6d, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x4e, 0x47, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01,
	0x90, 0xb5, 0x18, 0x01, 0x52, 0x09, 0x72, 0x74, 0x6e, 0x44, 0x6c, 0x54, 0x6d, 0x6d, 0x73, 0x12,
	0x42, 0x0a, 0x0a, 0x72, 0x74, 0x6e, 0x52, 0x6d, 0x70, 0x54, 0x6d, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x4e, 0x47, 0x42, 0x08, 0x88,
	0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x72, 0x74, 0x6e, 0x52, 0x6d, 0x70, 0x54,
	0x6d, 0x6d, 0x73, 0x22, 0xa4, 0x02, 0x0a, 0x0f, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x50, 0x43, 0x12, 0x5b, 0x0a, 0x15, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x43, 0x54, 0x45, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x15, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x07, 0x68, 0x7a, 0x48, 0x69, 0x4c, 0x69, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52,
	0x07, 0x68, 0x7a, 0x48, 0x69, 0x4c, 0x69, 0x6d, 0x12, 0x22, 0x0a, 0x07, 0x68, 0x7a, 0x4c, 0x6f,
	0x4c, 0x69, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90,
	0xb5, 0x18, 0x01, 0x52, 0x07, 0x68, 0x7a, 0x4c, 0x6f, 0x4c, 0x69, 0x6d, 0x12, 0x28, 0x0a, 0x0a,
	0x72, 0x74, 0x6e, 0x53, 0x72, 0x76, 0x41, 0x75, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x72, 0x74, 0x6e, 0x53,
	0x72, 0x76, 0x41, 0x75, 0x74, 0x6f, 0x12, 0x20, 0x0a, 0x06, 0x76, 0x48, 0x69, 0x4c, 0x69, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01,
	0x52, 0x06, 0x76, 0x48, 0x69, 0x4c, 0x69, 0x6d, 0x12, 0x20, 0x0a, 0x06, 0x76, 0x4c, 0x6f, 0x4c,
	0x69, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5,
	0x18, 0x01, 0x52, 0x06, 0x76, 0x4c, 0x6f, 0x4c, 0x69, 0x6d, 0x22, 0x60, 0x0a, 0x03, 0x45, 0x53,
	0x53, 0x12, 0x59, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x55, 0x0a, 0x10,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x41, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x92, 0x01, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x50, 0x0a, 0x10, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x01, 0x52, 0x10, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x42, 0x6c, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x6d, 0x6f, 0x64, 0x42, 0x6c, 0x6b, 0x22, 0x67, 0x0a, 0x13, 0x46, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x50, 0x0a, 0x10, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52,
	0x10, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x22, 0xd6, 0x01, 0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x49, 0x45,
	0x44, 0x12, 0x59, 0x0a, 0x13, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x46, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x13, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x13,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90,
	0xb5, 0x18, 0x01, 0x52, 0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x61, 0x0a, 0x0d, 0x46, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x50, 0x0a, 0x10, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x10, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x77, 0x0a,
	0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x48, 0x46, 0x57, 0x12, 0x20,
	0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x45, 0x6e, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x08,
	0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x45, 0x6e, 0x61,
	0x12, 0x44, 0x0a, 0x0a, 0x4f, 0x70, 0x6c, 0x54, 0x6d, 0x6d, 0x73, 0x4d, 0x61, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65,
	0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x4f, 0x70, 0x6c, 0x54,
	0x6d, 0x6d, 0x73, 0x4d, 0x61, 0x78, 0x22, 0x77, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x4c, 0x46, 0x57, 0x12, 0x20, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x45, 0x6e,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18,
	0x01, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x45, 0x6e, 0x61, 0x12, 0x44, 0x0a, 0x0a, 0x4f, 0x70, 0x6c,
	0x54, 0x6d, 0x6d, 0x73, 0x4d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90,
	0xb5, 0x18, 0x01, 0x52, 0x0a, 0x4f, 0x70, 0x6c, 0x54, 0x6d, 0x6d, 0x73, 0x4d, 0x61, 0x78, 0x22,
	0x60, 0x0a, 0x08, 0x48, 0x7a, 0x57, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x0d, 0x64,
	0x65, 0x61, 0x64, 0x62, 0x61, 0x6e, 0x64, 0x48, 0x7a, 0x56, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0d, 0x64, 0x65,
	0x61, 0x64, 0x62, 0x61, 0x6e, 0x64, 0x48, 0x7a, 0x56, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x08, 0x73,
	0x6c, 0x6f, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x42, 0x08, 0x88,
	0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x08, 0x73, 0x6c, 0x6f, 0x70, 0x65, 0x56, 0x61,
	0x6c, 0x22, 0xb2, 0x02, 0x0a, 0x06, 0x48, 0x7a, 0x57, 0x41, 0x50, 0x43, 0x12, 0x3e, 0x0a, 0x09,
	0x6f, 0x76, 0x65, 0x72, 0x48, 0x7a, 0x57, 0x50, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x48,
	0x7a, 0x57, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18,
	0x01, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x48, 0x7a, 0x57, 0x50, 0x74, 0x12, 0x51, 0x0a, 0x10,
	0x6f, 0x76, 0x65, 0x72, 0x48, 0x7a, 0x57, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x48, 0x46, 0x57, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x10, 0x6f,
	0x76, 0x65, 0x72, 0x48, 0x7a, 0x57, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12,
	0x40, 0x0a, 0x0a, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x7a, 0x57, 0x50, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x48, 0x7a, 0x57, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x08, 0x88, 0xb5, 0x18,
	0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x7a, 0x57, 0x50,
	0x74, 0x12, 0x53, 0x0a, 0x11, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x7a, 0x57, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x4c, 0x46, 0x57, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90,
	0xb5, 0x18, 0x01, 0x52, 0x11, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x7a, 0x57, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x22, 0x77, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x49, 0x4e, 0x53, 0x12, 0x23, 0x0a, 0x01, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x01, 0x71, 0x12, 0x1e, 0x0a, 0x05, 0x73, 0x74, 0x56, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18,
	0x01, 0x52, 0x05, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x01, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x01, 0x74, 0x22,
	0xd3, 0x01, 0x0a, 0x19, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x47, 0x47, 0x49, 0x4f, 0x12, 0x41, 0x0a,
	0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x01, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x37, 0x0a, 0x05, 0x49, 0x6e, 0x74, 0x49, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x4e, 0x53, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5,
	0x18, 0x01, 0x52, 0x05, 0x49, 0x6e, 0x74, 0x49, 0x6e, 0x12, 0x3a, 0x0a, 0x05, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x22, 0x31, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x57, 0x4d, 0x58, 0x12, 0x20, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x45, 0x6e, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01,
	0x52, 0x06, 0x6d, 0x6f, 0x64, 0x45, 0x6e, 0x61, 0x22, 0x31, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x57, 0x4d, 0x4e, 0x12, 0x20, 0x0a, 0x06, 0x6d, 0x6f, 0x64,
	0x45, 0x6e, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90,
	0xb5, 0x18, 0x01, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x45, 0x6e, 0x61, 0x22, 0x81, 0x02, 0x0a, 0x09,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x57, 0x41, 0x50, 0x43, 0x12, 0x4f, 0x0a, 0x0f, 0x6d, 0x61, 0x78,
	0x4c, 0x69, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x57, 0x4d, 0x58, 0x42,
	0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x4c, 0x69,
	0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x0f, 0x6d, 0x69,
	0x6e, 0x4c, 0x69, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x57, 0x4d, 0x4e,
	0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x4c,
	0x69, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0a, 0x77,
	0x4d, 0x61, 0x78, 0x53, 0x70, 0x74, 0x56, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x42,
	0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x77, 0x4d, 0x61, 0x78, 0x53,
	0x70, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0a, 0x77, 0x4d, 0x69, 0x6e, 0x53, 0x70, 0x74,
	0x56, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90,
	0xb5, 0x18, 0x01, 0x52, 0x0a, 0x77, 0x4d, 0x69, 0x6e, 0x53, 0x70, 0x74, 0x56, 0x61, 0x6c, 0x22,
	0xc2, 0x02, 0x0a, 0x1c, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46,
	0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x41, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x03, 0x42, 0x65, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x45, 0x4e, 0x53, 0x5f, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x4d, 0x6f, 0x64,
	0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x03, 0x42, 0x65, 0x68, 0x12, 0x38, 0x0a, 0x08, 0x45, 0x45,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x4e, 0x53, 0x5f,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x08, 0x45, 0x45, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x12, 0x37, 0x0a, 0x0a, 0x48, 0x6f, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x54,
	0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50,
	0x53, 0x52, 0x0a, 0x48, 0x6f, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x67, 0x12, 0x35, 0x0a,
	0x09, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42, 0x6c, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x09, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x42, 0x6c, 0x6b, 0x22, 0x64, 0x0a, 0x10, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x50, 0x0a, 0x10, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x10, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x62, 0x0a, 0x05, 0x4d, 0x65,
	0x74, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6e,
	0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xb6,
	0x02, 0x0a, 0x0e, 0x4e, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x50, 0x0a, 0x10, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x01, 0x52, 0x10, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x6e, 0x75,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x65, 0x72, 0x6e, 0x75, 0x6d, 0x12, 0x32, 0x0a,
	0x05, 0x73, 0x77, 0x52, 0x65, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x73, 0x77, 0x52, 0x65,
	0x76, 0x12, 0x34, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x22, 0x85, 0x01, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x46, 0x50, 0x46, 0x12, 0x20, 0x0a, 0x06, 0x6d, 0x6f, 0x64,
	0x45, 0x6e, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90,
	0xb5, 0x18, 0x01, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x45, 0x6e, 0x61, 0x12, 0x24, 0x0a, 0x08, 0x70,
	0x46, 0x45, 0x78, 0x74, 0x53, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x08, 0x88,
	0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x08, 0x70, 0x46, 0x45, 0x78, 0x74, 0x53, 0x65,
	0x74, 0x12, 0x2c, 0x0a, 0x0c, 0x70, 0x46, 0x47, 0x6e, 0x54, 0x67, 0x74, 0x4d, 0x78, 0x56, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18,
	0x01, 0x52, 0x0c, 0x70, 0x46, 0x47, 0x6e, 0x54, 0x67, 0x74, 0x4d, 0x78, 0x56, 0x61, 0x6c, 0x22,
	0x37, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x56, 0x41, 0x52,
	0x12, 0x26, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x54, 0x67, 0x74, 0x53, 0x70, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x09, 0x76,
	0x61, 0x72, 0x54, 0x67, 0x74, 0x53, 0x70, 0x74, 0x22, 0xff, 0x01, 0x0a, 0x0d, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x56, 0x56, 0x52, 0x12, 0x20, 0x0a, 0x06, 0x6d, 0x6f,
	0x64, 0x45, 0x6e, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01,
	0x90, 0xb5, 0x18, 0x01, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x45, 0x6e, 0x61, 0x12, 0x44, 0x0a, 0x0a,
	0x4f, 0x70, 0x6c, 0x54, 0x6d, 0x6d, 0x73, 0x4d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x08, 0x88, 0xb5,
	0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x4f, 0x70, 0x6c, 0x54, 0x6d, 0x6d, 0x73, 0x4d,
	0x61, 0x78, 0x12, 0x1c, 0x0a, 0x04, 0x56, 0x52, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x56, 0x52, 0x65, 0x66,
	0x12, 0x28, 0x0a, 0x0a, 0x56, 0x52, 0x65, 0x66, 0x41, 0x64, 0x6a, 0x45, 0x6e, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0a,
	0x56, 0x52, 0x65, 0x66, 0x41, 0x64, 0x6a, 0x45, 0x6e, 0x61, 0x12, 0x3e, 0x0a, 0x08, 0x56, 0x52,
	0x65, 0x66, 0x54, 0x6d, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x49, 0x4e, 0x47, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01,
	0x52, 0x08, 0x56, 0x52, 0x65, 0x66, 0x54, 0x6d, 0x6d, 0x73, 0x22, 0x77, 0x0a, 0x0d, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x56, 0x57, 0x43, 0x12, 0x20, 0x0a, 0x06, 0x6d,
	0x6f, 0x64, 0x45, 0x6e, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x08, 0x88, 0xb5, 0x18,
	0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x45, 0x6e, 0x61, 0x12, 0x44, 0x0a,
	0x0a, 0x4f, 0x70, 0x6c, 0x54, 0x6d, 0x6d, 0x73, 0x4d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x08, 0x88,
	0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x4f, 0x70, 0x6c, 0x54, 0x6d, 0x6d, 0x73,
	0x4d, 0x61, 0x78, 0x22, 0x2d, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x57, 0x47, 0x43, 0x12, 0x1c, 0x0a, 0x04, 0x77, 0x53, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x77, 0x53,
	0x70, 0x74, 0x22, 0x31, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x57, 0x56, 0x52, 0x12, 0x20, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x45, 0x6e, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x06, 0x6d,
	0x6f, 0x64, 0x45, 0x6e, 0x61, 0x22, 0x5c, 0x0a, 0x17, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x41, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x72, 0x0a, 0x05, 0x50, 0x46, 0x53, 0x50, 0x43, 0x12, 0x20, 0x0a, 0x06,
	0x63, 0x74, 0x6c, 0x56, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x08, 0x88, 0xb5,
	0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x06, 0x63, 0x74, 0x6c, 0x56, 0x61, 0x6c, 0x12, 0x47,
	0x0a, 0x0b, 0x70, 0x46, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x46, 0x50, 0x46,
	0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x70, 0x46, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x22, 0xc2, 0x01, 0x0a, 0x08, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x41, 0x50, 0x43, 0x12, 0x2c, 0x0a, 0x04, 0x70, 0x68, 0x73, 0x33, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x50, 0x43, 0x52, 0x04, 0x70, 0x68,
	0x73, 0x33, 0x12, 0x2c, 0x0a, 0x04, 0x70, 0x68, 0x73, 0x41, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x50, 0x43, 0x52, 0x04, 0x70, 0x68, 0x73, 0x41,
	0x12, 0x2c, 0x0a, 0x04, 0x70, 0x68, 0x73, 0x42, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x50, 0x43, 0x52, 0x04, 0x70, 0x68, 0x73, 0x42, 0x12, 0x2c,
	0x0a, 0x04, 0x70, 0x68, 0x73, 0x43, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x41, 0x50, 0x43, 0x52, 0x04, 0x70, 0x68, 0x73, 0x43, 0x22, 0x43, 0x0a, 0x12,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x44, 0x62, 0x50, 0x6f, 0x73, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x44, 0x62, 0x50, 0x6f, 0x73, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x90, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x50, 0x53, 0x12,
	0x23, 0x0a, 0x01, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x01, 0x71, 0x12, 0x37, 0x0a, 0x05, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x44, 0x62, 0x50, 0x6f, 0x73, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x08, 0x88, 0xb5,
	0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x05, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x25, 0x0a,
	0x01, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x01, 0x74, 0x22, 0xbe, 0x01, 0x0a, 0x08, 0x50, 0x68, 0x61, 0x73, 0x65, 0x44, 0x50,
	0x53, 0x12, 0x2b, 0x0a, 0x04, 0x70, 0x68, 0x73, 0x33, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x50, 0x53, 0x52, 0x04, 0x70, 0x68, 0x73, 0x33, 0x12, 0x2b,
	0x0a, 0x04, 0x70, 0x68, 0x73, 0x41, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x44, 0x50, 0x53, 0x52, 0x04, 0x70, 0x68, 0x73, 0x41, 0x12, 0x2b, 0x0a, 0x04, 0x70,
	0x68, 0x73, 0x42, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44,
	0x50, 0x53, 0x52, 0x04, 0x70, 0x68, 0x73, 0x42, 0x12, 0x2b, 0x0a, 0x04, 0x70, 0x68, 0x73, 0x43,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x50, 0x53, 0x52,
	0x04, 0x70, 0x68, 0x73, 0x43, 0x22, 0xbe, 0x01, 0x0a, 0x08, 0x50, 0x68, 0x61, 0x73, 0x65, 0x49,
	0x4e, 0x53, 0x12, 0x2b, 0x0a, 0x04, 0x70, 0x68, 0x73, 0x33, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x4e, 0x53, 0x52, 0x04, 0x70, 0x68, 0x73, 0x33, 0x12,
	0x2b, 0x0a, 0x04, 0x70, 0x68, 0x73, 0x41, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x49, 0x4e, 0x53, 0x52, 0x04, 0x70, 0x68, 0x73, 0x41, 0x12, 0x2b, 0x0a, 0x04,
	0x70, 0x68, 0x73, 0x42, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x49, 0x4e, 0x53, 0x52, 0x04, 0x70, 0x68, 0x73, 0x42, 0x12, 0x2b, 0x0a, 0x04, 0x70, 0x68, 0x73,
	0x43, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x4e, 0x53,
	0x52, 0x04, 0x70, 0x68, 0x73, 0x43, 0x22, 0xc2, 0x01, 0x0a, 0x08, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x49, 0x53, 0x43, 0x12, 0x2c, 0x0a, 0x04, 0x70, 0x68, 0x73, 0x33, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x53, 0x43, 0x52, 0x04, 0x70, 0x68, 0x73,
	0x33, 0x12, 0x2c, 0x0a, 0x04, 0x70, 0x68, 0x73, 0x41, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x53, 0x43, 0x52, 0x04, 0x70, 0x68, 0x73, 0x41, 0x12,
	0x2c, 0x0a, 0x04, 0x70, 0x68, 0x73, 0x42, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x49, 0x53, 0x43, 0x52, 0x04, 0x70, 0x68, 0x73, 0x42, 0x12, 0x2c, 0x0a,
	0x04, 0x70, 0x68, 0x73, 0x43, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x49, 0x53, 0x43, 0x52, 0x04, 0x70, 0x68, 0x73, 0x43, 0x22, 0xd3, 0x03, 0x0a, 0x0b,
	0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x54, 0x4e, 0x12, 0x41, 0x0a, 0x0b, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x01, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x29,
	0x0a, 0x06, 0x44, 0x6d, 0x64, 0x56, 0x41, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x42, 0x43,
	0x52, 0x52, 0x06, 0x44, 0x6d, 0x64, 0x56, 0x41, 0x68, 0x12, 0x2b, 0x0a, 0x07, 0x44, 0x6d, 0x64,
	0x56, 0x41, 0x72, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x42, 0x43, 0x52, 0x52, 0x07, 0x44,
	0x6d, 0x64, 0x56, 0x41, 0x72, 0x68, 0x12, 0x27, 0x0a, 0x05, 0x44, 0x6d, 0x64, 0x57, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x42, 0x43, 0x52, 0x52, 0x05, 0x44, 0x6d, 0x64, 0x57, 0x68, 0x12,
	0x29, 0x0a, 0x06, 0x53, 0x75, 0x70, 0x56, 0x41, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x42,
	0x43, 0x52, 0x52, 0x06, 0x53, 0x75, 0x70, 0x56, 0x41, 0x68, 0x12, 0x2b, 0x0a, 0x07, 0x53, 0x75,
	0x70, 0x56, 0x41, 0x72, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x42, 0x43, 0x52, 0x52, 0x07,
	0x53, 0x75, 0x70, 0x56, 0x41, 0x72, 0x68, 0x12, 0x27, 0x0a, 0x05, 0x53, 0x75, 0x70, 0x57, 0x68,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x42, 0x43, 0x52, 0x52, 0x05, 0x53, 0x75, 0x70, 0x57, 0x68,
	0x12, 0x29, 0x0a, 0x06, 0x54, 0x6f, 0x74, 0x56, 0x41, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x42, 0x43, 0x52, 0x52, 0x06, 0x54, 0x6f, 0x74, 0x56, 0x41, 0x68, 0x12, 0x2b, 0x0a, 0x07, 0x54,
	0x6f, 0x74, 0x56, 0x41, 0x72, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x42, 0x43, 0x52, 0x52,
	0x07, 0x54, 0x6f, 0x74, 0x56, 0x41, 0x72, 0x68, 0x12, 0x27, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x57,
	0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x42, 0x43, 0x52, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x57,
	0x68, 0x22, 0xab, 0x02, 0x0a, 0x09, 0x50, 0x68, 0x61, 0x73, 0x65, 0x4d, 0x4d, 0x54, 0x4e, 0x12,
	0x2d, 0x0a, 0x04, 0x70, 0x68, 0x73, 0x41, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x54, 0x4e, 0x52, 0x04, 0x70, 0x68, 0x73, 0x41, 0x12, 0x2f,
	0x0a, 0x05, 0x70, 0x68, 0x73, 0x41, 0x42, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x54, 0x4e, 0x52, 0x05, 0x70, 0x68, 0x73, 0x41, 0x42, 0x12,
	0x2d, 0x0a, 0x04, 0x70, 0x68, 0x73, 0x42, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x54, 0x4e, 0x52, 0x04, 0x70, 0x68, 0x73, 0x42, 0x12, 0x2f,
	0x0a, 0x05, 0x70, 0x68, 0x73, 0x42, 0x43, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x54, 0x4e, 0x52, 0x05, 0x70, 0x68, 0x73, 0x42, 0x43, 0x12,
	0x2d, 0x0a, 0x04, 0x70, 0x68, 0x73, 0x43, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x54, 0x4e, 0x52, 0x04, 0x70, 0x68, 0x73, 0x43, 0x12, 0x2f,
	0x0a, 0x05, 0x70, 0x68, 0x73, 0x43, 0x41, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x54, 0x4e, 0x52, 0x05, 0x70, 0x68, 0x73, 0x43, 0x41, 0x22,
	0x53, 0x0a, 0x1a, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x52, 0x65, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x35, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x8c, 0x02, 0x0a, 0x12, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x04, 0x70,
	0x68, 0x73, 0x33, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x52, 0x65, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x69, 0x6e, 0x64, 0x52, 0x04, 0x70, 0x68, 0x73, 0x33, 0x12, 0x3c, 0x0a, 0x04, 0x70, 0x68, 0x73,
	0x41, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x52, 0x65, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e,
	0x64, 0x52, 0x04, 0x70, 0x68, 0x73, 0x41, 0x12, 0x3c, 0x0a, 0x04, 0x70, 0x68, 0x73, 0x42, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x52, 0x65,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52,
	0x04, 0x70, 0x68, 0x73, 0x42, 0x12, 0x3c, 0x0a, 0x04, 0x70, 0x68, 0x73, 0x43, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x52, 0x65, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x70,
	0x68, 0x73, 0x43, 0x22, 0xc2, 0x01, 0x0a, 0x08, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53, 0x50, 0x43,
	0x12, 0x2c, 0x0a, 0x04, 0x70, 0x68, 0x73, 0x33, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x50, 0x43, 0x52, 0x04, 0x70, 0x68, 0x73, 0x33, 0x12, 0x2c,
	0x0a, 0x04, 0x70, 0x68, 0x73, 0x41, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x53, 0x50, 0x43, 0x52, 0x04, 0x70, 0x68, 0x73, 0x41, 0x12, 0x2c, 0x0a, 0x04,
	0x70, 0x68, 0x73, 0x42, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x53, 0x50, 0x43, 0x52, 0x04, 0x70, 0x68, 0x73, 0x42, 0x12, 0x2c, 0x0a, 0x04, 0x70, 0x68,
	0x73, 0x43, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53,
	0x50, 0x43, 0x52, 0x04, 0x70, 0x68, 0x73, 0x43, 0x22, 0xbe, 0x01, 0x0a, 0x08, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x53, 0x50, 0x53, 0x12, 0x2b, 0x0a, 0x04, 0x70, 0x68, 0x73, 0x33, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x04, 0x70, 0x68,
	0x73, 0x33, 0x12, 0x2b, 0x0a, 0x04, 0x70, 0x68, 0x73, 0x41, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x04, 0x70, 0x68, 0x73, 0x41, 0x12,
	0x2b, 0x0a, 0x04, 0x70, 0x68, 0x73, 0x42, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x04, 0x70, 0x68, 0x73, 0x42, 0x12, 0x2b, 0x0a, 0x04,
	0x70, 0x68, 0x73, 0x43, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x53, 0x50, 0x53, 0x52, 0x04, 0x70, 0x68, 0x73, 0x43, 0x22, 0x9b, 0x01, 0x0a, 0x03, 0x50, 0x4d,
	0x47, 0x12, 0x22, 0x0a, 0x03, 0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4d, 0x56,
	0x52, 0x03, 0x6e, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x70, 0x68, 0x73, 0x41, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x4d, 0x56, 0x52, 0x04, 0x70, 0x68, 0x73, 0x41, 0x12, 0x24, 0x0a, 0x04, 0x70,
	0x68, 0x73, 0x42, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4d, 0x56, 0x52, 0x04, 0x70, 0x68, 0x73,
	0x42, 0x12, 0x24, 0x0a, 0x04, 0x70, 0x68, 0x73, 0x43, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4d,
	0x56, 0x52, 0x04, 0x70, 0x68, 0x73, 0x43, 0x22, 0x8e, 0x03, 0x0a, 0x08, 0x52, 0x61, 0x6d, 0x70,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x65, 0x0a, 0x1f, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4b, 0x56, 0x41,
	0x72, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1f, 0x6e, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x4b, 0x56, 0x41, 0x72, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x12, 0x59, 0x0a, 0x19, 0x6e,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x4b, 0x57, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x6e, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4b, 0x57,
	0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x12, 0x65, 0x0a, 0x1f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4b,
	0x56, 0x41, 0x72, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x4b, 0x56, 0x41, 0x72, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x12, 0x59, 0x0a,
	0x19, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x61, 0x6c, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x4b, 0x57, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x4b, 0x57, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x22, 0x57, 0x0a, 0x12, 0x52, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41,
	0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0xd3, 0x03, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x54,
	0x52, 0x12, 0x41, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64,
	0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x44, 0x6d, 0x64, 0x56, 0x41, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x42, 0x43, 0x52, 0x52, 0x06, 0x44, 0x6d, 0x64, 0x56, 0x41, 0x68, 0x12,
	0x2b, 0x0a, 0x07, 0x44, 0x6d, 0x64, 0x56, 0x41, 0x72, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x42, 0x43, 0x52, 0x52, 0x07, 0x44, 0x6d, 0x64, 0x56, 0x41, 0x72, 0x68, 0x12, 0x27, 0x0a, 0x05,
	0x44, 0x6d, 0x64, 0x57, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x42, 0x43, 0x52, 0x52, 0x05,
	0x44, 0x6d, 0x64, 0x57, 0x68, 0x12, 0x29, 0x0a, 0x06, 0x53, 0x75, 0x70, 0x56, 0x41, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x42, 0x43, 0x52, 0x52, 0x06, 0x53, 0x75, 0x70, 0x56, 0x41, 0x68,
	0x12, 0x2b, 0x0a, 0x07, 0x53, 0x75, 0x70, 0x56, 0x41, 0x72, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x42, 0x43, 0x52, 0x52, 0x07, 0x53, 0x75, 0x70, 0x56, 0x41, 0x72, 0x68, 0x12, 0x27, 0x0a,
	0x05, 0x53, 0x75, 0x70, 0x57, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x42, 0x43, 0x52, 0x52,
	0x05, 0x53, 0x75, 0x70, 0x57, 0x68, 0x12, 0x29, 0x0a, 0x06, 0x54, 0x6f, 0x74, 0x56, 0x41, 0x68,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x42, 0x43, 0x52, 0x52, 0x06, 0x54, 0x6f, 0x74, 0x56, 0x41,
	0x68, 0x12, 0x2b, 0x0a, 0x07, 0x54, 0x6f, 0x74, 0x56, 0x41, 0x72, 0x68, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x42, 0x43, 0x52, 0x52, 0x07, 0x54, 0x6f, 0x74, 0x56, 0x41, 0x72, 0x68, 0x12, 0x27,
	0x0a, 0x05, 0x54, 0x6f, 0x74, 0x57, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x42, 0x43, 0x52,
	0x52, 0x05, 0x54, 0x6f, 0x74, 0x57, 0x68, 0x22, 0xeb, 0x01, 0x0a, 0x03, 0x57, 0x59, 0x45, 0x12,
	0x23, 0x0a, 0x03, 0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x4d, 0x56, 0x52,
	0x03, 0x6e, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x6e, 0x65, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x43, 0x4d, 0x56, 0x52, 0x04, 0x6e, 0x65, 0x75, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x70,
	0x68, 0x73, 0x41, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x4d, 0x56, 0x52, 0x04, 0x70, 0x68,
	0x73, 0x41, 0x12, 0x25, 0x0a, 0x04, 0x70, 0x68, 0x73, 0x42, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x43, 0x4d, 0x56, 0x52, 0x04, 0x70, 0x68, 0x73, 0x42, 0x12, 0x25, 0x0a, 0x04, 0x70, 0x68, 0x73,
	0x43, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x4d, 0x56, 0x52, 0x04, 0x70, 0x68, 0x73, 0x43,
	0x12, 0x23, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x4d, 0x56,
	0x52, 0x03, 0x72, 0x65, 0x73, 0x22, 0xd9, 0x03, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x4d, 0x4d, 0x58, 0x55, 0x12, 0x41, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x01, 0x41, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x57, 0x59, 0x45, 0x52, 0x01, 0x41, 0x12, 0x38, 0x0a, 0x06, 0x43, 0x6c, 0x63,
	0x4d, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x4e, 0x47, 0x5f, 0x43, 0x61, 0x6c,
	0x63, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x06, 0x43, 0x6c, 0x63,
	0x4d, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x02, 0x48, 0x7a, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4d,
	0x56, 0x52, 0x02, 0x48, 0x7a, 0x12, 0x21, 0x0a, 0x02, 0x50, 0x46, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x57, 0x59, 0x45, 0x52, 0x02, 0x50, 0x46, 0x12, 0x34, 0x0a, 0x06, 0x50, 0x46, 0x53, 0x69,
	0x67, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x4e, 0x47, 0x5f, 0x50, 0x46, 0x53, 0x69,
	0x67, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x06, 0x50, 0x46, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x23,
	0x0a, 0x03, 0x50, 0x68, 0x56, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x57, 0x59, 0x45, 0x52, 0x03,
	0x50, 0x68, 0x56, 0x12, 0x23, 0x0a, 0x03, 0x50, 0x50, 0x56, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x44, 0x45, 0x4c, 0x52, 0x03, 0x50, 0x50, 0x56, 0x12, 0x21, 0x0a, 0x02, 0x56, 0x41, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x57, 0x59, 0x45, 0x52, 0x02, 0x56, 0x41, 0x12, 0x23, 0x0a, 0x03, 0x56,
	0x41, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x57, 0x59, 0x45, 0x52, 0x03, 0x56, 0x41, 0x72,
	0x12, 0x1f, 0x0a, 0x01, 0x57, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x57, 0x59, 0x45, 0x52, 0x01,
	0x57, 0x22, 0xec, 0x04, 0x0a, 0x1d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e,
	0x6f, 0x64, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x41, 0x4d, 0x61, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53, 0x47, 0x52, 0x04, 0x41, 0x4d, 0x61, 0x78, 0x12, 0x27, 0x0a,
	0x05, 0x56, 0x41, 0x4d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53, 0x47, 0x52,
	0x05, 0x56, 0x41, 0x4d, 0x61, 0x78, 0x12, 0x2f, 0x0a, 0x09, 0x56, 0x61, 0x72, 0x4d, 0x61, 0x78,
	0x41, 0x62, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53, 0x47, 0x52, 0x09, 0x56, 0x61,
	0x72, 0x4d, 0x61, 0x78, 0x41, 0x62, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x56, 0x61, 0x72, 0x4d, 0x61,
	0x78, 0x49, 0x6e, 0x6a, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53, 0x47, 0x52, 0x09, 0x56,
	0x61, 0x72, 0x4d, 0x61, 0x78, 0x49, 0x6e, 0x6a, 0x12, 0x25, 0x0a, 0x04, 0x56, 0x4d, 0x61, 0x78,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53, 0x47, 0x52, 0x04, 0x56, 0x4d, 0x61, 0x78, 0x12,
	0x25, 0x0a, 0x04, 0x56, 0x4d, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53, 0x47,
	0x52, 0x04, 0x56, 0x4d, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x04, 0x56, 0x4e, 0x6f, 0x6d, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53, 0x47, 0x52, 0x04, 0x56, 0x4e, 0x6f, 0x6d, 0x12, 0x25, 0x0a,
	0x04, 0x57, 0x4d, 0x61, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53, 0x47, 0x52, 0x04,
	0x57, 0x4d, 0x61, 0x78, 0x12, 0x2b, 0x0a, 0x07, 0x57, 0x4f, 0x76, 0x72, 0x45, 0x78, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53, 0x47, 0x52, 0x07, 0x57, 0x4f, 0x76, 0x72, 0x45, 0x78,
	0x74, 0x12, 0x2f, 0x0a, 0x09, 0x57, 0x4f, 0x76, 0x72, 0x45, 0x78, 0x74, 0x50, 0x46, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53, 0x47, 0x52, 0x09, 0x57, 0x4f, 0x76, 0x72, 0x45, 0x78, 0x74,
	0x50, 0x46, 0x12, 0x2b, 0x0a, 0x07, 0x57, 0x55, 0x6e, 0x64, 0x45, 0x78, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x41, 0x53, 0x47, 0x52, 0x07, 0x57, 0x55, 0x6e, 0x64, 0x45, 0x78, 0x74, 0x12,
	0x2f, 0x0a, 0x09, 0x57, 0x55, 0x6e, 0x64, 0x45, 0x78, 0x74, 0x50, 0x46, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x41, 0x53, 0x47, 0x52, 0x09, 0x57, 0x55, 0x6e, 0x64, 0x45, 0x78, 0x74, 0x50, 0x46,
	0x22, 0x49, 0x0a, 0x15, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x4e, 0x6f, 0x72,
	0x4f, 0x70, 0x43, 0x61, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4e, 0x6f, 0x72, 0x4f, 0x70, 0x43, 0x61, 0x74,
	0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x49, 0x0a, 0x15, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x41, 0x62, 0x6e, 0x4f, 0x70, 0x43, 0x61, 0x74,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x41, 0x62, 0x6e, 0x4f, 0x70, 0x43, 0x61, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb0, 0x08, 0x0a, 0x17, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f,
	0x64, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x41, 0x62, 0x6e, 0x4f, 0x70, 0x43, 0x61,
	0x74, 0x52, 0x74, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x62, 0x6e, 0x4f, 0x70, 0x43,
	0x61, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01,
	0x52, 0x0b, 0x41, 0x62, 0x6e, 0x4f, 0x70, 0x43, 0x61, 0x74, 0x52, 0x74, 0x67, 0x12, 0x2b, 0x0a,
	0x07, 0x41, 0x4d, 0x61, 0x78, 0x52, 0x74, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53,
	0x47, 0x52, 0x07, 0x41, 0x4d, 0x61, 0x78, 0x52, 0x74, 0x67, 0x12, 0x3b, 0x0a, 0x0a, 0x46, 0x72,
	0x65, 0x71, 0x4e, 0x6f, 0x6d, 0x52, 0x74, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53,
	0x47, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x46, 0x72, 0x65,
	0x71, 0x4e, 0x6f, 0x6d, 0x52, 0x74, 0x67, 0x12, 0x46, 0x0a, 0x0b, 0x4e, 0x6f, 0x72, 0x4f, 0x70,
	0x43, 0x61, 0x74, 0x52, 0x74, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4e, 0x6f, 0x72, 0x4f,
	0x70, 0x43, 0x61, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5,
	0x18, 0x01, 0x52, 0x0b, 0x4e, 0x6f, 0x72, 0x4f, 0x70, 0x43, 0x61, 0x74, 0x52, 0x74, 0x67, 0x12,
	0x45, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x63, 0x74, 0x53, 0x75, 0x73, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x74, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53, 0x47, 0x42, 0x08, 0x88, 0xb5, 0x18,
	0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0f, 0x52, 0x65, 0x61, 0x63, 0x74, 0x53, 0x75, 0x73, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x74, 0x67, 0x12, 0x37, 0x0a, 0x08, 0x56, 0x41, 0x4d, 0x61, 0x78, 0x52,
	0x74, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53, 0x47, 0x42, 0x08, 0x88, 0xb5, 0x18,
	0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x08, 0x56, 0x41, 0x4d, 0x61, 0x78, 0x52, 0x74, 0x67, 0x12,
	0x3f, 0x0a, 0x0c, 0x56, 0x61, 0x72, 0x4d, 0x61, 0x78, 0x41, 0x62, 0x73, 0x52, 0x74, 0x67, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53, 0x47, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5,
	0x18, 0x01, 0x52, 0x0c, 0x56, 0x61, 0x72, 0x4d, 0x61, 0x78, 0x41, 0x62, 0x73, 0x52, 0x74, 0x67,
	0x12, 0x3f, 0x0a, 0x0c, 0x56, 0x61, 0x72, 0x4d, 0x61, 0x78, 0x49, 0x6e, 0x6a, 0x52, 0x74, 0x67,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53, 0x47, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90,
	0xb5, 0x18, 0x01, 0x52, 0x0c, 0x56, 0x61, 0x72, 0x4d, 0x61, 0x78, 0x49, 0x6e, 0x6a, 0x52, 0x74,
	0x67, 0x12, 0x35, 0x0a, 0x07, 0x56, 0x4d, 0x61, 0x78, 0x52, 0x74, 0x67, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x41, 0x53, 0x47, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52,
	0x07, 0x56, 0x4d, 0x61, 0x78, 0x52, 0x74, 0x67, 0x12, 0x35, 0x0a, 0x07, 0x56, 0x4d, 0x69, 0x6e,
	0x52, 0x74, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53, 0x47, 0x42, 0x08, 0x88, 0xb5,
	0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x07, 0x56, 0x4d, 0x69, 0x6e, 0x52, 0x74, 0x67, 0x12,
	0x35, 0x0a, 0x07, 0x56, 0x4e, 0x6f, 0x6d, 0x52, 0x74, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x41, 0x53, 0x47, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x07, 0x56,
	0x4e, 0x6f, 0x6d, 0x52, 0x74, 0x67, 0x12, 0x35, 0x0a, 0x07, 0x57, 0x4d, 0x61, 0x78, 0x52, 0x74,
	0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53, 0x47, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01,
	0x90, 0xb5, 0x18, 0x01, 0x52, 0x07, 0x57, 0x4d, 0x61, 0x78, 0x52, 0x74, 0x67, 0x12, 0x3b, 0x0a,
	0x0a, 0x57, 0x4f, 0x76, 0x72, 0x45, 0x78, 0x74, 0x52, 0x74, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x41, 0x53, 0x47, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0a,
	0x57, 0x4f, 0x76, 0x72, 0x45, 0x78, 0x74, 0x52, 0x74, 0x67, 0x12, 0x3f, 0x0a, 0x0c, 0x57, 0x4f,
	0x76, 0x72, 0x45, 0x78, 0x74, 0x52, 0x74, 0x67, 0x50, 0x46, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x41, 0x53, 0x47, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0c, 0x57,
	0x4f, 0x76, 0x72, 0x45, 0x78, 0x74, 0x52, 0x74, 0x67, 0x50, 0x46, 0x12, 0x3b, 0x0a, 0x0a, 0x57,
	0x55, 0x6e, 0x64, 0x45, 0x78, 0x74, 0x52, 0x74, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41,
	0x53, 0x47, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x57, 0x55,
	0x6e, 0x64, 0x45, 0x78, 0x74, 0x52, 0x74, 0x67, 0x12, 0x3f, 0x0a, 0x0c, 0x57, 0x55, 0x6e, 0x64,
	0x45, 0x78, 0x74, 0x52, 0x74, 0x67, 0x50, 0x46, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53,
	0x47, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0c, 0x57, 0x55, 0x6e,
	0x64, 0x45, 0x78, 0x74, 0x52, 0x74, 0x67, 0x50, 0x46, 0x22, 0x85, 0x04, 0x0a, 0x12, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x41, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x58, 0x43, 0x42, 0x52,
	0x12, 0x74, 0x0a, 0x1c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46,
	0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64,
	0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x1c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x54, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x4e, 0x53, 0x5f, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0b,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x50,
	0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x44, 0x50, 0x53,
	0x52, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x3d, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41,
	0x43, 0x44, 0x52, 0x10, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69,
	0x63, 0x6b, 0x75, 0x70, 0x12, 0x3f, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x49, 0x4e, 0x53, 0x52, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x53, 0x50, 0x53, 0x52, 0x0e, 0x52, 0x65, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x6c, 0x6f, 0x73, 0x69,
	0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0f, 0x52, 0x65, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x77, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x4e, 0x43, 0x12, 0x23,
	0x0a, 0x01, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x01, 0x71, 0x12, 0x1e, 0x0a, 0x05, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x05, 0x73, 0x74,
	0x56, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x01, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x01, 0x74, 0x22, 0x77, 0x0a, 0x09, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x49, 0x53, 0x43, 0x12, 0x23, 0x0a, 0x01, 0x71, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x01, 0x71, 0x12, 0x1e, 0x0a, 0x05,
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x88, 0xb5, 0x18,
	0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x05, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x01,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x01, 0x74, 0x22, 0x56, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x93, 0x01, 0x0a, 0x0b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x50, 0x0a, 0x10, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x10, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x32, 0x0a,
	0x06, 0x6d, 0x6f, 0x64, 0x42, 0x6c, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x42, 0x6c,
	0x6b, 0x22, 0x71, 0x0a, 0x03, 0x56, 0x53, 0x53, 0x12, 0x23, 0x0a, 0x01, 0x71, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x01, 0x71, 0x12, 0x1e, 0x0a,
	0x05, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x88, 0xb5,
	0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x05, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x25, 0x0a,
	0x01, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x01, 0x74, 0x22, 0xcc, 0x01, 0x0a, 0x18, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x47, 0x47, 0x49,
	0x4f, 0x12, 0x41, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64,
	0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x50, 0x68, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x12, 0x31, 0x0a, 0x05, 0x53, 0x74, 0x72, 0x49, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x56,
	0x53, 0x53, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x05, 0x53, 0x74,
	0x72, 0x49, 0x6e, 0x22, 0x8b, 0x01, 0x0a, 0x0b, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x03, 0x50, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x50, 0x43, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01,
	0x90, 0xb5, 0x18, 0x01, 0x52, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x46, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0x88, 0xb5,
	0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x48, 0x0a, 0x09, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x43, 0x53, 0x47, 0x12, 0x3b,
	0x0a, 0x06, 0x63, 0x72, 0x76, 0x50, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90,
	0xb5, 0x18, 0x01, 0x52, 0x06, 0x63, 0x72, 0x76, 0x50, 0x74, 0x73, 0x22, 0x67, 0x0a, 0x09, 0x54,
	0x6d, 0x48, 0x7a, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x05, 0x68, 0x7a, 0x56, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18,
	0x01, 0x52, 0x05, 0x68, 0x7a, 0x56, 0x61, 0x6c, 0x12, 0x3a, 0x0a, 0x05, 0x74, 0x6d, 0x56, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x05, 0x74,
	0x6d, 0x56, 0x61, 0x6c, 0x22, 0x91, 0x01, 0x0a, 0x07, 0x54, 0x6d, 0x48, 0x7a, 0x43, 0x53, 0x47,
	0x12, 0x41, 0x0a, 0x0a, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x72, 0x76, 0x50, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x54, 0x6d, 0x48, 0x7a, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x08, 0x88,
	0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x72, 0x76,
	0x50, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x72, 0x76, 0x50,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x6d, 0x48, 0x7a, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x43, 0x72, 0x76, 0x50, 0x74, 0x73, 0x22, 0x6d, 0x0a, 0x0b, 0x54, 0x6d, 0x56, 0x6f,
	0x6c, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x74, 0x6d, 0x56, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x69,
	0x6d, 0x65, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x05, 0x74, 0x6d,
	0x56, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x07,
	0x76, 0x6f, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x22, 0x97, 0x01, 0x0a, 0x09, 0x54, 0x6d, 0x56, 0x6f,
	0x6c, 0x74, 0x43, 0x53, 0x47, 0x12, 0x43, 0x0a, 0x0a, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x72, 0x76,
	0x50, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x6d, 0x56, 0x6f, 0x6c, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0a,
	0x6f, 0x76, 0x65, 0x72, 0x43, 0x72, 0x76, 0x50, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x0b, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x43, 0x72, 0x76, 0x50, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54,
	0x6d, 0x56, 0x6f, 0x6c, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01,
	0x90, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x72, 0x76, 0x50, 0x74,
	0x73, 0x22, 0x75, 0x0a, 0x06, 0x56, 0x61, 0x72, 0x53, 0x50, 0x43, 0x12, 0x20, 0x0a, 0x06, 0x6d,
	0x6f, 0x64, 0x45, 0x6e, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x08, 0x88, 0xb5, 0x18,
	0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x45, 0x6e, 0x61, 0x12, 0x49, 0x0a,
	0x0c, 0x76, 0x61, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x56, 0x41, 0x52,
	0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0c, 0x76, 0x61, 0x72, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x22, 0x54, 0x0a, 0x0c, 0x56, 0x6f, 0x6c, 0x74,
	0x56, 0x61, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x06, 0x76, 0x61, 0x72, 0x56,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5,
	0x18, 0x01, 0x52, 0x06, 0x76, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x07, 0x76, 0x6f,
	0x6c, 0x74, 0x56, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x42, 0x08, 0x88, 0xb5, 0x18,
	0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x22, 0x97,
	0x01, 0x0a, 0x0a, 0x56, 0x6f, 0x6c, 0x74, 0x56, 0x61, 0x72, 0x43, 0x53, 0x47, 0x12, 0x3c, 0x0a,
	0x06, 0x63, 0x72, 0x76, 0x50, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x56, 0x6f, 0x6c,
	0x74, 0x56, 0x61, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90,
	0xb5, 0x18, 0x01, 0x52, 0x06, 0x63, 0x72, 0x76, 0x50, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x0d, 0x76,
	0x56, 0x61, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x56, 0x56, 0x52, 0x42,
	0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0d, 0x76, 0x56, 0x61, 0x72, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x22, 0x4e, 0x0a, 0x0a, 0x56, 0x6f, 0x6c, 0x74,
	0x57, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x56, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18,
	0x01, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x04, 0x77, 0x56,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5,
	0x18, 0x01, 0x52, 0x04, 0x77, 0x56, 0x61, 0x6c, 0x22, 0x95, 0x01, 0x0a, 0x08, 0x56, 0x6f, 0x6c,
	0x74, 0x57, 0x43, 0x53, 0x47, 0x12, 0x3a, 0x0a, 0x06, 0x63, 0x72, 0x76, 0x50, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x56, 0x6f, 0x6c, 0x74, 0x57, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42,
	0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x06, 0x63, 0x72, 0x76, 0x50, 0x74,
	0x73, 0x12, 0x4d, 0x0a, 0x0e, 0x76, 0x6f, 0x6c, 0x74, 0x57, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x56, 0x57, 0x43, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01,
	0x52, 0x0e, 0x76, 0x6f, 0x6c, 0x74, 0x57, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x22, 0x27, 0x0a, 0x03, 0x56, 0x53, 0x43, 0x12, 0x20, 0x0a, 0x06, 0x63, 0x74, 0x6c, 0x56, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18,
	0x01, 0x52, 0x06, 0x63, 0x74, 0x6c, 0x56, 0x61, 0x6c, 0x22, 0x6f, 0x0a, 0x04, 0x57, 0x53, 0x50,
	0x43, 0x12, 0x20, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x45, 0x6e, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x06, 0x6d, 0x6f, 0x64,
	0x45, 0x6e, 0x61, 0x12, 0x45, 0x0a, 0x0a, 0x77, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x57, 0x47, 0x43, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0a,
	0x77, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x22, 0x4b, 0x0a, 0x09, 0x57, 0x56,
	0x61, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x06, 0x76, 0x61, 0x72, 0x56, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18,
	0x01, 0x52, 0x06, 0x76, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x04, 0x77, 0x56, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18,
	0x01, 0x52, 0x04, 0x77, 0x56, 0x61, 0x6c, 0x22, 0x91, 0x01, 0x0a, 0x07, 0x57, 0x56, 0x61, 0x72,
	0x43, 0x53, 0x47, 0x12, 0x39, 0x0a, 0x06, 0x63, 0x72, 0x76, 0x50, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x57, 0x56, 0x61, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x08, 0x88, 0xb5,
	0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x06, 0x63, 0x72, 0x76, 0x50, 0x74, 0x73, 0x12, 0x4b,
	0x0a, 0x0d, 0x77, 0x56, 0x61, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x57,
	0x56, 0x52, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0d, 0x77, 0x56,
	0x61, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x22, 0x41, 0x0a, 0x11, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x41, 0x6c, 0x72, 0x6d, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41,
	0x6c, 0x72, 0x6d, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4f,
	0x0a, 0x18, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x53, 0x0a, 0x1a, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x35, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x5f, 0x0a, 0x20, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x47, 0x72, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x47, 0x72, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x55, 0x0a, 0x1b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x61, 0x0a, 0x21,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x59, 0x0a, 0x1d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x52, 0x65, 0x61, 0x6c,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52,
	0x65, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4b,
	0x69, 0x6e, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x43, 0x0a, 0x12, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x53, 0x0a, 0x1a, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x56, 0x6f, 0x6c, 0x74,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x35, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x56, 0x6f, 0x6c, 0x74,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x2a, 0xb4, 0x01, 0x0a, 0x12, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x1c, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e,
	0x64, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a,
	0x1a, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x69, 0x6e, 0x64, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x01, 0x12, 0x1e, 0x0a,
	0x1a, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x69, 0x6e, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x10, 0x02, 0x12, 0x1f, 0x0a,
	0x1b, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x69, 0x6e, 0x64, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x10, 0x03, 0x12, 0x1b,
	0x0a, 0x17, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x62, 0x6f, 0x74, 0x68, 0x10, 0x04, 0x2a, 0xb0, 0x01, 0x0a, 0x17,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69,
	0x6e, 0x64, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23,
	0x0a, 0x1f, 0x50, 0x68, 0x61, 0x73, 0x65, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x68, 0x61, 0x73, 0x65, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x69, 0x6e, 0x64, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x10, 0x03, 0x2a, 0xf5,
	0x06, 0x0a, 0x0e, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b,
	0x69, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x6e,
	0x69, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x67, 0x72, 0x61, 0x6d, 0x10, 0x03, 0x12, 0x16, 0x0a,
	0x12, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x5f,
	0x41, 0x6d, 0x70, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x67, 0x10, 0x09, 0x12, 0x16, 0x0a,
	0x12, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x5f,
	0x72, 0x61, 0x64, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x67, 0x43, 0x10, 0x17, 0x12, 0x18,
	0x0a, 0x14, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x5f, 0x46, 0x61, 0x72, 0x61, 0x64, 0x10, 0x19, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x6e, 0x69, 0x74,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x10, 0x1b,
	0x12, 0x18, 0x0a, 0x14, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x69,
	0x6e, 0x64, 0x5f, 0x48, 0x65, 0x6e, 0x72, 0x79, 0x10, 0x1c, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x6e,
	0x69, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x56, 0x10, 0x1d,
	0x12, 0x16, 0x0a, 0x12, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x69,
	0x6e, 0x64, 0x5f, 0x6f, 0x68, 0x6d, 0x10, 0x1e, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x6e, 0x69, 0x74,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x4a, 0x6f, 0x75, 0x6c, 0x65,
	0x10, 0x1f, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x4e, 0x65, 0x77, 0x74, 0x6f, 0x6e, 0x10, 0x20, 0x12, 0x15, 0x0a,
	0x11, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x5f,
	0x48, 0x7a, 0x10, 0x21, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x57, 0x10, 0x26, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x6e,
	0x69, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x50, 0x61, 0x10,
	0x27, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b,
	0x69, 0x6e, 0x64, 0x5f, 0x6d, 0x32, 0x10, 0x29, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x6e, 0x69, 0x74,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x53, 0x69, 0x65, 0x6d, 0x65,
	0x6e, 0x73, 0x10, 0x35, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x56, 0x41, 0x10, 0x3d, 0x12, 0x16, 0x0a, 0x12, 0x55,
	0x6e, 0x69, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x56, 0x41,
	0x72, 0x10, 0x3f, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x77, 0x50, 0x65, 0x72, 0x56, 0x41, 0x10, 0x41, 0x12, 0x16,
	0x0a, 0x12, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x5f, 0x56, 0x41, 0x68, 0x10, 0x47, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x57, 0x68, 0x10, 0x48, 0x12, 0x17, 0x0a,
	0x13, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x5f,
	0x56, 0x41, 0x72, 0x68, 0x10, 0x49, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x68, 0x7a, 0x50, 0x65, 0x72, 0x53, 0x10,
	0x4b, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b,
	0x69, 0x6e, 0x64, 0x5f, 0x77, 0x50, 0x65, 0x72, 0x53, 0x10, 0x51, 0x12, 0x18, 0x0a, 0x14, 0x55,
	0x6e, 0x69, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x10, 0x64, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x41, 0x68, 0x10, 0x6a, 0x12, 0x17, 0x0a, 0x12,
	0x55, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x6d,
	0x69, 0x6e, 0x10, 0x9f, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x10, 0xa0, 0x01, 0x12,
	0x16, 0x0a, 0x11, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x69, 0x6e,
	0x64, 0x5f, 0x6d, 0x33, 0x10, 0xa6, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x55, 0x6e, 0x69, 0x74, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x77, 0x50, 0x65, 0x72, 0x4d, 0x32,
	0x10, 0xb3, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x67, 0x46, 0x10, 0x97, 0x02, 0x12, 0x17, 0x0a,
	0x12, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x5f,
	0x6d, 0x70, 0x68, 0x10, 0xf4, 0x03, 0x2a, 0x96, 0x03, 0x0a, 0x12, 0x55, 0x6e, 0x69, 0x74, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x20, 0x0a,
	0x1c, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4b,
	0x69, 0x6e, 0x64, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1b, 0x0a, 0x17, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18,
	0x55, 0x6e, 0x69, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4b, 0x69,
	0x6e, 0x64, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x6e,
	0x69, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64,
	0x5f, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x6e, 0x69, 0x74,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x64,
	0x65, 0x63, 0x69, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x47, 0x69, 0x67, 0x61,
	0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x6b, 0x69, 0x6c, 0x6f, 0x10, 0x06, 0x12,
	0x1b, 0x0a, 0x17, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x4d, 0x65, 0x67, 0x61, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18,
	0x55, 0x6e, 0x69, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4b, 0x69,
	0x6e, 0x64, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x6e,
	0x69, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64,
	0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x6e, 0x69, 0x74,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x6e,
	0x61, 0x6e, 0x6f, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x70, 0x69, 0x63, 0x6f,
	0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x54, 0x65, 0x72, 0x61, 0x10, 0x0c, 0x2a,
	0xa1, 0x04, 0x0a, 0x0d, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x4b, 0x69,
	0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x4b,
	0x69, 0x6e, 0x64, 0x5f, 0x4e, 0x10, 0x10, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x43, 0x10, 0x20, 0x12, 0x14, 0x0a, 0x10,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x43, 0x4e,
	0x10, 0x21, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x4b,
	0x69, 0x6e, 0x64, 0x5f, 0x41, 0x43, 0x10, 0x28, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x41, 0x43, 0x4e, 0x10, 0x29, 0x12,
	0x13, 0x0a, 0x0f, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64,
	0x5f, 0x42, 0x10, 0x40, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x42, 0x4e, 0x10, 0x41, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x42, 0x43, 0x10, 0x42,
	0x12, 0x15, 0x0a, 0x11, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e,
	0x64, 0x5f, 0x42, 0x43, 0x4e, 0x10, 0x61, 0x12, 0x14, 0x0a, 0x0f, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x41, 0x10, 0x80, 0x01, 0x12, 0x15, 0x0a,
	0x10, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x41,
	0x4e, 0x10, 0x81, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x41, 0x42, 0x10, 0x84, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x41, 0x42, 0x4e,
	0x10, 0xc1, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x41, 0x42, 0x43, 0x10, 0xe0, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x41, 0x42, 0x43,
	0x4e, 0x10, 0xe1, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x73, 0x32, 0x10, 0x80, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x73, 0x32, 0x4e,
	0x10, 0x81, 0x02, 0x12, 0x15, 0x0a, 0x10, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x73, 0x31, 0x10, 0x80, 0x04, 0x12, 0x16, 0x0a, 0x11, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x73, 0x31, 0x4e, 0x10,
	0x81, 0x04, 0x12, 0x16, 0x0a, 0x11, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x4b,
	0x69, 0x6e, 0x64, 0x5f, 0x73, 0x31, 0x32, 0x10, 0x80, 0x06, 0x12, 0x17, 0x0a, 0x12, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x73, 0x31, 0x32, 0x4e,
	0x10, 0x81, 0x06, 0x2a, 0x95, 0x01, 0x0a, 0x0c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x4b, 0x69, 0x6e, 0x64,
	0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10,
	0x02, 0x12, 0x19, 0x0a, 0x15, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x4b, 0x69, 0x6e,
	0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x04, 0x2a, 0x5a, 0x0a, 0x0a, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e,
	0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69,
	0x74, 0x75, 0x74, 0x65, 0x64, 0x10, 0x02, 0x2a, 0xea, 0x01, 0x0a, 0x10, 0x54, 0x69, 0x6d, 0x65,
	0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x1a,
	0x54, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x4b, 0x69, 0x6e, 0x64,
	0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x54, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x4b, 0x69, 0x6e, 0x64,
	0x5f, 0x54, 0x30, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x63,
	0x75, 0x72, 0x61, 0x63, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x54, 0x31, 0x10, 0x0a, 0x12, 0x17,
	0x0a, 0x13, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x4b, 0x69,
	0x6e, 0x64, 0x5f, 0x54, 0x32, 0x10, 0x0e, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x69, 0x6d, 0x65, 0x41,
	0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x54, 0x33, 0x10, 0x10,
	0x12, 0x17, 0x0a, 0x13, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79,
	0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x54, 0x34, 0x10, 0x12, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x69, 0x6d,
	0x65, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x54, 0x35,
	0x10, 0x14, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61,
	0x63, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x10, 0x1f, 0x2a, 0xe8, 0x0d, 0x0a, 0x15, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x23,
	0x0a, 0x1f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x6e,
	0x65, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x41, 0x5f,
	0x6e, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x67, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4b, 0x69,
	0x6e, 0x64, 0x5f, 0x41, 0x5f, 0x6e, 0x65, 0x75, 0x74, 0x5f, 0x6d, 0x61, 0x67, 0x10, 0x04, 0x12,
	0x24, 0x0a, 0x20, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x41, 0x5f, 0x70, 0x68, 0x73, 0x41, 0x5f,
	0x6d, 0x61, 0x67, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x41,
	0x5f, 0x70, 0x68, 0x73, 0x42, 0x5f, 0x6d, 0x61, 0x67, 0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x41, 0x5f, 0x70, 0x68, 0x73, 0x43, 0x5f, 0x6d, 0x61, 0x67, 0x10,
	0x07, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x48, 0x7a, 0x5f, 0x6d, 0x61,
	0x67, 0x10, 0x08, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x50, 0x46, 0x5f,
	0x6e, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x67, 0x10, 0x09, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4b, 0x69,
	0x6e, 0x64, 0x5f, 0x50, 0x46, 0x5f, 0x6e, 0x65, 0x75, 0x74, 0x5f, 0x6d, 0x61, 0x67, 0x10, 0x0a,
	0x12, 0x25, 0x0a, 0x21, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x50, 0x46, 0x5f, 0x70, 0x68, 0x73,
	0x41, 0x5f, 0x6d, 0x61, 0x67, 0x10, 0x0b, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64,
	0x5f, 0x50, 0x46, 0x5f, 0x70, 0x68, 0x73, 0x42, 0x5f, 0x6d, 0x61, 0x67, 0x10, 0x0c, 0x12, 0x25,
	0x0a, 0x21, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x50, 0x46, 0x5f, 0x70, 0x68, 0x73, 0x43, 0x5f,
	0x6d, 0x61, 0x67, 0x10, 0x0d, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x50,
	0x68, 0x56, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x6e, 0x67, 0x10, 0x0e, 0x12, 0x25, 0x0a, 0x21,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x50, 0x68, 0x56, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x6d, 0x61,
	0x67, 0x10, 0x0f, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x50, 0x68, 0x56,
	0x5f, 0x6e, 0x65, 0x75, 0x74, 0x5f, 0x61, 0x6e, 0x67, 0x10, 0x10, 0x12, 0x26, 0x0a, 0x22, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x50, 0x68, 0x56, 0x5f, 0x6e, 0x65, 0x75, 0x74, 0x5f, 0x6d, 0x61,
	0x67, 0x10, 0x11, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x50, 0x68, 0x56,
	0x5f, 0x70, 0x68, 0x73, 0x41, 0x5f, 0x61, 0x6e, 0x67, 0x10, 0x12, 0x12, 0x26, 0x0a, 0x22, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x50, 0x68, 0x56, 0x5f, 0x70, 0x68, 0x73, 0x41, 0x5f, 0x6d, 0x61,
	0x67, 0x10, 0x13, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x50, 0x68, 0x56,
	0x5f, 0x70, 0x68, 0x73, 0x42, 0x5f, 0x61, 0x6e, 0x67, 0x10, 0x14, 0x12, 0x26, 0x0a, 0x22, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x50, 0x68, 0x56, 0x5f, 0x70, 0x68, 0x73, 0x42, 0x5f, 0x6d, 0x61,
	0x67, 0x10, 0x15, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x50, 0x68, 0x56,
	0x5f, 0x70, 0x68, 0x73, 0x43, 0x5f, 0x61, 0x6e, 0x67, 0x10, 0x16, 0x12, 0x26, 0x0a, 0x22, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x50, 0x68, 0x56, 0x5f, 0x70, 0x68, 0x73, 0x43, 0x5f, 0x6d, 0x61,
	0x67, 0x10, 0x17, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x50, 0x50, 0x56,
	0x5f, 0x70, 0x68, 0x73, 0x41, 0x42, 0x5f, 0x61, 0x6e, 0x67, 0x10, 0x18, 0x12, 0x27, 0x0a, 0x23,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x50, 0x50, 0x56, 0x5f, 0x70, 0x68, 0x73, 0x41, 0x42, 0x5f,
	0x6d, 0x61, 0x67, 0x10, 0x19, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x50,
	0x50, 0x56, 0x5f, 0x70, 0x68, 0x73, 0x42, 0x43, 0x5f, 0x61, 0x6e, 0x67, 0x10, 0x1a, 0x12, 0x27,
	0x0a, 0x23, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x50, 0x50, 0x56, 0x5f, 0x70, 0x68, 0x73, 0x42,
	0x43, 0x5f, 0x6d, 0x61, 0x67, 0x10, 0x1b, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64,
	0x5f, 0x50, 0x50, 0x56, 0x5f, 0x70, 0x68, 0x73, 0x43, 0x41, 0x5f, 0x61, 0x6e, 0x67, 0x10, 0x1c,
	0x12, 0x27, 0x0a, 0x23, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x50, 0x50, 0x56, 0x5f, 0x70, 0x68,
	0x73, 0x43, 0x41, 0x5f, 0x6d, 0x61, 0x67, 0x10, 0x1d, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4b, 0x69,
	0x6e, 0x64, 0x5f, 0x56, 0x41, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x67, 0x10, 0x1e, 0x12,
	0x25, 0x0a, 0x21, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x56, 0x41, 0x5f, 0x6e, 0x65, 0x75, 0x74,
	0x5f, 0x6d, 0x61, 0x67, 0x10, 0x1f, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x5f,
	0x56, 0x41, 0x5f, 0x70, 0x68, 0x73, 0x41, 0x5f, 0x6d, 0x61, 0x67, 0x10, 0x20, 0x12, 0x25, 0x0a,
	0x21, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x56, 0x41, 0x5f, 0x70, 0x68, 0x73, 0x42, 0x5f, 0x6d,
	0x61, 0x67, 0x10, 0x21, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x56, 0x41,
	0x5f, 0x70, 0x68, 0x73, 0x43, 0x5f, 0x6d, 0x61, 0x67, 0x10, 0x22, 0x12, 0x25, 0x0a, 0x21, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x56, 0x41, 0x72, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x67,
	0x10, 0x23, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x56, 0x41, 0x72, 0x5f,
	0x6e, 0x65, 0x75, 0x74, 0x5f, 0x6d, 0x61, 0x67, 0x10, 0x24, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4b,
	0x69, 0x6e, 0x64, 0x5f, 0x56, 0x41, 0x72, 0x5f, 0x70, 0x68, 0x73, 0x41, 0x5f, 0x6d, 0x61, 0x67,
	0x10, 0x25, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x56, 0x41, 0x72, 0x5f,
	0x70, 0x68, 0x73, 0x42, 0x5f, 0x6d, 0x61, 0x67, 0x10, 0x26, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4b,
	0x69, 0x6e, 0x64, 0x5f, 0x56, 0x41, 0x72, 0x5f, 0x70, 0x68, 0x73, 0x43, 0x5f, 0x6d, 0x61, 0x67,
	0x10, 0x27, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x57, 0x5f, 0x6e, 0x65,
	0x74, 0x5f, 0x6d, 0x61, 0x67, 0x10, 0x28, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64,
	0x5f, 0x57, 0x5f, 0x6e, 0x65, 0x75, 0x74, 0x5f, 0x6d, 0x61, 0x67, 0x10, 0x29, 0x12, 0x24, 0x0a,
	0x20, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x57, 0x5f, 0x70, 0x68, 0x73, 0x41, 0x5f, 0x6d, 0x61,
	0x67, 0x10, 0x2a, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x57, 0x5f, 0x70,
	0x68, 0x73, 0x42, 0x5f, 0x6d, 0x61, 0x67, 0x10, 0x2b, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4b, 0x69,
	0x6e, 0x64, 0x5f, 0x57, 0x5f, 0x70, 0x68, 0x73, 0x43, 0x5f, 0x6d, 0x61, 0x67, 0x10, 0x2c, 0x2a,
	0x7f, 0x0a, 0x0e, 0x43, 0x61, 0x6c, 0x63, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x61, 0x6c, 0x63, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4b,
	0x69, 0x6e, 0x64, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1a, 0x0a, 0x16, 0x43, 0x61, 0x6c, 0x63, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4b, 0x69, 0x6e,
	0x64, 0x5f, 0x50, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x10, 0x0b, 0x12, 0x1a, 0x0a, 0x16, 0x43,
	0x61, 0x6c, 0x63, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x4d, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x61, 0x6c, 0x63, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x10, 0x0d,
	0x2a, 0xb6, 0x02, 0x0a, 0x13, 0x47, 0x72, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x1d, 0x47, 0x72, 0x69, 0x64,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f,
	0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x47,
	0x72, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69,
	0x6e, 0x64, 0x5f, 0x43, 0x53, 0x49, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x72, 0x69, 0x64,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f,
	0x56, 0x43, 0x5f, 0x56, 0x53, 0x49, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x72, 0x69, 0x64,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f,
	0x43, 0x43, 0x5f, 0x56, 0x53, 0x49, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x72, 0x69, 0x64,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f,
	0x6e, 0x6f, 0x6e, 0x65, 0x10, 0x62, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x72, 0x69, 0x64, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x10, 0x63, 0x12, 0x1f, 0x0a, 0x1a, 0x47, 0x72, 0x69, 0x64, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x56, 0x53, 0x49,
	0x5f, 0x50, 0x51, 0x10, 0xd0, 0x0f, 0x12, 0x1f, 0x0a, 0x1a, 0x47, 0x72, 0x69, 0x64, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x56, 0x53,
	0x49, 0x5f, 0x56, 0x46, 0x10, 0xd1, 0x0f, 0x12, 0x20, 0x0a, 0x1b, 0x47, 0x72, 0x69, 0x64, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x56,
	0x53, 0x49, 0x5f, 0x49, 0x53, 0x4f, 0x10, 0xd2, 0x0f, 0x2a, 0x4e, 0x0a, 0x0a, 0x50, 0x46, 0x53,
	0x69, 0x67, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x46, 0x53, 0x69, 0x67,
	0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x46, 0x53, 0x69, 0x67, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x5f,
	0x49, 0x45, 0x43, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x46, 0x53, 0x69, 0x67, 0x6e, 0x4b,
	0x69, 0x6e, 0x64, 0x5f, 0x45, 0x45, 0x49, 0x10, 0x02, 0x2a, 0xc8, 0x01, 0x0a, 0x11, 0x42, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x1f, 0x0a, 0x1b, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x4d, 0x6f, 0x64, 0x65,
	0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x18, 0x0a, 0x14, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x4d, 0x6f, 0x64,
	0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x75, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x6f,
	0x66, 0x66, 0x10, 0x05, 0x2a, 0xe0, 0x03, 0x0a, 0x15, 0x44, 0x45, 0x52, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x23,
	0x0a, 0x1f, 0x44, 0x45, 0x52, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x45, 0x52, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x4e, 0x6f, 0x74,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f,
	0x44, 0x45, 0x52, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10,
	0x02, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x45, 0x52, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x75, 0x70, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x45, 0x52, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e,
	0x64, 0x5f, 0x53, 0x68, 0x75, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x10,
	0x04, 0x12, 0x2d, 0x0a, 0x29, 0x44, 0x45, 0x52, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x41, 0x74, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x10, 0x05,
	0x12, 0x2a, 0x0a, 0x26, 0x44, 0x45, 0x52, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x52, 0x61, 0x6d, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x06, 0x12, 0x33, 0x0a, 0x2f,
	0x44, 0x45, 0x52, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x52, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e,
	0x5f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x10,
	0x07, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x45, 0x52, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x62, 0x79, 0x10, 0x08, 0x12, 0x30, 0x0a, 0x2c, 0x44, 0x45, 0x52, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x4e, 0x6f,
	0x74, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x62, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x45, 0x52, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x63, 0x2a, 0xa2, 0x01, 0x0a, 0x0f, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x19, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x55,
	0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x6e, 0x6f,
	0x6e, 0x65, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54,
	0x65, 0x73, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x10,
	0x02, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74,
	0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x03,
	0x12, 0x1a, 0x0a, 0x16, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x4b,
	0x69, 0x6e, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x04, 0x2a, 0x7c, 0x0a, 0x0a,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x14, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4b, 0x69,
	0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x4f, 0x4b, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x57, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4b, 0x69,
	0x6e, 0x64, 0x5f, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x10, 0x04, 0x2a, 0xd3, 0x01, 0x0a, 0x17, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4b, 0x69, 0x6e,
	0x64, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a,
	0x1c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x6e, 0x65, 0x10, 0x01, 0x12,
	0x20, 0x0a, 0x1c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x10,
	0x02, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x5f,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x10, 0x04,
	0x2a, 0x7e, 0x0a, 0x09, 0x44, 0x62, 0x50, 0x6f, 0x73, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x17, 0x0a,
	0x13, 0x44, 0x62, 0x50, 0x6f, 0x73, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x62, 0x50, 0x6f, 0x73, 0x4b,
	0x69, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x44, 0x62, 0x50, 0x6f, 0x73, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x64, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x62, 0x50, 0x6f, 0x73, 0x4b, 0x69,
	0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x62, 0x50,
	0x6f, 0x73, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x04,
	0x2a, 0x8e, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x65, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x55, 0x4e, 0x44, 0x45,
	0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x65, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x6c,
	0x65, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x69, 0x6e, 0x67,
	0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x10,
	0x03, 0x2a, 0x52, 0x0a, 0x0c, 0x4e, 0x6f, 0x72, 0x4f, 0x70, 0x43, 0x61, 0x74, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x6f, 0x72, 0x4f, 0x70, 0x43, 0x61, 0x74, 0x4b, 0x69, 0x6e,
	0x64, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x4e, 0x6f, 0x72, 0x4f, 0x70, 0x43, 0x61, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x41, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x6f, 0x72, 0x4f, 0x70, 0x43, 0x61, 0x74, 0x4b, 0x69, 0x6e,
	0x64, 0x5f, 0x42, 0x10, 0x02, 0x2a, 0x69, 0x0a, 0x0c, 0x41, 0x62, 0x6e, 0x4f, 0x70, 0x43, 0x61,
	0x74, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x62, 0x6e, 0x4f, 0x70, 0x43, 0x61,
	0x74, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x62, 0x6e, 0x4f, 0x70, 0x43, 0x61, 0x74, 0x4b, 0x69, 0x6e,
	0x64, 0x5f, 0x49, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x62, 0x6e, 0x4f, 0x70, 0x43, 0x61,
	0x74, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x49, 0x49, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x62,
	0x6e, 0x4f, 0x70, 0x43, 0x61, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x49, 0x49, 0x49, 0x10, 0x03,
	0x2a, 0xcf, 0x04, 0x0a, 0x08, 0x41, 0x6c, 0x72, 0x6d, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x19, 0x0a,
	0x15, 0x41, 0x6c, 0x72, 0x6d, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x6c, 0x72, 0x6d,
	0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x63, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x6c, 0x72, 0x6d, 0x4b, 0x69,
	0x6e, 0x64, 0x5f, 0x61, 0x63, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x6c, 0x72, 0x6d, 0x4b,
	0x69, 0x6e, 0x64, 0x5f, 0x64, 0x63, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x6c, 0x72, 0x6d,
	0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x67, 0x72, 0x69, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x6c, 0x72, 0x6d, 0x4b, 0x69,
	0x6e, 0x64, 0x5f, 0x63, 0x61, 0x62, 0x69, 0x6e, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x10,
	0x05, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x6c, 0x72, 0x6d, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x6d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x10, 0x06, 0x12,
	0x1d, 0x0a, 0x19, 0x41, 0x6c, 0x72, 0x6d, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x6f, 0x76, 0x65, 0x72,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x10, 0x07, 0x12, 0x22,
	0x0a, 0x1e, 0x41, 0x6c, 0x72, 0x6d, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x61, 0x62, 0x6f, 0x76, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x10, 0x08, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x6c, 0x72, 0x6d, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x10, 0x09, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x6c, 0x72, 0x6d, 0x4b, 0x69,
	0x6e, 0x64, 0x5f, 0x61, 0x63, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x62,
	0x6f, 0x76, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0x0a, 0x12, 0x23, 0x0a, 0x1f, 0x41,
	0x6c, 0x72, 0x6d, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x63, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0x0b,
	0x12, 0x27, 0x0a, 0x23, 0x41, 0x6c, 0x72, 0x6d, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x62, 0x6c, 0x6f,
	0x77, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x75, 0x73, 0x65, 0x5f, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x10, 0x0c, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x6c, 0x72,
	0x6d, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x10, 0x0d, 0x12, 0x32, 0x0a, 0x2e, 0x41, 0x6c, 0x72,
	0x6d, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x0e, 0x12, 0x22, 0x0a,
	0x1e, 0x41, 0x6c, 0x72, 0x6d, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10,
	0x0f, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x6c, 0x72, 0x6d, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x6d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d,
	0x10, 0x10, 0x2a, 0xa0, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f,
	0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x10, 0x01, 0x12,
	0x1a, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69,
	0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x10, 0x04, 0x2a, 0xbe, 0x03, 0x0a, 0x11, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x1b, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64,
	0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e,
	0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e,
	0x64, 0x5f, 0x62, 0x69, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x10,
	0x04, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x6c, 0x65, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x06, 0x12, 0x2c, 0x0a, 0x28, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x72,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x69, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x10, 0x07, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x62, 0x69, 0x61,
	0x73, 0x5f, 0x62, 0x69, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x10,
	0x08, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x09, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0a, 0x2a, 0x6a, 0x0a, 0x17, 0x47, 0x72, 0x69, 0x64, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x28, 0x0a, 0x24, 0x47, 0x72, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x47,
	0x72, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x10, 0x01, 0x2a, 0xfd, 0x04, 0x0a, 0x12, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f,
	0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e,
	0x64, 0x5f, 0x6f, 0x66, 0x66, 0x10, 0x01, 0x12, 0x2f, 0x0a, 0x2b, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x10, 0x02, 0x12, 0x31, 0x0a, 0x2d, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x03, 0x12, 0x32, 0x0a, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e,
	0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x6e, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x10, 0x04, 0x12,
	0x31, 0x0a, 0x2d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x6e, 0x64, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x69, 0x6e, 0x67,
	0x10, 0x05, 0x12, 0x29, 0x0a, 0x25, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x10, 0x06, 0x12, 0x2f, 0x0a,
	0x2b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b,
	0x69, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x07, 0x12, 0x2e,
	0x0a, 0x2a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x10, 0x08, 0x12, 0x1f,
	0x0a, 0x1b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x10, 0x09, 0x12,
	0x2f, 0x0a, 0x2b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x0a,
	0x12, 0x36, 0x0a, 0x32, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x0b, 0x12, 0x29, 0x0a, 0x25, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x63,
	0x65, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x69, 0x7a,
	0x65, 0x10, 0x0c, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x10, 0x0d, 0x2a, 0x89, 0x02, 0x0a, 0x18, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x26, 0x0a, 0x22, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x55, 0x4e, 0x44, 0x45,
	0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4b,
	0x69, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x10, 0x01, 0x12, 0x22,
	0x0a, 0x1e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x72, 0x6f, 0x6f, 0x70,
	0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x76,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x10, 0x04, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x10, 0x05, 0x2a, 0xc7,
	0x01, 0x0a, 0x14, 0x52, 0x65, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x65, 0x61, 0x6c, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x5f,
	0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x52,
	0x65, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4b,
	0x69, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x10, 0x01, 0x12, 0x1e,
	0x0a, 0x1a, 0x52, 0x65, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x72, 0x6f, 0x6f, 0x70, 0x10, 0x02, 0x12, 0x24,
	0x0a, 0x20, 0x52, 0x65, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x69, 0x73, 0x6f, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f,
	0x75, 0x73, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x65, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x61,
	0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x04, 0x2a, 0x60, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69,
	0x6e, 0x64, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x10,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x6f,
	0x6e, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x10, 0x03, 0x2a, 0xc6, 0x02, 0x0a, 0x11, 0x56,
	0x6f, 0x6c, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x1f, 0x0a, 0x1b, 0x56, 0x6f, 0x6c, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x19, 0x0a, 0x15, 0x56, 0x6f, 0x6c, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21,
	0x56, 0x6f, 0x6c, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e,
	0x64, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x56, 0x6f, 0x6c, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x56, 0x6f, 0x6c,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x68,
	0x69, 0x67, 0x68, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x10, 0x04,
	0x12, 0x2a, 0x0a, 0x26, 0x56, 0x6f, 0x6c, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x69, 0x76, 0x76, 0x63, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x10, 0x05, 0x12, 0x29, 0x0a, 0x25,
	0x56, 0x6f, 0x6c, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e,
	0x64, 0x5f, 0x69, 0x76, 0x76, 0x63, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x10, 0x06, 0x12, 0x2a, 0x0a, 0x26, 0x56, 0x6f, 0x6c, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x69, 0x76, 0x76,
	0x63, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x10, 0x07, 0x42, 0x84, 0x01, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x01, 0x5a, 0x53,
	0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66,
	0x6d, 0x62, 0x2f, 0x70, 0x73, 0x6d, 0x2f, 0x6f, 0x70, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2d, 0x6f,
	0x70, 0x73, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x32, 0x2f, 0x6f,
	0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0xaa, 0x02, 0x14, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_commonmodule_commonmodule_proto_rawDescOnce sync.Once
	file_commonmodule_commonmodule_proto_rawDescData = file_commonmodule_commonmodule_proto_rawDesc
)

func file_commonmodule_commonmodule_proto_rawDescGZIP() []byte {
	file_commonmodule_commonmodule_proto_rawDescOnce.Do(func() {
		file_commonmodule_commonmodule_proto_rawDescData = protoimpl.X.CompressGZIP(file_commonmodule_commonmodule_proto_rawDescData)
	})
	return file_commonmodule_commonmodule_proto_rawDescData
}

var file_commonmodule_commonmodule_proto_enumTypes = make([]protoimpl.EnumInfo, 30)
var file_commonmodule_commonmodule_proto_msgTypes = make([]protoimpl.MessageInfo, 156)
var file_commonmodule_commonmodule_proto_goTypes = []interface{}{
	(FaultDirectionKind)(0),                    // 0: commonmodule.FaultDirectionKind
	(PhaseFaultDirectionKind)(0),               // 1: commonmodule.PhaseFaultDirectionKind
	(UnitSymbolKind)(0),                        // 2: commonmodule.UnitSymbolKind
	(UnitMultiplierKind)(0),                    // 3: commonmodule.UnitMultiplierKind
	(PhaseCodeKind)(0),                         // 4: commonmodule.PhaseCodeKind
	(ValidityKind)(0),                          // 5: commonmodule.ValidityKind
	(SourceKind)(0),                            // 6: commonmodule.SourceKind
	(TimeAccuracyKind)(0),                      // 7: commonmodule.TimeAccuracyKind
	(ScheduleParameterKind)(0),                 // 8: commonmodule.ScheduleParameterKind
	(CalcMethodKind)(0),                        // 9: commonmodule.CalcMethodKind
	(GridConnectModeKind)(0),                   // 10: commonmodule.GridConnectModeKind
	(PFSignKind)(0),                            // 11: commonmodule.PFSignKind
	(BehaviourModeKind)(0),                     // 12: commonmodule.BehaviourModeKind
	(DERGeneratorStateKind)(0),                 // 13: commonmodule.DERGeneratorStateKind
	(DynamicTestKind)(0),                       // 14: commonmodule.DynamicTestKind
	(HealthKind)(0),                            // 15: commonmodule.HealthKind
	(SwitchingCapabilityKind)(0),               // 16: commonmodule.SwitchingCapabilityKind
	(DbPosKind)(0),                             // 17: commonmodule.DbPosKind
	(RecloseActionKind)(0),                     // 18: commonmodule.RecloseActionKind
	(NorOpCatKind)(0),                          // 19: commonmodule.NorOpCatKind
	(AbnOpCatKind)(0),                          // 20: commonmodule.AbnOpCatKind
	(AlrmKind)(0),                              // 21: commonmodule.AlrmKind
	(ControlModeKind)(0),                       // 22: commonmodule.ControlModeKind
	(DirectionModeKind)(0),                     // 23: commonmodule.DirectionModeKind
	(GridConnectionStateKind)(0),               // 24: commonmodule.GridConnectionStateKind
	(OperatingStateKind)(0),                    // 25: commonmodule.OperatingStateKind
	(ReactivePowerControlKind)(0),              // 26: commonmodule.ReactivePowerControlKind
	(RealPowerControlKind)(0),                  // 27: commonmodule.RealPowerControlKind
	(StateKind)(0),                             // 28: commonmodule.StateKind
	(VoltLimitModeKind)(0),                     // 29: commonmodule.VoltLimitModeKind
	(*Optional_FaultDirectionKind)(nil),        // 30: commonmodule.Optional_FaultDirectionKind
	(*Optional_PhaseFaultDirectionKind)(nil),   // 31: commonmodule.Optional_PhaseFaultDirectionKind
	(*ACD)(nil),                                // 32: commonmodule.ACD
	(*IdentifiedObject)(nil),                   // 33: commonmodule.IdentifiedObject
	(*ACDCTerminal)(nil),                       // 34: commonmodule.ACDCTerminal
	(*Optional_UnitSymbolKind)(nil),            // 35: commonmodule.Optional_UnitSymbolKind
	(*Optional_UnitMultiplierKind)(nil),        // 36: commonmodule.Optional_UnitMultiplierKind
	(*ActivePower)(nil),                        // 37: commonmodule.ActivePower
	(*Optional_PhaseCodeKind)(nil),             // 38: commonmodule.Optional_PhaseCodeKind
	(*Unit)(nil),                               // 39: commonmodule.Unit
	(*Optional_ValidityKind)(nil),              // 40: commonmodule.Optional_ValidityKind
	(*DetailQual)(nil),                         // 41: commonmodule.DetailQual
	(*Optional_SourceKind)(nil),                // 42: commonmodule.Optional_SourceKind
	(*Quality)(nil),                            // 43: commonmodule.Quality
	(*Optional_TimeAccuracyKind)(nil),          // 44: commonmodule.Optional_TimeAccuracyKind
	(*TimeQuality)(nil),                        // 45: commonmodule.TimeQuality
	(*Timestamp)(nil),                          // 46: commonmodule.Timestamp
	(*MV)(nil),                                 // 47: commonmodule.MV
	(*LogicalNode)(nil),                        // 48: commonmodule.LogicalNode
	(*AnalogEventAndStatusGGIO)(nil),           // 49: commonmodule.AnalogEventAndStatusGGIO
	(*NamedObject)(nil),                        // 50: commonmodule.NamedObject
	(*ApplicationSystem)(nil),                  // 51: commonmodule.ApplicationSystem
	(*ASG)(nil),                                // 52: commonmodule.ASG
	(*BCR)(nil),                                // 53: commonmodule.BCR
	(*StatusSPS)(nil),                          // 54: commonmodule.StatusSPS
	(*BooleanEventAndStatusGGIO)(nil),          // 55: commonmodule.BooleanEventAndStatusGGIO
	(*MessageInfo)(nil),                        // 56: commonmodule.MessageInfo
	(*CapabilityMessageInfo)(nil),              // 57: commonmodule.CapabilityMessageInfo
	(*CheckConditions)(nil),                    // 58: commonmodule.CheckConditions
	(*ClearingTime)(nil),                       // 59: commonmodule.ClearingTime
	(*Vector)(nil),                             // 60: commonmodule.Vector
	(*CMV)(nil),                                // 61: commonmodule.CMV
	(*ConductingEquipment)(nil),                // 62: commonmodule.ConductingEquipment
	(*Terminal)(nil),                           // 63: commonmodule.Terminal
	(*ConductingEquipmentTerminalReading)(nil), // 64: commonmodule.ConductingEquipmentTerminalReading
	(*ControlAPC)(nil),                         // 65: commonmodule.ControlAPC
	(*ControlDPC)(nil),                         // 66: commonmodule.ControlDPC
	(*ControlTimestamp)(nil),                   // 67: commonmodule.ControlTimestamp
	(*Optional_ScheduleParameterKind)(nil),     // 68: commonmodule.Optional_ScheduleParameterKind
	(*ENG_ScheduleParameter)(nil),              // 69: commonmodule.ENG_ScheduleParameter
	(*SchedulePoint)(nil),                      // 70: commonmodule.SchedulePoint
	(*ScheduleCSG)(nil),                        // 71: commonmodule.ScheduleCSG
	(*ControlScheduleFSCH)(nil),                // 72: commonmodule.ControlScheduleFSCH
	(*LogicalNodeForControl)(nil),              // 73: commonmodule.LogicalNodeForControl
	(*ControlFSCC)(nil),                        // 74: commonmodule.ControlFSCC
	(*ControlINC)(nil),                         // 75: commonmodule.ControlINC
	(*ControlING)(nil),                         // 76: commonmodule.ControlING
	(*ControlISC)(nil),                         // 77: commonmodule.ControlISC
	(*ControlMessageInfo)(nil),                 // 78: commonmodule.ControlMessageInfo
	(*ControlSPC)(nil),                         // 79: commonmodule.ControlSPC
	(*ControlValue)(nil),                       // 80: commonmodule.ControlValue
	(*CumulativeTime)(nil),                     // 81: commonmodule.CumulativeTime
	(*DateTimeInterval)(nil),                   // 82: commonmodule.DateTimeInterval
	(*DEL)(nil),                                // 83: commonmodule.DEL
	(*PhaseDPC)(nil),                           // 84: commonmodule.PhaseDPC
	(*DiscreteControlXCBR)(nil),                // 85: commonmodule.DiscreteControlXCBR
	(*EnergyConsumer)(nil),                     // 86: commonmodule.EnergyConsumer
	(*Optional_CalcMethodKind)(nil),            // 87: commonmodule.Optional_CalcMethodKind
	(*ENG_CalcMethodKind)(nil),                 // 88: commonmodule.ENG_CalcMethodKind
	(*Optional_GridConnectModeKind)(nil),       // 89: commonmodule.Optional_GridConnectModeKind
	(*ENG_GridConnectModeKind)(nil),            // 90: commonmodule.ENG_GridConnectModeKind
	(*Optional_PFSignKind)(nil),                // 91: commonmodule.Optional_PFSignKind
	(*ENG_PFSignKind)(nil),                     // 92: commonmodule.ENG_PFSignKind
	(*Optional_BehaviourModeKind)(nil),         // 93: commonmodule.Optional_BehaviourModeKind
	(*ENS_BehaviourModeKind)(nil),              // 94: commonmodule.ENS_BehaviourModeKind
	(*Optional_DERGeneratorStateKind)(nil),     // 95: commonmodule.Optional_DERGeneratorStateKind
	(*ENS_DERGeneratorStateKind)(nil),          // 96: commonmodule.ENS_DERGeneratorStateKind
	(*Optional_DynamicTestKind)(nil),           // 97: commonmodule.Optional_DynamicTestKind
	(*ENS_DynamicTestKind)(nil),                // 98: commonmodule.ENS_DynamicTestKind
	(*ENS_GridConnectModeKind)(nil),            // 99: commonmodule.ENS_GridConnectModeKind
	(*Optional_HealthKind)(nil),                // 100: commonmodule.Optional_HealthKind
	(*ENS_HealthKind)(nil),                     // 101: commonmodule.ENS_HealthKind
	(*Optional_SwitchingCapabilityKind)(nil),   // 102: commonmodule.Optional_SwitchingCapabilityKind
	(*ENS_SwitchingCapabilityKind)(nil),        // 103: commonmodule.ENS_SwitchingCapabilityKind
	(*OperationDCTE)(nil),                      // 104: commonmodule.OperationDCTE
	(*EnterServiceAPC)(nil),                    // 105: commonmodule.EnterServiceAPC
	(*ESS)(nil),                                // 106: commonmodule.ESS
	(*EventMessageInfo)(nil),                   // 107: commonmodule.EventMessageInfo
	(*EventValue)(nil),                         // 108: commonmodule.EventValue
	(*ForecastValueSource)(nil),                // 109: commonmodule.ForecastValueSource
	(*ForecastIED)(nil),                        // 110: commonmodule.ForecastIED
	(*ForecastValue)(nil),                      // 111: commonmodule.ForecastValue
	(*OperationDHFW)(nil),                      // 112: commonmodule.OperationDHFW
	(*OperationDLFW)(nil),                      // 113: commonmodule.OperationDLFW
	(*HzWPoint)(nil),                           // 114: commonmodule.HzWPoint
	(*HzWAPC)(nil),                             // 115: commonmodule.HzWAPC
	(*StatusINS)(nil),                          // 116: commonmodule.StatusINS
	(*IntegerEventAndStatusGGIO)(nil),          // 117: commonmodule.IntegerEventAndStatusGGIO
	(*OperationDWMX)(nil),                      // 118: commonmodule.OperationDWMX
	(*OperationDWMN)(nil),                      // 119: commonmodule.OperationDWMN
	(*LimitWAPC)(nil),                          // 120: commonmodule.LimitWAPC
	(*LogicalNodeForEventAndStatus)(nil),       // 121: commonmodule.LogicalNodeForEventAndStatus
	(*MeasurementValue)(nil),                   // 122: commonmodule.MeasurementValue
	(*Meter)(nil),                              // 123: commonmodule.Meter
	(*NameplateValue)(nil),                     // 124: commonmodule.NameplateValue
	(*OperationDFPF)(nil),                      // 125: commonmodule.OperationDFPF
	(*OperationDVAR)(nil),                      // 126: commonmodule.OperationDVAR
	(*OperationDVVR)(nil),                      // 127: commonmodule.OperationDVVR
	(*OperationDVWC)(nil),                      // 128: commonmodule.OperationDVWC
	(*OperationDWGC)(nil),                      // 129: commonmodule.OperationDWGC
	(*OperationDWVR)(nil),                      // 130: commonmodule.OperationDWVR
	(*OptimizationMessageInfo)(nil),            // 131: commonmodule.OptimizationMessageInfo
	(*PFSPC)(nil),                              // 132: commonmodule.PFSPC
	(*PhaseAPC)(nil),                           // 133: commonmodule.PhaseAPC
	(*Optional_DbPosKind)(nil),                 // 134: commonmodule.Optional_DbPosKind
	(*StatusDPS)(nil),                          // 135: commonmodule.StatusDPS
	(*PhaseDPS)(nil),                           // 136: commonmodule.PhaseDPS
	(*PhaseINS)(nil),                           // 137: commonmodule.PhaseINS
	(*PhaseISC)(nil),                           // 138: commonmodule.PhaseISC
	(*ReadingMMTN)(nil),                        // 139: commonmodule.ReadingMMTN
	(*PhaseMMTN)(nil),                          // 140: commonmodule.PhaseMMTN
	(*Optional_RecloseActionKind)(nil),         // 141: commonmodule.Optional_RecloseActionKind
	(*PhaseRecloseAction)(nil),                 // 142: commonmodule.PhaseRecloseAction
	(*PhaseSPC)(nil),                           // 143: commonmodule.PhaseSPC
	(*PhaseSPS)(nil),                           // 144: commonmodule.PhaseSPS
	(*PMG)(nil),                                // 145: commonmodule.PMG
	(*RampRate)(nil),                           // 146: commonmodule.RampRate
	(*ReadingMessageInfo)(nil),                 // 147: commonmodule.ReadingMessageInfo
	(*ReadingMMTR)(nil),                        // 148: commonmodule.ReadingMMTR
	(*WYE)(nil),                                // 149: commonmodule.WYE
	(*ReadingMMXU)(nil),                        // 150: commonmodule.ReadingMMXU
	(*SourceCapabilityConfiguration)(nil),      // 151: commonmodule.SourceCapabilityConfiguration
	(*Optional_NorOpCatKind)(nil),              // 152: commonmodule.Optional_NorOpCatKind
	(*Optional_AbnOpCatKind)(nil),              // 153: commonmodule.Optional_AbnOpCatKind
	(*SourceCapabilityRatings)(nil),            // 154: commonmodule.SourceCapabilityRatings
	(*StatusAndEventXCBR)(nil),                 // 155: commonmodule.StatusAndEventXCBR
	(*StatusINC)(nil),                          // 156: commonmodule.StatusINC
	(*StatusISC)(nil),                          // 157: commonmodule.StatusISC
	(*StatusMessageInfo)(nil),                  // 158: commonmodule.StatusMessageInfo
	(*StatusValue)(nil),                        // 159: commonmodule.StatusValue
	(*VSS)(nil),                                // 160: commonmodule.VSS
	(*StringEventAndStatusGGIO)(nil),           // 161: commonmodule.StringEventAndStatusGGIO
	(*SwitchPoint)(nil),                        // 162: commonmodule.SwitchPoint
	(*SwitchCSG)(nil),                          // 163: commonmodule.SwitchCSG
	(*TmHzPoint)(nil),                          // 164: commonmodule.TmHzPoint
	(*TmHzCSG)(nil),                            // 165: commonmodule.TmHzCSG
	(*TmVoltPoint)(nil),                        // 166: commonmodule.TmVoltPoint
	(*TmVoltCSG)(nil),                          // 167: commonmodule.TmVoltCSG
	(*VarSPC)(nil),                             // 168: commonmodule.VarSPC
	(*VoltVarPoint)(nil),                       // 169: commonmodule.VoltVarPoint
	(*VoltVarCSG)(nil),                         // 170: commonmodule.VoltVarCSG
	(*VoltWPoint)(nil),                         // 171: commonmodule.VoltWPoint
	(*VoltWCSG)(nil),                           // 172: commonmodule.VoltWCSG
	(*VSC)(nil),                                // 173: commonmodule.VSC
	(*WSPC)(nil),                               // 174: commonmodule.WSPC
	(*WVarPoint)(nil),                          // 175: commonmodule.WVarPoint
	(*WVarCSG)(nil),                            // 176: commonmodule.WVarCSG
	(*Optional_AlrmKind)(nil),                  // 177: commonmodule.Optional_AlrmKind
	(*Optional_ControlModeKind)(nil),           // 178: commonmodule.Optional_ControlModeKind
	(*Optional_DirectionModeKind)(nil),         // 179: commonmodule.Optional_DirectionModeKind
	(*Optional_GridConnectionStateKind)(nil),   // 180: commonmodule.Optional_GridConnectionStateKind
	(*Optional_OperatingStateKind)(nil),        // 181: commonmodule.Optional_OperatingStateKind
	(*Optional_ReactivePowerControlKind)(nil),  // 182: commonmodule.Optional_ReactivePowerControlKind
	(*Optional_RealPowerControlKind)(nil),      // 183: commonmodule.Optional_RealPowerControlKind
	(*Optional_StateKind)(nil),                 // 184: commonmodule.Optional_StateKind
	(*Optional_VoltLimitModeKind)(nil),         // 185: commonmodule.Optional_VoltLimitModeKind
	(*wrapperspb.BoolValue)(nil),               // 186: google.protobuf.BoolValue
	(*wrapperspb.StringValue)(nil),             // 187: google.protobuf.StringValue
	(*wrapperspb.Int32Value)(nil),              // 188: google.protobuf.Int32Value
	(*wrapperspb.FloatValue)(nil),              // 189: google.protobuf.FloatValue
	(*wrapperspb.DoubleValue)(nil),             // 190: google.protobuf.DoubleValue
	(*wrapperspb.Int64Value)(nil),              // 191: google.protobuf.Int64Value
}
var file_commonmodule_commonmodule_proto_depIdxs = []int32{
	0,   // 0: commonmodule.Optional_FaultDirectionKind.value:type_name -> commonmodule.FaultDirectionKind
	1,   // 1: commonmodule.Optional_PhaseFaultDirectionKind.value:type_name -> commonmodule.PhaseFaultDirectionKind
	0,   // 2: commonmodule.ACD.dirGeneral:type_name -> commonmodule.FaultDirectionKind
	31,  // 3: commonmodule.ACD.dirNeut:type_name -> commonmodule.Optional_PhaseFaultDirectionKind
	31,  // 4: commonmodule.ACD.dirPhsA:type_name -> commonmodule.Optional_PhaseFaultDirectionKind
	31,  // 5: commonmodule.ACD.dirPhsB:type_name -> commonmodule.Optional_PhaseFaultDirectionKind
	31,  // 6: commonmodule.ACD.dirPhsC:type_name -> commonmodule.Optional_PhaseFaultDirectionKind
	186, // 7: commonmodule.ACD.neut:type_name -> google.protobuf.BoolValue
	186, // 8: commonmodule.ACD.phsA:type_name -> google.protobuf.BoolValue
	186, // 9: commonmodule.ACD.phsB:type_name -> google.protobuf.BoolValue
	186, // 10: commonmodule.ACD.phsC:type_name -> google.protobuf.BoolValue
	187, // 11: commonmodule.IdentifiedObject.description:type_name -> google.protobuf.StringValue
	187, // 12: commonmodule.IdentifiedObject.mRID:type_name -> google.protobuf.StringValue
	187, // 13: commonmodule.IdentifiedObject.name:type_name -> google.protobuf.StringValue
	33,  // 14: commonmodule.ACDCTerminal.identifiedObject:type_name -> commonmodule.IdentifiedObject
	186, // 15: commonmodule.ACDCTerminal.connected:type_name -> google.protobuf.BoolValue
	188, // 16: commonmodule.ACDCTerminal.sequenceNumber:type_name -> google.protobuf.Int32Value
	2,   // 17: commonmodule.Optional_UnitSymbolKind.value:type_name -> commonmodule.UnitSymbolKind
	3,   // 18: commonmodule.Optional_UnitMultiplierKind.value:type_name -> commonmodule.UnitMultiplierKind
	36,  // 19: commonmodule.ActivePower.multiplier:type_name -> commonmodule.Optional_UnitMultiplierKind
	35,  // 20: commonmodule.ActivePower.unit:type_name -> commonmodule.Optional_UnitSymbolKind
	189, // 21: commonmodule.ActivePower.value:type_name -> google.protobuf.FloatValue
	4,   // 22: commonmodule.Optional_PhaseCodeKind.value:type_name -> commonmodule.PhaseCodeKind
	36,  // 23: commonmodule.Unit.multiplier:type_name -> commonmodule.Optional_UnitMultiplierKind
	2,   // 24: commonmodule.Unit.SIUnit:type_name -> commonmodule.UnitSymbolKind
	5,   // 25: commonmodule.Optional_ValidityKind.value:type_name -> commonmodule.ValidityKind
	6,   // 26: commonmodule.Optional_SourceKind.value:type_name -> commonmodule.SourceKind
	41,  // 27: commonmodule.Quality.detailQual:type_name -> commonmodule.DetailQual
	6,   // 28: commonmodule.Quality.source:type_name -> commonmodule.SourceKind
	5,   // 29: commonmodule.Quality.validity:type_name -> commonmodule.ValidityKind
	7,   // 30: commonmodule.Optional_TimeAccuracyKind.value:type_name -> commonmodule.TimeAccuracyKind
	7,   // 31: commonmodule.TimeQuality.timeAccuracy:type_name -> commonmodule.TimeAccuracyKind
	45,  // 32: commonmodule.Timestamp.tq:type_name -> commonmodule.TimeQuality
	43,  // 33: commonmodule.MV.q:type_name -> commonmodule.Quality
	46,  // 34: commonmodule.MV.t:type_name -> commonmodule.Timestamp
	39,  // 35: commonmodule.MV.units:type_name -> commonmodule.Unit
	33,  // 36: commonmodule.LogicalNode.identifiedObject:type_name -> commonmodule.IdentifiedObject
	48,  // 37: commonmodule.AnalogEventAndStatusGGIO.logicalNode:type_name -> commonmodule.LogicalNode
	47,  // 38: commonmodule.AnalogEventAndStatusGGIO.AnIn:type_name -> commonmodule.MV
	38,  // 39: commonmodule.AnalogEventAndStatusGGIO.Phase:type_name -> commonmodule.Optional_PhaseCodeKind
	187, // 40: commonmodule.NamedObject.description:type_name -> google.protobuf.StringValue
	187, // 41: commonmodule.NamedObject.name:type_name -> google.protobuf.StringValue
	50,  // 42: commonmodule.ApplicationSystem.namedObject:type_name -> commonmodule.NamedObject
	43,  // 43: commonmodule.BCR.q:type_name -> commonmodule.Quality
	46,  // 44: commonmodule.BCR.t:type_name -> commonmodule.Timestamp
	43,  // 45: commonmodule.StatusSPS.q:type_name -> commonmodule.Quality
	46,  // 46: commonmodule.StatusSPS.t:type_name -> commonmodule.Timestamp
	48,  // 47: commonmodule.BooleanEventAndStatusGGIO.logicalNode:type_name -> commonmodule.LogicalNode
	54,  // 48: commonmodule.BooleanEventAndStatusGGIO.Ind:type_name -> commonmodule.StatusSPS
	38,  // 49: commonmodule.BooleanEventAndStatusGGIO.Phase:type_name -> commonmodule.Optional_PhaseCodeKind
	33,  // 50: commonmodule.MessageInfo.identifiedObject:type_name -> commonmodule.IdentifiedObject
	46,  // 51: commonmodule.MessageInfo.messageTimeStamp:type_name -> commonmodule.Timestamp
	56,  // 52: commonmodule.CapabilityMessageInfo.messageInfo:type_name -> commonmodule.MessageInfo
	186, // 53: commonmodule.CheckConditions.interlockCheck:type_name -> google.protobuf.BoolValue
	186, // 54: commonmodule.CheckConditions.synchroCheck:type_name -> google.protobuf.BoolValue
	190, // 55: commonmodule.Vector.ang:type_name -> google.protobuf.DoubleValue
	60,  // 56: commonmodule.CMV.cVal:type_name -> commonmodule.Vector
	43,  // 57: commonmodule.CMV.q:type_name -> commonmodule.Quality
	46,  // 58: commonmodule.CMV.t:type_name -> commonmodule.Timestamp
	50,  // 59: commonmodule.ConductingEquipment.namedObject:type_name -> commonmodule.NamedObject
	34,  // 60: commonmodule.Terminal.aCDCTerminal:type_name -> commonmodule.ACDCTerminal
	38,  // 61: commonmodule.Terminal.phases:type_name -> commonmodule.Optional_PhaseCodeKind
	63,  // 62: commonmodule.ConductingEquipmentTerminalReading.terminal:type_name -> commonmodule.Terminal
	8,   // 63: commonmodule.Optional_ScheduleParameterKind.value:type_name -> commonmodule.ScheduleParameterKind
	8,   // 64: commonmodule.ENG_ScheduleParameter.scheduleParameterType:type_name -> commonmodule.ScheduleParameterKind
	69,  // 65: commonmodule.SchedulePoint.scheduleParameter:type_name -> commonmodule.ENG_ScheduleParameter
	67,  // 66: commonmodule.SchedulePoint.startTime:type_name -> commonmodule.ControlTimestamp
	70,  // 67: commonmodule.ScheduleCSG.schPts:type_name -> commonmodule.SchedulePoint
	71,  // 68: commonmodule.ControlScheduleFSCH.ValACSG:type_name -> commonmodule.ScheduleCSG
	48,  // 69: commonmodule.LogicalNodeForControl.logicalNode:type_name -> commonmodule.LogicalNode
	73,  // 70: commonmodule.ControlFSCC.logicalNodeForControl:type_name -> commonmodule.LogicalNodeForControl
	72,  // 71: commonmodule.ControlFSCC.controlScheduleFSCH:type_name -> commonmodule.ControlScheduleFSCH
	72,  // 72: commonmodule.ControlFSCC.islandControlScheduleFSCH:type_name -> commonmodule.ControlScheduleFSCH
	39,  // 73: commonmodule.ControlING.units:type_name -> commonmodule.Unit
	56,  // 74: commonmodule.ControlMessageInfo.messageInfo:type_name -> commonmodule.MessageInfo
	33,  // 75: commonmodule.ControlValue.identifiedObject:type_name -> commonmodule.IdentifiedObject
	186, // 76: commonmodule.ControlValue.modBlk:type_name -> google.protobuf.BoolValue
	186, // 77: commonmodule.ControlValue.reset:type_name -> google.protobuf.BoolValue
	191, // 78: commonmodule.DateTimeInterval.end:type_name -> google.protobuf.Int64Value
	191, // 79: commonmodule.DateTimeInterval.start:type_name -> google.protobuf.Int64Value
	61,  // 80: commonmodule.DEL.phsAB:type_name -> commonmodule.CMV
	61,  // 81: commonmodule.DEL.phsBC:type_name -> commonmodule.CMV
	61,  // 82: commonmodule.DEL.phsCA:type_name -> commonmodule.CMV
	66,  // 83: commonmodule.PhaseDPC.phs3:type_name -> commonmodule.ControlDPC
	66,  // 84: commonmodule.PhaseDPC.phsA:type_name -> commonmodule.ControlDPC
	66,  // 85: commonmodule.PhaseDPC.phsB:type_name -> commonmodule.ControlDPC
	66,  // 86: commonmodule.PhaseDPC.phsC:type_name -> commonmodule.ControlDPC
	73,  // 87: commonmodule.DiscreteControlXCBR.logicalNodeForControl:type_name -> commonmodule.LogicalNodeForControl
	84,  // 88: commonmodule.DiscreteControlXCBR.Pos:type_name -> commonmodule.PhaseDPC
	75,  // 89: commonmodule.DiscreteControlXCBR.ProtectionMode:type_name -> commonmodule.ControlINC
	79,  // 90: commonmodule.DiscreteControlXCBR.RecloseEnabled:type_name -> commonmodule.ControlSPC
	79,  // 91: commonmodule.DiscreteControlXCBR.ResetProtectionPickup:type_name -> commonmodule.ControlSPC
	62,  // 92: commonmodule.EnergyConsumer.conductingEquipment:type_name -> commonmodule.ConductingEquipment
	187, // 93: commonmodule.EnergyConsumer.operatingLimit:type_name -> google.protobuf.StringValue
	9,   // 94: commonmodule.Optional_CalcMethodKind.value:type_name -> commonmodule.CalcMethodKind
	9,   // 95: commonmodule.ENG_CalcMethodKind.setVal:type_name -> commonmodule.CalcMethodKind
	10,  // 96: commonmodule.Optional_GridConnectModeKind.value:type_name -> commonmodule.GridConnectModeKind
	10,  // 97: commonmodule.ENG_GridConnectModeKind.setVal:type_name -> commonmodule.GridConnectModeKind
	187, // 98: commonmodule.ENG_GridConnectModeKind.setValExtension:type_name -> google.protobuf.StringValue
	11,  // 99: commonmodule.Optional_PFSignKind.value:type_name -> commonmodule.PFSignKind
	11,  // 100: commonmodule.ENG_PFSignKind.setVal:type_name -> commonmodule.PFSignKind
	12,  // 101: commonmodule.Optional_BehaviourModeKind.value:type_name -> commonmodule.BehaviourModeKind
	43,  // 102: commonmodule.ENS_BehaviourModeKind.q:type_name -> commonmodule.Quality
	12,  // 103: commonmodule.ENS_BehaviourModeKind.stVal:type_name -> commonmodule.BehaviourModeKind
	46,  // 104: commonmodule.ENS_BehaviourModeKind.t:type_name -> commonmodule.Timestamp
	13,  // 105: commonmodule.Optional_DERGeneratorStateKind.value:type_name -> commonmodule.DERGeneratorStateKind
	43,  // 106: commonmodule.ENS_DERGeneratorStateKind.q:type_name -> commonmodule.Quality
	13,  // 107: commonmodule.ENS_DERGeneratorStateKind.stVal:type_name -> commonmodule.DERGeneratorStateKind
	46,  // 108: commonmodule.ENS_DERGeneratorStateKind.t:type_name -> commonmodule.Timestamp
	14,  // 109: commonmodule.Optional_DynamicTestKind.value:type_name -> commonmodule.DynamicTestKind
	43,  // 110: commonmodule.ENS_DynamicTestKind.q:type_name -> commonmodule.Quality
	14,  // 111: commonmodule.ENS_DynamicTestKind.stVal:type_name -> commonmodule.DynamicTestKind
	46,  // 112: commonmodule.ENS_DynamicTestKind.t:type_name -> commonmodule.Timestamp
	10,  // 113: commonmodule.ENS_GridConnectModeKind.stVal:type_name -> commonmodule.GridConnectModeKind
	15,  // 114: commonmodule.Optional_HealthKind.value:type_name -> commonmodule.HealthKind
	187, // 115: commonmodule.ENS_HealthKind.d:type_name -> google.protobuf.StringValue
	15,  // 116: commonmodule.ENS_HealthKind.stVal:type_name -> commonmodule.HealthKind
	16,  // 117: commonmodule.Optional_SwitchingCapabilityKind.value:type_name -> commonmodule.SwitchingCapabilityKind
	186, // 118: commonmodule.ENS_SwitchingCapabilityKind.blkEna:type_name -> google.protobuf.BoolValue
	16,  // 119: commonmodule.ENS_SwitchingCapabilityKind.stVal:type_name -> commonmodule.SwitchingCapabilityKind
	76,  // 120: commonmodule.OperationDCTE.rndDlTmms:type_name -> commonmodule.ControlING
	76,  // 121: commonmodule.OperationDCTE.rtnDlTmms:type_name -> commonmodule.ControlING
	76,  // 122: commonmodule.OperationDCTE.rtnRmpTmms:type_name -> commonmodule.ControlING
	104, // 123: commonmodule.EnterServiceAPC.enterServiceParameter:type_name -> commonmodule.OperationDCTE
	62,  // 124: commonmodule.ESS.conductingEquipment:type_name -> commonmodule.ConductingEquipment
	56,  // 125: commonmodule.EventMessageInfo.messageInfo:type_name -> commonmodule.MessageInfo
	33,  // 126: commonmodule.EventValue.identifiedObject:type_name -> commonmodule.IdentifiedObject
	186, // 127: commonmodule.EventValue.modBlk:type_name -> google.protobuf.BoolValue
	33,  // 128: commonmodule.ForecastValueSource.identifiedObject:type_name -> commonmodule.IdentifiedObject
	109, // 129: commonmodule.ForecastIED.forecastValueSource:type_name -> commonmodule.ForecastValueSource
	33,  // 130: commonmodule.ForecastValue.identifiedObject:type_name -> commonmodule.IdentifiedObject
	59,  // 131: commonmodule.OperationDHFW.OplTmmsMax:type_name -> commonmodule.ClearingTime
	59,  // 132: commonmodule.OperationDLFW.OplTmmsMax:type_name -> commonmodule.ClearingTime
	114, // 133: commonmodule.HzWAPC.overHzWPt:type_name -> commonmodule.HzWPoint
	112, // 134: commonmodule.HzWAPC.overHzWParameter:type_name -> commonmodule.OperationDHFW
	114, // 135: commonmodule.HzWAPC.underHzWPt:type_name -> commonmodule.HzWPoint
	113, // 136: commonmodule.HzWAPC.underHzWParameter:type_name -> commonmodule.OperationDLFW
	43,  // 137: commonmodule.StatusINS.q:type_name -> commonmodule.Quality
	46,  // 138: commonmodule.StatusINS.t:type_name -> commonmodule.Timestamp
	48,  // 139: commonmodule.IntegerEventAndStatusGGIO.logicalNode:type_name -> commonmodule.LogicalNode
	116, // 140: commonmodule.IntegerEventAndStatusGGIO.IntIn:type_name -> commonmodule.StatusINS
	38,  // 141: commonmodule.IntegerEventAndStatusGGIO.Phase:type_name -> commonmodule.Optional_PhaseCodeKind
	118, // 142: commonmodule.LimitWAPC.maxLimParameter:type_name -> commonmodule.OperationDWMX
	119, // 143: commonmodule.LimitWAPC.minLimParameter:type_name -> commonmodule.OperationDWMN
	48,  // 144: commonmodule.LogicalNodeForEventAndStatus.logicalNode:type_name -> commonmodule.LogicalNode
	94,  // 145: commonmodule.LogicalNodeForEventAndStatus.Beh:type_name -> commonmodule.ENS_BehaviourModeKind
	101, // 146: commonmodule.LogicalNodeForEventAndStatus.EEHealth:type_name -> commonmodule.ENS_HealthKind
	54,  // 147: commonmodule.LogicalNodeForEventAndStatus.HotLineTag:type_name -> commonmodule.StatusSPS
	54,  // 148: commonmodule.LogicalNodeForEventAndStatus.RemoteBlk:type_name -> commonmodule.StatusSPS
	33,  // 149: commonmodule.MeasurementValue.identifiedObject:type_name -> commonmodule.IdentifiedObject
	62,  // 150: commonmodule.Meter.conductingEquipment:type_name -> commonmodule.ConductingEquipment
	33,  // 151: commonmodule.NameplateValue.identifiedObject:type_name -> commonmodule.IdentifiedObject
	187, // 152: commonmodule.NameplateValue.model:type_name -> google.protobuf.StringValue
	187, // 153: commonmodule.NameplateValue.sernum:type_name -> google.protobuf.StringValue
	187, // 154: commonmodule.NameplateValue.swRev:type_name -> google.protobuf.StringValue
	187, // 155: commonmodule.NameplateValue.vendor:type_name -> google.protobuf.StringValue
	59,  // 156: commonmodule.OperationDVVR.OplTmmsMax:type_name -> commonmodule.ClearingTime
	76,  // 157: commonmodule.OperationDVVR.VRefTmms:type_name -> commonmodule.ControlING
	59,  // 158: commonmodule.OperationDVWC.OplTmmsMax:type_name -> commonmodule.ClearingTime
	56,  // 159: commonmodule.OptimizationMessageInfo.messageInfo:type_name -> commonmodule.MessageInfo
	125, // 160: commonmodule.PFSPC.pFParameter:type_name -> commonmodule.OperationDFPF
	65,  // 161: commonmodule.PhaseAPC.phs3:type_name -> commonmodule.ControlAPC
	65,  // 162: commonmodule.PhaseAPC.phsA:type_name -> commonmodule.ControlAPC
	65,  // 163: commonmodule.PhaseAPC.phsB:type_name -> commonmodule.ControlAPC
	65,  // 164: commonmodule.PhaseAPC.phsC:type_name -> commonmodule.ControlAPC
	17,  // 165: commonmodule.Optional_DbPosKind.value:type_name -> commonmodule.DbPosKind
	43,  // 166: commonmodule.StatusDPS.q:type_name -> commonmodule.Quality
	17,  // 167: commonmodule.StatusDPS.stVal:type_name -> commonmodule.DbPosKind
	46,  // 168: commonmodule.StatusDPS.t:type_name -> commonmodule.Timestamp
	135, // 169: commonmodule.PhaseDPS.phs3:type_name -> commonmodule.StatusDPS
	135, // 170: commonmodule.PhaseDPS.phsA:type_name -> commonmodule.StatusDPS
	135, // 171: commonmodule.PhaseDPS.phsB:type_name -> commonmodule.StatusDPS
	135, // 172: commonmodule.PhaseDPS.phsC:type_name -> commonmodule.StatusDPS
	116, // 173: commonmodule.PhaseINS.phs3:type_name -> commonmodule.StatusINS
	116, // 174: commonmodule.PhaseINS.phsA:type_name -> commonmodule.StatusINS
	116, // 175: commonmodule.PhaseINS.phsB:type_name -> commonmodule.StatusINS
	116, // 176: commonmodule.PhaseINS.phsC:type_name -> commonmodule.StatusINS
	77,  // 177: commonmodule.PhaseISC.phs3:type_name -> commonmodule.ControlISC
	77,  // 178: commonmodule.PhaseISC.phsA:type_name -> commonmodule.ControlISC
	77,  // 179: commonmodule.PhaseISC.phsB:type_name -> commonmodule.ControlISC
	77,  // 180: commonmodule.PhaseISC.phsC:type_name -> commonmodule.ControlISC
	48,  // 181: commonmodule.ReadingMMTN.logicalNode:type_name -> commonmodule.LogicalNode
	53,  // 182: commonmodule.ReadingMMTN.DmdVAh:type_name -> commonmodule.BCR
	53,  // 183: commonmodule.ReadingMMTN.DmdVArh:type_name -> commonmodule.BCR
	53,  // 184: commonmodule.ReadingMMTN.DmdWh:type_name -> commonmodule.BCR
	53,  // 185: commonmodule.ReadingMMTN.SupVAh:type_name -> commonmodule.BCR
	53,  // 186: commonmodule.ReadingMMTN.SupVArh:type_name -> commonmodule.BCR
	53,  // 187: commonmodule.ReadingMMTN.SupWh:type_name -> commonmodule.BCR
	53,  // 188: commonmodule.ReadingMMTN.TotVAh:type_name -> commonmodule.BCR
	53,  // 189: commonmodule.ReadingMMTN.TotVArh:type_name -> commonmodule.BCR
	53,  // 190: commonmodule.ReadingMMTN.TotWh:type_name -> commonmodule.BCR
	139, // 191: commonmodule.PhaseMMTN.phsA:type_name -> commonmodule.ReadingMMTN
	139, // 192: commonmodule.PhaseMMTN.phsAB:type_name -> commonmodule.ReadingMMTN
	139, // 193: commonmodule.PhaseMMTN.phsB:type_name -> commonmodule.ReadingMMTN
	139, // 194: commonmodule.PhaseMMTN.phsBC:type_name -> commonmodule.ReadingMMTN
	139, // 195: commonmodule.PhaseMMTN.phsC:type_name -> commonmodule.ReadingMMTN
	139, // 196: commonmodule.PhaseMMTN.phsCA:type_name -> commonmodule.ReadingMMTN
	18,  // 197: commonmodule.Optional_RecloseActionKind.value:type_name -> commonmodule.RecloseActionKind
	141, // 198: commonmodule.PhaseRecloseAction.phs3:type_name -> commonmodule.Optional_RecloseActionKind
	141, // 199: commonmodule.PhaseRecloseAction.phsA:type_name -> commonmodule.Optional_RecloseActionKind
	141, // 200: commonmodule.PhaseRecloseAction.phsB:type_name -> commonmodule.Optional_RecloseActionKind
	141, // 201: commonmodule.PhaseRecloseAction.phsC:type_name -> commonmodule.Optional_RecloseActionKind
	79,  // 202: commonmodule.PhaseSPC.phs3:type_name -> commonmodule.ControlSPC
	79,  // 203: commonmodule.PhaseSPC.phsA:type_name -> commonmodule.ControlSPC
	79,  // 204: commonmodule.PhaseSPC.phsB:type_name -> commonmodule.ControlSPC
	79,  // 205: commonmodule.PhaseSPC.phsC:type_name -> commonmodule.ControlSPC
	54,  // 206: commonmodule.PhaseSPS.phs3:type_name -> commonmodule.StatusSPS
	54,  // 207: commonmodule.PhaseSPS.phsA:type_name -> commonmodule.StatusSPS
	54,  // 208: commonmodule.PhaseSPS.phsB:type_name -> commonmodule.StatusSPS
	54,  // 209: commonmodule.PhaseSPS.phsC:type_name -> commonmodule.StatusSPS
	47,  // 210: commonmodule.PMG.net:type_name -> commonmodule.MV
	47,  // 211: commonmodule.PMG.phsA:type_name -> commonmodule.MV
	47,  // 212: commonmodule.PMG.phsB:type_name -> commonmodule.MV
	47,  // 213: commonmodule.PMG.phsC:type_name -> commonmodule.MV
	189, // 214: commonmodule.RampRate.negativeReactivePowerKVArPerMin:type_name -> google.protobuf.FloatValue
	189, // 215: commonmodule.RampRate.negativeRealPowerKWPerMin:type_name -> google.protobuf.FloatValue
	189, // 216: commonmodule.RampRate.positiveReactivePowerKVArPerMin:type_name -> google.protobuf.FloatValue
	189, // 217: commonmodule.RampRate.positiveRealPowerKWPerMin:type_name -> google.protobuf.FloatValue
	56,  // 218: commonmodule.ReadingMessageInfo.messageInfo:type_name -> commonmodule.MessageInfo
	48,  // 219: commonmodule.ReadingMMTR.logicalNode:type_name -> commonmodule.LogicalNode
	53,  // 220: commonmodule.ReadingMMTR.DmdVAh:type_name -> commonmodule.BCR
	53,  // 221: commonmodule.ReadingMMTR.DmdVArh:type_name -> commonmodule.BCR
	53,  // 222: commonmodule.ReadingMMTR.DmdWh:type_name -> commonmodule.BCR
	53,  // 223: commonmodule.ReadingMMTR.SupVAh:type_name -> commonmodule.BCR
	53,  // 224: commonmodule.ReadingMMTR.SupVArh:type_name -> commonmodule.BCR
	53,  // 225: commonmodule.ReadingMMTR.SupWh:type_name -> commonmodule.BCR
	53,  // 226: commonmodule.ReadingMMTR.TotVAh:type_name -> commonmodule.BCR
	53,  // 227: commonmodule.ReadingMMTR.TotVArh:type_name -> commonmodule.BCR
	53,  // 228: commonmodule.ReadingMMTR.TotWh:type_name -> commonmodule.BCR
	61,  // 229: commonmodule.WYE.net:type_name -> commonmodule.CMV
	61,  // 230: commonmodule.WYE.neut:type_name -> commonmodule.CMV
	61,  // 231: commonmodule.WYE.phsA:type_name -> commonmodule.CMV
	61,  // 232: commonmodule.WYE.phsB:type_name -> commonmodule.CMV
	61,  // 233: commonmodule.WYE.phsC:type_name -> commonmodule.CMV
	61,  // 234: commonmodule.WYE.res:type_name -> commonmodule.CMV
	48,  // 235: commonmodule.ReadingMMXU.logicalNode:type_name -> commonmodule.LogicalNode
	149, // 236: commonmodule.ReadingMMXU.A:type_name -> commonmodule.WYE
	88,  // 237: commonmodule.ReadingMMXU.ClcMth:type_name -> commonmodule.ENG_CalcMethodKind
	47,  // 238: commonmodule.ReadingMMXU.Hz:type_name -> commonmodule.MV
	149, // 239: commonmodule.ReadingMMXU.PF:type_name -> commonmodule.WYE
	92,  // 240: commonmodule.ReadingMMXU.PFSign:type_name -> commonmodule.ENG_PFSignKind
	149, // 241: commonmodule.ReadingMMXU.PhV:type_name -> commonmodule.WYE
	83,  // 242: commonmodule.ReadingMMXU.PPV:type_name -> commonmodule.DEL
	149, // 243: commonmodule.ReadingMMXU.VA:type_name -> commonmodule.WYE
	149, // 244: commonmodule.ReadingMMXU.VAr:type_name -> commonmodule.WYE
	149, // 245: commonmodule.ReadingMMXU.W:type_name -> commonmodule.WYE
	48,  // 246: commonmodule.SourceCapabilityConfiguration.logicalNode:type_name -> commonmodule.LogicalNode
	52,  // 247: commonmodule.SourceCapabilityConfiguration.AMax:type_name -> commonmodule.ASG
	52,  // 248: commonmodule.SourceCapabilityConfiguration.VAMax:type_name -> commonmodule.ASG
	52,  // 249: commonmodule.SourceCapabilityConfiguration.VarMaxAbs:type_name -> commonmodule.ASG
	52,  // 250: commonmodule.SourceCapabilityConfiguration.VarMaxInj:type_name -> commonmodule.ASG
	52,  // 251: commonmodule.SourceCapabilityConfiguration.VMax:type_name -> commonmodule.ASG
	52,  // 252: commonmodule.SourceCapabilityConfiguration.VMin:type_name -> commonmodule.ASG
	52,  // 253: commonmodule.SourceCapabilityConfiguration.VNom:type_name -> commonmodule.ASG
	52,  // 254: commonmodule.SourceCapabilityConfiguration.WMax:type_name -> commonmodule.ASG
	52,  // 255: commonmodule.SourceCapabilityConfiguration.WOvrExt:type_name -> commonmodule.ASG
	52,  // 256: commonmodule.SourceCapabilityConfiguration.WOvrExtPF:type_name -> commonmodule.ASG
	52,  // 257: commonmodule.SourceCapabilityConfiguration.WUndExt:type_name -> commonmodule.ASG
	52,  // 258: commonmodule.SourceCapabilityConfiguration.WUndExtPF:type_name -> commonmodule.ASG
	19,  // 259: commonmodule.Optional_NorOpCatKind.value:type_name -> commonmodule.NorOpCatKind
	20,  // 260: commonmodule.Optional_AbnOpCatKind.value:type_name -> commonmodule.AbnOpCatKind
	48,  // 261: commonmodule.SourceCapabilityRatings.logicalNode:type_name -> commonmodule.LogicalNode
	20,  // 262: commonmodule.SourceCapabilityRatings.AbnOpCatRtg:type_name -> commonmodule.AbnOpCatKind
	52,  // 263: commonmodule.SourceCapabilityRatings.AMaxRtg:type_name -> commonmodule.ASG
	52,  // 264: commonmodule.SourceCapabilityRatings.FreqNomRtg:type_name -> commonmodule.ASG
	19,  // 265: commonmodule.SourceCapabilityRatings.NorOpCatRtg:type_name -> commonmodule.NorOpCatKind
	52,  // 266: commonmodule.SourceCapabilityRatings.ReactSusceptRtg:type_name -> commonmodule.ASG
	52,  // 267: commonmodule.SourceCapabilityRatings.VAMaxRtg:type_name -> commonmodule.ASG
	52,  // 268: commonmodule.SourceCapabilityRatings.VarMaxAbsRtg:type_name -> commonmodule.ASG
	52,  // 269: commonmodule.SourceCapabilityRatings.VarMaxInjRtg:type_name -> commonmodule.ASG
	52,  // 270: commonmodule.SourceCapabilityRatings.VMaxRtg:type_name -> commonmodule.ASG
	52,  // 271: commonmodule.SourceCapabilityRatings.VMinRtg:type_name -> commonmodule.ASG
	52,  // 272: commonmodule.SourceCapabilityRatings.VNomRtg:type_name -> commonmodule.ASG
	52,  // 273: commonmodule.SourceCapabilityRatings.WMaxRtg:type_name -> commonmodule.ASG
	52,  // 274: commonmodule.SourceCapabilityRatings.WOvrExtRtg:type_name -> commonmodule.ASG
	52,  // 275: commonmodule.SourceCapabilityRatings.WOvrExtRtgPF:type_name -> commonmodule.ASG
	52,  // 276: commonmodule.SourceCapabilityRatings.WUndExtRtg:type_name -> commonmodule.ASG
	52,  // 277: commonmodule.SourceCapabilityRatings.WUndExtRtgPF:type_name -> commonmodule.ASG
	121, // 278: commonmodule.StatusAndEventXCBR.logicalNodeForEventAndStatus:type_name -> commonmodule.LogicalNodeForEventAndStatus
	98,  // 279: commonmodule.StatusAndEventXCBR.DynamicTest:type_name -> commonmodule.ENS_DynamicTestKind
	136, // 280: commonmodule.StatusAndEventXCBR.Pos:type_name -> commonmodule.PhaseDPS
	32,  // 281: commonmodule.StatusAndEventXCBR.ProtectionPickup:type_name -> commonmodule.ACD
	116, // 282: commonmodule.StatusAndEventXCBR.ProtectionMode:type_name -> commonmodule.StatusINS
	144, // 283: commonmodule.StatusAndEventXCBR.RecloseEnabled:type_name -> commonmodule.PhaseSPS
	142, // 284: commonmodule.StatusAndEventXCBR.ReclosingAction:type_name -> commonmodule.PhaseRecloseAction
	43,  // 285: commonmodule.StatusINC.q:type_name -> commonmodule.Quality
	46,  // 286: commonmodule.StatusINC.t:type_name -> commonmodule.Timestamp
	43,  // 287: commonmodule.StatusISC.q:type_name -> commonmodule.Quality
	46,  // 288: commonmodule.StatusISC.t:type_name -> commonmodule.Timestamp
	56,  // 289: commonmodule.StatusMessageInfo.messageInfo:type_name -> commonmodule.MessageInfo
	33,  // 290: commonmodule.StatusValue.identifiedObject:type_name -> commonmodule.IdentifiedObject
	186, // 291: commonmodule.StatusValue.modBlk:type_name -> google.protobuf.BoolValue
	43,  // 292: commonmodule.VSS.q:type_name -> commonmodule.Quality
	46,  // 293: commonmodule.VSS.t:type_name -> commonmodule.Timestamp
	48,  // 294: commonmodule.StringEventAndStatusGGIO.logicalNode:type_name -> commonmodule.LogicalNode
	38,  // 295: commonmodule.StringEventAndStatusGGIO.Phase:type_name -> commonmodule.Optional_PhaseCodeKind
	160, // 296: commonmodule.StringEventAndStatusGGIO.StrIn:type_name -> commonmodule.VSS
	66,  // 297: commonmodule.SwitchPoint.Pos:type_name -> commonmodule.ControlDPC
	67,  // 298: commonmodule.SwitchPoint.startTime:type_name -> commonmodule.ControlTimestamp
	162, // 299: commonmodule.SwitchCSG.crvPts:type_name -> commonmodule.SwitchPoint
	59,  // 300: commonmodule.TmHzPoint.tmVal:type_name -> commonmodule.ClearingTime
	164, // 301: commonmodule.TmHzCSG.overCrvPts:type_name -> commonmodule.TmHzPoint
	164, // 302: commonmodule.TmHzCSG.underCrvPts:type_name -> commonmodule.TmHzPoint
	59,  // 303: commonmodule.TmVoltPoint.tmVal:type_name -> commonmodule.ClearingTime
	166, // 304: commonmodule.TmVoltCSG.overCrvPts:type_name -> commonmodule.TmVoltPoint
	166, // 305: commonmodule.TmVoltCSG.underCrvPts:type_name -> commonmodule.TmVoltPoint
	126, // 306: commonmodule.VarSPC.varParameter:type_name -> commonmodule.OperationDVAR
	169, // 307: commonmodule.VoltVarCSG.crvPts:type_name -> commonmodule.VoltVarPoint
	127, // 308: commonmodule.VoltVarCSG.vVarParameter:type_name -> commonmodule.OperationDVVR
	171, // 309: commonmodule.VoltWCSG.crvPts:type_name -> commonmodule.VoltWPoint
	128, // 310: commonmodule.VoltWCSG.voltWParameter:type_name -> commonmodule.OperationDVWC
	129, // 311: commonmodule.WSPC.wParameter:type_name -> commonmodule.OperationDWGC
	175, // 312: commonmodule.WVarCSG.crvPts:type_name -> commonmodule.WVarPoint
	130, // 313: commonmodule.WVarCSG.wVarParameter:type_name -> commonmodule.OperationDWVR
	21,  // 314: commonmodule.Optional_AlrmKind.value:type_name -> commonmodule.AlrmKind
	22,  // 315: commonmodule.Optional_ControlModeKind.value:type_name -> commonmodule.ControlModeKind
	23,  // 316: commonmodule.Optional_DirectionModeKind.value:type_name -> commonmodule.DirectionModeKind
	24,  // 317: commonmodule.Optional_GridConnectionStateKind.value:type_name -> commonmodule.GridConnectionStateKind
	25,  // 318: commonmodule.Optional_OperatingStateKind.value:type_name -> commonmodule.OperatingStateKind
	26,  // 319: commonmodule.Optional_ReactivePowerControlKind.value:type_name -> commonmodule.ReactivePowerControlKind
	27,  // 320: commonmodule.Optional_RealPowerControlKind.value:type_name -> commonmodule.RealPowerControlKind
	28,  // 321: commonmodule.Optional_StateKind.value:type_name -> commonmodule.StateKind
	29,  // 322: commonmodule.Optional_VoltLimitModeKind.value:type_name -> commonmodule.VoltLimitModeKind
	323, // [323:323] is the sub-list for method output_type
	323, // [323:323] is the sub-list for method input_type
	323, // [323:323] is the sub-list for extension type_name
	323, // [323:323] is the sub-list for extension extendee
	0,   // [0:323] is the sub-list for field type_name
}

func init() { file_commonmodule_commonmodule_proto_init() }
func file_commonmodule_commonmodule_proto_init() {
	if File_commonmodule_commonmodule_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_commonmodule_commonmodule_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Optional_FaultDirectionKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Optional_PhaseFaultDirectionKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentifiedObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACDCTerminal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Optional_UnitSymbolKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Optional_UnitMultiplierKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivePower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Optional_PhaseCodeKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Unit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Optional_ValidityKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailQual); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Optional_SourceKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Optional_TimeAccuracyKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeQuality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicalNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalogEventAndStatusGGIO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamedObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationSystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ASG); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BCR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusSPS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BooleanEventAndStatusGGIO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapabilityMessageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckConditions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearingTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConductingEquipment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Terminal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConductingEquipmentTerminalReading); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlAPC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlDPC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlTimestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Optional_ScheduleParameterKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ENG_ScheduleParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedulePoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleCSG); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlScheduleFSCH); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicalNodeForControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlFSCC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlINC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlING); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlISC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlMessageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlSPC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CumulativeTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateTimeInterval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DEL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhaseDPC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscreteControlXCBR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnergyConsumer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Optional_CalcMethodKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ENG_CalcMethodKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Optional_GridConnectModeKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ENG_GridConnectModeKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Optional_PFSignKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ENG_PFSignKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Optional_BehaviourModeKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ENS_BehaviourModeKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Optional_DERGeneratorStateKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ENS_DERGeneratorStateKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Optional_DynamicTestKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ENS_DynamicTestKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ENS_GridConnectModeKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Optional_HealthKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ENS_HealthKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Optional_SwitchingCapabilityKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ENS_SwitchingCapabilityKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationDCTE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterServiceAPC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ESS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventMessageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForecastValueSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForecastIED); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForecastValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationDHFW); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationDLFW); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HzWPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HzWAPC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusINS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegerEventAndStatusGGIO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationDWMX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationDWMN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitWAPC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicalNodeForEventAndStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasurementValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NameplateValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationDFPF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationDVAR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationDVVR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationDVWC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationDWGC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationDWVR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptimizationMessageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PFSPC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhaseAPC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Optional_DbPosKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusDPS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhaseDPS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhaseINS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhaseISC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadingMMTN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhaseMMTN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Optional_RecloseActionKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhaseRecloseAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhaseSPC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhaseSPS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PMG); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RampRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadingMessageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadingMMTR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WYE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadingMMXU); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceCapabilityConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Optional_NorOpCatKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Optional_AbnOpCatKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceCapabilityRatings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusAndEventXCBR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusINC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusISC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusMessageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VSS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringEventAndStatusGGIO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchCSG); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TmHzPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TmHzCSG); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TmVoltPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TmVoltCSG); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VarSPC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoltVarPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoltVarCSG); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoltWPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoltWCSG); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VSC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WSPC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WVarPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WVarCSG); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Optional_AlrmKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Optional_ControlModeKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Optional_DirectionModeKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Optional_GridConnectionStateKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Optional_OperatingStateKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Optional_ReactivePowerControlKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Optional_RealPowerControlKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Optional_StateKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonmodule_commonmodule_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Optional_VoltLimitModeKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_commonmodule_commonmodule_proto_rawDesc,
			NumEnums:      30,
			NumMessages:   156,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_commonmodule_commonmodule_proto_goTypes,
		DependencyIndexes: file_commonmodule_commonmodule_proto_depIdxs,
		EnumInfos:         file_commonmodule_commonmodule_proto_enumTypes,
		MessageInfos:      file_commonmodule_commonmodule_proto_msgTypes,
	}.Build()
	File_commonmodule_commonmodule_proto = out.File
	file_commonmodule_commonmodule_proto_rawDesc = nil
	file_commonmodule_commonmodule_proto_goTypes = nil
	file_commonmodule_commonmodule_proto_depIdxs = nil
}
