// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v6.31.1
// source: circuitsegmentservicemodule/circuitsegmentservicemodule.proto

// OpenFMB Operational Model (61850-CIM) (v2.2.0).eapx
// Thursday, July 24, 2025 8:59:58 PM UTC

// This module is an early alpha release and subject to change. It is NOT part of the gateway test
// procedure for OpenFMB certification.

package circuitsegmentservicemodule

import (
	_ "gitlab.com/openfmb/psm/ops/protobuf/go-openfmb-ops-protobuf/v2/openfmb"
	commonmodule "gitlab.com/openfmb/psm/ops/protobuf/go-openfmb-ops-protobuf/v2/openfmb/commonmodule"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// State kind
type CircuitSegmentServiceModeKind int32

const (
	// Undefined
	CircuitSegmentServiceModeKind_CircuitSegmentServiceModeKind_UNDEFINED CircuitSegmentServiceModeKind = 0
	// MISSING DOCUMENTATION!!!
	CircuitSegmentServiceModeKind_CircuitSegmentServiceModeKind_none CircuitSegmentServiceModeKind = 1
	// MISSING DOCUMENTATION!!!
	CircuitSegmentServiceModeKind_CircuitSegmentServiceModeKind_auto CircuitSegmentServiceModeKind = 2
	// MISSING DOCUMENTATION!!!
	CircuitSegmentServiceModeKind_CircuitSegmentServiceModeKind_manual CircuitSegmentServiceModeKind = 3
	// MISSING DOCUMENTATION!!!
	CircuitSegmentServiceModeKind_CircuitSegmentServiceModeKind_netzero CircuitSegmentServiceModeKind = 4
	// MISSING DOCUMENTATION!!!
	CircuitSegmentServiceModeKind_CircuitSegmentServiceModeKind_start CircuitSegmentServiceModeKind = 5
	// MISSING DOCUMENTATION!!!
	CircuitSegmentServiceModeKind_CircuitSegmentServiceModeKind_stop CircuitSegmentServiceModeKind = 6
)

// Enum value maps for CircuitSegmentServiceModeKind.
var (
	CircuitSegmentServiceModeKind_name = map[int32]string{
		0: "CircuitSegmentServiceModeKind_UNDEFINED",
		1: "CircuitSegmentServiceModeKind_none",
		2: "CircuitSegmentServiceModeKind_auto",
		3: "CircuitSegmentServiceModeKind_manual",
		4: "CircuitSegmentServiceModeKind_netzero",
		5: "CircuitSegmentServiceModeKind_start",
		6: "CircuitSegmentServiceModeKind_stop",
	}
	CircuitSegmentServiceModeKind_value = map[string]int32{
		"CircuitSegmentServiceModeKind_UNDEFINED": 0,
		"CircuitSegmentServiceModeKind_none":      1,
		"CircuitSegmentServiceModeKind_auto":      2,
		"CircuitSegmentServiceModeKind_manual":    3,
		"CircuitSegmentServiceModeKind_netzero":   4,
		"CircuitSegmentServiceModeKind_start":     5,
		"CircuitSegmentServiceModeKind_stop":      6,
	}
)

func (x CircuitSegmentServiceModeKind) Enum() *CircuitSegmentServiceModeKind {
	p := new(CircuitSegmentServiceModeKind)
	*p = x
	return p
}

func (x CircuitSegmentServiceModeKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CircuitSegmentServiceModeKind) Descriptor() protoreflect.EnumDescriptor {
	return file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_enumTypes[0].Descriptor()
}

func (CircuitSegmentServiceModeKind) Type() protoreflect.EnumType {
	return &file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_enumTypes[0]
}

func (x CircuitSegmentServiceModeKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CircuitSegmentServiceModeKind.Descriptor instead.
func (CircuitSegmentServiceModeKind) EnumDescriptor() ([]byte, []int) {
	return file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_rawDescGZIP(), []int{0}
}

type Optional_CircuitSegmentServiceModeKind struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Value         CircuitSegmentServiceModeKind `protobuf:"varint,1,opt,name=value,proto3,enum=circuitsegmentservicemodule.CircuitSegmentServiceModeKind" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Optional_CircuitSegmentServiceModeKind) Reset() {
	*x = Optional_CircuitSegmentServiceModeKind{}
	mi := &file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Optional_CircuitSegmentServiceModeKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optional_CircuitSegmentServiceModeKind) ProtoMessage() {}

func (x *Optional_CircuitSegmentServiceModeKind) ProtoReflect() protoreflect.Message {
	mi := &file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optional_CircuitSegmentServiceModeKind.ProtoReflect.Descriptor instead.
func (*Optional_CircuitSegmentServiceModeKind) Descriptor() ([]byte, []int) {
	return file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_rawDescGZIP(), []int{0}
}

func (x *Optional_CircuitSegmentServiceModeKind) GetValue() CircuitSegmentServiceModeKind {
	if x != nil {
		return x.Value
	}
	return CircuitSegmentServiceModeKind_CircuitSegmentServiceModeKind_UNDEFINED
}

// Circuit Segment service mode kind
type ENG_CircuitSegmentServiceModeKind struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The value of the coordination service mode.
	SetVal CircuitSegmentServiceModeKind `protobuf:"varint,1,opt,name=setVal,proto3,enum=circuitsegmentservicemodule.CircuitSegmentServiceModeKind" json:"setVal,omitempty"`
	// MISSING DOCUMENTATION!!!
	SetValExtension *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=setValExtension,proto3" json:"setValExtension,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ENG_CircuitSegmentServiceModeKind) Reset() {
	*x = ENG_CircuitSegmentServiceModeKind{}
	mi := &file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ENG_CircuitSegmentServiceModeKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ENG_CircuitSegmentServiceModeKind) ProtoMessage() {}

func (x *ENG_CircuitSegmentServiceModeKind) ProtoReflect() protoreflect.Message {
	mi := &file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ENG_CircuitSegmentServiceModeKind.ProtoReflect.Descriptor instead.
func (*ENG_CircuitSegmentServiceModeKind) Descriptor() ([]byte, []int) {
	return file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_rawDescGZIP(), []int{1}
}

func (x *ENG_CircuitSegmentServiceModeKind) GetSetVal() CircuitSegmentServiceModeKind {
	if x != nil {
		return x.SetVal
	}
	return CircuitSegmentServiceModeKind_CircuitSegmentServiceModeKind_UNDEFINED
}

func (x *ENG_CircuitSegmentServiceModeKind) GetSetValExtension() *wrapperspb.StringValue {
	if x != nil {
		return x.SetValExtension
	}
	return nil
}

// OpenFMB specialization for circuit segment service control, DCSC (Distributed Coordination
// Service Control), following 61850 naming convention.
type CircuitSegmentControlDCSC struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	LogicalNodeForControl *commonmodule.LogicalNodeForControl `protobuf:"bytes,1,opt,name=logicalNodeForControl,proto3" json:"logicalNodeForControl,omitempty"`
	// MISSING DOCUMENTATION!!!
	CircuitSegmentServiceMode *ENG_CircuitSegmentServiceModeKind `protobuf:"bytes,2,opt,name=CircuitSegmentServiceMode,proto3" json:"CircuitSegmentServiceMode,omitempty"`
	// MISSING DOCUMENTATION!!!
	Island        *commonmodule.ControlDPC `protobuf:"bytes,3,opt,name=Island,proto3" json:"Island,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CircuitSegmentControlDCSC) Reset() {
	*x = CircuitSegmentControlDCSC{}
	mi := &file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CircuitSegmentControlDCSC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitSegmentControlDCSC) ProtoMessage() {}

func (x *CircuitSegmentControlDCSC) ProtoReflect() protoreflect.Message {
	mi := &file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitSegmentControlDCSC.ProtoReflect.Descriptor instead.
func (*CircuitSegmentControlDCSC) Descriptor() ([]byte, []int) {
	return file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_rawDescGZIP(), []int{2}
}

func (x *CircuitSegmentControlDCSC) GetLogicalNodeForControl() *commonmodule.LogicalNodeForControl {
	if x != nil {
		return x.LogicalNodeForControl
	}
	return nil
}

func (x *CircuitSegmentControlDCSC) GetCircuitSegmentServiceMode() *ENG_CircuitSegmentServiceModeKind {
	if x != nil {
		return x.CircuitSegmentServiceMode
	}
	return nil
}

func (x *CircuitSegmentControlDCSC) GetIsland() *commonmodule.ControlDPC {
	if x != nil {
		return x.Island
	}
	return nil
}

// Switch discrete control
type CircuitSegmentControl struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	IdentifiedObject *commonmodule.IdentifiedObject `protobuf:"bytes,1,opt,name=identifiedObject,proto3" json:"identifiedObject,omitempty"`
	// MISSING DOCUMENTATION!!!
	Check *commonmodule.CheckConditions `protobuf:"bytes,2,opt,name=check,proto3" json:"check,omitempty"`
	// MISSING DOCUMENTATION!!!
	CircuitSegmentControlDCSC *CircuitSegmentControlDCSC `protobuf:"bytes,3,opt,name=circuitSegmentControlDCSC,proto3" json:"circuitSegmentControlDCSC,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *CircuitSegmentControl) Reset() {
	*x = CircuitSegmentControl{}
	mi := &file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CircuitSegmentControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitSegmentControl) ProtoMessage() {}

func (x *CircuitSegmentControl) ProtoReflect() protoreflect.Message {
	mi := &file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitSegmentControl.ProtoReflect.Descriptor instead.
func (*CircuitSegmentControl) Descriptor() ([]byte, []int) {
	return file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_rawDescGZIP(), []int{3}
}

func (x *CircuitSegmentControl) GetIdentifiedObject() *commonmodule.IdentifiedObject {
	if x != nil {
		return x.IdentifiedObject
	}
	return nil
}

func (x *CircuitSegmentControl) GetCheck() *commonmodule.CheckConditions {
	if x != nil {
		return x.Check
	}
	return nil
}

func (x *CircuitSegmentControl) GetCircuitSegmentControlDCSC() *CircuitSegmentControlDCSC {
	if x != nil {
		return x.CircuitSegmentControlDCSC
	}
	return nil
}

// Switch control profile
type CircuitSegmentControlProfile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	ControlMessageInfo *commonmodule.ControlMessageInfo `protobuf:"bytes,1,opt,name=controlMessageInfo,proto3" json:"controlMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	ApplicationSystem *commonmodule.ApplicationSystem `protobuf:"bytes,2,opt,name=applicationSystem,proto3" json:"applicationSystem,omitempty"`
	// MISSING DOCUMENTATION!!!
	CircuitSegmentControl *CircuitSegmentControl `protobuf:"bytes,3,opt,name=circuitSegmentControl,proto3" json:"circuitSegmentControl,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CircuitSegmentControlProfile) Reset() {
	*x = CircuitSegmentControlProfile{}
	mi := &file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CircuitSegmentControlProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitSegmentControlProfile) ProtoMessage() {}

func (x *CircuitSegmentControlProfile) ProtoReflect() protoreflect.Message {
	mi := &file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitSegmentControlProfile.ProtoReflect.Descriptor instead.
func (*CircuitSegmentControlProfile) Descriptor() ([]byte, []int) {
	return file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_rawDescGZIP(), []int{4}
}

func (x *CircuitSegmentControlProfile) GetControlMessageInfo() *commonmodule.ControlMessageInfo {
	if x != nil {
		return x.ControlMessageInfo
	}
	return nil
}

func (x *CircuitSegmentControlProfile) GetApplicationSystem() *commonmodule.ApplicationSystem {
	if x != nil {
		return x.ApplicationSystem
	}
	return nil
}

func (x *CircuitSegmentControlProfile) GetCircuitSegmentControl() *CircuitSegmentControl {
	if x != nil {
		return x.CircuitSegmentControl
	}
	return nil
}

// OpenFMB specialization for circuit segment service control, DCSC (Distributed Coordination
// Service Control), following 61850 naming convention.
type CircuitSegmentEventDCSC struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	LogicalNode *commonmodule.LogicalNode `protobuf:"bytes,1,opt,name=logicalNode,proto3" json:"logicalNode,omitempty"`
	// MISSING DOCUMENTATION!!!
	CircuitSegmentServiceMode *ENG_CircuitSegmentServiceModeKind `protobuf:"bytes,2,opt,name=CircuitSegmentServiceMode,proto3" json:"CircuitSegmentServiceMode,omitempty"`
	// MISSING DOCUMENTATION!!!
	Island *commonmodule.StatusSPS `protobuf:"bytes,3,opt,name=Island,proto3" json:"Island,omitempty"`
	// MISSING DOCUMENTATION!!!
	PermissibleAuto *commonmodule.StatusSPS `protobuf:"bytes,4,opt,name=PermissibleAuto,proto3" json:"PermissibleAuto,omitempty"`
	// MISSING DOCUMENTATION!!!
	PermissibleManual *commonmodule.StatusSPS `protobuf:"bytes,5,opt,name=PermissibleManual,proto3" json:"PermissibleManual,omitempty"`
	// MISSING DOCUMENTATION!!!
	PermissibleNetzero *commonmodule.StatusSPS `protobuf:"bytes,6,opt,name=PermissibleNetzero,proto3" json:"PermissibleNetzero,omitempty"`
	// MISSING DOCUMENTATION!!!
	PermissibleStart *commonmodule.StatusSPS `protobuf:"bytes,7,opt,name=PermissibleStart,proto3" json:"PermissibleStart,omitempty"`
	// MISSING DOCUMENTATION!!!
	PermissibleStop *commonmodule.StatusSPS `protobuf:"bytes,8,opt,name=PermissibleStop,proto3" json:"PermissibleStop,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CircuitSegmentEventDCSC) Reset() {
	*x = CircuitSegmentEventDCSC{}
	mi := &file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CircuitSegmentEventDCSC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitSegmentEventDCSC) ProtoMessage() {}

func (x *CircuitSegmentEventDCSC) ProtoReflect() protoreflect.Message {
	mi := &file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitSegmentEventDCSC.ProtoReflect.Descriptor instead.
func (*CircuitSegmentEventDCSC) Descriptor() ([]byte, []int) {
	return file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_rawDescGZIP(), []int{5}
}

func (x *CircuitSegmentEventDCSC) GetLogicalNode() *commonmodule.LogicalNode {
	if x != nil {
		return x.LogicalNode
	}
	return nil
}

func (x *CircuitSegmentEventDCSC) GetCircuitSegmentServiceMode() *ENG_CircuitSegmentServiceModeKind {
	if x != nil {
		return x.CircuitSegmentServiceMode
	}
	return nil
}

func (x *CircuitSegmentEventDCSC) GetIsland() *commonmodule.StatusSPS {
	if x != nil {
		return x.Island
	}
	return nil
}

func (x *CircuitSegmentEventDCSC) GetPermissibleAuto() *commonmodule.StatusSPS {
	if x != nil {
		return x.PermissibleAuto
	}
	return nil
}

func (x *CircuitSegmentEventDCSC) GetPermissibleManual() *commonmodule.StatusSPS {
	if x != nil {
		return x.PermissibleManual
	}
	return nil
}

func (x *CircuitSegmentEventDCSC) GetPermissibleNetzero() *commonmodule.StatusSPS {
	if x != nil {
		return x.PermissibleNetzero
	}
	return nil
}

func (x *CircuitSegmentEventDCSC) GetPermissibleStart() *commonmodule.StatusSPS {
	if x != nil {
		return x.PermissibleStart
	}
	return nil
}

func (x *CircuitSegmentEventDCSC) GetPermissibleStop() *commonmodule.StatusSPS {
	if x != nil {
		return x.PermissibleStop
	}
	return nil
}

// Switch event
type CircuitSegmentEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	IdentifiedObject *commonmodule.IdentifiedObject `protobuf:"bytes,1,opt,name=identifiedObject,proto3" json:"identifiedObject,omitempty"`
	// MISSING DOCUMENTATION!!!
	CircuitSegmentEventDCSC *CircuitSegmentEventDCSC `protobuf:"bytes,2,opt,name=circuitSegmentEventDCSC,proto3" json:"circuitSegmentEventDCSC,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CircuitSegmentEvent) Reset() {
	*x = CircuitSegmentEvent{}
	mi := &file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CircuitSegmentEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitSegmentEvent) ProtoMessage() {}

func (x *CircuitSegmentEvent) ProtoReflect() protoreflect.Message {
	mi := &file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitSegmentEvent.ProtoReflect.Descriptor instead.
func (*CircuitSegmentEvent) Descriptor() ([]byte, []int) {
	return file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_rawDescGZIP(), []int{6}
}

func (x *CircuitSegmentEvent) GetIdentifiedObject() *commonmodule.IdentifiedObject {
	if x != nil {
		return x.IdentifiedObject
	}
	return nil
}

func (x *CircuitSegmentEvent) GetCircuitSegmentEventDCSC() *CircuitSegmentEventDCSC {
	if x != nil {
		return x.CircuitSegmentEventDCSC
	}
	return nil
}

// Switch event profile
type CircuitSegmentEventProfile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	EventMessageInfo *commonmodule.EventMessageInfo `protobuf:"bytes,1,opt,name=eventMessageInfo,proto3" json:"eventMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	ApplicationSystem *commonmodule.ApplicationSystem `protobuf:"bytes,2,opt,name=applicationSystem,proto3" json:"applicationSystem,omitempty"`
	// MISSING DOCUMENTATION!!!
	CircuitSegmentEvent *CircuitSegmentEvent `protobuf:"bytes,3,opt,name=circuitSegmentEvent,proto3" json:"circuitSegmentEvent,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CircuitSegmentEventProfile) Reset() {
	*x = CircuitSegmentEventProfile{}
	mi := &file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CircuitSegmentEventProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitSegmentEventProfile) ProtoMessage() {}

func (x *CircuitSegmentEventProfile) ProtoReflect() protoreflect.Message {
	mi := &file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitSegmentEventProfile.ProtoReflect.Descriptor instead.
func (*CircuitSegmentEventProfile) Descriptor() ([]byte, []int) {
	return file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_rawDescGZIP(), []int{7}
}

func (x *CircuitSegmentEventProfile) GetEventMessageInfo() *commonmodule.EventMessageInfo {
	if x != nil {
		return x.EventMessageInfo
	}
	return nil
}

func (x *CircuitSegmentEventProfile) GetApplicationSystem() *commonmodule.ApplicationSystem {
	if x != nil {
		return x.ApplicationSystem
	}
	return nil
}

func (x *CircuitSegmentEventProfile) GetCircuitSegmentEvent() *CircuitSegmentEvent {
	if x != nil {
		return x.CircuitSegmentEvent
	}
	return nil
}

// OpenFMB specialization for coordination service control, DCSC (Distributed Coordination Service
// Control), following 61850 naming convention.
type CircuitSegmentStatusDCSC struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	LogicalNode *commonmodule.LogicalNode `protobuf:"bytes,1,opt,name=logicalNode,proto3" json:"logicalNode,omitempty"`
	// MISSING DOCUMENTATION!!!
	CircuitSegmentServiceMode *ENG_CircuitSegmentServiceModeKind `protobuf:"bytes,2,opt,name=CircuitSegmentServiceMode,proto3" json:"CircuitSegmentServiceMode,omitempty"`
	// MISSING DOCUMENTATION!!!
	Island *commonmodule.StatusDPS `protobuf:"bytes,3,opt,name=Island,proto3" json:"Island,omitempty"`
	// MISSING DOCUMENTATION!!!
	PermissibleAuto *commonmodule.StatusSPS `protobuf:"bytes,4,opt,name=PermissibleAuto,proto3" json:"PermissibleAuto,omitempty"`
	// MISSING DOCUMENTATION!!!
	PermissibleManual *commonmodule.StatusSPS `protobuf:"bytes,5,opt,name=PermissibleManual,proto3" json:"PermissibleManual,omitempty"`
	// MISSING DOCUMENTATION!!!
	PermissibleNetzero *commonmodule.StatusSPS `protobuf:"bytes,6,opt,name=PermissibleNetzero,proto3" json:"PermissibleNetzero,omitempty"`
	// MISSING DOCUMENTATION!!!
	PermissibleStart *commonmodule.StatusSPS `protobuf:"bytes,7,opt,name=PermissibleStart,proto3" json:"PermissibleStart,omitempty"`
	// MISSING DOCUMENTATION!!!
	PermissibleStop *commonmodule.StatusSPS `protobuf:"bytes,8,opt,name=PermissibleStop,proto3" json:"PermissibleStop,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CircuitSegmentStatusDCSC) Reset() {
	*x = CircuitSegmentStatusDCSC{}
	mi := &file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CircuitSegmentStatusDCSC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitSegmentStatusDCSC) ProtoMessage() {}

func (x *CircuitSegmentStatusDCSC) ProtoReflect() protoreflect.Message {
	mi := &file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitSegmentStatusDCSC.ProtoReflect.Descriptor instead.
func (*CircuitSegmentStatusDCSC) Descriptor() ([]byte, []int) {
	return file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_rawDescGZIP(), []int{8}
}

func (x *CircuitSegmentStatusDCSC) GetLogicalNode() *commonmodule.LogicalNode {
	if x != nil {
		return x.LogicalNode
	}
	return nil
}

func (x *CircuitSegmentStatusDCSC) GetCircuitSegmentServiceMode() *ENG_CircuitSegmentServiceModeKind {
	if x != nil {
		return x.CircuitSegmentServiceMode
	}
	return nil
}

func (x *CircuitSegmentStatusDCSC) GetIsland() *commonmodule.StatusDPS {
	if x != nil {
		return x.Island
	}
	return nil
}

func (x *CircuitSegmentStatusDCSC) GetPermissibleAuto() *commonmodule.StatusSPS {
	if x != nil {
		return x.PermissibleAuto
	}
	return nil
}

func (x *CircuitSegmentStatusDCSC) GetPermissibleManual() *commonmodule.StatusSPS {
	if x != nil {
		return x.PermissibleManual
	}
	return nil
}

func (x *CircuitSegmentStatusDCSC) GetPermissibleNetzero() *commonmodule.StatusSPS {
	if x != nil {
		return x.PermissibleNetzero
	}
	return nil
}

func (x *CircuitSegmentStatusDCSC) GetPermissibleStart() *commonmodule.StatusSPS {
	if x != nil {
		return x.PermissibleStart
	}
	return nil
}

func (x *CircuitSegmentStatusDCSC) GetPermissibleStop() *commonmodule.StatusSPS {
	if x != nil {
		return x.PermissibleStop
	}
	return nil
}

// Switch event
type CircuitSegmentStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	IdentifiedObject *commonmodule.IdentifiedObject `protobuf:"bytes,1,opt,name=identifiedObject,proto3" json:"identifiedObject,omitempty"`
	// MISSING DOCUMENTATION!!!
	CircuitSegmentStatusDCSC *CircuitSegmentStatusDCSC `protobuf:"bytes,2,opt,name=circuitSegmentStatusDCSC,proto3" json:"circuitSegmentStatusDCSC,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CircuitSegmentStatus) Reset() {
	*x = CircuitSegmentStatus{}
	mi := &file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CircuitSegmentStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitSegmentStatus) ProtoMessage() {}

func (x *CircuitSegmentStatus) ProtoReflect() protoreflect.Message {
	mi := &file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitSegmentStatus.ProtoReflect.Descriptor instead.
func (*CircuitSegmentStatus) Descriptor() ([]byte, []int) {
	return file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_rawDescGZIP(), []int{9}
}

func (x *CircuitSegmentStatus) GetIdentifiedObject() *commonmodule.IdentifiedObject {
	if x != nil {
		return x.IdentifiedObject
	}
	return nil
}

func (x *CircuitSegmentStatus) GetCircuitSegmentStatusDCSC() *CircuitSegmentStatusDCSC {
	if x != nil {
		return x.CircuitSegmentStatusDCSC
	}
	return nil
}

// Switch event profile
type CircuitSegmentStatusProfile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	StatusMessageInfo *commonmodule.StatusMessageInfo `protobuf:"bytes,1,opt,name=statusMessageInfo,proto3" json:"statusMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	ApplicationSystem *commonmodule.ApplicationSystem `protobuf:"bytes,2,opt,name=applicationSystem,proto3" json:"applicationSystem,omitempty"`
	// MISSING DOCUMENTATION!!!
	CircuitSegmentStatus *CircuitSegmentStatus `protobuf:"bytes,3,opt,name=circuitSegmentStatus,proto3" json:"circuitSegmentStatus,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CircuitSegmentStatusProfile) Reset() {
	*x = CircuitSegmentStatusProfile{}
	mi := &file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CircuitSegmentStatusProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitSegmentStatusProfile) ProtoMessage() {}

func (x *CircuitSegmentStatusProfile) ProtoReflect() protoreflect.Message {
	mi := &file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitSegmentStatusProfile.ProtoReflect.Descriptor instead.
func (*CircuitSegmentStatusProfile) Descriptor() ([]byte, []int) {
	return file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_rawDescGZIP(), []int{10}
}

func (x *CircuitSegmentStatusProfile) GetStatusMessageInfo() *commonmodule.StatusMessageInfo {
	if x != nil {
		return x.StatusMessageInfo
	}
	return nil
}

func (x *CircuitSegmentStatusProfile) GetApplicationSystem() *commonmodule.ApplicationSystem {
	if x != nil {
		return x.ApplicationSystem
	}
	return nil
}

func (x *CircuitSegmentStatusProfile) GetCircuitSegmentStatus() *CircuitSegmentStatus {
	if x != nil {
		return x.CircuitSegmentStatus
	}
	return nil
}

var File_circuitsegmentservicemodule_circuitsegmentservicemodule_proto protoreflect.FileDescriptor

var file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_rawDesc = []byte{
	0x0a, 0x3d, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x63, 0x69,
	0x72, 0x63, 0x75, 0x69, 0x74, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1b, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x1a, 0x09, 0x75, 0x6d,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7a, 0x0a, 0x26, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3a, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x21, 0x45, 0x4e, 0x47, 0x5f, 0x43, 0x69, 0x72,
	0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x5c, 0x0a, 0x06, 0x73, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x63, 0x69, 0x72,
	0x63, 0x75, 0x69, 0x74, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01,
	0x52, 0x06, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x46, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0f, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0xac, 0x02, 0x0a, 0x19, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x43, 0x53, 0x43, 0x12, 0x5f,
	0x0a, 0x15, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x15, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12,
	0x7c, 0x0a, 0x19, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x45, 0x4e, 0x47, 0x5f, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69,
	0x6e, 0x64, 0x52, 0x19, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a,
	0x06, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x44, 0x50, 0x43, 0x52, 0x06, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x22,
	0x9e, 0x02, 0x0a, 0x15, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x50, 0x0a, 0x10, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x10, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x33, 0x0a, 0x05, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x12, 0x7e, 0x0a, 0x19, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x43, 0x53, 0x43, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x43, 0x53, 0x43, 0x42, 0x08, 0x88, 0xb5, 0x18,
	0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x19, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x43, 0x53, 0x43,
	0x22, 0xc9, 0x02, 0x0a, 0x1c, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x56, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x57, 0x0a, 0x11, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52,
	0x11, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x12, 0x72, 0x0a, 0x15, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52,
	0x15, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x3a, 0x04, 0xc0, 0xf3, 0x18, 0x01, 0x22, 0xe6, 0x04, 0x0a,
	0x17, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x44, 0x43, 0x53, 0x43, 0x12, 0x41, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x7c, 0x0a, 0x19, 0x43,
	0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x4e, 0x47,
	0x5f, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x19,
	0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x49, 0x73, 0x6c,
	0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53,
	0x50, 0x53, 0x52, 0x06, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x12, 0x41, 0x0a, 0x0f, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x0f, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x12, 0x45, 0x0a,
	0x11, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50,
	0x53, 0x52, 0x11, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x12, 0x47, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x4e, 0x65, 0x74, 0x7a, 0x65, 0x72, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4e, 0x65, 0x74, 0x7a, 0x65, 0x72, 0x6f, 0x12, 0x43, 0x0a,
	0x10, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53,
	0x52, 0x10, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x41, 0x0a, 0x0f, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x53, 0x74, 0x6f, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x53, 0x50, 0x53, 0x52, 0x0f, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x53, 0x74, 0x6f, 0x70, 0x22, 0xe1, 0x01, 0x0a, 0x13, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69,
	0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x50, 0x0a,
	0x10, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x10, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x78, 0x0a, 0x17, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x43, 0x53, 0x43, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43,
	0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x44, 0x43, 0x53, 0x43, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01,
	0x52, 0x17, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x43, 0x53, 0x43, 0x22, 0xbb, 0x02, 0x0a, 0x1a, 0x43, 0x69,
	0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x50, 0x0a, 0x10, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x57, 0x0a, 0x11, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01,
	0x52, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x12, 0x6c, 0x0a, 0x13, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43,
	0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x13, 0x63, 0x69,
	0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x3a, 0x04, 0xc0, 0xf3, 0x18, 0x01, 0x22, 0xe7, 0x04, 0x0a, 0x18, 0x43, 0x69, 0x72, 0x63,
	0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x44, 0x43, 0x53, 0x43, 0x12, 0x41, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x4e, 0x6f, 0x64, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x7c, 0x0a, 0x19, 0x43, 0x69, 0x72, 0x63, 0x75,
	0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x69, 0x72,
	0x63, 0x75, 0x69, 0x74, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x4e, 0x47, 0x5f, 0x43, 0x69, 0x72,
	0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x19, 0x43, 0x69, 0x72, 0x63,
	0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x50, 0x53, 0x52, 0x06,
	0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x12, 0x41, 0x0a, 0x0f, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x0f, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x12, 0x45, 0x0a, 0x11, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x11, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x12, 0x47, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4e,
	0x65, 0x74, 0x7a, 0x65, 0x72, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x4e, 0x65, 0x74, 0x7a, 0x65, 0x72, 0x6f, 0x12, 0x43, 0x0a, 0x10, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x10, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x41,
	0x0a, 0x0f, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x6f,
	0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53,
	0x52, 0x0f, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x6f,
	0x70, 0x22, 0xe5, 0x01, 0x0a, 0x14, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x50, 0x0a, 0x10, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x10, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x7b, 0x0a, 0x18,
	0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x44, 0x43, 0x53, 0x43, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x69, 0x72,
	0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x44, 0x43, 0x53, 0x43, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52,
	0x18, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x43, 0x53, 0x43, 0x22, 0xc2, 0x02, 0x0a, 0x1b, 0x43, 0x69,
	0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x53, 0x0a, 0x11, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x11, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x57,
	0x0a, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01,
	0x90, 0xb5, 0x18, 0x01, 0x52, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x6f, 0x0a, 0x14, 0x63, 0x69, 0x72, 0x63, 0x75,
	0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5,
	0x18, 0x01, 0x52, 0x14, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x04, 0xc0, 0xf3, 0x18, 0x01, 0x2a, 0xc2,
	0x02, 0x0a, 0x1d, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x2b, 0x0a, 0x27, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e,
	0x64, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x26, 0x0a,
	0x22, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x6e,
	0x6f, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x10, 0x02, 0x12, 0x28, 0x0a,
	0x24, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x6d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x69, 0x72, 0x63, 0x75,
	0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x6e, 0x65, 0x74, 0x7a, 0x65, 0x72, 0x6f,
	0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x4b,
	0x69, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x43,
	0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x6f,
	0x70, 0x10, 0x06, 0x42, 0xb1, 0x01, 0x0a, 0x23, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2e,
	0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x01, 0x5a, 0x62, 0x67,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d,
	0x62, 0x2f, 0x70, 0x73, 0x6d, 0x2f, 0x6f, 0x70, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x67, 0x6f, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2d, 0x6f, 0x70,
	0x73, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x70,
	0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0xaa, 0x02, 0x23, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2e, 0x63, 0x69, 0x72, 0x63,
	0x75, 0x69, 0x74, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_rawDescOnce sync.Once
	file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_rawDescData = file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_rawDesc
)

func file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_rawDescGZIP() []byte {
	file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_rawDescOnce.Do(func() {
		file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_rawDescData = protoimpl.X.CompressGZIP(file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_rawDescData)
	})
	return file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_rawDescData
}

var file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_goTypes = []any{
	(CircuitSegmentServiceModeKind)(0),             // 0: circuitsegmentservicemodule.CircuitSegmentServiceModeKind
	(*Optional_CircuitSegmentServiceModeKind)(nil), // 1: circuitsegmentservicemodule.Optional_CircuitSegmentServiceModeKind
	(*ENG_CircuitSegmentServiceModeKind)(nil),      // 2: circuitsegmentservicemodule.ENG_CircuitSegmentServiceModeKind
	(*CircuitSegmentControlDCSC)(nil),              // 3: circuitsegmentservicemodule.CircuitSegmentControlDCSC
	(*CircuitSegmentControl)(nil),                  // 4: circuitsegmentservicemodule.CircuitSegmentControl
	(*CircuitSegmentControlProfile)(nil),           // 5: circuitsegmentservicemodule.CircuitSegmentControlProfile
	(*CircuitSegmentEventDCSC)(nil),                // 6: circuitsegmentservicemodule.CircuitSegmentEventDCSC
	(*CircuitSegmentEvent)(nil),                    // 7: circuitsegmentservicemodule.CircuitSegmentEvent
	(*CircuitSegmentEventProfile)(nil),             // 8: circuitsegmentservicemodule.CircuitSegmentEventProfile
	(*CircuitSegmentStatusDCSC)(nil),               // 9: circuitsegmentservicemodule.CircuitSegmentStatusDCSC
	(*CircuitSegmentStatus)(nil),                   // 10: circuitsegmentservicemodule.CircuitSegmentStatus
	(*CircuitSegmentStatusProfile)(nil),            // 11: circuitsegmentservicemodule.CircuitSegmentStatusProfile
	(*wrapperspb.StringValue)(nil),                 // 12: google.protobuf.StringValue
	(*commonmodule.LogicalNodeForControl)(nil),     // 13: commonmodule.LogicalNodeForControl
	(*commonmodule.ControlDPC)(nil),                // 14: commonmodule.ControlDPC
	(*commonmodule.IdentifiedObject)(nil),          // 15: commonmodule.IdentifiedObject
	(*commonmodule.CheckConditions)(nil),           // 16: commonmodule.CheckConditions
	(*commonmodule.ControlMessageInfo)(nil),        // 17: commonmodule.ControlMessageInfo
	(*commonmodule.ApplicationSystem)(nil),         // 18: commonmodule.ApplicationSystem
	(*commonmodule.LogicalNode)(nil),               // 19: commonmodule.LogicalNode
	(*commonmodule.StatusSPS)(nil),                 // 20: commonmodule.StatusSPS
	(*commonmodule.EventMessageInfo)(nil),          // 21: commonmodule.EventMessageInfo
	(*commonmodule.StatusDPS)(nil),                 // 22: commonmodule.StatusDPS
	(*commonmodule.StatusMessageInfo)(nil),         // 23: commonmodule.StatusMessageInfo
}
var file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_depIdxs = []int32{
	0,  // 0: circuitsegmentservicemodule.Optional_CircuitSegmentServiceModeKind.value:type_name -> circuitsegmentservicemodule.CircuitSegmentServiceModeKind
	0,  // 1: circuitsegmentservicemodule.ENG_CircuitSegmentServiceModeKind.setVal:type_name -> circuitsegmentservicemodule.CircuitSegmentServiceModeKind
	12, // 2: circuitsegmentservicemodule.ENG_CircuitSegmentServiceModeKind.setValExtension:type_name -> google.protobuf.StringValue
	13, // 3: circuitsegmentservicemodule.CircuitSegmentControlDCSC.logicalNodeForControl:type_name -> commonmodule.LogicalNodeForControl
	2,  // 4: circuitsegmentservicemodule.CircuitSegmentControlDCSC.CircuitSegmentServiceMode:type_name -> circuitsegmentservicemodule.ENG_CircuitSegmentServiceModeKind
	14, // 5: circuitsegmentservicemodule.CircuitSegmentControlDCSC.Island:type_name -> commonmodule.ControlDPC
	15, // 6: circuitsegmentservicemodule.CircuitSegmentControl.identifiedObject:type_name -> commonmodule.IdentifiedObject
	16, // 7: circuitsegmentservicemodule.CircuitSegmentControl.check:type_name -> commonmodule.CheckConditions
	3,  // 8: circuitsegmentservicemodule.CircuitSegmentControl.circuitSegmentControlDCSC:type_name -> circuitsegmentservicemodule.CircuitSegmentControlDCSC
	17, // 9: circuitsegmentservicemodule.CircuitSegmentControlProfile.controlMessageInfo:type_name -> commonmodule.ControlMessageInfo
	18, // 10: circuitsegmentservicemodule.CircuitSegmentControlProfile.applicationSystem:type_name -> commonmodule.ApplicationSystem
	4,  // 11: circuitsegmentservicemodule.CircuitSegmentControlProfile.circuitSegmentControl:type_name -> circuitsegmentservicemodule.CircuitSegmentControl
	19, // 12: circuitsegmentservicemodule.CircuitSegmentEventDCSC.logicalNode:type_name -> commonmodule.LogicalNode
	2,  // 13: circuitsegmentservicemodule.CircuitSegmentEventDCSC.CircuitSegmentServiceMode:type_name -> circuitsegmentservicemodule.ENG_CircuitSegmentServiceModeKind
	20, // 14: circuitsegmentservicemodule.CircuitSegmentEventDCSC.Island:type_name -> commonmodule.StatusSPS
	20, // 15: circuitsegmentservicemodule.CircuitSegmentEventDCSC.PermissibleAuto:type_name -> commonmodule.StatusSPS
	20, // 16: circuitsegmentservicemodule.CircuitSegmentEventDCSC.PermissibleManual:type_name -> commonmodule.StatusSPS
	20, // 17: circuitsegmentservicemodule.CircuitSegmentEventDCSC.PermissibleNetzero:type_name -> commonmodule.StatusSPS
	20, // 18: circuitsegmentservicemodule.CircuitSegmentEventDCSC.PermissibleStart:type_name -> commonmodule.StatusSPS
	20, // 19: circuitsegmentservicemodule.CircuitSegmentEventDCSC.PermissibleStop:type_name -> commonmodule.StatusSPS
	15, // 20: circuitsegmentservicemodule.CircuitSegmentEvent.identifiedObject:type_name -> commonmodule.IdentifiedObject
	6,  // 21: circuitsegmentservicemodule.CircuitSegmentEvent.circuitSegmentEventDCSC:type_name -> circuitsegmentservicemodule.CircuitSegmentEventDCSC
	21, // 22: circuitsegmentservicemodule.CircuitSegmentEventProfile.eventMessageInfo:type_name -> commonmodule.EventMessageInfo
	18, // 23: circuitsegmentservicemodule.CircuitSegmentEventProfile.applicationSystem:type_name -> commonmodule.ApplicationSystem
	7,  // 24: circuitsegmentservicemodule.CircuitSegmentEventProfile.circuitSegmentEvent:type_name -> circuitsegmentservicemodule.CircuitSegmentEvent
	19, // 25: circuitsegmentservicemodule.CircuitSegmentStatusDCSC.logicalNode:type_name -> commonmodule.LogicalNode
	2,  // 26: circuitsegmentservicemodule.CircuitSegmentStatusDCSC.CircuitSegmentServiceMode:type_name -> circuitsegmentservicemodule.ENG_CircuitSegmentServiceModeKind
	22, // 27: circuitsegmentservicemodule.CircuitSegmentStatusDCSC.Island:type_name -> commonmodule.StatusDPS
	20, // 28: circuitsegmentservicemodule.CircuitSegmentStatusDCSC.PermissibleAuto:type_name -> commonmodule.StatusSPS
	20, // 29: circuitsegmentservicemodule.CircuitSegmentStatusDCSC.PermissibleManual:type_name -> commonmodule.StatusSPS
	20, // 30: circuitsegmentservicemodule.CircuitSegmentStatusDCSC.PermissibleNetzero:type_name -> commonmodule.StatusSPS
	20, // 31: circuitsegmentservicemodule.CircuitSegmentStatusDCSC.PermissibleStart:type_name -> commonmodule.StatusSPS
	20, // 32: circuitsegmentservicemodule.CircuitSegmentStatusDCSC.PermissibleStop:type_name -> commonmodule.StatusSPS
	15, // 33: circuitsegmentservicemodule.CircuitSegmentStatus.identifiedObject:type_name -> commonmodule.IdentifiedObject
	9,  // 34: circuitsegmentservicemodule.CircuitSegmentStatus.circuitSegmentStatusDCSC:type_name -> circuitsegmentservicemodule.CircuitSegmentStatusDCSC
	23, // 35: circuitsegmentservicemodule.CircuitSegmentStatusProfile.statusMessageInfo:type_name -> commonmodule.StatusMessageInfo
	18, // 36: circuitsegmentservicemodule.CircuitSegmentStatusProfile.applicationSystem:type_name -> commonmodule.ApplicationSystem
	10, // 37: circuitsegmentservicemodule.CircuitSegmentStatusProfile.circuitSegmentStatus:type_name -> circuitsegmentservicemodule.CircuitSegmentStatus
	38, // [38:38] is the sub-list for method output_type
	38, // [38:38] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_init() }
func file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_init() {
	if File_circuitsegmentservicemodule_circuitsegmentservicemodule_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_goTypes,
		DependencyIndexes: file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_depIdxs,
		EnumInfos:         file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_enumTypes,
		MessageInfos:      file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_msgTypes,
	}.Build()
	File_circuitsegmentservicemodule_circuitsegmentservicemodule_proto = out.File
	file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_rawDesc = nil
	file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_goTypes = nil
	file_circuitsegmentservicemodule_circuitsegmentservicemodule_proto_depIdxs = nil
}
