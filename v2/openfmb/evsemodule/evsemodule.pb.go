// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v6.31.1
// source: evsemodule/evsemodule.proto

// OpenFMB Operational Model (61850-CIM) (v2.2.0).eapx
// Thursday, July 24, 2025 8:59:58 PM UTC

package evsemodule

import (
	_ "gitlab.com/openfmb/psm/ops/protobuf/go-openfmb-ops-protobuf/v2/openfmb"
	commonmodule "gitlab.com/openfmb/psm/ops/protobuf/go-openfmb-ops-protobuf/v2/openfmb/commonmodule"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MISSING DOCUMENTATION!!!
type ChargingStateKind int32

const (
	// MISSING DOCUMENTATION!!!
	ChargingStateKind_ChargingStateKind_UNDEFINED ChargingStateKind = 0
	// There is no connection between EV and EVSE.
	ChargingStateKind_ChargingStateKind_Idle ChargingStateKind = 1
	// The contactor of the Connector is closed and energy is flowing to between EVSE and EV.
	ChargingStateKind_ChargingStateKind_Charging ChargingStateKind = 2
	// There is a connection between EV and EVSE, in case the protocol used between EV and the Charging
	// Station can detect a connection, the protocol needs to detect this for the state to become active.
	// The connection can either be wired or wireless.
	ChargingStateKind_ChargingStateKind_EVConnected ChargingStateKind = 3
	// When the EV is connected to the EVSE and the EVSE is offering energy but the EV is not taking
	// any energy.
	ChargingStateKind_ChargingStateKind_SuspendedEV ChargingStateKind = 4
	// When the EV is connected to the EVSE but the EVSE is not offering energy to the EV, e.g. due to
	// a smart charging restriction, local supply power constraints, or when charging has stopped because
	// of the authorization status in the response to a transactionEventRequest indicating that charging is
	// not allowed etc.
	ChargingStateKind_ChargingStateKind_SuspendedEVSE ChargingStateKind = 5
)

// Enum value maps for ChargingStateKind.
var (
	ChargingStateKind_name = map[int32]string{
		0: "ChargingStateKind_UNDEFINED",
		1: "ChargingStateKind_Idle",
		2: "ChargingStateKind_Charging",
		3: "ChargingStateKind_EVConnected",
		4: "ChargingStateKind_SuspendedEV",
		5: "ChargingStateKind_SuspendedEVSE",
	}
	ChargingStateKind_value = map[string]int32{
		"ChargingStateKind_UNDEFINED":     0,
		"ChargingStateKind_Idle":          1,
		"ChargingStateKind_Charging":      2,
		"ChargingStateKind_EVConnected":   3,
		"ChargingStateKind_SuspendedEV":   4,
		"ChargingStateKind_SuspendedEVSE": 5,
	}
)

func (x ChargingStateKind) Enum() *ChargingStateKind {
	p := new(ChargingStateKind)
	*p = x
	return p
}

func (x ChargingStateKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChargingStateKind) Descriptor() protoreflect.EnumDescriptor {
	return file_evsemodule_evsemodule_proto_enumTypes[0].Descriptor()
}

func (ChargingStateKind) Type() protoreflect.EnumType {
	return &file_evsemodule_evsemodule_proto_enumTypes[0]
}

func (x ChargingStateKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChargingStateKind.Descriptor instead.
func (ChargingStateKind) EnumDescriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{0}
}

// This enumeration lists the connection states of electrical vehicles (notation from IEC 61851-1).
// Used in logical node DEAO or DEDO for IEC 61851-23 and -24 system C.
type EVACConnectionStateKind int32

const (
	// MISSING DOCUMENTATION!!!
	EVACConnectionStateKind_EVACConnectionStateKind_UNDEFINED EVACConnectionStateKind = 0
	// No vehicle connected
	EVACConnectionStateKind_EVACConnectionStateKind_StateA EVACConnectionStateKind = 1
	// Vehicle connected, not ready for energy flow
	EVACConnectionStateKind_EVACConnectionStateKind_StateB EVACConnectionStateKind = 2
	// Vehicle connected, ready for energy flow, ventilation not required
	EVACConnectionStateKind_EVACConnectionStateKind_StateC EVACConnectionStateKind = 3
	// Vehicle connected, ready for energy flow, ventilation required
	EVACConnectionStateKind_EVACConnectionStateKind_StateD EVACConnectionStateKind = 4
	// Vehicle connected, charge spot fault
	EVACConnectionStateKind_EVACConnectionStateKind_StateE EVACConnectionStateKind = 5
	// Charge spot not available for action
	EVACConnectionStateKind_EVACConnectionStateKind_StateF EVACConnectionStateKind = 6
)

// Enum value maps for EVACConnectionStateKind.
var (
	EVACConnectionStateKind_name = map[int32]string{
		0: "EVACConnectionStateKind_UNDEFINED",
		1: "EVACConnectionStateKind_StateA",
		2: "EVACConnectionStateKind_StateB",
		3: "EVACConnectionStateKind_StateC",
		4: "EVACConnectionStateKind_StateD",
		5: "EVACConnectionStateKind_StateE",
		6: "EVACConnectionStateKind_StateF",
	}
	EVACConnectionStateKind_value = map[string]int32{
		"EVACConnectionStateKind_UNDEFINED": 0,
		"EVACConnectionStateKind_StateA":    1,
		"EVACConnectionStateKind_StateB":    2,
		"EVACConnectionStateKind_StateC":    3,
		"EVACConnectionStateKind_StateD":    4,
		"EVACConnectionStateKind_StateE":    5,
		"EVACConnectionStateKind_StateF":    6,
	}
)

func (x EVACConnectionStateKind) Enum() *EVACConnectionStateKind {
	p := new(EVACConnectionStateKind)
	*p = x
	return p
}

func (x EVACConnectionStateKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EVACConnectionStateKind) Descriptor() protoreflect.EnumDescriptor {
	return file_evsemodule_evsemodule_proto_enumTypes[1].Descriptor()
}

func (EVACConnectionStateKind) Type() protoreflect.EnumType {
	return &file_evsemodule_evsemodule_proto_enumTypes[1]
}

func (x EVACConnectionStateKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EVACConnectionStateKind.Descriptor instead.
func (EVACConnectionStateKind) EnumDescriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{1}
}

// This enumeration lists the plug present and coupler lock states (according to IEC 61851-1). Used
// in logical node DEAO.
type EVACPlugStateKind int32

const (
	// MISSING DOCUMENTATION!!!
	EVACPlugStateKind_EVACPlugStateKind_UNDEFINED EVACPlugStateKind = 0
	// MISSING DOCUMENTATION!!!
	EVACPlugStateKind_EVACPlugStateKind_Disconnected EVACPlugStateKind = 1
	// MISSING DOCUMENTATION!!!
	EVACPlugStateKind_EVACPlugStateKind_ConnectedandUnlocked EVACPlugStateKind = 2
	// MISSING DOCUMENTATION!!!
	EVACPlugStateKind_EVACPlugStateKind_ConnectedandLocked EVACPlugStateKind = 3
	// Connected but not locked (no locking mechanism available)
	EVACPlugStateKind_EVACPlugStateKind_Connected EVACPlugStateKind = 4
)

// Enum value maps for EVACPlugStateKind.
var (
	EVACPlugStateKind_name = map[int32]string{
		0: "EVACPlugStateKind_UNDEFINED",
		1: "EVACPlugStateKind_Disconnected",
		2: "EVACPlugStateKind_ConnectedandUnlocked",
		3: "EVACPlugStateKind_ConnectedandLocked",
		4: "EVACPlugStateKind_Connected",
	}
	EVACPlugStateKind_value = map[string]int32{
		"EVACPlugStateKind_UNDEFINED":            0,
		"EVACPlugStateKind_Disconnected":         1,
		"EVACPlugStateKind_ConnectedandUnlocked": 2,
		"EVACPlugStateKind_ConnectedandLocked":   3,
		"EVACPlugStateKind_Connected":            4,
	}
)

func (x EVACPlugStateKind) Enum() *EVACPlugStateKind {
	p := new(EVACPlugStateKind)
	*p = x
	return p
}

func (x EVACPlugStateKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EVACPlugStateKind) Descriptor() protoreflect.EnumDescriptor {
	return file_evsemodule_evsemodule_proto_enumTypes[2].Descriptor()
}

func (EVACPlugStateKind) Type() protoreflect.EnumType {
	return &file_evsemodule_evsemodule_proto_enumTypes[2]
}

func (x EVACPlugStateKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EVACPlugStateKind.Descriptor instead.
func (EVACPlugStateKind) EnumDescriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{2}
}

// This enumeration lists the capability of the EV AC charging cable assembly (according to IEC
// 61851-1). Used in logical node DEAO.
type EVACCableCapabilityKind int32

const (
	// MISSING DOCUMENTATION!!!
	EVACCableCapabilityKind_EVACCableCapabilityKind_UNDEFINED EVACCableCapabilityKind = 0
	// 13 amps per phase
	EVACCableCapabilityKind_EVACCableCapabilityKind_13A EVACCableCapabilityKind = 1
	// 20 amps per phase
	EVACCableCapabilityKind_EVACCableCapabilityKind_20A EVACCableCapabilityKind = 2
	// 32 amps per phase
	EVACCableCapabilityKind_EVACCableCapabilityKind_32A EVACCableCapabilityKind = 3
	// 63 amps (3 phase) or 70 amps (1 phase)
	EVACCableCapabilityKind_EVACCableCapabilityKind_63to70A EVACCableCapabilityKind = 4
)

// Enum value maps for EVACCableCapabilityKind.
var (
	EVACCableCapabilityKind_name = map[int32]string{
		0: "EVACCableCapabilityKind_UNDEFINED",
		1: "EVACCableCapabilityKind_13A",
		2: "EVACCableCapabilityKind_20A",
		3: "EVACCableCapabilityKind_32A",
		4: "EVACCableCapabilityKind_63to70A",
	}
	EVACCableCapabilityKind_value = map[string]int32{
		"EVACCableCapabilityKind_UNDEFINED": 0,
		"EVACCableCapabilityKind_13A":       1,
		"EVACCableCapabilityKind_20A":       2,
		"EVACCableCapabilityKind_32A":       3,
		"EVACCableCapabilityKind_63to70A":   4,
	}
)

func (x EVACCableCapabilityKind) Enum() *EVACCableCapabilityKind {
	p := new(EVACCableCapabilityKind)
	*p = x
	return p
}

func (x EVACCableCapabilityKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EVACCableCapabilityKind) Descriptor() protoreflect.EnumDescriptor {
	return file_evsemodule_evsemodule_proto_enumTypes[3].Descriptor()
}

func (EVACCableCapabilityKind) Type() protoreflect.EnumType {
	return &file_evsemodule_evsemodule_proto_enumTypes[3]
}

func (x EVACCableCapabilityKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EVACCableCapabilityKind.Descriptor instead.
func (EVACCableCapabilityKind) EnumDescriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{3}
}

// Connection charging types (according to IEC 61851-1).
type EVConnectionChargingKind int32

const (
	// MISSING DOCUMENTATION!!!
	EVConnectionChargingKind_EVConnectionChargingKind_UNDEFINED EVConnectionChargingKind = 0
	// Single phase AC charging
	EVConnectionChargingKind_EVConnectionChargingKind_SinglePhase EVConnectionChargingKind = 1
	// Three phase AC charging
	EVConnectionChargingKind_EVConnectionChargingKind_ThreePhase EVConnectionChargingKind = 2
	// System A DC Charging
	EVConnectionChargingKind_EVConnectionChargingKind_SystemA EVConnectionChargingKind = 3
	// System B DC Charging
	EVConnectionChargingKind_EVConnectionChargingKind_SystemB EVConnectionChargingKind = 4
	// System C 5 System C DC Charging
	EVConnectionChargingKind_EVConnectionChargingKind_SystemC EVConnectionChargingKind = 5
)

// Enum value maps for EVConnectionChargingKind.
var (
	EVConnectionChargingKind_name = map[int32]string{
		0: "EVConnectionChargingKind_UNDEFINED",
		1: "EVConnectionChargingKind_SinglePhase",
		2: "EVConnectionChargingKind_ThreePhase",
		3: "EVConnectionChargingKind_SystemA",
		4: "EVConnectionChargingKind_SystemB",
		5: "EVConnectionChargingKind_SystemC",
	}
	EVConnectionChargingKind_value = map[string]int32{
		"EVConnectionChargingKind_UNDEFINED":   0,
		"EVConnectionChargingKind_SinglePhase": 1,
		"EVConnectionChargingKind_ThreePhase":  2,
		"EVConnectionChargingKind_SystemA":     3,
		"EVConnectionChargingKind_SystemB":     4,
		"EVConnectionChargingKind_SystemC":     5,
	}
)

func (x EVConnectionChargingKind) Enum() *EVConnectionChargingKind {
	p := new(EVConnectionChargingKind)
	*p = x
	return p
}

func (x EVConnectionChargingKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EVConnectionChargingKind) Descriptor() protoreflect.EnumDescriptor {
	return file_evsemodule_evsemodule_proto_enumTypes[4].Descriptor()
}

func (EVConnectionChargingKind) Type() protoreflect.EnumType {
	return &file_evsemodule_evsemodule_proto_enumTypes[4]
}

func (x EVConnectionChargingKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EVConnectionChargingKind.Descriptor instead.
func (EVConnectionChargingKind) EnumDescriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{4}
}

// This enumeration lists the capability of the EV DC charging cable assembly (according to IEC
// 61851-1). Used in logical node DEDO.
type EVDCCableCapabilityKind int32

const (
	// Tera 10**12.
	EVDCCableCapabilityKind_EVDCCableCapabilityKind_UNDEFINED EVDCCableCapabilityKind = 0
	// 13 A
	EVDCCableCapabilityKind_EVDCCableCapabilityKind_13A EVDCCableCapabilityKind = 1
	// 16 to 20 A
	EVDCCableCapabilityKind_EVDCCableCapabilityKind_16to20A EVDCCableCapabilityKind = 2
	// 30 to 32 A
	EVDCCableCapabilityKind_EVDCCableCapabilityKind_30to32A EVDCCableCapabilityKind = 3
	// 60 to 63 A
	EVDCCableCapabilityKind_EVDCCableCapabilityKind_60to63A EVDCCableCapabilityKind = 4
	// 70 A
	EVDCCableCapabilityKind_EVDCCableCapabilityKind_70A EVDCCableCapabilityKind = 5
	// 80 A
	EVDCCableCapabilityKind_EVDCCableCapabilityKind_80A EVDCCableCapabilityKind = 6
	// 125 A
	EVDCCableCapabilityKind_EVDCCableCapabilityKind_125A EVDCCableCapabilityKind = 7
	// 200 A
	EVDCCableCapabilityKind_EVDCCableCapabilityKind_200A EVDCCableCapabilityKind = 8
	// 250 A
	EVDCCableCapabilityKind_EVDCCableCapabilityKind_250A EVDCCableCapabilityKind = 9
	// 400 A
	EVDCCableCapabilityKind_EVDCCableCapabilityKind_400A EVDCCableCapabilityKind = 10
)

// Enum value maps for EVDCCableCapabilityKind.
var (
	EVDCCableCapabilityKind_name = map[int32]string{
		0:  "EVDCCableCapabilityKind_UNDEFINED",
		1:  "EVDCCableCapabilityKind_13A",
		2:  "EVDCCableCapabilityKind_16to20A",
		3:  "EVDCCableCapabilityKind_30to32A",
		4:  "EVDCCableCapabilityKind_60to63A",
		5:  "EVDCCableCapabilityKind_70A",
		6:  "EVDCCableCapabilityKind_80A",
		7:  "EVDCCableCapabilityKind_125A",
		8:  "EVDCCableCapabilityKind_200A",
		9:  "EVDCCableCapabilityKind_250A",
		10: "EVDCCableCapabilityKind_400A",
	}
	EVDCCableCapabilityKind_value = map[string]int32{
		"EVDCCableCapabilityKind_UNDEFINED": 0,
		"EVDCCableCapabilityKind_13A":       1,
		"EVDCCableCapabilityKind_16to20A":   2,
		"EVDCCableCapabilityKind_30to32A":   3,
		"EVDCCableCapabilityKind_60to63A":   4,
		"EVDCCableCapabilityKind_70A":       5,
		"EVDCCableCapabilityKind_80A":       6,
		"EVDCCableCapabilityKind_125A":      7,
		"EVDCCableCapabilityKind_200A":      8,
		"EVDCCableCapabilityKind_250A":      9,
		"EVDCCableCapabilityKind_400A":      10,
	}
)

func (x EVDCCableCapabilityKind) Enum() *EVDCCableCapabilityKind {
	p := new(EVDCCableCapabilityKind)
	*p = x
	return p
}

func (x EVDCCableCapabilityKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EVDCCableCapabilityKind) Descriptor() protoreflect.EnumDescriptor {
	return file_evsemodule_evsemodule_proto_enumTypes[5].Descriptor()
}

func (EVDCCableCapabilityKind) Type() protoreflect.EnumType {
	return &file_evsemodule_evsemodule_proto_enumTypes[5]
}

func (x EVDCCableCapabilityKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EVDCCableCapabilityKind.Descriptor instead.
func (EVDCCableCapabilityKind) EnumDescriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{5}
}

// This enumeration lists the connection states of electrical vehicles for DC charging IEC 61851
// 23/24 system A. Used in logical node DEDO.
type EVDCConnectionStateAKind int32

const (
	// MISSING DOCUMENTATION!!!
	EVDCConnectionStateAKind_EVDCConnectionStateAKind_UNDEFINED EVDCConnectionStateAKind = 0
	// Vehicle unconnected
	EVDCConnectionStateAKind_EVDCConnectionStateAKind_DC_A EVDCConnectionStateAKind = 1
	// Vehicle connected and start request
	EVDCConnectionStateAKind_EVDCConnectionStateAKind_DC_B1 EVDCConnectionStateAKind = 2
	// Initialisation 1: Handshaking
	EVDCConnectionStateAKind_EVDCConnectionStateAKind_DC_B2 EVDCConnectionStateAKind = 3
	// Initialisation 2: Vehicle connector lock Initialisation 3: Insulation test before charging
	EVDCConnectionStateAKind_EVDCConnectionStateAKind_DC_B3 EVDCConnectionStateAKind = 4
	// Energy transfer
	EVDCConnectionStateAKind_EVDCConnectionStateAKind_DC_C EVDCConnectionStateAKind = 5
	// Ventilation
	EVDCConnectionStateAKind_EVDCConnectionStateAKind_DC_D EVDCConnectionStateAKind = 6
	// Shutdown 1: Termination of current output
	EVDCConnectionStateAKind_EVDCConnectionStateAKind_DC_B_S1 EVDCConnectionStateAKind = 7
	// Shutdown 2: Verification of voltage
	EVDCConnectionStateAKind_EVDCConnectionStateAKind_DC_B_S2 EVDCConnectionStateAKind = 8
	// Shutdown 3: Connector unlock - Connector unlocked
	EVDCConnectionStateAKind_EVDCConnectionStateAKind_DC_B_S3 EVDCConnectionStateAKind = 9
	// Shutdown 4: Connector unlock - End of charge at communication level
	EVDCConnectionStateAKind_EVDCConnectionStateAKind_DC_B_S4 EVDCConnectionStateAKind = 10
	// Not ready
	EVDCConnectionStateAKind_EVDCConnectionStateAKind_DC_E EVDCConnectionStateAKind = 11
	// Not ready
	EVDCConnectionStateAKind_EVDCConnectionStateAKind_DC_F EVDCConnectionStateAKind = 12
)

// Enum value maps for EVDCConnectionStateAKind.
var (
	EVDCConnectionStateAKind_name = map[int32]string{
		0:  "EVDCConnectionStateAKind_UNDEFINED",
		1:  "EVDCConnectionStateAKind_DC_A",
		2:  "EVDCConnectionStateAKind_DC_B1",
		3:  "EVDCConnectionStateAKind_DC_B2",
		4:  "EVDCConnectionStateAKind_DC_B3",
		5:  "EVDCConnectionStateAKind_DC_C",
		6:  "EVDCConnectionStateAKind_DC_D",
		7:  "EVDCConnectionStateAKind_DC_B_S1",
		8:  "EVDCConnectionStateAKind_DC_B_S2",
		9:  "EVDCConnectionStateAKind_DC_B_S3",
		10: "EVDCConnectionStateAKind_DC_B_S4",
		11: "EVDCConnectionStateAKind_DC_E",
		12: "EVDCConnectionStateAKind_DC_F",
	}
	EVDCConnectionStateAKind_value = map[string]int32{
		"EVDCConnectionStateAKind_UNDEFINED": 0,
		"EVDCConnectionStateAKind_DC_A":      1,
		"EVDCConnectionStateAKind_DC_B1":     2,
		"EVDCConnectionStateAKind_DC_B2":     3,
		"EVDCConnectionStateAKind_DC_B3":     4,
		"EVDCConnectionStateAKind_DC_C":      5,
		"EVDCConnectionStateAKind_DC_D":      6,
		"EVDCConnectionStateAKind_DC_B_S1":   7,
		"EVDCConnectionStateAKind_DC_B_S2":   8,
		"EVDCConnectionStateAKind_DC_B_S3":   9,
		"EVDCConnectionStateAKind_DC_B_S4":   10,
		"EVDCConnectionStateAKind_DC_E":      11,
		"EVDCConnectionStateAKind_DC_F":      12,
	}
)

func (x EVDCConnectionStateAKind) Enum() *EVDCConnectionStateAKind {
	p := new(EVDCConnectionStateAKind)
	*p = x
	return p
}

func (x EVDCConnectionStateAKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EVDCConnectionStateAKind) Descriptor() protoreflect.EnumDescriptor {
	return file_evsemodule_evsemodule_proto_enumTypes[6].Descriptor()
}

func (EVDCConnectionStateAKind) Type() protoreflect.EnumType {
	return &file_evsemodule_evsemodule_proto_enumTypes[6]
}

func (x EVDCConnectionStateAKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EVDCConnectionStateAKind.Descriptor instead.
func (EVDCConnectionStateAKind) EnumDescriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{6}
}

// This enumeration lists the connection states of electrical vehicles for DC charging IEC 61851
// 23/24 system C. Used in logical node DEDO.
type EVDCConnectionStateCKind int32

const (
	// Voltage source inverter regulating to P and Q references (VSI PQ)
	EVDCConnectionStateCKind_EVDCConnectionStateCKind_UNDEFINED EVDCConnectionStateCKind = 0
	// Current-source inverter (CSI)
	EVDCConnectionStateCKind_EVDCConnectionStateCKind_StateA EVDCConnectionStateCKind = 1
	// Undefined
	EVDCConnectionStateCKind_EVDCConnectionStateCKind_StateB EVDCConnectionStateCKind = 2
	// Voltage-controlled voltage-source inverter (VC-VSI)
	EVDCConnectionStateCKind_EVDCConnectionStateCKind_StateC EVDCConnectionStateCKind = 3
	// Current-controlled voltage-source inverter (CC-VSI)
	EVDCConnectionStateCKind_EVDCConnectionStateCKind_StateD EVDCConnectionStateCKind = 4
	// Not applicable / Unknown
	EVDCConnectionStateCKind_EVDCConnectionStateCKind_StateE EVDCConnectionStateCKind = 5
	// MISSING DOCUMENTATION!!!
	EVDCConnectionStateCKind_EVDCConnectionStateCKind_StateF EVDCConnectionStateCKind = 6
)

// Enum value maps for EVDCConnectionStateCKind.
var (
	EVDCConnectionStateCKind_name = map[int32]string{
		0: "EVDCConnectionStateCKind_UNDEFINED",
		1: "EVDCConnectionStateCKind_StateA",
		2: "EVDCConnectionStateCKind_StateB",
		3: "EVDCConnectionStateCKind_StateC",
		4: "EVDCConnectionStateCKind_StateD",
		5: "EVDCConnectionStateCKind_StateE",
		6: "EVDCConnectionStateCKind_StateF",
	}
	EVDCConnectionStateCKind_value = map[string]int32{
		"EVDCConnectionStateCKind_UNDEFINED": 0,
		"EVDCConnectionStateCKind_StateA":    1,
		"EVDCConnectionStateCKind_StateB":    2,
		"EVDCConnectionStateCKind_StateC":    3,
		"EVDCConnectionStateCKind_StateD":    4,
		"EVDCConnectionStateCKind_StateE":    5,
		"EVDCConnectionStateCKind_StateF":    6,
	}
)

func (x EVDCConnectionStateCKind) Enum() *EVDCConnectionStateCKind {
	p := new(EVDCConnectionStateCKind)
	*p = x
	return p
}

func (x EVDCConnectionStateCKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EVDCConnectionStateCKind) Descriptor() protoreflect.EnumDescriptor {
	return file_evsemodule_evsemodule_proto_enumTypes[7].Descriptor()
}

func (EVDCConnectionStateCKind) Type() protoreflect.EnumType {
	return &file_evsemodule_evsemodule_proto_enumTypes[7]
}

func (x EVDCConnectionStateCKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EVDCConnectionStateCKind.Descriptor instead.
func (EVDCConnectionStateCKind) EnumDescriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{7}
}

// This enumeration lists the plug present and coupler lock states (according to IEC 61851-1). Used
// in logical node DEDO.
type EVDCPlugStateKind int32

const (
	// MISSING DOCUMENTATION!!!
	EVDCPlugStateKind_EVDCPlugStateKind_UNDEFINED EVDCPlugStateKind = 0
	// MISSING DOCUMENTATION!!!
	EVDCPlugStateKind_EVDCPlugStateKind_Disconnected EVDCPlugStateKind = 1
	// MISSING DOCUMENTATION!!!
	EVDCPlugStateKind_EVDCPlugStateKind_ConnectedandUnlocked EVDCPlugStateKind = 2
	// MISSING DOCUMENTATION!!!
	EVDCPlugStateKind_EVDCPlugStateKind_ConnectedandLocked EVDCPlugStateKind = 3
	// Connected but not locked (no locking mechanism available)
	EVDCPlugStateKind_EVDCPlugStateKind_Connected EVDCPlugStateKind = 4
)

// Enum value maps for EVDCPlugStateKind.
var (
	EVDCPlugStateKind_name = map[int32]string{
		0: "EVDCPlugStateKind_UNDEFINED",
		1: "EVDCPlugStateKind_Disconnected",
		2: "EVDCPlugStateKind_ConnectedandUnlocked",
		3: "EVDCPlugStateKind_ConnectedandLocked",
		4: "EVDCPlugStateKind_Connected",
	}
	EVDCPlugStateKind_value = map[string]int32{
		"EVDCPlugStateKind_UNDEFINED":            0,
		"EVDCPlugStateKind_Disconnected":         1,
		"EVDCPlugStateKind_ConnectedandUnlocked": 2,
		"EVDCPlugStateKind_ConnectedandLocked":   3,
		"EVDCPlugStateKind_Connected":            4,
	}
)

func (x EVDCPlugStateKind) Enum() *EVDCPlugStateKind {
	p := new(EVDCPlugStateKind)
	*p = x
	return p
}

func (x EVDCPlugStateKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EVDCPlugStateKind) Descriptor() protoreflect.EnumDescriptor {
	return file_evsemodule_evsemodule_proto_enumTypes[8].Descriptor()
}

func (EVDCPlugStateKind) Type() protoreflect.EnumType {
	return &file_evsemodule_evsemodule_proto_enumTypes[8]
}

func (x EVDCPlugStateKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EVDCPlugStateKind.Descriptor instead.
func (EVDCPlugStateKind) EnumDescriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{8}
}

// MISSING DOCUMENTATION!!!
type CapabilityConfigurationDEAO struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	LogicalNode *commonmodule.LogicalNode `protobuf:"bytes,1,opt,name=logicalNode,proto3" json:"logicalNode,omitempty"`
	// The rated maximum AC charging current of the outlet
	ChaARtg *commonmodule.ControlING `protobuf:"bytes,3,opt,name=ChaARtg,proto3" json:"ChaARtg,omitempty"`
	// Available AC current (6-80A) to signal to the EV when not using digital communication
	ChaAMax       *commonmodule.ControlING `protobuf:"bytes,4,opt,name=ChaAMax,proto3" json:"ChaAMax,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CapabilityConfigurationDEAO) Reset() {
	*x = CapabilityConfigurationDEAO{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CapabilityConfigurationDEAO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapabilityConfigurationDEAO) ProtoMessage() {}

func (x *CapabilityConfigurationDEAO) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapabilityConfigurationDEAO.ProtoReflect.Descriptor instead.
func (*CapabilityConfigurationDEAO) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{0}
}

func (x *CapabilityConfigurationDEAO) GetLogicalNode() *commonmodule.LogicalNode {
	if x != nil {
		return x.LogicalNode
	}
	return nil
}

func (x *CapabilityConfigurationDEAO) GetChaARtg() *commonmodule.ControlING {
	if x != nil {
		return x.ChaARtg
	}
	return nil
}

func (x *CapabilityConfigurationDEAO) GetChaAMax() *commonmodule.ControlING {
	if x != nil {
		return x.ChaAMax
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type CapabilityConfigurationDEDO struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	LogicalNode   *commonmodule.LogicalNode `protobuf:"bytes,1,opt,name=logicalNode,proto3" json:"logicalNode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CapabilityConfigurationDEDO) Reset() {
	*x = CapabilityConfigurationDEDO{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CapabilityConfigurationDEDO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapabilityConfigurationDEDO) ProtoMessage() {}

func (x *CapabilityConfigurationDEDO) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapabilityConfigurationDEDO.ProtoReflect.Descriptor instead.
func (*CapabilityConfigurationDEDO) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{1}
}

func (x *CapabilityConfigurationDEDO) GetLogicalNode() *commonmodule.LogicalNode {
	if x != nil {
		return x.LogicalNode
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type CapabilityConfigurationDESE struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	SourceCapabilityConfiguration *commonmodule.SourceCapabilityConfiguration `protobuf:"bytes,1,opt,name=sourceCapabilityConfiguration,proto3" json:"sourceCapabilityConfiguration,omitempty"`
	// MISSING DOCUMENTATION!!!
	CapabilityConfigurationDEA0 *CapabilityConfigurationDEAO `protobuf:"bytes,2,opt,name=capabilityConfigurationDEA0,proto3" json:"capabilityConfigurationDEA0,omitempty"`
	// MISSING DOCUMENTATION!!!
	CapabilityConfigurationDEDO *CapabilityConfigurationDEDO `protobuf:"bytes,3,opt,name=capabilityConfigurationDEDO,proto3" json:"capabilityConfigurationDEDO,omitempty"`
	// Rated maximum charging power of the EVSE
	ChaPwrRtg *commonmodule.ASG `protobuf:"bytes,4,opt,name=ChaPwrRtg,proto3" json:"ChaPwrRtg,omitempty"`
	// The power value that the EVSE requires to grid
	ChaPwrTgt *commonmodule.ASG `protobuf:"bytes,5,opt,name=ChaPwrTgt,proto3" json:"ChaPwrTgt,omitempty"`
	// The power value that the grid limits to the charger
	ChaPwrLim     *commonmodule.ASG `protobuf:"bytes,6,opt,name=ChaPwrLim,proto3" json:"ChaPwrLim,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CapabilityConfigurationDESE) Reset() {
	*x = CapabilityConfigurationDESE{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CapabilityConfigurationDESE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapabilityConfigurationDESE) ProtoMessage() {}

func (x *CapabilityConfigurationDESE) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapabilityConfigurationDESE.ProtoReflect.Descriptor instead.
func (*CapabilityConfigurationDESE) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{2}
}

func (x *CapabilityConfigurationDESE) GetSourceCapabilityConfiguration() *commonmodule.SourceCapabilityConfiguration {
	if x != nil {
		return x.SourceCapabilityConfiguration
	}
	return nil
}

func (x *CapabilityConfigurationDESE) GetCapabilityConfigurationDEA0() *CapabilityConfigurationDEAO {
	if x != nil {
		return x.CapabilityConfigurationDEA0
	}
	return nil
}

func (x *CapabilityConfigurationDESE) GetCapabilityConfigurationDEDO() *CapabilityConfigurationDEDO {
	if x != nil {
		return x.CapabilityConfigurationDEDO
	}
	return nil
}

func (x *CapabilityConfigurationDESE) GetChaPwrRtg() *commonmodule.ASG {
	if x != nil {
		return x.ChaPwrRtg
	}
	return nil
}

func (x *CapabilityConfigurationDESE) GetChaPwrTgt() *commonmodule.ASG {
	if x != nil {
		return x.ChaPwrTgt
	}
	return nil
}

func (x *CapabilityConfigurationDESE) GetChaPwrLim() *commonmodule.ASG {
	if x != nil {
		return x.ChaPwrLim
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type EVSECapabilityOverride struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	NameplateValue *commonmodule.NameplateValue `protobuf:"bytes,1,opt,name=nameplateValue,proto3" json:"nameplateValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	CapabilityConfigurationDESE []*CapabilityConfigurationDESE `protobuf:"bytes,2,rep,name=capabilityConfigurationDESE,proto3" json:"capabilityConfigurationDESE,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *EVSECapabilityOverride) Reset() {
	*x = EVSECapabilityOverride{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EVSECapabilityOverride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVSECapabilityOverride) ProtoMessage() {}

func (x *EVSECapabilityOverride) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVSECapabilityOverride.ProtoReflect.Descriptor instead.
func (*EVSECapabilityOverride) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{3}
}

func (x *EVSECapabilityOverride) GetNameplateValue() *commonmodule.NameplateValue {
	if x != nil {
		return x.NameplateValue
	}
	return nil
}

func (x *EVSECapabilityOverride) GetCapabilityConfigurationDESE() []*CapabilityConfigurationDESE {
	if x != nil {
		return x.CapabilityConfigurationDESE
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type EVSE struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	ConductingEquipment *commonmodule.ConductingEquipment `protobuf:"bytes,1,opt,name=conductingEquipment,proto3" json:"conductingEquipment,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *EVSE) Reset() {
	*x = EVSE{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EVSE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVSE) ProtoMessage() {}

func (x *EVSE) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVSE.ProtoReflect.Descriptor instead.
func (*EVSE) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{4}
}

func (x *EVSE) GetConductingEquipment() *commonmodule.ConductingEquipment {
	if x != nil {
		return x.ConductingEquipment
	}
	return nil
}

// EVSE Capability Override Profile
type EVSECapabilityOverrideProfile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	CapabilityMessageInfo *commonmodule.CapabilityMessageInfo `protobuf:"bytes,1,opt,name=capabilityMessageInfo,proto3" json:"capabilityMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	Evse *EVSE `protobuf:"bytes,2,opt,name=evse,proto3" json:"evse,omitempty"`
	// MISSING DOCUMENTATION!!!
	EvseCapabilityOverride *EVSECapabilityOverride `protobuf:"bytes,3,opt,name=evseCapabilityOverride,proto3" json:"evseCapabilityOverride,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *EVSECapabilityOverrideProfile) Reset() {
	*x = EVSECapabilityOverrideProfile{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EVSECapabilityOverrideProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVSECapabilityOverrideProfile) ProtoMessage() {}

func (x *EVSECapabilityOverrideProfile) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVSECapabilityOverrideProfile.ProtoReflect.Descriptor instead.
func (*EVSECapabilityOverrideProfile) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{5}
}

func (x *EVSECapabilityOverrideProfile) GetCapabilityMessageInfo() *commonmodule.CapabilityMessageInfo {
	if x != nil {
		return x.CapabilityMessageInfo
	}
	return nil
}

func (x *EVSECapabilityOverrideProfile) GetEvse() *EVSE {
	if x != nil {
		return x.Evse
	}
	return nil
}

func (x *EVSECapabilityOverrideProfile) GetEvseCapabilityOverride() *EVSECapabilityOverride {
	if x != nil {
		return x.EvseCapabilityOverride
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type CapabilityRatingsZCAB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	LogicalNode *commonmodule.LogicalNode `protobuf:"bytes,1,opt,name=logicalNode,proto3" json:"logicalNode,omitempty"`
	// Rated current of the cable in A
	ARtg *commonmodule.ASG `protobuf:"bytes,2,opt,name=ARtg,proto3" json:"ARtg,omitempty"`
	// Maximum overload of the cable in percent
	OvlMaxPct *commonmodule.ASG `protobuf:"bytes,3,opt,name=OvlMaxPct,proto3" json:"OvlMaxPct,omitempty"`
	// Maximum time allowed for corresponding overload set as Tmm
	OvlMaxTm      *commonmodule.ControlING `protobuf:"bytes,4,opt,name=OvlMaxTm,proto3" json:"OvlMaxTm,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CapabilityRatingsZCAB) Reset() {
	*x = CapabilityRatingsZCAB{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CapabilityRatingsZCAB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapabilityRatingsZCAB) ProtoMessage() {}

func (x *CapabilityRatingsZCAB) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapabilityRatingsZCAB.ProtoReflect.Descriptor instead.
func (*CapabilityRatingsZCAB) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{6}
}

func (x *CapabilityRatingsZCAB) GetLogicalNode() *commonmodule.LogicalNode {
	if x != nil {
		return x.LogicalNode
	}
	return nil
}

func (x *CapabilityRatingsZCAB) GetARtg() *commonmodule.ASG {
	if x != nil {
		return x.ARtg
	}
	return nil
}

func (x *CapabilityRatingsZCAB) GetOvlMaxPct() *commonmodule.ASG {
	if x != nil {
		return x.OvlMaxPct
	}
	return nil
}

func (x *CapabilityRatingsZCAB) GetOvlMaxTm() *commonmodule.ControlING {
	if x != nil {
		return x.OvlMaxTm
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type CapabilityRatingsDEAO struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	LogicalNode *commonmodule.LogicalNode `protobuf:"bytes,1,opt,name=logicalNode,proto3" json:"logicalNode,omitempty"`
	// The rated maximum AC charging current of the outlet
	ChaARtg *commonmodule.ControlING `protobuf:"bytes,3,opt,name=ChaARtg,proto3" json:"ChaARtg,omitempty"`
	// Available AC current (6-80A) to signal to the EV when not using digital communication
	ChaAMax       *commonmodule.ControlING `protobuf:"bytes,4,opt,name=ChaAMax,proto3" json:"ChaAMax,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CapabilityRatingsDEAO) Reset() {
	*x = CapabilityRatingsDEAO{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CapabilityRatingsDEAO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapabilityRatingsDEAO) ProtoMessage() {}

func (x *CapabilityRatingsDEAO) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapabilityRatingsDEAO.ProtoReflect.Descriptor instead.
func (*CapabilityRatingsDEAO) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{7}
}

func (x *CapabilityRatingsDEAO) GetLogicalNode() *commonmodule.LogicalNode {
	if x != nil {
		return x.LogicalNode
	}
	return nil
}

func (x *CapabilityRatingsDEAO) GetChaARtg() *commonmodule.ControlING {
	if x != nil {
		return x.ChaARtg
	}
	return nil
}

func (x *CapabilityRatingsDEAO) GetChaAMax() *commonmodule.ControlING {
	if x != nil {
		return x.ChaAMax
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type CapabilityRatingsDEDO struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	LogicalNode   *commonmodule.LogicalNode `protobuf:"bytes,1,opt,name=logicalNode,proto3" json:"logicalNode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CapabilityRatingsDEDO) Reset() {
	*x = CapabilityRatingsDEDO{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CapabilityRatingsDEDO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapabilityRatingsDEDO) ProtoMessage() {}

func (x *CapabilityRatingsDEDO) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapabilityRatingsDEDO.ProtoReflect.Descriptor instead.
func (*CapabilityRatingsDEDO) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{8}
}

func (x *CapabilityRatingsDEDO) GetLogicalNode() *commonmodule.LogicalNode {
	if x != nil {
		return x.LogicalNode
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type CapabilityRatingsDESE struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	SourceCapabilityRatings *commonmodule.SourceCapabilityRatings `protobuf:"bytes,1,opt,name=sourceCapabilityRatings,proto3" json:"sourceCapabilityRatings,omitempty"`
	// MISSING DOCUMENTATION!!!
	CapabilityRatingsDEAO []*CapabilityRatingsDEAO `protobuf:"bytes,2,rep,name=capabilityRatingsDEAO,proto3" json:"capabilityRatingsDEAO,omitempty"`
	// MISSING DOCUMENTATION!!!
	CapabilityRatingsDEDO []*CapabilityRatingsDEDO `protobuf:"bytes,3,rep,name=capabilityRatingsDEDO,proto3" json:"capabilityRatingsDEDO,omitempty"`
	// Rated maximum charging power of the EVSE
	ChaPwrRtg *commonmodule.ASG `protobuf:"bytes,4,opt,name=ChaPwrRtg,proto3" json:"ChaPwrRtg,omitempty"`
	// The power value that the EVSE requires to grid
	ChaPwrTgt *commonmodule.ASG `protobuf:"bytes,5,opt,name=ChaPwrTgt,proto3" json:"ChaPwrTgt,omitempty"`
	// The power value that the grid limits to the charger
	ChaPwrLim *commonmodule.ASG `protobuf:"bytes,6,opt,name=ChaPwrLim,proto3" json:"ChaPwrLim,omitempty"`
	// True = DC charging is supported
	ConnTypDC *commonmodule.SPG `protobuf:"bytes,7,opt,name=ConnTypDC,proto3" json:"ConnTypDC,omitempty"`
	// True = AC 1 phase charging is supported. Use ConnTypPhs1 for one phase charging, ConnTypPhs2 for
	// two phase charging and ConnTypPhs3 for three phase charging.
	ConnTypPhs1 *commonmodule.SPG `protobuf:"bytes,8,opt,name=ConnTypPhs1,proto3" json:"ConnTypPhs1,omitempty"`
	// True = AC 2 phase charging is supported.
	ConnTypPhs2 *commonmodule.SPG `protobuf:"bytes,9,opt,name=ConnTypPhs2,proto3" json:"ConnTypPhs2,omitempty"`
	// True = AC 3 phase charging is supported.
	ConnTypPhs3   *commonmodule.SPG `protobuf:"bytes,10,opt,name=ConnTypPhs3,proto3" json:"ConnTypPhs3,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CapabilityRatingsDESE) Reset() {
	*x = CapabilityRatingsDESE{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CapabilityRatingsDESE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapabilityRatingsDESE) ProtoMessage() {}

func (x *CapabilityRatingsDESE) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapabilityRatingsDESE.ProtoReflect.Descriptor instead.
func (*CapabilityRatingsDESE) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{9}
}

func (x *CapabilityRatingsDESE) GetSourceCapabilityRatings() *commonmodule.SourceCapabilityRatings {
	if x != nil {
		return x.SourceCapabilityRatings
	}
	return nil
}

func (x *CapabilityRatingsDESE) GetCapabilityRatingsDEAO() []*CapabilityRatingsDEAO {
	if x != nil {
		return x.CapabilityRatingsDEAO
	}
	return nil
}

func (x *CapabilityRatingsDESE) GetCapabilityRatingsDEDO() []*CapabilityRatingsDEDO {
	if x != nil {
		return x.CapabilityRatingsDEDO
	}
	return nil
}

func (x *CapabilityRatingsDESE) GetChaPwrRtg() *commonmodule.ASG {
	if x != nil {
		return x.ChaPwrRtg
	}
	return nil
}

func (x *CapabilityRatingsDESE) GetChaPwrTgt() *commonmodule.ASG {
	if x != nil {
		return x.ChaPwrTgt
	}
	return nil
}

func (x *CapabilityRatingsDESE) GetChaPwrLim() *commonmodule.ASG {
	if x != nil {
		return x.ChaPwrLim
	}
	return nil
}

func (x *CapabilityRatingsDESE) GetConnTypDC() *commonmodule.SPG {
	if x != nil {
		return x.ConnTypDC
	}
	return nil
}

func (x *CapabilityRatingsDESE) GetConnTypPhs1() *commonmodule.SPG {
	if x != nil {
		return x.ConnTypPhs1
	}
	return nil
}

func (x *CapabilityRatingsDESE) GetConnTypPhs2() *commonmodule.SPG {
	if x != nil {
		return x.ConnTypPhs2
	}
	return nil
}

func (x *CapabilityRatingsDESE) GetConnTypPhs3() *commonmodule.SPG {
	if x != nil {
		return x.ConnTypPhs3
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type EVSECapability struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	NameplateValue *commonmodule.NameplateValue `protobuf:"bytes,1,opt,name=nameplateValue,proto3" json:"nameplateValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	CapabilityRatingsDESE []*CapabilityRatingsDESE `protobuf:"bytes,2,rep,name=capabilityRatingsDESE,proto3" json:"capabilityRatingsDESE,omitempty"`
	// MISSING DOCUMENTATION!!!
	CapabilityConfigurationDESE []*CapabilityConfigurationDESE `protobuf:"bytes,3,rep,name=capabilityConfigurationDESE,proto3" json:"capabilityConfigurationDESE,omitempty"`
	// MISSING DOCUMENTATION!!!
	CapabilityRatingsZCAB *CapabilityRatingsZCAB `protobuf:"bytes,4,opt,name=capabilityRatingsZCAB,proto3" json:"capabilityRatingsZCAB,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *EVSECapability) Reset() {
	*x = EVSECapability{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EVSECapability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVSECapability) ProtoMessage() {}

func (x *EVSECapability) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVSECapability.ProtoReflect.Descriptor instead.
func (*EVSECapability) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{10}
}

func (x *EVSECapability) GetNameplateValue() *commonmodule.NameplateValue {
	if x != nil {
		return x.NameplateValue
	}
	return nil
}

func (x *EVSECapability) GetCapabilityRatingsDESE() []*CapabilityRatingsDESE {
	if x != nil {
		return x.CapabilityRatingsDESE
	}
	return nil
}

func (x *EVSECapability) GetCapabilityConfigurationDESE() []*CapabilityConfigurationDESE {
	if x != nil {
		return x.CapabilityConfigurationDESE
	}
	return nil
}

func (x *EVSECapability) GetCapabilityRatingsZCAB() *CapabilityRatingsZCAB {
	if x != nil {
		return x.CapabilityRatingsZCAB
	}
	return nil
}

// EVSE Capability Profile
type EVSECapabilityProfile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	CapabilityMessageInfo *commonmodule.CapabilityMessageInfo `protobuf:"bytes,1,opt,name=capabilityMessageInfo,proto3" json:"capabilityMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	Evse *EVSE `protobuf:"bytes,2,opt,name=evse,proto3" json:"evse,omitempty"`
	// MISSING DOCUMENTATION!!!
	EvseCapability *EVSECapability `protobuf:"bytes,3,opt,name=evseCapability,proto3" json:"evseCapability,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *EVSECapabilityProfile) Reset() {
	*x = EVSECapabilityProfile{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EVSECapabilityProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVSECapabilityProfile) ProtoMessage() {}

func (x *EVSECapabilityProfile) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVSECapabilityProfile.ProtoReflect.Descriptor instead.
func (*EVSECapabilityProfile) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{11}
}

func (x *EVSECapabilityProfile) GetCapabilityMessageInfo() *commonmodule.CapabilityMessageInfo {
	if x != nil {
		return x.CapabilityMessageInfo
	}
	return nil
}

func (x *EVSECapabilityProfile) GetEvse() *EVSE {
	if x != nil {
		return x.Evse
	}
	return nil
}

func (x *EVSECapabilityProfile) GetEvseCapability() *EVSECapability {
	if x != nil {
		return x.EvseCapability
	}
	return nil
}

// EVSE inverter high level functions.
type EVSEFunction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// EVSE inverter high level function to reduce (smooth) charging or discharging rate of change.
	CapacityFirming *commonmodule.CapacityFirming `protobuf:"bytes,1,opt,name=capacityFirming,proto3" json:"capacityFirming,omitempty"`
	// EVSE inverter high level function to maintain frequency within dead bands.
	FrequencyRegulation *commonmodule.FrequencyRegulation `protobuf:"bytes,2,opt,name=frequencyRegulation,proto3" json:"frequencyRegulation,omitempty"`
	// EVSE inverter high level function to maintain power level by charging or discharging
	PeakShaving *commonmodule.PeakShaving `protobuf:"bytes,3,opt,name=peakShaving,proto3" json:"peakShaving,omitempty"`
	// EVSE inverter high level function to shut down ESS if SOC exceeds high or low limits.
	SocLimit *commonmodule.SocLimit `protobuf:"bytes,4,opt,name=socLimit,proto3" json:"socLimit,omitempty"`
	// EVSE inverter high level function to maintain SOC within dead bands
	SocManagement *commonmodule.SOCManagement `protobuf:"bytes,5,opt,name=socManagement,proto3" json:"socManagement,omitempty"`
	// EVSE inverter high level function to maintain voltage within droop dead bands.
	VoltageDroop *commonmodule.VoltageDroop `protobuf:"bytes,6,opt,name=voltageDroop,proto3" json:"voltageDroop,omitempty"`
	// EVSE inverter high level function to maintain voltage within dead bands.
	VoltagePI     *commonmodule.VoltagePI `protobuf:"bytes,7,opt,name=voltagePI,proto3" json:"voltagePI,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EVSEFunction) Reset() {
	*x = EVSEFunction{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EVSEFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVSEFunction) ProtoMessage() {}

func (x *EVSEFunction) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVSEFunction.ProtoReflect.Descriptor instead.
func (*EVSEFunction) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{12}
}

func (x *EVSEFunction) GetCapacityFirming() *commonmodule.CapacityFirming {
	if x != nil {
		return x.CapacityFirming
	}
	return nil
}

func (x *EVSEFunction) GetFrequencyRegulation() *commonmodule.FrequencyRegulation {
	if x != nil {
		return x.FrequencyRegulation
	}
	return nil
}

func (x *EVSEFunction) GetPeakShaving() *commonmodule.PeakShaving {
	if x != nil {
		return x.PeakShaving
	}
	return nil
}

func (x *EVSEFunction) GetSocLimit() *commonmodule.SocLimit {
	if x != nil {
		return x.SocLimit
	}
	return nil
}

func (x *EVSEFunction) GetSocManagement() *commonmodule.SOCManagement {
	if x != nil {
		return x.SocManagement
	}
	return nil
}

func (x *EVSEFunction) GetVoltageDroop() *commonmodule.VoltageDroop {
	if x != nil {
		return x.VoltageDroop
	}
	return nil
}

func (x *EVSEFunction) GetVoltagePI() *commonmodule.VoltagePI {
	if x != nil {
		return x.VoltagePI
	}
	return nil
}

type Optional_ChargingStateKind struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         ChargingStateKind      `protobuf:"varint,1,opt,name=value,proto3,enum=evsemodule.ChargingStateKind" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Optional_ChargingStateKind) Reset() {
	*x = Optional_ChargingStateKind{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Optional_ChargingStateKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optional_ChargingStateKind) ProtoMessage() {}

func (x *Optional_ChargingStateKind) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optional_ChargingStateKind.ProtoReflect.Descriptor instead.
func (*Optional_ChargingStateKind) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{13}
}

func (x *Optional_ChargingStateKind) GetValue() ChargingStateKind {
	if x != nil {
		return x.Value
	}
	return ChargingStateKind_ChargingStateKind_UNDEFINED
}

// Point definition (Point)
type EVSEPoint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// EVSE function parameter
	Function *EVSEFunction `protobuf:"bytes,3,opt,name=function,proto3" json:"function,omitempty"`
	// Grid connect mode
	Mode *commonmodule.ENG_GridConnectModeKind `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"`
	// Ramp rates
	RampRates *commonmodule.RampRate `protobuf:"bytes,7,opt,name=rampRates,proto3" json:"rampRates,omitempty"`
	// Reset device
	Reset_ *commonmodule.ControlSPC `protobuf:"bytes,10,opt,name=reset,proto3" json:"reset,omitempty"`
	// EV state
	State *Optional_ChargingStateKind `protobuf:"bytes,11,opt,name=state,proto3" json:"state,omitempty"`
	// MISSING DOCUMENTATION!!!
	EnterServiceOperation *commonmodule.EnterServiceAPC `protobuf:"bytes,16,opt,name=enterServiceOperation,proto3" json:"enterServiceOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	HzWOperation *commonmodule.HzWAPC `protobuf:"bytes,17,opt,name=hzWOperation,proto3" json:"hzWOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	LimitWOperation *commonmodule.LimitWAPC `protobuf:"bytes,18,opt,name=limitWOperation,proto3" json:"limitWOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	PFOperation *commonmodule.PFSPC `protobuf:"bytes,19,opt,name=pFOperation,proto3" json:"pFOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	TmHzTripOperation *commonmodule.TmHzCSG `protobuf:"bytes,20,opt,name=tmHzTripOperation,proto3" json:"tmHzTripOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	TmVoltTripOperation *commonmodule.TmVoltCSG `protobuf:"bytes,21,opt,name=tmVoltTripOperation,proto3" json:"tmVoltTripOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	VArOperation *commonmodule.VarSPC `protobuf:"bytes,22,opt,name=vArOperation,proto3" json:"vArOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	VoltVarOperation *commonmodule.VoltVarCSG `protobuf:"bytes,23,opt,name=voltVarOperation,proto3" json:"voltVarOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	VoltWOperation *commonmodule.VoltWCSG `protobuf:"bytes,24,opt,name=voltWOperation,proto3" json:"voltWOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	WVarOperation *commonmodule.WVarCSG `protobuf:"bytes,25,opt,name=wVarOperation,proto3" json:"wVarOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	WOperation    *commonmodule.WSPC `protobuf:"bytes,26,opt,name=wOperation,proto3" json:"wOperation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EVSEPoint) Reset() {
	*x = EVSEPoint{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EVSEPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVSEPoint) ProtoMessage() {}

func (x *EVSEPoint) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVSEPoint.ProtoReflect.Descriptor instead.
func (*EVSEPoint) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{14}
}

func (x *EVSEPoint) GetFunction() *EVSEFunction {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *EVSEPoint) GetMode() *commonmodule.ENG_GridConnectModeKind {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *EVSEPoint) GetRampRates() *commonmodule.RampRate {
	if x != nil {
		return x.RampRates
	}
	return nil
}

func (x *EVSEPoint) GetReset_() *commonmodule.ControlSPC {
	if x != nil {
		return x.Reset_
	}
	return nil
}

func (x *EVSEPoint) GetState() *Optional_ChargingStateKind {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *EVSEPoint) GetEnterServiceOperation() *commonmodule.EnterServiceAPC {
	if x != nil {
		return x.EnterServiceOperation
	}
	return nil
}

func (x *EVSEPoint) GetHzWOperation() *commonmodule.HzWAPC {
	if x != nil {
		return x.HzWOperation
	}
	return nil
}

func (x *EVSEPoint) GetLimitWOperation() *commonmodule.LimitWAPC {
	if x != nil {
		return x.LimitWOperation
	}
	return nil
}

func (x *EVSEPoint) GetPFOperation() *commonmodule.PFSPC {
	if x != nil {
		return x.PFOperation
	}
	return nil
}

func (x *EVSEPoint) GetTmHzTripOperation() *commonmodule.TmHzCSG {
	if x != nil {
		return x.TmHzTripOperation
	}
	return nil
}

func (x *EVSEPoint) GetTmVoltTripOperation() *commonmodule.TmVoltCSG {
	if x != nil {
		return x.TmVoltTripOperation
	}
	return nil
}

func (x *EVSEPoint) GetVArOperation() *commonmodule.VarSPC {
	if x != nil {
		return x.VArOperation
	}
	return nil
}

func (x *EVSEPoint) GetVoltVarOperation() *commonmodule.VoltVarCSG {
	if x != nil {
		return x.VoltVarOperation
	}
	return nil
}

func (x *EVSEPoint) GetVoltWOperation() *commonmodule.VoltWCSG {
	if x != nil {
		return x.VoltWOperation
	}
	return nil
}

func (x *EVSEPoint) GetWVarOperation() *commonmodule.WVarCSG {
	if x != nil {
		return x.WVarOperation
	}
	return nil
}

func (x *EVSEPoint) GetWOperation() *commonmodule.WSPC {
	if x != nil {
		return x.WOperation
	}
	return nil
}

// Curve shape setting (FC=SP) (CSG_SP)
type EVSECurvePoint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The array with the points specifying a curve shape.
	Control *EVSEPoint `protobuf:"bytes,1,opt,name=control,proto3" json:"control,omitempty"`
	// Start time
	StartTime *commonmodule.ControlTimestamp `protobuf:"bytes,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	// Duration of the charging schedule in seconds.
	Duration uint64 `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	// Value determining level in hierarchy stack of profiles. Higher values have precedence over lower
	// values. Lowest level is 0.
	StackLevel uint64 `protobuf:"varint,4,opt,name=stackLevel,proto3" json:"stackLevel,omitempty"`
	// Identifies the Charging Schedule.
	Id            uint64 `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EVSECurvePoint) Reset() {
	*x = EVSECurvePoint{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EVSECurvePoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVSECurvePoint) ProtoMessage() {}

func (x *EVSECurvePoint) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVSECurvePoint.ProtoReflect.Descriptor instead.
func (*EVSECurvePoint) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{15}
}

func (x *EVSECurvePoint) GetControl() *EVSEPoint {
	if x != nil {
		return x.Control
	}
	return nil
}

func (x *EVSECurvePoint) GetStartTime() *commonmodule.ControlTimestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *EVSECurvePoint) GetDuration() uint64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *EVSECurvePoint) GetStackLevel() uint64 {
	if x != nil {
		return x.StackLevel
	}
	return 0
}

func (x *EVSECurvePoint) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Curve shape setting (FC=SP) (CSG_SP)
type EVSECSG struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The array with the points specifying a curve shape.
	CrvPts        []*EVSECurvePoint `protobuf:"bytes,1,rep,name=crvPts,proto3" json:"crvPts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EVSECSG) Reset() {
	*x = EVSECSG{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EVSECSG) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVSECSG) ProtoMessage() {}

func (x *EVSECSG) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVSECSG.ProtoReflect.Descriptor instead.
func (*EVSECSG) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{16}
}

func (x *EVSECSG) GetCrvPts() []*EVSECurvePoint {
	if x != nil {
		return x.CrvPts
	}
	return nil
}

// OpenFMB specialization for control schedule using:  LN: Schedule   Name: FSCH
type DESEControlScheduleFSCH struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Discrete value in EVSECSG type
	ValDCSG       *EVSECSG `protobuf:"bytes,1,opt,name=ValDCSG,proto3" json:"ValDCSG,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DESEControlScheduleFSCH) Reset() {
	*x = DESEControlScheduleFSCH{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DESEControlScheduleFSCH) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DESEControlScheduleFSCH) ProtoMessage() {}

func (x *DESEControlScheduleFSCH) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DESEControlScheduleFSCH.ProtoReflect.Descriptor instead.
func (*DESEControlScheduleFSCH) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{17}
}

func (x *DESEControlScheduleFSCH) GetValDCSG() *EVSECSG {
	if x != nil {
		return x.ValDCSG
	}
	return nil
}

// OpenFMB specialization for control schedule using:  LN: Schedule   Name: FSCH
type DEEVControlScheduleFSCH struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Analog CSG
	ValACSG       *commonmodule.ScheduleCSG `protobuf:"bytes,1,opt,name=ValACSG,proto3" json:"ValACSG,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DEEVControlScheduleFSCH) Reset() {
	*x = DEEVControlScheduleFSCH{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DEEVControlScheduleFSCH) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DEEVControlScheduleFSCH) ProtoMessage() {}

func (x *DEEVControlScheduleFSCH) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DEEVControlScheduleFSCH.ProtoReflect.Descriptor instead.
func (*DEEVControlScheduleFSCH) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{18}
}

func (x *DEEVControlScheduleFSCH) GetValACSG() *commonmodule.ScheduleCSG {
	if x != nil {
		return x.ValACSG
	}
	return nil
}

// LN: E-Mobility Electric Vehicle Name: DEEV
type ControlDEEV struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	LogicalNodeForControl *commonmodule.LogicalNodeForControl `protobuf:"bytes,1,opt,name=logicalNodeForControl,proto3" json:"logicalNodeForControl,omitempty"`
	// MISSING DOCUMENTATION!!!
	DeevControlScheduleFSCH *DEEVControlScheduleFSCH `protobuf:"bytes,2,opt,name=deevControlScheduleFSCH,proto3" json:"deevControlScheduleFSCH,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ControlDEEV) Reset() {
	*x = ControlDEEV{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ControlDEEV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlDEEV) ProtoMessage() {}

func (x *ControlDEEV) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlDEEV.ProtoReflect.Descriptor instead.
func (*ControlDEEV) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{19}
}

func (x *ControlDEEV) GetLogicalNodeForControl() *commonmodule.LogicalNodeForControl {
	if x != nil {
		return x.LogicalNodeForControl
	}
	return nil
}

func (x *ControlDEEV) GetDeevControlScheduleFSCH() *DEEVControlScheduleFSCH {
	if x != nil {
		return x.DeevControlScheduleFSCH
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type ControlDEAO struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	LogicalNodeForControl *commonmodule.LogicalNodeForControl `protobuf:"bytes,1,opt,name=logicalNodeForControl,proto3" json:"logicalNodeForControl,omitempty"`
	// MISSING DOCUMENTATION!!!
	ControlDEEV   *ControlDEEV `protobuf:"bytes,2,opt,name=controlDEEV,proto3" json:"controlDEEV,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ControlDEAO) Reset() {
	*x = ControlDEAO{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ControlDEAO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlDEAO) ProtoMessage() {}

func (x *ControlDEAO) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlDEAO.ProtoReflect.Descriptor instead.
func (*ControlDEAO) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{20}
}

func (x *ControlDEAO) GetLogicalNodeForControl() *commonmodule.LogicalNodeForControl {
	if x != nil {
		return x.LogicalNodeForControl
	}
	return nil
}

func (x *ControlDEAO) GetControlDEEV() *ControlDEEV {
	if x != nil {
		return x.ControlDEEV
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type ControlDEDO struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	LogicalNodeForControl *commonmodule.LogicalNodeForControl `protobuf:"bytes,1,opt,name=logicalNodeForControl,proto3" json:"logicalNodeForControl,omitempty"`
	// MISSING DOCUMENTATION!!!
	ControlDEEV   *ControlDEEV `protobuf:"bytes,2,opt,name=controlDEEV,proto3" json:"controlDEEV,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ControlDEDO) Reset() {
	*x = ControlDEDO{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ControlDEDO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlDEDO) ProtoMessage() {}

func (x *ControlDEDO) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlDEDO.ProtoReflect.Descriptor instead.
func (*ControlDEDO) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{21}
}

func (x *ControlDEDO) GetLogicalNodeForControl() *commonmodule.LogicalNodeForControl {
	if x != nil {
		return x.LogicalNodeForControl
	}
	return nil
}

func (x *ControlDEDO) GetControlDEEV() *ControlDEEV {
	if x != nil {
		return x.ControlDEEV
	}
	return nil
}

// Specialized 61850 DESE class.  LN: Controlling the features of an EVSE   Name: DESE
type ControlDESE struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	ControlFSCC *commonmodule.ControlFSCC `protobuf:"bytes,1,opt,name=controlFSCC,proto3" json:"controlFSCC,omitempty"`
	// MISSING DOCUMENTATION!!!
	DeseControlScheduleFSCH *DESEControlScheduleFSCH `protobuf:"bytes,2,opt,name=deseControlScheduleFSCH,proto3" json:"deseControlScheduleFSCH,omitempty"`
	// MISSING DOCUMENTATION!!!
	ControlDEAO *ControlDEAO `protobuf:"bytes,3,opt,name=controlDEAO,proto3" json:"controlDEAO,omitempty"`
	// MISSING DOCUMENTATION!!!
	ControlDEEO *ControlDEDO `protobuf:"bytes,4,opt,name=controlDEEO,proto3" json:"controlDEEO,omitempty"`
	// maximum charging current that the charger can provide to the EV
	ChaAMax       *wrapperspb.FloatValue `protobuf:"bytes,5,opt,name=ChaAMax,proto3" json:"ChaAMax,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ControlDESE) Reset() {
	*x = ControlDESE{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ControlDESE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlDESE) ProtoMessage() {}

func (x *ControlDESE) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlDESE.ProtoReflect.Descriptor instead.
func (*ControlDESE) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{22}
}

func (x *ControlDESE) GetControlFSCC() *commonmodule.ControlFSCC {
	if x != nil {
		return x.ControlFSCC
	}
	return nil
}

func (x *ControlDESE) GetDeseControlScheduleFSCH() *DESEControlScheduleFSCH {
	if x != nil {
		return x.DeseControlScheduleFSCH
	}
	return nil
}

func (x *ControlDESE) GetControlDEAO() *ControlDEAO {
	if x != nil {
		return x.ControlDEAO
	}
	return nil
}

func (x *ControlDESE) GetControlDEEO() *ControlDEDO {
	if x != nil {
		return x.ControlDEEO
	}
	return nil
}

func (x *ControlDESE) GetChaAMax() *wrapperspb.FloatValue {
	if x != nil {
		return x.ChaAMax
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type EVSEControl struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	ControlValue *commonmodule.ControlValue `protobuf:"bytes,1,opt,name=controlValue,proto3" json:"controlValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	ControlDESE []*ControlDESE `protobuf:"bytes,2,rep,name=controlDESE,proto3" json:"controlDESE,omitempty"`
	// MISSING DOCUMENTATION!!!
	Check         *commonmodule.CheckConditions `protobuf:"bytes,3,opt,name=check,proto3" json:"check,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EVSEControl) Reset() {
	*x = EVSEControl{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EVSEControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVSEControl) ProtoMessage() {}

func (x *EVSEControl) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVSEControl.ProtoReflect.Descriptor instead.
func (*EVSEControl) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{23}
}

func (x *EVSEControl) GetControlValue() *commonmodule.ControlValue {
	if x != nil {
		return x.ControlValue
	}
	return nil
}

func (x *EVSEControl) GetControlDESE() []*ControlDESE {
	if x != nil {
		return x.ControlDESE
	}
	return nil
}

func (x *EVSEControl) GetCheck() *commonmodule.CheckConditions {
	if x != nil {
		return x.Check
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type EVSEControlProfile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	ControlMessageInfo *commonmodule.ControlMessageInfo `protobuf:"bytes,1,opt,name=controlMessageInfo,proto3" json:"controlMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	Evse *EVSE `protobuf:"bytes,2,opt,name=evse,proto3" json:"evse,omitempty"`
	// MISSING DOCUMENTATION!!!
	EvseControl   *EVSEControl `protobuf:"bytes,3,opt,name=evseControl,proto3" json:"evseControl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EVSEControlProfile) Reset() {
	*x = EVSEControlProfile{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EVSEControlProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVSEControlProfile) ProtoMessage() {}

func (x *EVSEControlProfile) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVSEControlProfile.ProtoReflect.Descriptor instead.
func (*EVSEControlProfile) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{24}
}

func (x *EVSEControlProfile) GetControlMessageInfo() *commonmodule.ControlMessageInfo {
	if x != nil {
		return x.ControlMessageInfo
	}
	return nil
}

func (x *EVSEControlProfile) GetEvse() *EVSE {
	if x != nil {
		return x.Evse
	}
	return nil
}

func (x *EVSEControlProfile) GetEvseControl() *EVSEControl {
	if x != nil {
		return x.EvseControl
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type DiscreteControlDESE struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	LogicalNodeForControl *commonmodule.LogicalNodeForControl `protobuf:"bytes,1,opt,name=logicalNodeForControl,proto3" json:"logicalNodeForControl,omitempty"`
	// MISSING DOCUMENTATION!!!
	Control       *EVSEPoint `protobuf:"bytes,3,opt,name=control,proto3" json:"control,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiscreteControlDESE) Reset() {
	*x = DiscreteControlDESE{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiscreteControlDESE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscreteControlDESE) ProtoMessage() {}

func (x *DiscreteControlDESE) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscreteControlDESE.ProtoReflect.Descriptor instead.
func (*DiscreteControlDESE) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{25}
}

func (x *DiscreteControlDESE) GetLogicalNodeForControl() *commonmodule.LogicalNodeForControl {
	if x != nil {
		return x.LogicalNodeForControl
	}
	return nil
}

func (x *DiscreteControlDESE) GetControl() *EVSEPoint {
	if x != nil {
		return x.Control
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type EVSEDiscreteControl struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	ControlValue *commonmodule.ControlValue `protobuf:"bytes,1,opt,name=controlValue,proto3" json:"controlValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	DiscreteControlDESE []*DiscreteControlDESE `protobuf:"bytes,2,rep,name=discreteControlDESE,proto3" json:"discreteControlDESE,omitempty"`
	// MISSING DOCUMENTATION!!!
	Check         *commonmodule.CheckConditions `protobuf:"bytes,3,opt,name=check,proto3" json:"check,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EVSEDiscreteControl) Reset() {
	*x = EVSEDiscreteControl{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EVSEDiscreteControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVSEDiscreteControl) ProtoMessage() {}

func (x *EVSEDiscreteControl) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVSEDiscreteControl.ProtoReflect.Descriptor instead.
func (*EVSEDiscreteControl) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{26}
}

func (x *EVSEDiscreteControl) GetControlValue() *commonmodule.ControlValue {
	if x != nil {
		return x.ControlValue
	}
	return nil
}

func (x *EVSEDiscreteControl) GetDiscreteControlDESE() []*DiscreteControlDESE {
	if x != nil {
		return x.DiscreteControlDESE
	}
	return nil
}

func (x *EVSEDiscreteControl) GetCheck() *commonmodule.CheckConditions {
	if x != nil {
		return x.Check
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type EVSEDiscreteControlProfile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	ControlMessageInfo *commonmodule.ControlMessageInfo `protobuf:"bytes,1,opt,name=controlMessageInfo,proto3" json:"controlMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	Evse *EVSE `protobuf:"bytes,2,opt,name=evse,proto3" json:"evse,omitempty"`
	// MISSING DOCUMENTATION!!!
	EvseDiscreteControl *EVSEDiscreteControl `protobuf:"bytes,3,opt,name=evseDiscreteControl,proto3" json:"evseDiscreteControl,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *EVSEDiscreteControlProfile) Reset() {
	*x = EVSEDiscreteControlProfile{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EVSEDiscreteControlProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVSEDiscreteControlProfile) ProtoMessage() {}

func (x *EVSEDiscreteControlProfile) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVSEDiscreteControlProfile.ProtoReflect.Descriptor instead.
func (*EVSEDiscreteControlProfile) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{27}
}

func (x *EVSEDiscreteControlProfile) GetControlMessageInfo() *commonmodule.ControlMessageInfo {
	if x != nil {
		return x.ControlMessageInfo
	}
	return nil
}

func (x *EVSEDiscreteControlProfile) GetEvse() *EVSE {
	if x != nil {
		return x.Evse
	}
	return nil
}

func (x *EVSEDiscreteControlProfile) GetEvseDiscreteControl() *EVSEDiscreteControl {
	if x != nil {
		return x.EvseDiscreteControl
	}
	return nil
}

// Point definition (Point)
type EVSEPointStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// EVSE function parameter
	Function *EVSEFunction `protobuf:"bytes,3,opt,name=function,proto3" json:"function,omitempty"`
	// Grid connect mode
	Mode *commonmodule.ENG_GridConnectModeKind `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"`
	// Ramp rates
	RampRates *commonmodule.RampRate `protobuf:"bytes,7,opt,name=rampRates,proto3" json:"rampRates,omitempty"`
	// Reset device
	Reset_ *commonmodule.ControlSPC `protobuf:"bytes,10,opt,name=reset,proto3" json:"reset,omitempty"`
	// EV state
	State *Optional_ChargingStateKind `protobuf:"bytes,11,opt,name=state,proto3" json:"state,omitempty"`
	// MISSING DOCUMENTATION!!!
	EnterServiceOperation *commonmodule.EnterServiceAPC `protobuf:"bytes,16,opt,name=enterServiceOperation,proto3" json:"enterServiceOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	HzWOperation *commonmodule.HzWAPC `protobuf:"bytes,17,opt,name=hzWOperation,proto3" json:"hzWOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	LimitWOperation *commonmodule.LimitWAPC `protobuf:"bytes,18,opt,name=limitWOperation,proto3" json:"limitWOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	PFOperation *commonmodule.PFSPC `protobuf:"bytes,19,opt,name=pFOperation,proto3" json:"pFOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	TmHzTripOperation *commonmodule.TmHzCSG `protobuf:"bytes,20,opt,name=tmHzTripOperation,proto3" json:"tmHzTripOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	TmVoltTripOperation *commonmodule.TmVoltCSG `protobuf:"bytes,21,opt,name=tmVoltTripOperation,proto3" json:"tmVoltTripOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	VArOperation *commonmodule.VarSPC `protobuf:"bytes,22,opt,name=vArOperation,proto3" json:"vArOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	VoltVarOperation *commonmodule.VoltVarCSG `protobuf:"bytes,23,opt,name=voltVarOperation,proto3" json:"voltVarOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	VoltWOperation *commonmodule.VoltWCSG `protobuf:"bytes,24,opt,name=voltWOperation,proto3" json:"voltWOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	WVarOperation *commonmodule.WVarCSG `protobuf:"bytes,25,opt,name=wVarOperation,proto3" json:"wVarOperation,omitempty"`
	// MISSING DOCUMENTATION!!!
	WOperation *commonmodule.WSPC `protobuf:"bytes,26,opt,name=wOperation,proto3" json:"wOperation,omitempty"`
	// charge an EV when plugged in with no restrictions.
	NoRestricEnable *commonmodule.StatusSPS `protobuf:"bytes,27,opt,name=noRestricEnable,proto3" json:"noRestricEnable,omitempty"`
	// MISSING DOCUMENTATION!!!
	ChargeControlEnable *commonmodule.StatusSPS `protobuf:"bytes,28,opt,name=chargeControlEnable,proto3" json:"chargeControlEnable,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *EVSEPointStatus) Reset() {
	*x = EVSEPointStatus{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EVSEPointStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVSEPointStatus) ProtoMessage() {}

func (x *EVSEPointStatus) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVSEPointStatus.ProtoReflect.Descriptor instead.
func (*EVSEPointStatus) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{28}
}

func (x *EVSEPointStatus) GetFunction() *EVSEFunction {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *EVSEPointStatus) GetMode() *commonmodule.ENG_GridConnectModeKind {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *EVSEPointStatus) GetRampRates() *commonmodule.RampRate {
	if x != nil {
		return x.RampRates
	}
	return nil
}

func (x *EVSEPointStatus) GetReset_() *commonmodule.ControlSPC {
	if x != nil {
		return x.Reset_
	}
	return nil
}

func (x *EVSEPointStatus) GetState() *Optional_ChargingStateKind {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *EVSEPointStatus) GetEnterServiceOperation() *commonmodule.EnterServiceAPC {
	if x != nil {
		return x.EnterServiceOperation
	}
	return nil
}

func (x *EVSEPointStatus) GetHzWOperation() *commonmodule.HzWAPC {
	if x != nil {
		return x.HzWOperation
	}
	return nil
}

func (x *EVSEPointStatus) GetLimitWOperation() *commonmodule.LimitWAPC {
	if x != nil {
		return x.LimitWOperation
	}
	return nil
}

func (x *EVSEPointStatus) GetPFOperation() *commonmodule.PFSPC {
	if x != nil {
		return x.PFOperation
	}
	return nil
}

func (x *EVSEPointStatus) GetTmHzTripOperation() *commonmodule.TmHzCSG {
	if x != nil {
		return x.TmHzTripOperation
	}
	return nil
}

func (x *EVSEPointStatus) GetTmVoltTripOperation() *commonmodule.TmVoltCSG {
	if x != nil {
		return x.TmVoltTripOperation
	}
	return nil
}

func (x *EVSEPointStatus) GetVArOperation() *commonmodule.VarSPC {
	if x != nil {
		return x.VArOperation
	}
	return nil
}

func (x *EVSEPointStatus) GetVoltVarOperation() *commonmodule.VoltVarCSG {
	if x != nil {
		return x.VoltVarOperation
	}
	return nil
}

func (x *EVSEPointStatus) GetVoltWOperation() *commonmodule.VoltWCSG {
	if x != nil {
		return x.VoltWOperation
	}
	return nil
}

func (x *EVSEPointStatus) GetWVarOperation() *commonmodule.WVarCSG {
	if x != nil {
		return x.WVarOperation
	}
	return nil
}

func (x *EVSEPointStatus) GetWOperation() *commonmodule.WSPC {
	if x != nil {
		return x.WOperation
	}
	return nil
}

func (x *EVSEPointStatus) GetNoRestricEnable() *commonmodule.StatusSPS {
	if x != nil {
		return x.NoRestricEnable
	}
	return nil
}

func (x *EVSEPointStatus) GetChargeControlEnable() *commonmodule.StatusSPS {
	if x != nil {
		return x.ChargeControlEnable
	}
	return nil
}

type Optional_EVACConnectionStateKind struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Value         EVACConnectionStateKind `protobuf:"varint,1,opt,name=value,proto3,enum=evsemodule.EVACConnectionStateKind" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Optional_EVACConnectionStateKind) Reset() {
	*x = Optional_EVACConnectionStateKind{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Optional_EVACConnectionStateKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optional_EVACConnectionStateKind) ProtoMessage() {}

func (x *Optional_EVACConnectionStateKind) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optional_EVACConnectionStateKind.ProtoReflect.Descriptor instead.
func (*Optional_EVACConnectionStateKind) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{29}
}

func (x *Optional_EVACConnectionStateKind) GetValue() EVACConnectionStateKind {
	if x != nil {
		return x.Value
	}
	return EVACConnectionStateKind_EVACConnectionStateKind_UNDEFINED
}

// Connection states of electrical vehicles (notation from IEC 61851-1).
type ENS_EVACConnectionStateKind struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Quality of the value in 'stVal'.
	Q *commonmodule.Quality `protobuf:"bytes,1,opt,name=q,proto3" json:"q,omitempty"`
	// Value of the data.
	StVal EVACConnectionStateKind `protobuf:"varint,2,opt,name=stVal,proto3,enum=evsemodule.EVACConnectionStateKind" json:"stVal,omitempty"`
	// Timestamp of the last change or update event of 'stVal' or the last change of value in 'q'.
	T             *commonmodule.Timestamp `protobuf:"bytes,3,opt,name=t,proto3" json:"t,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ENS_EVACConnectionStateKind) Reset() {
	*x = ENS_EVACConnectionStateKind{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ENS_EVACConnectionStateKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ENS_EVACConnectionStateKind) ProtoMessage() {}

func (x *ENS_EVACConnectionStateKind) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ENS_EVACConnectionStateKind.ProtoReflect.Descriptor instead.
func (*ENS_EVACConnectionStateKind) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{30}
}

func (x *ENS_EVACConnectionStateKind) GetQ() *commonmodule.Quality {
	if x != nil {
		return x.Q
	}
	return nil
}

func (x *ENS_EVACConnectionStateKind) GetStVal() EVACConnectionStateKind {
	if x != nil {
		return x.StVal
	}
	return EVACConnectionStateKind_EVACConnectionStateKind_UNDEFINED
}

func (x *ENS_EVACConnectionStateKind) GetT() *commonmodule.Timestamp {
	if x != nil {
		return x.T
	}
	return nil
}

type Optional_EVACPlugStateKind struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         EVACPlugStateKind      `protobuf:"varint,1,opt,name=value,proto3,enum=evsemodule.EVACPlugStateKind" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Optional_EVACPlugStateKind) Reset() {
	*x = Optional_EVACPlugStateKind{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Optional_EVACPlugStateKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optional_EVACPlugStateKind) ProtoMessage() {}

func (x *Optional_EVACPlugStateKind) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optional_EVACPlugStateKind.ProtoReflect.Descriptor instead.
func (*Optional_EVACPlugStateKind) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{31}
}

func (x *Optional_EVACPlugStateKind) GetValue() EVACPlugStateKind {
	if x != nil {
		return x.Value
	}
	return EVACPlugStateKind_EVACPlugStateKind_UNDEFINED
}

// Plug present and coupler lock states (according to IEC 61851-1)
type ENS_EVACPlugStateKind struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Quality of the value in 'stVal'.
	Q *commonmodule.Quality `protobuf:"bytes,1,opt,name=q,proto3" json:"q,omitempty"`
	// Value of the data.
	StVal EVACPlugStateKind `protobuf:"varint,2,opt,name=stVal,proto3,enum=evsemodule.EVACPlugStateKind" json:"stVal,omitempty"`
	// Timestamp of the last change or update event of 'stVal' or the last change of value in 'q'.
	T             *commonmodule.Timestamp `protobuf:"bytes,3,opt,name=t,proto3" json:"t,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ENS_EVACPlugStateKind) Reset() {
	*x = ENS_EVACPlugStateKind{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ENS_EVACPlugStateKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ENS_EVACPlugStateKind) ProtoMessage() {}

func (x *ENS_EVACPlugStateKind) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ENS_EVACPlugStateKind.ProtoReflect.Descriptor instead.
func (*ENS_EVACPlugStateKind) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{32}
}

func (x *ENS_EVACPlugStateKind) GetQ() *commonmodule.Quality {
	if x != nil {
		return x.Q
	}
	return nil
}

func (x *ENS_EVACPlugStateKind) GetStVal() EVACPlugStateKind {
	if x != nil {
		return x.StVal
	}
	return EVACPlugStateKind_EVACPlugStateKind_UNDEFINED
}

func (x *ENS_EVACPlugStateKind) GetT() *commonmodule.Timestamp {
	if x != nil {
		return x.T
	}
	return nil
}

type Optional_EVACCableCapabilityKind struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Value         EVACCableCapabilityKind `protobuf:"varint,1,opt,name=value,proto3,enum=evsemodule.EVACCableCapabilityKind" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Optional_EVACCableCapabilityKind) Reset() {
	*x = Optional_EVACCableCapabilityKind{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Optional_EVACCableCapabilityKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optional_EVACCableCapabilityKind) ProtoMessage() {}

func (x *Optional_EVACCableCapabilityKind) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optional_EVACCableCapabilityKind.ProtoReflect.Descriptor instead.
func (*Optional_EVACCableCapabilityKind) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{33}
}

func (x *Optional_EVACCableCapabilityKind) GetValue() EVACCableCapabilityKind {
	if x != nil {
		return x.Value
	}
	return EVACCableCapabilityKind_EVACCableCapabilityKind_UNDEFINED
}

// <b>EV AC Charging Cable Capability</b>
type ENS_EVACCableCapabilityKind struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Quality of the value in 'stVal'.
	Q *commonmodule.Quality `protobuf:"bytes,1,opt,name=q,proto3" json:"q,omitempty"`
	// Value of the data.
	StVal EVACCableCapabilityKind `protobuf:"varint,2,opt,name=stVal,proto3,enum=evsemodule.EVACCableCapabilityKind" json:"stVal,omitempty"`
	// Timestamp of the last change or update event of 'stVal' or the last change of value in 'q'.
	T             *commonmodule.Timestamp `protobuf:"bytes,3,opt,name=t,proto3" json:"t,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ENS_EVACCableCapabilityKind) Reset() {
	*x = ENS_EVACCableCapabilityKind{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ENS_EVACCableCapabilityKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ENS_EVACCableCapabilityKind) ProtoMessage() {}

func (x *ENS_EVACCableCapabilityKind) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ENS_EVACCableCapabilityKind.ProtoReflect.Descriptor instead.
func (*ENS_EVACCableCapabilityKind) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{34}
}

func (x *ENS_EVACCableCapabilityKind) GetQ() *commonmodule.Quality {
	if x != nil {
		return x.Q
	}
	return nil
}

func (x *ENS_EVACCableCapabilityKind) GetStVal() EVACCableCapabilityKind {
	if x != nil {
		return x.StVal
	}
	return EVACCableCapabilityKind_EVACCableCapabilityKind_UNDEFINED
}

func (x *ENS_EVACCableCapabilityKind) GetT() *commonmodule.Timestamp {
	if x != nil {
		return x.T
	}
	return nil
}

type Optional_EVConnectionChargingKind struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Value         EVConnectionChargingKind `protobuf:"varint,1,opt,name=value,proto3,enum=evsemodule.EVConnectionChargingKind" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Optional_EVConnectionChargingKind) Reset() {
	*x = Optional_EVConnectionChargingKind{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Optional_EVConnectionChargingKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optional_EVConnectionChargingKind) ProtoMessage() {}

func (x *Optional_EVConnectionChargingKind) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optional_EVConnectionChargingKind.ProtoReflect.Descriptor instead.
func (*Optional_EVConnectionChargingKind) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{35}
}

func (x *Optional_EVConnectionChargingKind) GetValue() EVConnectionChargingKind {
	if x != nil {
		return x.Value
	}
	return EVConnectionChargingKind_EVConnectionChargingKind_UNDEFINED
}

// This enumeration lists the connection charging types (according to IEC 61851-1). Used in logical
// node DEEV.
type ENS_EVConnectionChargingKind struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Quality of the value in 'stVal'.
	Q *commonmodule.Quality `protobuf:"bytes,1,opt,name=q,proto3" json:"q,omitempty"`
	// Value of the data.
	StVal EVConnectionChargingKind `protobuf:"varint,2,opt,name=stVal,proto3,enum=evsemodule.EVConnectionChargingKind" json:"stVal,omitempty"`
	// Timestamp of the last change or update event of 'stVal' or the last change of value in 'q'.
	T             *commonmodule.Timestamp `protobuf:"bytes,3,opt,name=t,proto3" json:"t,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ENS_EVConnectionChargingKind) Reset() {
	*x = ENS_EVConnectionChargingKind{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ENS_EVConnectionChargingKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ENS_EVConnectionChargingKind) ProtoMessage() {}

func (x *ENS_EVConnectionChargingKind) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ENS_EVConnectionChargingKind.ProtoReflect.Descriptor instead.
func (*ENS_EVConnectionChargingKind) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{36}
}

func (x *ENS_EVConnectionChargingKind) GetQ() *commonmodule.Quality {
	if x != nil {
		return x.Q
	}
	return nil
}

func (x *ENS_EVConnectionChargingKind) GetStVal() EVConnectionChargingKind {
	if x != nil {
		return x.StVal
	}
	return EVConnectionChargingKind_EVConnectionChargingKind_UNDEFINED
}

func (x *ENS_EVConnectionChargingKind) GetT() *commonmodule.Timestamp {
	if x != nil {
		return x.T
	}
	return nil
}

// Specialized 61850 DEEV class
type EventAndStatusDEEV struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	LogicalNodeForEventAndStatus *commonmodule.LogicalNodeForEventAndStatus `protobuf:"bytes,1,opt,name=logicalNodeForEventAndStatus,proto3" json:"logicalNodeForEventAndStatus,omitempty"`
	// In ISO 15118 compliant implementations, the EVId refers to the EVCCID Identifier as defined in
	// [ISO 15118-2:2014]  Specifies the EV’s identification in a readable format. It contains the MAC
	// address of the EVCC as six hexBinary encoded bytes, i.e. the element shall have a length of six
	// bytes.
	EVId *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=EVId,proto3" json:"EVId,omitempty"`
	// In ISO 15118-2:2014 compliant implementations, EMobility Account Identifier as defined in Annex
	// H.1 of [ISO 15118-2:2014] This element identifies the charging contract.
	EMAId *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=EMAId,proto3" json:"EMAId,omitempty"`
	// Selected connection type according to 61851-1
	ConnTypSel *ENS_EVConnectionChargingKind `protobuf:"bytes,4,opt,name=ConnTypSel,proto3" json:"ConnTypSel,omitempty"`
	// Departure time is used to indicate when the vehicle intends to finish the charging process. A
	// value of zero (0) indicates that the charging process shall be finished as fast as possible.
	DptTm *commonmodule.ClearingTime `protobuf:"bytes,5,opt,name=DptTm,proto3" json:"DptTm,omitempty"`
	// Amount of energy required by the EV until the departure time has been reached or the EV
	// battery's SOC is at 100%. This might include the amount of energy the EV consumes for other vehicle
	// features than solely charging the EV battery.
	WHReq *commonmodule.MV `protobuf:"bytes,6,opt,name=WHReq,proto3" json:"WHReq,omitempty"`
	// Energy available of the EV
	WHAvail *commonmodule.MV `protobuf:"bytes,7,opt,name=WHAvail,proto3" json:"WHAvail,omitempty"`
	// MISSING DOCUMENTATION!!!
	Soc           *commonmodule.MV `protobuf:"bytes,8,opt,name=Soc,proto3" json:"Soc,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventAndStatusDEEV) Reset() {
	*x = EventAndStatusDEEV{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventAndStatusDEEV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventAndStatusDEEV) ProtoMessage() {}

func (x *EventAndStatusDEEV) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventAndStatusDEEV.ProtoReflect.Descriptor instead.
func (*EventAndStatusDEEV) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{37}
}

func (x *EventAndStatusDEEV) GetLogicalNodeForEventAndStatus() *commonmodule.LogicalNodeForEventAndStatus {
	if x != nil {
		return x.LogicalNodeForEventAndStatus
	}
	return nil
}

func (x *EventAndStatusDEEV) GetEVId() *wrapperspb.StringValue {
	if x != nil {
		return x.EVId
	}
	return nil
}

func (x *EventAndStatusDEEV) GetEMAId() *wrapperspb.StringValue {
	if x != nil {
		return x.EMAId
	}
	return nil
}

func (x *EventAndStatusDEEV) GetConnTypSel() *ENS_EVConnectionChargingKind {
	if x != nil {
		return x.ConnTypSel
	}
	return nil
}

func (x *EventAndStatusDEEV) GetDptTm() *commonmodule.ClearingTime {
	if x != nil {
		return x.DptTm
	}
	return nil
}

func (x *EventAndStatusDEEV) GetWHReq() *commonmodule.MV {
	if x != nil {
		return x.WHReq
	}
	return nil
}

func (x *EventAndStatusDEEV) GetWHAvail() *commonmodule.MV {
	if x != nil {
		return x.WHAvail
	}
	return nil
}

func (x *EventAndStatusDEEV) GetSoc() *commonmodule.MV {
	if x != nil {
		return x.Soc
	}
	return nil
}

// Specialized 61850 DEAO class
type EventAndStatusDEAO struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	LogicalNodeForEventAndStatus *commonmodule.LogicalNodeForEventAndStatus `protobuf:"bytes,1,opt,name=logicalNodeForEventAndStatus,proto3" json:"logicalNodeForEventAndStatus,omitempty"`
	// MISSING DOCUMENTATION!!!
	EventAndStatusDEEV *EventAndStatusDEEV `protobuf:"bytes,2,opt,name=eventAndStatusDEEV,proto3" json:"eventAndStatusDEEV,omitempty"`
	// Enable digital communication with the EV
	DigComm *commonmodule.StatusSPS `protobuf:"bytes,3,opt,name=DigComm,proto3" json:"DigComm,omitempty"`
	// Connection state (notation from IEC 61851-1)
	ConnSt *ENS_EVACConnectionStateKind `protobuf:"bytes,4,opt,name=ConnSt,proto3" json:"ConnSt,omitempty"`
	// Plug present and coupler lock state (according to 61851-1)
	PlgStAC *ENS_EVACPlugStateKind `protobuf:"bytes,5,opt,name=PlgStAC,proto3" json:"PlgStAC,omitempty"`
	// Capability of the EV cable assembly (according to 61851-1)
	CabRtgAC      *ENS_EVACCableCapabilityKind `protobuf:"bytes,6,opt,name=CabRtgAC,proto3" json:"CabRtgAC,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventAndStatusDEAO) Reset() {
	*x = EventAndStatusDEAO{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventAndStatusDEAO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventAndStatusDEAO) ProtoMessage() {}

func (x *EventAndStatusDEAO) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventAndStatusDEAO.ProtoReflect.Descriptor instead.
func (*EventAndStatusDEAO) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{38}
}

func (x *EventAndStatusDEAO) GetLogicalNodeForEventAndStatus() *commonmodule.LogicalNodeForEventAndStatus {
	if x != nil {
		return x.LogicalNodeForEventAndStatus
	}
	return nil
}

func (x *EventAndStatusDEAO) GetEventAndStatusDEEV() *EventAndStatusDEEV {
	if x != nil {
		return x.EventAndStatusDEEV
	}
	return nil
}

func (x *EventAndStatusDEAO) GetDigComm() *commonmodule.StatusSPS {
	if x != nil {
		return x.DigComm
	}
	return nil
}

func (x *EventAndStatusDEAO) GetConnSt() *ENS_EVACConnectionStateKind {
	if x != nil {
		return x.ConnSt
	}
	return nil
}

func (x *EventAndStatusDEAO) GetPlgStAC() *ENS_EVACPlugStateKind {
	if x != nil {
		return x.PlgStAC
	}
	return nil
}

func (x *EventAndStatusDEAO) GetCabRtgAC() *ENS_EVACCableCapabilityKind {
	if x != nil {
		return x.CabRtgAC
	}
	return nil
}

type Optional_EVDCCableCapabilityKind struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Value         EVDCCableCapabilityKind `protobuf:"varint,1,opt,name=value,proto3,enum=evsemodule.EVDCCableCapabilityKind" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Optional_EVDCCableCapabilityKind) Reset() {
	*x = Optional_EVDCCableCapabilityKind{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Optional_EVDCCableCapabilityKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optional_EVDCCableCapabilityKind) ProtoMessage() {}

func (x *Optional_EVDCCableCapabilityKind) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optional_EVDCCableCapabilityKind.ProtoReflect.Descriptor instead.
func (*Optional_EVDCCableCapabilityKind) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{39}
}

func (x *Optional_EVDCCableCapabilityKind) GetValue() EVDCCableCapabilityKind {
	if x != nil {
		return x.Value
	}
	return EVDCCableCapabilityKind_EVDCCableCapabilityKind_UNDEFINED
}

// <b>EV DC Charging Cable Capability (EVDCCableCapabilityKind enumeration)</b>
type ENS_EVDCCableCapabilityKind struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Quality of the value in 'stVal'.
	Q *commonmodule.Quality `protobuf:"bytes,1,opt,name=q,proto3" json:"q,omitempty"`
	// Value of the data.
	StVal EVDCCableCapabilityKind `protobuf:"varint,2,opt,name=stVal,proto3,enum=evsemodule.EVDCCableCapabilityKind" json:"stVal,omitempty"`
	// Timestamp of the last change or update event of 'stVal' or the last change of value in 'q'.
	T             *commonmodule.Timestamp `protobuf:"bytes,3,opt,name=t,proto3" json:"t,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ENS_EVDCCableCapabilityKind) Reset() {
	*x = ENS_EVDCCableCapabilityKind{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ENS_EVDCCableCapabilityKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ENS_EVDCCableCapabilityKind) ProtoMessage() {}

func (x *ENS_EVDCCableCapabilityKind) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ENS_EVDCCableCapabilityKind.ProtoReflect.Descriptor instead.
func (*ENS_EVDCCableCapabilityKind) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{40}
}

func (x *ENS_EVDCCableCapabilityKind) GetQ() *commonmodule.Quality {
	if x != nil {
		return x.Q
	}
	return nil
}

func (x *ENS_EVDCCableCapabilityKind) GetStVal() EVDCCableCapabilityKind {
	if x != nil {
		return x.StVal
	}
	return EVDCCableCapabilityKind_EVDCCableCapabilityKind_UNDEFINED
}

func (x *ENS_EVDCCableCapabilityKind) GetT() *commonmodule.Timestamp {
	if x != nil {
		return x.T
	}
	return nil
}

type Optional_EVDCConnectionStateAKind struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Value         EVDCConnectionStateAKind `protobuf:"varint,1,opt,name=value,proto3,enum=evsemodule.EVDCConnectionStateAKind" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Optional_EVDCConnectionStateAKind) Reset() {
	*x = Optional_EVDCConnectionStateAKind{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Optional_EVDCConnectionStateAKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optional_EVDCConnectionStateAKind) ProtoMessage() {}

func (x *Optional_EVDCConnectionStateAKind) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optional_EVDCConnectionStateAKind.ProtoReflect.Descriptor instead.
func (*Optional_EVDCConnectionStateAKind) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{41}
}

func (x *Optional_EVDCConnectionStateAKind) GetValue() EVDCConnectionStateAKind {
	if x != nil {
		return x.Value
	}
	return EVDCConnectionStateAKind_EVDCConnectionStateAKind_UNDEFINED
}

// <b>EV DC Connection State for IEC 61851-23/24 system A</b> <b>(EVDCConnectionStateAKind
// enumeration)</b>
type ENS_EVDCConnectionStateAKind struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Quality of the value in 'stVal'.
	Q *commonmodule.Quality `protobuf:"bytes,1,opt,name=q,proto3" json:"q,omitempty"`
	// Value of the data.
	StVal EVDCConnectionStateAKind `protobuf:"varint,2,opt,name=stVal,proto3,enum=evsemodule.EVDCConnectionStateAKind" json:"stVal,omitempty"`
	// Timestamp of the last change or update event of 'stVal' or the last change of value in 'q'.
	T             *commonmodule.Timestamp `protobuf:"bytes,3,opt,name=t,proto3" json:"t,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ENS_EVDCConnectionStateAKind) Reset() {
	*x = ENS_EVDCConnectionStateAKind{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ENS_EVDCConnectionStateAKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ENS_EVDCConnectionStateAKind) ProtoMessage() {}

func (x *ENS_EVDCConnectionStateAKind) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ENS_EVDCConnectionStateAKind.ProtoReflect.Descriptor instead.
func (*ENS_EVDCConnectionStateAKind) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{42}
}

func (x *ENS_EVDCConnectionStateAKind) GetQ() *commonmodule.Quality {
	if x != nil {
		return x.Q
	}
	return nil
}

func (x *ENS_EVDCConnectionStateAKind) GetStVal() EVDCConnectionStateAKind {
	if x != nil {
		return x.StVal
	}
	return EVDCConnectionStateAKind_EVDCConnectionStateAKind_UNDEFINED
}

func (x *ENS_EVDCConnectionStateAKind) GetT() *commonmodule.Timestamp {
	if x != nil {
		return x.T
	}
	return nil
}

type Optional_EVDCConnectionStateCKind struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Value         EVDCConnectionStateCKind `protobuf:"varint,1,opt,name=value,proto3,enum=evsemodule.EVDCConnectionStateCKind" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Optional_EVDCConnectionStateCKind) Reset() {
	*x = Optional_EVDCConnectionStateCKind{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Optional_EVDCConnectionStateCKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optional_EVDCConnectionStateCKind) ProtoMessage() {}

func (x *Optional_EVDCConnectionStateCKind) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optional_EVDCConnectionStateCKind.ProtoReflect.Descriptor instead.
func (*Optional_EVDCConnectionStateCKind) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{43}
}

func (x *Optional_EVDCConnectionStateCKind) GetValue() EVDCConnectionStateCKind {
	if x != nil {
		return x.Value
	}
	return EVDCConnectionStateCKind_EVDCConnectionStateCKind_UNDEFINED
}

// <b>EV DC Connection State for IEC 61851-23/24 system C</b> <b>(EVDCConnectionStateCKind
// enumeration)</b>
type ENS_EVDCConnectionStateCKind struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Quality of the value in 'stVal'.
	Q *commonmodule.Quality `protobuf:"bytes,1,opt,name=q,proto3" json:"q,omitempty"`
	// Value of the data.
	StVal EVDCConnectionStateCKind `protobuf:"varint,2,opt,name=stVal,proto3,enum=evsemodule.EVDCConnectionStateCKind" json:"stVal,omitempty"`
	// Timestamp of the last change or update event of 'stVal' or the last change of value in 'q'.
	T             *commonmodule.Timestamp `protobuf:"bytes,3,opt,name=t,proto3" json:"t,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ENS_EVDCConnectionStateCKind) Reset() {
	*x = ENS_EVDCConnectionStateCKind{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ENS_EVDCConnectionStateCKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ENS_EVDCConnectionStateCKind) ProtoMessage() {}

func (x *ENS_EVDCConnectionStateCKind) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ENS_EVDCConnectionStateCKind.ProtoReflect.Descriptor instead.
func (*ENS_EVDCConnectionStateCKind) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{44}
}

func (x *ENS_EVDCConnectionStateCKind) GetQ() *commonmodule.Quality {
	if x != nil {
		return x.Q
	}
	return nil
}

func (x *ENS_EVDCConnectionStateCKind) GetStVal() EVDCConnectionStateCKind {
	if x != nil {
		return x.StVal
	}
	return EVDCConnectionStateCKind_EVDCConnectionStateCKind_UNDEFINED
}

func (x *ENS_EVDCConnectionStateCKind) GetT() *commonmodule.Timestamp {
	if x != nil {
		return x.T
	}
	return nil
}

type Optional_EVDCPlugStateKind struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         EVDCPlugStateKind      `protobuf:"varint,1,opt,name=value,proto3,enum=evsemodule.EVDCPlugStateKind" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Optional_EVDCPlugStateKind) Reset() {
	*x = Optional_EVDCPlugStateKind{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Optional_EVDCPlugStateKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optional_EVDCPlugStateKind) ProtoMessage() {}

func (x *Optional_EVDCPlugStateKind) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optional_EVDCPlugStateKind.ProtoReflect.Descriptor instead.
func (*Optional_EVDCPlugStateKind) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{45}
}

func (x *Optional_EVDCPlugStateKind) GetValue() EVDCPlugStateKind {
	if x != nil {
		return x.Value
	}
	return EVDCPlugStateKind_EVDCPlugStateKind_UNDEFINED
}

// <b>EV DC Plug Present and Coupler Lock State (EVDCPlugStateKind</b> <b>enumeration)</b>
type ENS_EVDCPlugStateKind struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Quality of the value in 'stVal'.
	Q *commonmodule.Quality `protobuf:"bytes,1,opt,name=q,proto3" json:"q,omitempty"`
	// Value of the data.
	StVal EVDCPlugStateKind `protobuf:"varint,2,opt,name=stVal,proto3,enum=evsemodule.EVDCPlugStateKind" json:"stVal,omitempty"`
	// Timestamp of the last change or update event of 'stVal' or the last change of value in 'q'.
	T             *commonmodule.Timestamp `protobuf:"bytes,3,opt,name=t,proto3" json:"t,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ENS_EVDCPlugStateKind) Reset() {
	*x = ENS_EVDCPlugStateKind{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ENS_EVDCPlugStateKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ENS_EVDCPlugStateKind) ProtoMessage() {}

func (x *ENS_EVDCPlugStateKind) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ENS_EVDCPlugStateKind.ProtoReflect.Descriptor instead.
func (*ENS_EVDCPlugStateKind) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{46}
}

func (x *ENS_EVDCPlugStateKind) GetQ() *commonmodule.Quality {
	if x != nil {
		return x.Q
	}
	return nil
}

func (x *ENS_EVDCPlugStateKind) GetStVal() EVDCPlugStateKind {
	if x != nil {
		return x.StVal
	}
	return EVDCPlugStateKind_EVDCPlugStateKind_UNDEFINED
}

func (x *ENS_EVDCPlugStateKind) GetT() *commonmodule.Timestamp {
	if x != nil {
		return x.T
	}
	return nil
}

// Specialized 61850 DEDO class
type EventAndStatusDEDO struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	LogicalNodeForEventAndStatus *commonmodule.LogicalNodeForEventAndStatus `protobuf:"bytes,1,opt,name=logicalNodeForEventAndStatus,proto3" json:"logicalNodeForEventAndStatus,omitempty"`
	// MISSING DOCUMENTATION!!!
	EventAndStatusDEEV *EventAndStatusDEEV `protobuf:"bytes,2,opt,name=eventAndStatusDEEV,proto3" json:"eventAndStatusDEEV,omitempty"`
	// Capability of the EV cable assembly (according to 61851-1)
	CabRtgDC *ENS_EVDCCableCapabilityKind `protobuf:"bytes,3,opt,name=CabRtgDC,proto3" json:"CabRtgDC,omitempty"`
	// Connection state for system A connection type (notation from IEC 61851-23/24 system A)
	ConnStA *ENS_EVDCConnectionStateAKind `protobuf:"bytes,4,opt,name=ConnStA,proto3" json:"ConnStA,omitempty"`
	// Connection state for system C connection type (notation from IEC 61851-23/24 system c)
	ConnStC *ENS_EVDCConnectionStateCKind `protobuf:"bytes,5,opt,name=ConnStC,proto3" json:"ConnStC,omitempty"`
	// Plug present and coupler lock state (according to 61851-1)
	PlgStDC       *ENS_EVDCPlugStateKind `protobuf:"bytes,6,opt,name=PlgStDC,proto3" json:"PlgStDC,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventAndStatusDEDO) Reset() {
	*x = EventAndStatusDEDO{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventAndStatusDEDO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventAndStatusDEDO) ProtoMessage() {}

func (x *EventAndStatusDEDO) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventAndStatusDEDO.ProtoReflect.Descriptor instead.
func (*EventAndStatusDEDO) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{47}
}

func (x *EventAndStatusDEDO) GetLogicalNodeForEventAndStatus() *commonmodule.LogicalNodeForEventAndStatus {
	if x != nil {
		return x.LogicalNodeForEventAndStatus
	}
	return nil
}

func (x *EventAndStatusDEDO) GetEventAndStatusDEEV() *EventAndStatusDEEV {
	if x != nil {
		return x.EventAndStatusDEEV
	}
	return nil
}

func (x *EventAndStatusDEDO) GetCabRtgDC() *ENS_EVDCCableCapabilityKind {
	if x != nil {
		return x.CabRtgDC
	}
	return nil
}

func (x *EventAndStatusDEDO) GetConnStA() *ENS_EVDCConnectionStateAKind {
	if x != nil {
		return x.ConnStA
	}
	return nil
}

func (x *EventAndStatusDEDO) GetConnStC() *ENS_EVDCConnectionStateCKind {
	if x != nil {
		return x.ConnStC
	}
	return nil
}

func (x *EventAndStatusDEDO) GetPlgStDC() *ENS_EVDCPlugStateKind {
	if x != nil {
		return x.PlgStDC
	}
	return nil
}

// Specialized 61850 DESE class
type EventAndStatusDESE struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	LogicalNodeForEventAndStatus *commonmodule.LogicalNodeForEventAndStatus `protobuf:"bytes,1,opt,name=logicalNodeForEventAndStatus,proto3" json:"logicalNodeForEventAndStatus,omitempty"`
	// MISSING DOCUMENTATION!!!
	EventAndStatusDEAO *EventAndStatusDEAO `protobuf:"bytes,2,opt,name=eventAndStatusDEAO,proto3" json:"eventAndStatusDEAO,omitempty"`
	// MISSING DOCUMENTATION!!!
	EventAndStatusDEDO *EventAndStatusDEDO `protobuf:"bytes,3,opt,name=eventAndStatusDEDO,proto3" json:"eventAndStatusDEDO,omitempty"`
	// Isolation test fault (i.e. the isolation test executed before charging has failed)
	IsoTestFlt *commonmodule.StatusSPS `protobuf:"bytes,4,opt,name=IsoTestFlt,proto3" json:"IsoTestFlt,omitempty"`
	// Short circuit test fault (i.e. short circuit test before charging has failed)
	ScTestFlt *commonmodule.StatusSPS `protobuf:"bytes,5,opt,name=ScTestFlt,proto3" json:"ScTestFlt,omitempty"`
	// Detection of loss of digital communication
	DigCommLos *commonmodule.StatusSPS `protobuf:"bytes,6,opt,name=DigCommLos,proto3" json:"DigCommLos,omitempty"`
	// Detection of a welding condition
	WldDet *commonmodule.StatusSPS `protobuf:"bytes,7,opt,name=WldDet,proto3" json:"WldDet,omitempty"`
	// MISSING DOCUMENTATION!!!
	PointStatus   *EVSEPointStatus `protobuf:"bytes,8,opt,name=PointStatus,proto3" json:"PointStatus,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventAndStatusDESE) Reset() {
	*x = EventAndStatusDESE{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventAndStatusDESE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventAndStatusDESE) ProtoMessage() {}

func (x *EventAndStatusDESE) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventAndStatusDESE.ProtoReflect.Descriptor instead.
func (*EventAndStatusDESE) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{48}
}

func (x *EventAndStatusDESE) GetLogicalNodeForEventAndStatus() *commonmodule.LogicalNodeForEventAndStatus {
	if x != nil {
		return x.LogicalNodeForEventAndStatus
	}
	return nil
}

func (x *EventAndStatusDESE) GetEventAndStatusDEAO() *EventAndStatusDEAO {
	if x != nil {
		return x.EventAndStatusDEAO
	}
	return nil
}

func (x *EventAndStatusDESE) GetEventAndStatusDEDO() *EventAndStatusDEDO {
	if x != nil {
		return x.EventAndStatusDEDO
	}
	return nil
}

func (x *EventAndStatusDESE) GetIsoTestFlt() *commonmodule.StatusSPS {
	if x != nil {
		return x.IsoTestFlt
	}
	return nil
}

func (x *EventAndStatusDESE) GetScTestFlt() *commonmodule.StatusSPS {
	if x != nil {
		return x.ScTestFlt
	}
	return nil
}

func (x *EventAndStatusDESE) GetDigCommLos() *commonmodule.StatusSPS {
	if x != nil {
		return x.DigCommLos
	}
	return nil
}

func (x *EventAndStatusDESE) GetWldDet() *commonmodule.StatusSPS {
	if x != nil {
		return x.WldDet
	}
	return nil
}

func (x *EventAndStatusDESE) GetPointStatus() *EVSEPointStatus {
	if x != nil {
		return x.PointStatus
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type EVSEEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	EventValue *commonmodule.EventValue `protobuf:"bytes,1,opt,name=eventValue,proto3" json:"eventValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	EventAndStatusDESE []*EventAndStatusDESE `protobuf:"bytes,2,rep,name=eventAndStatusDESE,proto3" json:"eventAndStatusDESE,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *EVSEEvent) Reset() {
	*x = EVSEEvent{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EVSEEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVSEEvent) ProtoMessage() {}

func (x *EVSEEvent) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVSEEvent.ProtoReflect.Descriptor instead.
func (*EVSEEvent) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{49}
}

func (x *EVSEEvent) GetEventValue() *commonmodule.EventValue {
	if x != nil {
		return x.EventValue
	}
	return nil
}

func (x *EVSEEvent) GetEventAndStatusDESE() []*EventAndStatusDESE {
	if x != nil {
		return x.EventAndStatusDESE
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type EVSEEventProfile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	EventMessageInfo *commonmodule.EventMessageInfo `protobuf:"bytes,1,opt,name=eventMessageInfo,proto3" json:"eventMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	Evse *EVSE `protobuf:"bytes,2,opt,name=evse,proto3" json:"evse,omitempty"`
	// MISSING DOCUMENTATION!!!
	EvseEvent     *EVSEEvent `protobuf:"bytes,3,opt,name=evseEvent,proto3" json:"evseEvent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EVSEEventProfile) Reset() {
	*x = EVSEEventProfile{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EVSEEventProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVSEEventProfile) ProtoMessage() {}

func (x *EVSEEventProfile) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVSEEventProfile.ProtoReflect.Descriptor instead.
func (*EVSEEventProfile) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{50}
}

func (x *EVSEEventProfile) GetEventMessageInfo() *commonmodule.EventMessageInfo {
	if x != nil {
		return x.EventMessageInfo
	}
	return nil
}

func (x *EVSEEventProfile) GetEvse() *EVSE {
	if x != nil {
		return x.Evse
	}
	return nil
}

func (x *EVSEEventProfile) GetEvseEvent() *EVSEEvent {
	if x != nil {
		return x.EvseEvent
	}
	return nil
}

// LN: E-Mobility Electric Vehicle Name: DEEV
type ReadingDEEV struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	LogicalNode *commonmodule.LogicalNode `protobuf:"bytes,1,opt,name=logicalNode,proto3" json:"logicalNode,omitempty"`
	// State of charge
	Soc           *commonmodule.MV `protobuf:"bytes,2,opt,name=Soc,proto3" json:"Soc,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadingDEEV) Reset() {
	*x = ReadingDEEV{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadingDEEV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadingDEEV) ProtoMessage() {}

func (x *ReadingDEEV) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadingDEEV.ProtoReflect.Descriptor instead.
func (*ReadingDEEV) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{51}
}

func (x *ReadingDEEV) GetLogicalNode() *commonmodule.LogicalNode {
	if x != nil {
		return x.LogicalNode
	}
	return nil
}

func (x *ReadingDEEV) GetSoc() *commonmodule.MV {
	if x != nil {
		return x.Soc
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type ReadingDEAO struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	LogicalNode *commonmodule.LogicalNode `protobuf:"bytes,1,opt,name=logicalNode,proto3" json:"logicalNode,omitempty"`
	// MISSING DOCUMENTATION!!!
	ReadingDEEV   *ReadingDEEV `protobuf:"bytes,2,opt,name=readingDEEV,proto3" json:"readingDEEV,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadingDEAO) Reset() {
	*x = ReadingDEAO{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadingDEAO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadingDEAO) ProtoMessage() {}

func (x *ReadingDEAO) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadingDEAO.ProtoReflect.Descriptor instead.
func (*ReadingDEAO) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{52}
}

func (x *ReadingDEAO) GetLogicalNode() *commonmodule.LogicalNode {
	if x != nil {
		return x.LogicalNode
	}
	return nil
}

func (x *ReadingDEAO) GetReadingDEEV() *ReadingDEEV {
	if x != nil {
		return x.ReadingDEEV
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type ReadingDEDO struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	LogicalNode *commonmodule.LogicalNode `protobuf:"bytes,1,opt,name=logicalNode,proto3" json:"logicalNode,omitempty"`
	// MISSING DOCUMENTATION!!!
	ReadingDEEV   *ReadingDEEV `protobuf:"bytes,2,opt,name=readingDEEV,proto3" json:"readingDEEV,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadingDEDO) Reset() {
	*x = ReadingDEDO{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadingDEDO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadingDEDO) ProtoMessage() {}

func (x *ReadingDEDO) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadingDEDO.ProtoReflect.Descriptor instead.
func (*ReadingDEDO) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{53}
}

func (x *ReadingDEDO) GetLogicalNode() *commonmodule.LogicalNode {
	if x != nil {
		return x.LogicalNode
	}
	return nil
}

func (x *ReadingDEDO) GetReadingDEEV() *ReadingDEEV {
	if x != nil {
		return x.ReadingDEEV
	}
	return nil
}

// LN: E-Mobility supply equipment Name: DESE
type EVSEReadingDESE struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	LogicalNode *commonmodule.LogicalNode `protobuf:"bytes,1,opt,name=logicalNode,proto3" json:"logicalNode,omitempty"`
	// MISSING DOCUMENTATION!!!
	ReadingDEAO *ReadingDEAO `protobuf:"bytes,2,opt,name=readingDEAO,proto3" json:"readingDEAO,omitempty"`
	// MISSING DOCUMENTATION!!!
	ReadingDEDO *ReadingDEDO `protobuf:"bytes,3,opt,name=readingDEDO,proto3" json:"readingDEDO,omitempty"`
	// Charging voltage  (AllOrNonePerGroup with ChaA)
	ChaV *commonmodule.MV `protobuf:"bytes,4,opt,name=ChaV,proto3" json:"ChaV,omitempty"`
	// Charging current (AllOrNonePerGroup with ChaV). actual current being drawn by the EV from the
	// charger.
	ChaA *commonmodule.MV `protobuf:"bytes,5,opt,name=ChaA,proto3" json:"ChaA,omitempty"`
	// Power Import
	ChaW *commonmodule.MV `protobuf:"bytes,6,opt,name=ChaW,proto3" json:"ChaW,omitempty"`
	// Energy Import
	ChaWh         *commonmodule.MV `protobuf:"bytes,7,opt,name=ChaWh,proto3" json:"ChaWh,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EVSEReadingDESE) Reset() {
	*x = EVSEReadingDESE{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EVSEReadingDESE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVSEReadingDESE) ProtoMessage() {}

func (x *EVSEReadingDESE) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVSEReadingDESE.ProtoReflect.Descriptor instead.
func (*EVSEReadingDESE) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{54}
}

func (x *EVSEReadingDESE) GetLogicalNode() *commonmodule.LogicalNode {
	if x != nil {
		return x.LogicalNode
	}
	return nil
}

func (x *EVSEReadingDESE) GetReadingDEAO() *ReadingDEAO {
	if x != nil {
		return x.ReadingDEAO
	}
	return nil
}

func (x *EVSEReadingDESE) GetReadingDEDO() *ReadingDEDO {
	if x != nil {
		return x.ReadingDEDO
	}
	return nil
}

func (x *EVSEReadingDESE) GetChaV() *commonmodule.MV {
	if x != nil {
		return x.ChaV
	}
	return nil
}

func (x *EVSEReadingDESE) GetChaA() *commonmodule.MV {
	if x != nil {
		return x.ChaA
	}
	return nil
}

func (x *EVSEReadingDESE) GetChaW() *commonmodule.MV {
	if x != nil {
		return x.ChaW
	}
	return nil
}

func (x *EVSEReadingDESE) GetChaWh() *commonmodule.MV {
	if x != nil {
		return x.ChaWh
	}
	return nil
}

// EVSE reading value
type EVSEReading struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	ConductingEquipmentTerminalReading *commonmodule.ConductingEquipmentTerminalReading `protobuf:"bytes,1,opt,name=conductingEquipmentTerminalReading,proto3" json:"conductingEquipmentTerminalReading,omitempty"`
	// MISSING DOCUMENTATION!!!
	ReadingMMXU *commonmodule.ReadingMMXU `protobuf:"bytes,2,opt,name=readingMMXU,proto3" json:"readingMMXU,omitempty"`
	// MISSING DOCUMENTATION!!!
	ReadingMMTR *commonmodule.ReadingMMTR `protobuf:"bytes,3,opt,name=readingMMTR,proto3" json:"readingMMTR,omitempty"`
	// MISSING DOCUMENTATION!!!
	EvseReadingDESE []*EVSEReadingDESE `protobuf:"bytes,4,rep,name=evseReadingDESE,proto3" json:"evseReadingDESE,omitempty"`
	// MISSING DOCUMENTATION!!!
	PhaseMMTN *commonmodule.PhaseMMTN `protobuf:"bytes,5,opt,name=phaseMMTN,proto3" json:"phaseMMTN,omitempty"`
	// MISSING DOCUMENTATION!!!
	ReadingMMDC   *commonmodule.ReadingMMDC `protobuf:"bytes,6,opt,name=readingMMDC,proto3" json:"readingMMDC,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EVSEReading) Reset() {
	*x = EVSEReading{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EVSEReading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVSEReading) ProtoMessage() {}

func (x *EVSEReading) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVSEReading.ProtoReflect.Descriptor instead.
func (*EVSEReading) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{55}
}

func (x *EVSEReading) GetConductingEquipmentTerminalReading() *commonmodule.ConductingEquipmentTerminalReading {
	if x != nil {
		return x.ConductingEquipmentTerminalReading
	}
	return nil
}

func (x *EVSEReading) GetReadingMMXU() *commonmodule.ReadingMMXU {
	if x != nil {
		return x.ReadingMMXU
	}
	return nil
}

func (x *EVSEReading) GetReadingMMTR() *commonmodule.ReadingMMTR {
	if x != nil {
		return x.ReadingMMTR
	}
	return nil
}

func (x *EVSEReading) GetEvseReadingDESE() []*EVSEReadingDESE {
	if x != nil {
		return x.EvseReadingDESE
	}
	return nil
}

func (x *EVSEReading) GetPhaseMMTN() *commonmodule.PhaseMMTN {
	if x != nil {
		return x.PhaseMMTN
	}
	return nil
}

func (x *EVSEReading) GetReadingMMDC() *commonmodule.ReadingMMDC {
	if x != nil {
		return x.ReadingMMDC
	}
	return nil
}

// EVSE Reading Profile
type EVSEReadingProfile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	ReadingMessageInfo *commonmodule.ReadingMessageInfo `protobuf:"bytes,1,opt,name=readingMessageInfo,proto3" json:"readingMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	Evse *EVSE `protobuf:"bytes,2,opt,name=evse,proto3" json:"evse,omitempty"`
	// MISSING DOCUMENTATION!!!
	EvseReading   *EVSEReading `protobuf:"bytes,3,opt,name=evseReading,proto3" json:"evseReading,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EVSEReadingProfile) Reset() {
	*x = EVSEReadingProfile{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EVSEReadingProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVSEReadingProfile) ProtoMessage() {}

func (x *EVSEReadingProfile) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVSEReadingProfile.ProtoReflect.Descriptor instead.
func (*EVSEReadingProfile) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{56}
}

func (x *EVSEReadingProfile) GetReadingMessageInfo() *commonmodule.ReadingMessageInfo {
	if x != nil {
		return x.ReadingMessageInfo
	}
	return nil
}

func (x *EVSEReadingProfile) GetEvse() *EVSE {
	if x != nil {
		return x.Evse
	}
	return nil
}

func (x *EVSEReadingProfile) GetEvseReading() *EVSEReading {
	if x != nil {
		return x.EvseReading
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type EVSEStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	StatusValue *commonmodule.StatusValue `protobuf:"bytes,1,opt,name=statusValue,proto3" json:"statusValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	EventAndStatusDESE []*EventAndStatusDESE `protobuf:"bytes,2,rep,name=eventAndStatusDESE,proto3" json:"eventAndStatusDESE,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *EVSEStatus) Reset() {
	*x = EVSEStatus{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EVSEStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVSEStatus) ProtoMessage() {}

func (x *EVSEStatus) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVSEStatus.ProtoReflect.Descriptor instead.
func (*EVSEStatus) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{57}
}

func (x *EVSEStatus) GetStatusValue() *commonmodule.StatusValue {
	if x != nil {
		return x.StatusValue
	}
	return nil
}

func (x *EVSEStatus) GetEventAndStatusDESE() []*EventAndStatusDESE {
	if x != nil {
		return x.EventAndStatusDESE
	}
	return nil
}

// MISSING DOCUMENTATION!!!
type EVSEStatusProfile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UML inherited base object
	StatusMessageInfo *commonmodule.StatusMessageInfo `protobuf:"bytes,1,opt,name=statusMessageInfo,proto3" json:"statusMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	Evse *EVSE `protobuf:"bytes,2,opt,name=evse,proto3" json:"evse,omitempty"`
	// MISSING DOCUMENTATION!!!
	EvseStatus    *EVSEStatus `protobuf:"bytes,3,opt,name=evseStatus,proto3" json:"evseStatus,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EVSEStatusProfile) Reset() {
	*x = EVSEStatusProfile{}
	mi := &file_evsemodule_evsemodule_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EVSEStatusProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVSEStatusProfile) ProtoMessage() {}

func (x *EVSEStatusProfile) ProtoReflect() protoreflect.Message {
	mi := &file_evsemodule_evsemodule_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVSEStatusProfile.ProtoReflect.Descriptor instead.
func (*EVSEStatusProfile) Descriptor() ([]byte, []int) {
	return file_evsemodule_evsemodule_proto_rawDescGZIP(), []int{58}
}

func (x *EVSEStatusProfile) GetStatusMessageInfo() *commonmodule.StatusMessageInfo {
	if x != nil {
		return x.StatusMessageInfo
	}
	return nil
}

func (x *EVSEStatusProfile) GetEvse() *EVSE {
	if x != nil {
		return x.Evse
	}
	return nil
}

func (x *EVSEStatusProfile) GetEvseStatus() *EVSEStatus {
	if x != nil {
		return x.EvseStatus
	}
	return nil
}

var File_evsemodule_evsemodule_proto protoreflect.FileDescriptor

var file_evsemodule_evsemodule_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x65, 0x76, 0x73,
	0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x65,
	0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x1a, 0x09, 0x75, 0x6d, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc8, 0x01, 0x0a, 0x1b, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x45, 0x41, 0x4f, 0x12, 0x41, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x41,
	0x52, 0x74, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x49, 0x4e, 0x47, 0x52, 0x07, 0x43, 0x68, 0x61, 0x41, 0x52, 0x74, 0x67, 0x12, 0x32, 0x0a, 0x07,
	0x43, 0x68, 0x61, 0x41, 0x4d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x49, 0x4e, 0x47, 0x52, 0x07, 0x43, 0x68, 0x61, 0x41, 0x4d, 0x61, 0x78,
	0x22, 0x60, 0x0a, 0x1b, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x45, 0x44, 0x4f, 0x12,
	0x41, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f,
	0x64, 0x65, 0x22, 0xff, 0x03, 0x0a, 0x1b, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x45,
	0x53, 0x45, 0x12, 0x77, 0x0a, 0x1d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x1d, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x1b, 0x63,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x45, 0x41, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x45, 0x41, 0x4f, 0x52, 0x1b, 0x63, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x45, 0x41, 0x30, 0x12, 0x69, 0x0a, 0x1b, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x45, 0x44, 0x4f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x76,
	0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x45, 0x44, 0x4f, 0x52, 0x1b, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x45, 0x44,
	0x4f, 0x12, 0x2f, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x50, 0x77, 0x72, 0x52, 0x74, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53, 0x47, 0x52, 0x09, 0x43, 0x68, 0x61, 0x50, 0x77, 0x72, 0x52,
	0x74, 0x67, 0x12, 0x2f, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x50, 0x77, 0x72, 0x54, 0x67, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53, 0x47, 0x52, 0x09, 0x43, 0x68, 0x61, 0x50, 0x77, 0x72,
	0x54, 0x67, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x50, 0x77, 0x72, 0x4c, 0x69, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53, 0x47, 0x52, 0x09, 0x43, 0x68, 0x61, 0x50, 0x77,
	0x72, 0x4c, 0x69, 0x6d, 0x22, 0xd5, 0x01, 0x0a, 0x16, 0x45, 0x56, 0x53, 0x45, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12,
	0x4a, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0e, 0x6e, 0x61, 0x6d,
	0x65, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x6f, 0x0a, 0x1b, 0x63,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x45, 0x53, 0x45, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x45, 0x53, 0x45, 0x42, 0x04, 0x90, 0xb5, 0x18, 0x00, 0x52,
	0x1b, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x45, 0x53, 0x45, 0x22, 0x61, 0x0a, 0x04,
	0x45, 0x56, 0x53, 0x45, 0x12, 0x59, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x9c, 0x02, 0x0a, 0x1d, 0x45, 0x56, 0x53, 0x45, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x5f, 0x0a, 0x15, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x15, 0x63, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x04, 0x65, 0x76, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x56,
	0x53, 0x45, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x65, 0x76,
	0x73, 0x65, 0x12, 0x64, 0x0a, 0x16, 0x65, 0x76, 0x73, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x45, 0x56, 0x53, 0x45, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01,
	0x52, 0x16, 0x65, 0x76, 0x73, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x3a, 0x04, 0xc0, 0xf3, 0x18, 0x01, 0x22, 0xf2,
	0x01, 0x0a, 0x15, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x5a, 0x43, 0x41, 0x42, 0x12, 0x41, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x41,
	0x52, 0x74, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53, 0x47, 0x42, 0x08, 0x88, 0xb5,
	0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x41, 0x52, 0x74, 0x67, 0x12, 0x2f, 0x0a, 0x09,
	0x4f, 0x76, 0x6c, 0x4d, 0x61, 0x78, 0x50, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41,
	0x53, 0x47, 0x52, 0x09, 0x4f, 0x76, 0x6c, 0x4d, 0x61, 0x78, 0x50, 0x63, 0x74, 0x12, 0x34, 0x0a,
	0x08, 0x4f, 0x76, 0x6c, 0x4d, 0x61, 0x78, 0x54, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x4e, 0x47, 0x52, 0x08, 0x4f, 0x76, 0x6c, 0x4d, 0x61,
	0x78, 0x54, 0x6d, 0x22, 0xc2, 0x01, 0x0a, 0x15, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x44, 0x45, 0x41, 0x4f, 0x12, 0x41, 0x0a,
	0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x01, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x32, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x41, 0x52, 0x74, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x4e, 0x47, 0x52, 0x07, 0x43, 0x68, 0x61,
	0x41, 0x52, 0x74, 0x67, 0x12, 0x32, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x41, 0x4d, 0x61, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x4e, 0x47, 0x52,
	0x07, 0x43, 0x68, 0x61, 0x41, 0x4d, 0x61, 0x78, 0x22, 0x5a, 0x0a, 0x15, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x44, 0x45, 0x44,
	0x4f, 0x12, 0x41, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64,
	0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x4e, 0x6f, 0x64, 0x65, 0x22, 0x9f, 0x05, 0x0a, 0x15, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x44, 0x45, 0x53, 0x45, 0x12, 0x65,
	0x0a, 0x17, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x17, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x5d, 0x0a, 0x15, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x44, 0x45, 0x41, 0x4f, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x44, 0x45, 0x41, 0x4f, 0x42, 0x04, 0x90, 0xb5, 0x18, 0x00, 0x52, 0x15, 0x63,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x44, 0x45, 0x41, 0x4f, 0x12, 0x5d, 0x0a, 0x15, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x44, 0x45, 0x44, 0x4f, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x44, 0x45, 0x44, 0x4f, 0x42, 0x04, 0x90, 0xb5, 0x18, 0x00, 0x52, 0x15, 0x63, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x44,
	0x45, 0x44, 0x4f, 0x12, 0x2f, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x50, 0x77, 0x72, 0x52, 0x74, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53, 0x47, 0x52, 0x09, 0x43, 0x68, 0x61, 0x50, 0x77,
	0x72, 0x52, 0x74, 0x67, 0x12, 0x2f, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x50, 0x77, 0x72, 0x54, 0x67,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53, 0x47, 0x52, 0x09, 0x43, 0x68, 0x61, 0x50,
	0x77, 0x72, 0x54, 0x67, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x50, 0x77, 0x72, 0x4c,
	0x69, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53, 0x47, 0x52, 0x09, 0x43, 0x68, 0x61,
	0x50, 0x77, 0x72, 0x4c, 0x69, 0x6d, 0x12, 0x2f, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x54, 0x79,
	0x70, 0x44, 0x43, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x50, 0x47, 0x52, 0x09, 0x43, 0x6f,
	0x6e, 0x6e, 0x54, 0x79, 0x70, 0x44, 0x43, 0x12, 0x33, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x54,
	0x79, 0x70, 0x50, 0x68, 0x73, 0x31, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x50, 0x47, 0x52,
	0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x54, 0x79, 0x70, 0x50, 0x68, 0x73, 0x31, 0x12, 0x33, 0x0a, 0x0b,
	0x43, 0x6f, 0x6e, 0x6e, 0x54, 0x79, 0x70, 0x50, 0x68, 0x73, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x53, 0x50, 0x47, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x54, 0x79, 0x70, 0x50, 0x68, 0x73,
	0x32, 0x12, 0x33, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x54, 0x79, 0x70, 0x50, 0x68, 0x73, 0x33,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x50, 0x47, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x54,
	0x79, 0x70, 0x50, 0x68, 0x73, 0x33, 0x22, 0x8f, 0x03, 0x0a, 0x0e, 0x45, 0x56, 0x53, 0x45, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x0e, 0x6e, 0x61, 0x6d,
	0x65, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5d, 0x0a, 0x15, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x44, 0x45, 0x53, 0x45, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x44, 0x45, 0x53, 0x45, 0x42, 0x04, 0x90, 0xb5, 0x18, 0x00, 0x52, 0x15, 0x63,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x44, 0x45, 0x53, 0x45, 0x12, 0x6f, 0x0a, 0x1b, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x45, 0x53, 0x45, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x76, 0x73, 0x65,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x45,
	0x53, 0x45, 0x42, 0x04, 0x90, 0xb5, 0x18, 0x00, 0x52, 0x1b, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x45, 0x53, 0x45, 0x12, 0x61, 0x0a, 0x15, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5a, 0x43, 0x41, 0x42, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x5a, 0x43, 0x41, 0x42, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18,
	0x01, 0x52, 0x15, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x5a, 0x43, 0x41, 0x42, 0x22, 0xfc, 0x01, 0x0a, 0x15, 0x45, 0x56, 0x53,
	0x45, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x5f, 0x0a, 0x15, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x15, 0x63, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x04, 0x65, 0x76, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45,
	0x56, 0x53, 0x45, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x65,
	0x76, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0e, 0x65, 0x76, 0x73, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x76,
	0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x56, 0x53, 0x45, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18,
	0x01, 0x52, 0x0e, 0x65, 0x76, 0x73, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x3a, 0x04, 0xc0, 0xf3, 0x18, 0x01, 0x22, 0xd7, 0x03, 0x0a, 0x0c, 0x45, 0x56, 0x53, 0x45,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0f, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x46, 0x69, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x46, 0x69, 0x72, 0x6d, 0x69, 0x6e, 0x67,
	0x52, 0x0f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x46, 0x69, 0x72, 0x6d, 0x69, 0x6e,
	0x67, 0x12, 0x53, 0x0a, 0x13, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x46, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x13, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x67, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x70, 0x65, 0x61, 0x6b, 0x53, 0x68,
	0x61, 0x76, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x65, 0x61, 0x6b, 0x53,
	0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x70, 0x65, 0x61, 0x6b, 0x53, 0x68, 0x61, 0x76,
	0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x08, 0x73, 0x6f, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x6f, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x08, 0x73,
	0x6f, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x6f, 0x63, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x4f,
	0x43, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x73, 0x6f, 0x63,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x76, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x44, 0x72, 0x6f, 0x6f, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x44, 0x72, 0x6f, 0x6f, 0x70, 0x52, 0x0c, 0x76, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x44, 0x72, 0x6f, 0x6f, 0x70, 0x12, 0x35, 0x0a, 0x09, 0x76, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x50, 0x49, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x56, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x50, 0x49, 0x52, 0x09, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x50,
	0x49, 0x22, 0x51, 0x0a, 0x1a, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x9a, 0x08, 0x0a, 0x09, 0x45, 0x56, 0x53, 0x45, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x34, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x45, 0x56, 0x53, 0x45, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x4e, 0x47, 0x5f, 0x47, 0x72, 0x69, 0x64, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x61, 0x6d, 0x70, 0x52, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x61, 0x6d, 0x70, 0x52, 0x61, 0x74, 0x65, 0x52, 0x09,
	0x72, 0x61, 0x6d, 0x70, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53,
	0x50, 0x43, 0x52, 0x05, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x15, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x50, 0x43, 0x52, 0x15, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0c,
	0x68, 0x7a, 0x57, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x48, 0x7a, 0x57, 0x41, 0x50, 0x43, 0x52, 0x0c, 0x68, 0x7a, 0x57, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x57,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x57, 0x41, 0x50, 0x43, 0x52, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x57,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0b, 0x70, 0x46, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x46,
	0x53, 0x50, 0x43, 0x52, 0x0b, 0x70, 0x46, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x43, 0x0a, 0x11, 0x74, 0x6d, 0x48, 0x7a, 0x54, 0x72, 0x69, 0x70, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x6d, 0x48, 0x7a, 0x43,
	0x53, 0x47, 0x52, 0x11, 0x74, 0x6d, 0x48, 0x7a, 0x54, 0x72, 0x69, 0x70, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x13, 0x74, 0x6d, 0x56, 0x6f, 0x6c, 0x74, 0x54,
	0x72, 0x69, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x54, 0x6d, 0x56, 0x6f, 0x6c, 0x74, 0x43, 0x53, 0x47, 0x52, 0x13, 0x74, 0x6d, 0x56,
	0x6f, 0x6c, 0x74, 0x54, 0x72, 0x69, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x38, 0x0a, 0x0c, 0x76, 0x41, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x53, 0x50, 0x43, 0x52, 0x0c, 0x76, 0x41,
	0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x10, 0x76, 0x6f,
	0x6c, 0x74, 0x56, 0x61, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x56, 0x6f, 0x6c, 0x74, 0x56, 0x61, 0x72, 0x43, 0x53, 0x47, 0x52, 0x10,
	0x76, 0x6f, 0x6c, 0x74, 0x56, 0x61, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3e, 0x0a, 0x0e, 0x76, 0x6f, 0x6c, 0x74, 0x57, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x56, 0x6f, 0x6c, 0x74, 0x57, 0x43, 0x53, 0x47,
	0x52, 0x0e, 0x76, 0x6f, 0x6c, 0x74, 0x57, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3b, 0x0a, 0x0d, 0x77, 0x56, 0x61, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x57, 0x56, 0x61, 0x72, 0x43, 0x53, 0x47, 0x52, 0x0d,
	0x77, 0x56, 0x61, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a,
	0x0a, 0x77, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x57, 0x53, 0x50, 0x43, 0x52, 0x0a, 0x77, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08,
	0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x4a,
	0x04, 0x08, 0x0c, 0x10, 0x0d, 0x4a, 0x04, 0x08, 0x0e, 0x10, 0x0f, 0x4a, 0x04, 0x08, 0x0f, 0x10,
	0x10, 0x22, 0xfd, 0x01, 0x0a, 0x0e, 0x45, 0x56, 0x53, 0x45, 0x43, 0x75, 0x72, 0x76, 0x65, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x45, 0x56, 0x53, 0x45, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x08, 0x88, 0xb5,
	0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12,
	0x46, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90,
	0xb5, 0x18, 0x01, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x47, 0x0a, 0x07, 0x45, 0x56, 0x53, 0x45, 0x43, 0x53, 0x47, 0x12, 0x3c, 0x0a, 0x06,
	0x63, 0x72, 0x76, 0x50, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65,
	0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x56, 0x53, 0x45, 0x43, 0x75,
	0x72, 0x76, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5,
	0x18, 0x01, 0x52, 0x06, 0x63, 0x72, 0x76, 0x50, 0x74, 0x73, 0x22, 0x52, 0x0a, 0x17, 0x44, 0x45,
	0x53, 0x45, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x46, 0x53, 0x43, 0x48, 0x12, 0x37, 0x0a, 0x07, 0x56, 0x61, 0x6c, 0x44, 0x43, 0x53, 0x47,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x45, 0x56, 0x53, 0x45, 0x43, 0x53, 0x47, 0x42, 0x08, 0x88, 0xb5, 0x18,
	0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x07, 0x56, 0x61, 0x6c, 0x44, 0x43, 0x53, 0x47, 0x22, 0x58,
	0x0a, 0x17, 0x44, 0x45, 0x45, 0x56, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x53, 0x43, 0x48, 0x12, 0x3d, 0x0a, 0x07, 0x56, 0x61, 0x6c,
	0x41, 0x43, 0x53, 0x47, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x43, 0x53, 0x47, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52,
	0x07, 0x56, 0x61, 0x6c, 0x41, 0x43, 0x53, 0x47, 0x22, 0xcd, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x44, 0x45, 0x45, 0x56, 0x12, 0x5f, 0x0a, 0x15, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f,
	0x64, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x01, 0x52, 0x15, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46,
	0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x5d, 0x0a, 0x17, 0x64, 0x65, 0x65,
	0x76, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x46, 0x53, 0x43, 0x48, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x76, 0x73,
	0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x44, 0x45, 0x45, 0x56, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x53, 0x43, 0x48, 0x52,
	0x17, 0x64, 0x65, 0x65, 0x76, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x46, 0x53, 0x43, 0x48, 0x22, 0xa9, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x44, 0x45, 0x41, 0x4f, 0x12, 0x5f, 0x0a, 0x15, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f,
	0x64, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x01, 0x52, 0x15, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46,
	0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x39, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x44, 0x45, 0x45, 0x56, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x44, 0x45, 0x45, 0x56, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x44, 0x45, 0x45, 0x56, 0x22, 0xa9, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x44, 0x45, 0x44, 0x4f, 0x12, 0x5f, 0x0a, 0x15, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e,
	0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x15,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x39, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x44, 0x45, 0x45, 0x56, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x76, 0x73,
	0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44,
	0x45, 0x45, 0x56, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x45, 0x45, 0x56,
	0x22, 0xdc, 0x02, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x45, 0x53, 0x45,
	0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x53, 0x43, 0x43, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x53, 0x43, 0x43,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46,
	0x53, 0x43, 0x43, 0x12, 0x5d, 0x0a, 0x17, 0x64, 0x65, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x53, 0x43, 0x48, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x44, 0x45, 0x53, 0x45, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x53, 0x43, 0x48, 0x52, 0x17, 0x64, 0x65, 0x73, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x53,
	0x43, 0x48, 0x12, 0x39, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x45, 0x41,
	0x4f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x45, 0x41, 0x4f,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x45, 0x41, 0x4f, 0x12, 0x39, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x45, 0x45, 0x4f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x45, 0x44, 0x4f, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x44, 0x45, 0x45, 0x4f, 0x12, 0x35, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x41,
	0x4d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x43, 0x68, 0x61, 0x41, 0x4d, 0x61, 0x78, 0x22,
	0xc9, 0x01, 0x0a, 0x0b, 0x45, 0x56, 0x53, 0x45, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12,
	0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x44, 0x45, 0x53, 0x45, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x76, 0x73,
	0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44,
	0x45, 0x53, 0x45, 0x42, 0x04, 0x90, 0xb5, 0x18, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x44, 0x45, 0x53, 0x45, 0x12, 0x33, 0x0a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x22, 0xe7, 0x01, 0x0a, 0x12,
	0x45, 0x56, 0x53, 0x45, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x56, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x04, 0x65, 0x76,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x56, 0x53, 0x45, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01,
	0x90, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x65, 0x76, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x65, 0x76,
	0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x56, 0x53,
	0x45, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5,
	0x18, 0x01, 0x52, 0x0b, 0x65, 0x76, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x3a,
	0x04, 0xc0, 0xf3, 0x18, 0x01, 0x22, 0xa7, 0x01, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x45, 0x53, 0x45, 0x12, 0x5f, 0x0a,
	0x15, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x15, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x2f,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x56, 0x53,
	0x45, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x22,
	0xe9, 0x01, 0x0a, 0x13, 0x45, 0x56, 0x53, 0x45, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x57, 0x0a,
	0x13, 0x64, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x44, 0x45, 0x53, 0x45, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x76, 0x73,
	0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x45, 0x53, 0x45, 0x42, 0x04, 0x90, 0xb5, 0x18,
	0x00, 0x52, 0x13, 0x64, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x44, 0x45, 0x53, 0x45, 0x12, 0x33, 0x0a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x22, 0x87, 0x02, 0x0a, 0x1a,
	0x45, 0x56, 0x53, 0x45, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x56, 0x0a, 0x12, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x12,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x04, 0x65, 0x76, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x56,
	0x53, 0x45, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x65, 0x76,
	0x73, 0x65, 0x12, 0x5b, 0x0a, 0x13, 0x65, 0x76, 0x73, 0x65, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x56, 0x53,
	0x45, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x13, 0x65, 0x76, 0x73, 0x65,
	0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x3a,
	0x04, 0xc0, 0xf3, 0x18, 0x01, 0x22, 0xae, 0x09, 0x0a, 0x0f, 0x45, 0x56, 0x53, 0x45, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x76,
	0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x56, 0x53, 0x45, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x39, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x4e, 0x47,
	0x5f, 0x47, 0x72, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x61,
	0x6d, 0x70, 0x52, 0x61, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x61, 0x6d,
	0x70, 0x52, 0x61, 0x74, 0x65, 0x52, 0x09, 0x72, 0x61, 0x6d, 0x70, 0x52, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x2e, 0x0a, 0x05, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x50, 0x43, 0x52, 0x05, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x12, 0x3c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x53,
	0x0a, 0x15, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x50, 0x43, 0x52, 0x15, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0c, 0x68, 0x7a, 0x57, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x48, 0x7a, 0x57, 0x41, 0x50, 0x43, 0x52,
	0x0c, 0x68, 0x7a, 0x57, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a,
	0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x57, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x57, 0x41, 0x50, 0x43, 0x52,
	0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x57, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x35, 0x0a, 0x0b, 0x70, 0x46, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x46, 0x53, 0x50, 0x43, 0x52, 0x0b, 0x70, 0x46, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x11, 0x74, 0x6d, 0x48, 0x7a, 0x54,
	0x72, 0x69, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x54, 0x6d, 0x48, 0x7a, 0x43, 0x53, 0x47, 0x52, 0x11, 0x74, 0x6d, 0x48, 0x7a, 0x54,
	0x72, 0x69, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x13,
	0x74, 0x6d, 0x56, 0x6f, 0x6c, 0x74, 0x54, 0x72, 0x69, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x6d, 0x56, 0x6f, 0x6c, 0x74, 0x43,
	0x53, 0x47, 0x52, 0x13, 0x74, 0x6d, 0x56, 0x6f, 0x6c, 0x74, 0x54, 0x72, 0x69, 0x70, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0c, 0x76, 0x41, 0x72, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x56, 0x61, 0x72,
	0x53, 0x50, 0x43, 0x52, 0x0c, 0x76, 0x41, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x44, 0x0a, 0x10, 0x76, 0x6f, 0x6c, 0x74, 0x56, 0x61, 0x72, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x56, 0x6f, 0x6c, 0x74, 0x56,
	0x61, 0x72, 0x43, 0x53, 0x47, 0x52, 0x10, 0x76, 0x6f, 0x6c, 0x74, 0x56, 0x61, 0x72, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0e, 0x76, 0x6f, 0x6c, 0x74, 0x57,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x56,
	0x6f, 0x6c, 0x74, 0x57, 0x43, 0x53, 0x47, 0x52, 0x0e, 0x76, 0x6f, 0x6c, 0x74, 0x57, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0d, 0x77, 0x56, 0x61, 0x72, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x57, 0x56,
	0x61, 0x72, 0x43, 0x53, 0x47, 0x52, 0x0d, 0x77, 0x56, 0x61, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x0a, 0x77, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x57, 0x53, 0x50, 0x43, 0x52, 0x0a, 0x77, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0f, 0x6e, 0x6f, 0x52, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x0f, 0x6e, 0x6f, 0x52, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x13, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50,
	0x53, 0x52, 0x13, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x05,
	0x10, 0x06, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x4a, 0x04,
	0x08, 0x09, 0x10, 0x0a, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x0d, 0x4a, 0x04, 0x08, 0x0e, 0x10, 0x0f,
	0x4a, 0x04, 0x08, 0x0f, 0x10, 0x10, 0x22, 0x5d, 0x0a, 0x20, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x45, 0x56, 0x41, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x65, 0x76, 0x73, 0x65,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x56, 0x41, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x1b, 0x45, 0x4e, 0x53, 0x5f, 0x45, 0x56,
	0x41, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x01, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x01, 0x71, 0x12, 0x43, 0x0a, 0x05, 0x73, 0x74,
	0x56, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x65, 0x76, 0x73, 0x65,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x56, 0x41, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x08,
	0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x05, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x12,
	0x25, 0x0a, 0x01, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x01, 0x74, 0x22, 0x51, 0x0a, 0x1a, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x45, 0x56, 0x41, 0x43, 0x50, 0x6c, 0x75, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x45, 0x56, 0x41, 0x43, 0x50, 0x6c, 0x75, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69,
	0x6e, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x15, 0x45, 0x4e,
	0x53, 0x5f, 0x45, 0x56, 0x41, 0x43, 0x50, 0x6c, 0x75, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x01, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x01, 0x71, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x74, 0x56, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x56, 0x41, 0x43, 0x50, 0x6c, 0x75, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01,
	0x52, 0x05, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x01, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x01, 0x74, 0x22, 0x5d,
	0x0a, 0x20, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x45, 0x56, 0x41, 0x43, 0x43,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45,
	0x56, 0x41, 0x43, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xae, 0x01,
	0x0a, 0x1b, 0x45, 0x4e, 0x53, 0x5f, 0x45, 0x56, 0x41, 0x43, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x23, 0x0a,
	0x01, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x01, 0x71, 0x12, 0x43, 0x0a, 0x05, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45,
	0x56, 0x41, 0x43, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01,
	0x52, 0x05, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x01, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x01, 0x74, 0x22, 0x5f,
	0x0a, 0x21, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x45, 0x56, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x45, 0x56, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x67, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xb0, 0x01, 0x0a, 0x1c, 0x45, 0x4e, 0x53, 0x5f, 0x45, 0x56, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x23, 0x0a, 0x01, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x01, 0x71, 0x12, 0x44, 0x0a, 0x05, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x45, 0x56, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01,
	0x90, 0xb5, 0x18, 0x01, 0x52, 0x05, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x01, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x01, 0x74, 0x22, 0xfa, 0x03, 0x0a, 0x12, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x45, 0x45, 0x56, 0x12, 0x74, 0x0a, 0x1c, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x01, 0x52, 0x1c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x36, 0x0a, 0x04, 0x45, 0x56, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x04, 0xa0, 0xb5, 0x18,
	0x01, 0x52, 0x04, 0x45, 0x56, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x45, 0x4d, 0x41, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x04, 0xa0, 0xb5, 0x18, 0x01, 0x52, 0x05, 0x45, 0x4d, 0x41, 0x49,
	0x64, 0x12, 0x52, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x54, 0x79, 0x70, 0x53, 0x65, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x45, 0x4e, 0x53, 0x5f, 0x45, 0x56, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x4b, 0x69, 0x6e, 0x64, 0x42,
	0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x54,
	0x79, 0x70, 0x53, 0x65, 0x6c, 0x12, 0x30, 0x0a, 0x05, 0x44, 0x70, 0x74, 0x54, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x05, 0x44, 0x70, 0x74, 0x54, 0x6d, 0x12, 0x26, 0x0a, 0x05, 0x57, 0x48, 0x52, 0x65, 0x71,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4d, 0x56, 0x52, 0x05, 0x57, 0x48, 0x52, 0x65, 0x71, 0x12,
	0x2a, 0x0a, 0x07, 0x57, 0x48, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x4d, 0x56, 0x52, 0x07, 0x57, 0x48, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x12, 0x22, 0x0a, 0x03, 0x53,
	0x6f, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4d, 0x56, 0x52, 0x03, 0x53, 0x6f, 0x63, 0x22,
	0xda, 0x03, 0x0a, 0x12, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x44, 0x45, 0x41, 0x4f, 0x12, 0x74, 0x0a, 0x1c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x1c,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4e, 0x0a, 0x12,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x45,
	0x45, 0x56, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x44, 0x45, 0x45, 0x56, 0x52, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x41,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x45, 0x45, 0x56, 0x12, 0x31, 0x0a, 0x07,
	0x44, 0x69, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x07, 0x44, 0x69, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x12,
	0x49, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x6e, 0x53, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x4e, 0x53,
	0x5f, 0x45, 0x56, 0x41, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5,
	0x18, 0x01, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x6e, 0x53, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x50, 0x6c,
	0x67, 0x53, 0x74, 0x41, 0x43, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x76,
	0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x4e, 0x53, 0x5f, 0x45, 0x56, 0x41,
	0x43, 0x50, 0x6c, 0x75, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x07,
	0x50, 0x6c, 0x67, 0x53, 0x74, 0x41, 0x43, 0x12, 0x43, 0x0a, 0x08, 0x43, 0x61, 0x62, 0x52, 0x74,
	0x67, 0x41, 0x43, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x76, 0x73, 0x65,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x4e, 0x53, 0x5f, 0x45, 0x56, 0x41, 0x43, 0x43,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4b, 0x69,
	0x6e, 0x64, 0x52, 0x08, 0x43, 0x61, 0x62, 0x52, 0x74, 0x67, 0x41, 0x43, 0x22, 0x5d, 0x0a, 0x20,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x45, 0x56, 0x44, 0x43, 0x43, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x56, 0x44,
	0x43, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x1b,
	0x45, 0x4e, 0x53, 0x5f, 0x45, 0x56, 0x44, 0x43, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x01, 0x71,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x01, 0x71,
	0x12, 0x43, 0x0a, 0x05, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x56, 0x44,
	0x43, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x4b, 0x69, 0x6e, 0x64, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x05,
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x01, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x01, 0x74, 0x22, 0x5f, 0x0a, 0x21,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x45, 0x56, 0x44, 0x43, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x56,
	0x44, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x41, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb0, 0x01,
	0x0a, 0x1c, 0x45, 0x4e, 0x53, 0x5f, 0x45, 0x56, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x23,
	0x0a, 0x01, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x01, 0x71, 0x12, 0x44, 0x0a, 0x05, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x45, 0x56, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x41, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5,
	0x18, 0x01, 0x52, 0x05, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x01, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x01, 0x74,
	0x22, 0x5f, 0x0a, 0x21, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x45, 0x56, 0x44,
	0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x43, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x45, 0x56, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xb0, 0x01, 0x0a, 0x1c, 0x45, 0x4e, 0x53, 0x5f, 0x45, 0x56, 0x44, 0x43, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x23, 0x0a, 0x01, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x01, 0x71, 0x12, 0x44, 0x0a, 0x05, 0x73, 0x74, 0x56, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x45, 0x56, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x08, 0x88, 0xb5,
	0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x05, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x25, 0x0a,
	0x01, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x01, 0x74, 0x22, 0x51, 0x0a, 0x1a, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x45, 0x56, 0x44, 0x43, 0x50, 0x6c, 0x75, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45,
	0x56, 0x44, 0x43, 0x50, 0x6c, 0x75, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x15, 0x45, 0x4e, 0x53, 0x5f,
	0x45, 0x56, 0x44, 0x43, 0x50, 0x6c, 0x75, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x23, 0x0a, 0x01, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x01, 0x71, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x45, 0x56, 0x44, 0x43, 0x50, 0x6c, 0x75, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4b, 0x69, 0x6e, 0x64, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x05,
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x01, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x01, 0x74, 0x22, 0xe4, 0x03, 0x0a,
	0x12, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44,
	0x45, 0x44, 0x4f, 0x12, 0x74, 0x0a, 0x1c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f,
	0x64, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x1c, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4e, 0x0a, 0x12, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x45, 0x45, 0x56, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x44, 0x45, 0x45, 0x56, 0x52, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x45, 0x45, 0x56, 0x12, 0x43, 0x0a, 0x08, 0x43, 0x61, 0x62,
	0x52, 0x74, 0x67, 0x44, 0x43, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x76,
	0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x4e, 0x53, 0x5f, 0x45, 0x56, 0x44,
	0x43, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x4b, 0x69, 0x6e, 0x64, 0x52, 0x08, 0x43, 0x61, 0x62, 0x52, 0x74, 0x67, 0x44, 0x43, 0x12, 0x42,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x6e, 0x53, 0x74, 0x41, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x4e, 0x53,
	0x5f, 0x45, 0x56, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x41, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x6e, 0x53,
	0x74, 0x41, 0x12, 0x42, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x6e, 0x53, 0x74, 0x43, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x45, 0x4e, 0x53, 0x5f, 0x45, 0x56, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x07, 0x43,
	0x6f, 0x6e, 0x6e, 0x53, 0x74, 0x43, 0x12, 0x3b, 0x0a, 0x07, 0x50, 0x6c, 0x67, 0x53, 0x74, 0x44,
	0x43, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x4e, 0x53, 0x5f, 0x45, 0x56, 0x44, 0x43, 0x50, 0x6c, 0x75,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x07, 0x50, 0x6c, 0x67, 0x53,
	0x74, 0x44, 0x43, 0x22, 0xc3, 0x04, 0x0a, 0x12, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x45, 0x53, 0x45, 0x12, 0x74, 0x0a, 0x1c, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x01, 0x52, 0x1c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46,
	0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x4e, 0x0a, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x44, 0x45, 0x41, 0x4f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65,
	0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x45, 0x41, 0x4f, 0x52, 0x12, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x45, 0x41, 0x4f,
	0x12, 0x4e, 0x0a, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x44, 0x45, 0x44, 0x4f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65,
	0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x45, 0x44, 0x4f, 0x52, 0x12, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x45, 0x44, 0x4f,
	0x12, 0x37, 0x0a, 0x0a, 0x49, 0x73, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x46, 0x6c, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x0a, 0x49,
	0x73, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x46, 0x6c, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x53, 0x63, 0x54,
	0x65, 0x73, 0x74, 0x46, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x09, 0x53, 0x63, 0x54, 0x65, 0x73, 0x74, 0x46, 0x6c, 0x74,
	0x12, 0x37, 0x0a, 0x0a, 0x44, 0x69, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x4c, 0x6f, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x50, 0x53, 0x52, 0x0a, 0x44,
	0x69, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x4c, 0x6f, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x57, 0x6c, 0x64,
	0x44, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53,
	0x50, 0x53, 0x52, 0x06, 0x57, 0x6c, 0x64, 0x44, 0x65, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x56, 0x53,
	0x45, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x09, 0x45, 0x56,
	0x53, 0x45, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x54, 0x0a, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x45, 0x53, 0x45, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44,
	0x45, 0x53, 0x45, 0x42, 0x04, 0x90, 0xb5, 0x18, 0x00, 0x52, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x45, 0x53, 0x45, 0x22, 0xd9, 0x01,
	0x0a, 0x10, 0x45, 0x56, 0x53, 0x45, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x50, 0x0a, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x01, 0x52, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x04, 0x65, 0x76, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x45, 0x56, 0x53, 0x45, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x04,
	0x65, 0x76, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x65, 0x76, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x56, 0x53, 0x45, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x08,
	0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x09, 0x65, 0x76, 0x73, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x3a, 0x04, 0xc0, 0xf3, 0x18, 0x01, 0x22, 0x74, 0x0a, 0x0b, 0x52, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x44, 0x45, 0x45, 0x56, 0x12, 0x41, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x03, 0x53,
	0x6f, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4d, 0x56, 0x52, 0x03, 0x53, 0x6f, 0x63, 0x22,
	0x8b, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x45, 0x41, 0x4f, 0x12,
	0x41, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x45, 0x45,
	0x56, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x45, 0x45, 0x56,
	0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x45, 0x45, 0x56, 0x22, 0x8b, 0x01,
	0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x45, 0x44, 0x4f, 0x12, 0x41, 0x0a,
	0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x01, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x39, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x45, 0x45, 0x56, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x45, 0x45, 0x56, 0x52, 0x0b,
	0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x45, 0x45, 0x56, 0x22, 0xe4, 0x02, 0x0a, 0x0f,
	0x45, 0x56, 0x53, 0x45, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x45, 0x53, 0x45, 0x12,
	0x41, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x45, 0x41,
	0x4f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x45, 0x41, 0x4f,
	0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x45, 0x41, 0x4f, 0x12, 0x39, 0x0a,
	0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x45, 0x44, 0x4f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x45, 0x44, 0x4f, 0x52, 0x0b, 0x72, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x44, 0x45, 0x44, 0x4f, 0x12, 0x24, 0x0a, 0x04, 0x43, 0x68, 0x61, 0x56,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4d, 0x56, 0x52, 0x04, 0x43, 0x68, 0x61, 0x56, 0x12, 0x24,
	0x0a, 0x04, 0x43, 0x68, 0x61, 0x41, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4d, 0x56, 0x52, 0x04,
	0x43, 0x68, 0x61, 0x41, 0x12, 0x24, 0x0a, 0x04, 0x43, 0x68, 0x61, 0x57, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x4d, 0x56, 0x52, 0x04, 0x43, 0x68, 0x61, 0x57, 0x12, 0x26, 0x0a, 0x05, 0x43, 0x68,
	0x61, 0x57, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4d, 0x56, 0x52, 0x05, 0x43, 0x68, 0x61,
	0x57, 0x68, 0x22, 0xd1, 0x03, 0x0a, 0x0b, 0x45, 0x56, 0x53, 0x45, 0x52, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x86, 0x01, 0x0a, 0x22, 0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6e,
	0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x22, 0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x0b, 0x72,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x58, 0x55, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x58, 0x55, 0x52, 0x0b, 0x72, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x58, 0x55, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x54, 0x52, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x54, 0x52, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x4d, 0x4d, 0x54, 0x52, 0x12, 0x4b, 0x0a, 0x0f, 0x65, 0x76, 0x73, 0x65, 0x52, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x44, 0x45, 0x53, 0x45, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x56, 0x53, 0x45,
	0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x45, 0x53, 0x45, 0x42, 0x04, 0x90, 0xb5, 0x18,
	0x00, 0x52, 0x0f, 0x65, 0x76, 0x73, 0x65, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x45,
	0x53, 0x45, 0x12, 0x35, 0x0a, 0x09, 0x70, 0x68, 0x61, 0x73, 0x65, 0x4d, 0x4d, 0x54, 0x4e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x4d, 0x4d, 0x54, 0x4e, 0x52, 0x09,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x4d, 0x4d, 0x54, 0x4e, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x44, 0x43, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x44, 0x43, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x4d, 0x4d, 0x44, 0x43, 0x22, 0xe7, 0x01, 0x0a, 0x12, 0x45, 0x56, 0x53, 0x45, 0x52,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x56, 0x0a,
	0x12, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x01, 0x52, 0x12, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x04, 0x65, 0x76, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x45, 0x56, 0x53, 0x45, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52,
	0x04, 0x65, 0x76, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x65, 0x76, 0x73, 0x65, 0x52, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x76, 0x73,
	0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x56, 0x53, 0x45, 0x52, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x65,
	0x76, 0x73, 0x65, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x04, 0xc0, 0xf3, 0x18, 0x01,
	0x22, 0xa5, 0x01, 0x0a, 0x0a, 0x45, 0x56, 0x53, 0x45, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x41, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x54, 0x0a, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x44, 0x45, 0x53, 0x45, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x45, 0x53, 0x45, 0x42, 0x04,
	0x90, 0xb5, 0x18, 0x00, 0x52, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x44, 0x45, 0x53, 0x45, 0x22, 0xe0, 0x01, 0x0a, 0x11, 0x45, 0x56, 0x53,
	0x45, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x53,
	0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01,
	0x52, 0x11, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x04, 0x65, 0x76, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45,
	0x56, 0x53, 0x45, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x65,
	0x76, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x65, 0x76, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x56, 0x53, 0x45, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x65, 0x76, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x04, 0xc0, 0xf3, 0x18, 0x01, 0x2a, 0xdb, 0x01, 0x0a, 0x11,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x49, 0x64, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x1e,
	0x0a, 0x1a, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b,
	0x69, 0x6e, 0x64, 0x5f, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x21,
	0x0a, 0x1d, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b,
	0x69, 0x6e, 0x64, 0x5f, 0x45, 0x56, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10,
	0x03, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x45, 0x56, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x45, 0x56, 0x53, 0x45, 0x10, 0x05, 0x2a, 0x98, 0x02, 0x0a, 0x17, 0x45, 0x56,
	0x41, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x56, 0x41, 0x43, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64,
	0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e,
	0x45, 0x56, 0x41, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x10, 0x01,
	0x12, 0x22, 0x0a, 0x1e, 0x45, 0x56, 0x41, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x56, 0x41, 0x43, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x56, 0x41, 0x43,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b,
	0x69, 0x6e, 0x64, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e,
	0x45, 0x56, 0x41, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x10, 0x05,
	0x12, 0x22, 0x0a, 0x1e, 0x45, 0x56, 0x41, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x46, 0x10, 0x06, 0x2a, 0xcf, 0x01, 0x0a, 0x11, 0x45, 0x56, 0x41, 0x43, 0x50, 0x6c, 0x75,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x56,
	0x41, 0x43, 0x50, 0x6c, 0x75, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f,
	0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x45,
	0x56, 0x41, 0x43, 0x50, 0x6c, 0x75, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64,
	0x5f, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12,
	0x2a, 0x0a, 0x26, 0x45, 0x56, 0x41, 0x43, 0x50, 0x6c, 0x75, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x61, 0x6e,
	0x64, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x45,
	0x56, 0x41, 0x43, 0x50, 0x6c, 0x75, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64,
	0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x64, 0x4c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x56, 0x41, 0x43, 0x50, 0x6c, 0x75,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x10, 0x04, 0x2a, 0xc8, 0x01, 0x0a, 0x17, 0x45, 0x56, 0x41, 0x43, 0x43,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x56, 0x41, 0x43, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x55, 0x4e,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x56, 0x41,
	0x43, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x31, 0x33, 0x41, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x56,
	0x41, 0x43, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x32, 0x30, 0x41, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x45,
	0x56, 0x41, 0x43, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x33, 0x32, 0x41, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f,
	0x45, 0x56, 0x41, 0x43, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x36, 0x33, 0x74, 0x6f, 0x37, 0x30, 0x41, 0x10,
	0x04, 0x2a, 0x87, 0x02, 0x0a, 0x18, 0x45, 0x56, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x26,
	0x0a, 0x22, 0x45, 0x56, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x56, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x4b, 0x69,
	0x6e, 0x64, 0x5f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x10, 0x01,
	0x12, 0x27, 0x0a, 0x23, 0x45, 0x56, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x54, 0x68, 0x72,
	0x65, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x56, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x67, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x10, 0x03, 0x12,
	0x24, 0x0a, 0x20, 0x45, 0x56, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x42, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x56, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x4b, 0x69, 0x6e,
	0x64, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x10, 0x05, 0x2a, 0x9a, 0x03, 0x0a, 0x17,
	0x45, 0x56, 0x44, 0x43, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x56, 0x44, 0x43, 0x43,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4b, 0x69,
	0x6e, 0x64, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f,
	0x0a, 0x1b, 0x45, 0x56, 0x44, 0x43, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x31, 0x33, 0x41, 0x10, 0x01, 0x12,
	0x23, 0x0a, 0x1f, 0x45, 0x56, 0x44, 0x43, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x31, 0x36, 0x74, 0x6f, 0x32,
	0x30, 0x41, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x56, 0x44, 0x43, 0x43, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x5f,
	0x33, 0x30, 0x74, 0x6f, 0x33, 0x32, 0x41, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x56, 0x44,
	0x43, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x36, 0x30, 0x74, 0x6f, 0x36, 0x33, 0x41, 0x10, 0x04, 0x12, 0x1f,
	0x0a, 0x1b, 0x45, 0x56, 0x44, 0x43, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x37, 0x30, 0x41, 0x10, 0x05, 0x12,
	0x1f, 0x0a, 0x1b, 0x45, 0x56, 0x44, 0x43, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x38, 0x30, 0x41, 0x10, 0x06,
	0x12, 0x20, 0x0a, 0x1c, 0x45, 0x56, 0x44, 0x43, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x31, 0x32, 0x35, 0x41,
	0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x56, 0x44, 0x43, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x32, 0x30,
	0x30, 0x41, 0x10, 0x08, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x56, 0x44, 0x43, 0x43, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x5f,
	0x32, 0x35, 0x30, 0x41, 0x10, 0x09, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x56, 0x44, 0x43, 0x43, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4b, 0x69, 0x6e,
	0x64, 0x5f, 0x34, 0x30, 0x30, 0x41, 0x10, 0x0a, 0x2a, 0xf5, 0x03, 0x0a, 0x18, 0x45, 0x56, 0x44,
	0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x41, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x56, 0x44, 0x43, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x4b, 0x69, 0x6e,
	0x64, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a,
	0x1d, 0x45, 0x56, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x41, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x44, 0x43, 0x5f, 0x41, 0x10, 0x01,
	0x12, 0x22, 0x0a, 0x1e, 0x45, 0x56, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x44, 0x43, 0x5f,
	0x42, 0x31, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x56, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x4b, 0x69, 0x6e, 0x64,
	0x5f, 0x44, 0x43, 0x5f, 0x42, 0x32, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x56, 0x44, 0x43,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41,
	0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x44, 0x43, 0x5f, 0x42, 0x33, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d,
	0x45, 0x56, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x41, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x44, 0x43, 0x5f, 0x43, 0x10, 0x05, 0x12,
	0x21, 0x0a, 0x1d, 0x45, 0x56, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x44, 0x43, 0x5f, 0x44,
	0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x56, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x44,
	0x43, 0x5f, 0x42, 0x5f, 0x53, 0x31, 0x10, 0x07, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x56, 0x44, 0x43,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41,
	0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x44, 0x43, 0x5f, 0x42, 0x5f, 0x53, 0x32, 0x10, 0x08, 0x12, 0x24,
	0x0a, 0x20, 0x45, 0x56, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x44, 0x43, 0x5f, 0x42, 0x5f,
	0x53, 0x33, 0x10, 0x09, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x56, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x4b, 0x69, 0x6e, 0x64,
	0x5f, 0x44, 0x43, 0x5f, 0x42, 0x5f, 0x53, 0x34, 0x10, 0x0a, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x56,
	0x44, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x41, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x44, 0x43, 0x5f, 0x45, 0x10, 0x0b, 0x12, 0x21, 0x0a,
	0x1d, 0x45, 0x56, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x41, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x44, 0x43, 0x5f, 0x46, 0x10, 0x0c,
	0x2a, 0xa0, 0x02, 0x0a, 0x18, 0x45, 0x56, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x26, 0x0a,
	0x22, 0x45, 0x56, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x56, 0x44, 0x43, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x4b, 0x69, 0x6e,
	0x64, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x56,
	0x44, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x43, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x10, 0x02, 0x12,
	0x23, 0x0a, 0x1f, 0x45, 0x56, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x43, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x56, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x4b, 0x69, 0x6e, 0x64,
	0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x56, 0x44,
	0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x43, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x10, 0x05, 0x12, 0x23,
	0x0a, 0x1f, 0x45, 0x56, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x46, 0x10, 0x06, 0x2a, 0xcf, 0x01, 0x0a, 0x11, 0x45, 0x56, 0x44, 0x43, 0x50, 0x6c, 0x75, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x56, 0x44,
	0x43, 0x50, 0x6c, 0x75, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x55,
	0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x56,
	0x44, 0x43, 0x50, 0x6c, 0x75, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x2a,
	0x0a, 0x26, 0x45, 0x56, 0x44, 0x43, 0x50, 0x6c, 0x75, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b,
	0x69, 0x6e, 0x64, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x64,
	0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x56,
	0x44, 0x43, 0x50, 0x6c, 0x75, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x64, 0x4c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x56, 0x44, 0x43, 0x50, 0x6c, 0x75, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x10, 0x04, 0x42, 0x7e, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62,
	0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x01, 0x5a, 0x51, 0x67,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d,
	0x62, 0x2f, 0x70, 0x73, 0x6d, 0x2f, 0x6f, 0x70, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x67, 0x6f, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2d, 0x6f, 0x70,
	0x73, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x70,
	0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2f, 0x65, 0x76, 0x73, 0x65, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0xaa, 0x02, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2e, 0x65, 0x76, 0x73, 0x65, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_evsemodule_evsemodule_proto_rawDescOnce sync.Once
	file_evsemodule_evsemodule_proto_rawDescData = file_evsemodule_evsemodule_proto_rawDesc
)

func file_evsemodule_evsemodule_proto_rawDescGZIP() []byte {
	file_evsemodule_evsemodule_proto_rawDescOnce.Do(func() {
		file_evsemodule_evsemodule_proto_rawDescData = protoimpl.X.CompressGZIP(file_evsemodule_evsemodule_proto_rawDescData)
	})
	return file_evsemodule_evsemodule_proto_rawDescData
}

var file_evsemodule_evsemodule_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_evsemodule_evsemodule_proto_msgTypes = make([]protoimpl.MessageInfo, 59)
var file_evsemodule_evsemodule_proto_goTypes = []any{
	(ChargingStateKind)(0),                                  // 0: evsemodule.ChargingStateKind
	(EVACConnectionStateKind)(0),                            // 1: evsemodule.EVACConnectionStateKind
	(EVACPlugStateKind)(0),                                  // 2: evsemodule.EVACPlugStateKind
	(EVACCableCapabilityKind)(0),                            // 3: evsemodule.EVACCableCapabilityKind
	(EVConnectionChargingKind)(0),                           // 4: evsemodule.EVConnectionChargingKind
	(EVDCCableCapabilityKind)(0),                            // 5: evsemodule.EVDCCableCapabilityKind
	(EVDCConnectionStateAKind)(0),                           // 6: evsemodule.EVDCConnectionStateAKind
	(EVDCConnectionStateCKind)(0),                           // 7: evsemodule.EVDCConnectionStateCKind
	(EVDCPlugStateKind)(0),                                  // 8: evsemodule.EVDCPlugStateKind
	(*CapabilityConfigurationDEAO)(nil),                     // 9: evsemodule.CapabilityConfigurationDEAO
	(*CapabilityConfigurationDEDO)(nil),                     // 10: evsemodule.CapabilityConfigurationDEDO
	(*CapabilityConfigurationDESE)(nil),                     // 11: evsemodule.CapabilityConfigurationDESE
	(*EVSECapabilityOverride)(nil),                          // 12: evsemodule.EVSECapabilityOverride
	(*EVSE)(nil),                                            // 13: evsemodule.EVSE
	(*EVSECapabilityOverrideProfile)(nil),                   // 14: evsemodule.EVSECapabilityOverrideProfile
	(*CapabilityRatingsZCAB)(nil),                           // 15: evsemodule.CapabilityRatingsZCAB
	(*CapabilityRatingsDEAO)(nil),                           // 16: evsemodule.CapabilityRatingsDEAO
	(*CapabilityRatingsDEDO)(nil),                           // 17: evsemodule.CapabilityRatingsDEDO
	(*CapabilityRatingsDESE)(nil),                           // 18: evsemodule.CapabilityRatingsDESE
	(*EVSECapability)(nil),                                  // 19: evsemodule.EVSECapability
	(*EVSECapabilityProfile)(nil),                           // 20: evsemodule.EVSECapabilityProfile
	(*EVSEFunction)(nil),                                    // 21: evsemodule.EVSEFunction
	(*Optional_ChargingStateKind)(nil),                      // 22: evsemodule.Optional_ChargingStateKind
	(*EVSEPoint)(nil),                                       // 23: evsemodule.EVSEPoint
	(*EVSECurvePoint)(nil),                                  // 24: evsemodule.EVSECurvePoint
	(*EVSECSG)(nil),                                         // 25: evsemodule.EVSECSG
	(*DESEControlScheduleFSCH)(nil),                         // 26: evsemodule.DESEControlScheduleFSCH
	(*DEEVControlScheduleFSCH)(nil),                         // 27: evsemodule.DEEVControlScheduleFSCH
	(*ControlDEEV)(nil),                                     // 28: evsemodule.ControlDEEV
	(*ControlDEAO)(nil),                                     // 29: evsemodule.ControlDEAO
	(*ControlDEDO)(nil),                                     // 30: evsemodule.ControlDEDO
	(*ControlDESE)(nil),                                     // 31: evsemodule.ControlDESE
	(*EVSEControl)(nil),                                     // 32: evsemodule.EVSEControl
	(*EVSEControlProfile)(nil),                              // 33: evsemodule.EVSEControlProfile
	(*DiscreteControlDESE)(nil),                             // 34: evsemodule.DiscreteControlDESE
	(*EVSEDiscreteControl)(nil),                             // 35: evsemodule.EVSEDiscreteControl
	(*EVSEDiscreteControlProfile)(nil),                      // 36: evsemodule.EVSEDiscreteControlProfile
	(*EVSEPointStatus)(nil),                                 // 37: evsemodule.EVSEPointStatus
	(*Optional_EVACConnectionStateKind)(nil),                // 38: evsemodule.Optional_EVACConnectionStateKind
	(*ENS_EVACConnectionStateKind)(nil),                     // 39: evsemodule.ENS_EVACConnectionStateKind
	(*Optional_EVACPlugStateKind)(nil),                      // 40: evsemodule.Optional_EVACPlugStateKind
	(*ENS_EVACPlugStateKind)(nil),                           // 41: evsemodule.ENS_EVACPlugStateKind
	(*Optional_EVACCableCapabilityKind)(nil),                // 42: evsemodule.Optional_EVACCableCapabilityKind
	(*ENS_EVACCableCapabilityKind)(nil),                     // 43: evsemodule.ENS_EVACCableCapabilityKind
	(*Optional_EVConnectionChargingKind)(nil),               // 44: evsemodule.Optional_EVConnectionChargingKind
	(*ENS_EVConnectionChargingKind)(nil),                    // 45: evsemodule.ENS_EVConnectionChargingKind
	(*EventAndStatusDEEV)(nil),                              // 46: evsemodule.EventAndStatusDEEV
	(*EventAndStatusDEAO)(nil),                              // 47: evsemodule.EventAndStatusDEAO
	(*Optional_EVDCCableCapabilityKind)(nil),                // 48: evsemodule.Optional_EVDCCableCapabilityKind
	(*ENS_EVDCCableCapabilityKind)(nil),                     // 49: evsemodule.ENS_EVDCCableCapabilityKind
	(*Optional_EVDCConnectionStateAKind)(nil),               // 50: evsemodule.Optional_EVDCConnectionStateAKind
	(*ENS_EVDCConnectionStateAKind)(nil),                    // 51: evsemodule.ENS_EVDCConnectionStateAKind
	(*Optional_EVDCConnectionStateCKind)(nil),               // 52: evsemodule.Optional_EVDCConnectionStateCKind
	(*ENS_EVDCConnectionStateCKind)(nil),                    // 53: evsemodule.ENS_EVDCConnectionStateCKind
	(*Optional_EVDCPlugStateKind)(nil),                      // 54: evsemodule.Optional_EVDCPlugStateKind
	(*ENS_EVDCPlugStateKind)(nil),                           // 55: evsemodule.ENS_EVDCPlugStateKind
	(*EventAndStatusDEDO)(nil),                              // 56: evsemodule.EventAndStatusDEDO
	(*EventAndStatusDESE)(nil),                              // 57: evsemodule.EventAndStatusDESE
	(*EVSEEvent)(nil),                                       // 58: evsemodule.EVSEEvent
	(*EVSEEventProfile)(nil),                                // 59: evsemodule.EVSEEventProfile
	(*ReadingDEEV)(nil),                                     // 60: evsemodule.ReadingDEEV
	(*ReadingDEAO)(nil),                                     // 61: evsemodule.ReadingDEAO
	(*ReadingDEDO)(nil),                                     // 62: evsemodule.ReadingDEDO
	(*EVSEReadingDESE)(nil),                                 // 63: evsemodule.EVSEReadingDESE
	(*EVSEReading)(nil),                                     // 64: evsemodule.EVSEReading
	(*EVSEReadingProfile)(nil),                              // 65: evsemodule.EVSEReadingProfile
	(*EVSEStatus)(nil),                                      // 66: evsemodule.EVSEStatus
	(*EVSEStatusProfile)(nil),                               // 67: evsemodule.EVSEStatusProfile
	(*commonmodule.LogicalNode)(nil),                        // 68: commonmodule.LogicalNode
	(*commonmodule.ControlING)(nil),                         // 69: commonmodule.ControlING
	(*commonmodule.SourceCapabilityConfiguration)(nil),      // 70: commonmodule.SourceCapabilityConfiguration
	(*commonmodule.ASG)(nil),                                // 71: commonmodule.ASG
	(*commonmodule.NameplateValue)(nil),                     // 72: commonmodule.NameplateValue
	(*commonmodule.ConductingEquipment)(nil),                // 73: commonmodule.ConductingEquipment
	(*commonmodule.CapabilityMessageInfo)(nil),              // 74: commonmodule.CapabilityMessageInfo
	(*commonmodule.SourceCapabilityRatings)(nil),            // 75: commonmodule.SourceCapabilityRatings
	(*commonmodule.SPG)(nil),                                // 76: commonmodule.SPG
	(*commonmodule.CapacityFirming)(nil),                    // 77: commonmodule.CapacityFirming
	(*commonmodule.FrequencyRegulation)(nil),                // 78: commonmodule.FrequencyRegulation
	(*commonmodule.PeakShaving)(nil),                        // 79: commonmodule.PeakShaving
	(*commonmodule.SocLimit)(nil),                           // 80: commonmodule.SocLimit
	(*commonmodule.SOCManagement)(nil),                      // 81: commonmodule.SOCManagement
	(*commonmodule.VoltageDroop)(nil),                       // 82: commonmodule.VoltageDroop
	(*commonmodule.VoltagePI)(nil),                          // 83: commonmodule.VoltagePI
	(*commonmodule.ENG_GridConnectModeKind)(nil),            // 84: commonmodule.ENG_GridConnectModeKind
	(*commonmodule.RampRate)(nil),                           // 85: commonmodule.RampRate
	(*commonmodule.ControlSPC)(nil),                         // 86: commonmodule.ControlSPC
	(*commonmodule.EnterServiceAPC)(nil),                    // 87: commonmodule.EnterServiceAPC
	(*commonmodule.HzWAPC)(nil),                             // 88: commonmodule.HzWAPC
	(*commonmodule.LimitWAPC)(nil),                          // 89: commonmodule.LimitWAPC
	(*commonmodule.PFSPC)(nil),                              // 90: commonmodule.PFSPC
	(*commonmodule.TmHzCSG)(nil),                            // 91: commonmodule.TmHzCSG
	(*commonmodule.TmVoltCSG)(nil),                          // 92: commonmodule.TmVoltCSG
	(*commonmodule.VarSPC)(nil),                             // 93: commonmodule.VarSPC
	(*commonmodule.VoltVarCSG)(nil),                         // 94: commonmodule.VoltVarCSG
	(*commonmodule.VoltWCSG)(nil),                           // 95: commonmodule.VoltWCSG
	(*commonmodule.WVarCSG)(nil),                            // 96: commonmodule.WVarCSG
	(*commonmodule.WSPC)(nil),                               // 97: commonmodule.WSPC
	(*commonmodule.ControlTimestamp)(nil),                   // 98: commonmodule.ControlTimestamp
	(*commonmodule.ScheduleCSG)(nil),                        // 99: commonmodule.ScheduleCSG
	(*commonmodule.LogicalNodeForControl)(nil),              // 100: commonmodule.LogicalNodeForControl
	(*commonmodule.ControlFSCC)(nil),                        // 101: commonmodule.ControlFSCC
	(*wrapperspb.FloatValue)(nil),                           // 102: google.protobuf.FloatValue
	(*commonmodule.ControlValue)(nil),                       // 103: commonmodule.ControlValue
	(*commonmodule.CheckConditions)(nil),                    // 104: commonmodule.CheckConditions
	(*commonmodule.ControlMessageInfo)(nil),                 // 105: commonmodule.ControlMessageInfo
	(*commonmodule.StatusSPS)(nil),                          // 106: commonmodule.StatusSPS
	(*commonmodule.Quality)(nil),                            // 107: commonmodule.Quality
	(*commonmodule.Timestamp)(nil),                          // 108: commonmodule.Timestamp
	(*commonmodule.LogicalNodeForEventAndStatus)(nil),       // 109: commonmodule.LogicalNodeForEventAndStatus
	(*wrapperspb.StringValue)(nil),                          // 110: google.protobuf.StringValue
	(*commonmodule.ClearingTime)(nil),                       // 111: commonmodule.ClearingTime
	(*commonmodule.MV)(nil),                                 // 112: commonmodule.MV
	(*commonmodule.EventValue)(nil),                         // 113: commonmodule.EventValue
	(*commonmodule.EventMessageInfo)(nil),                   // 114: commonmodule.EventMessageInfo
	(*commonmodule.ConductingEquipmentTerminalReading)(nil), // 115: commonmodule.ConductingEquipmentTerminalReading
	(*commonmodule.ReadingMMXU)(nil),                        // 116: commonmodule.ReadingMMXU
	(*commonmodule.ReadingMMTR)(nil),                        // 117: commonmodule.ReadingMMTR
	(*commonmodule.PhaseMMTN)(nil),                          // 118: commonmodule.PhaseMMTN
	(*commonmodule.ReadingMMDC)(nil),                        // 119: commonmodule.ReadingMMDC
	(*commonmodule.ReadingMessageInfo)(nil),                 // 120: commonmodule.ReadingMessageInfo
	(*commonmodule.StatusValue)(nil),                        // 121: commonmodule.StatusValue
	(*commonmodule.StatusMessageInfo)(nil),                  // 122: commonmodule.StatusMessageInfo
}
var file_evsemodule_evsemodule_proto_depIdxs = []int32{
	68,  // 0: evsemodule.CapabilityConfigurationDEAO.logicalNode:type_name -> commonmodule.LogicalNode
	69,  // 1: evsemodule.CapabilityConfigurationDEAO.ChaARtg:type_name -> commonmodule.ControlING
	69,  // 2: evsemodule.CapabilityConfigurationDEAO.ChaAMax:type_name -> commonmodule.ControlING
	68,  // 3: evsemodule.CapabilityConfigurationDEDO.logicalNode:type_name -> commonmodule.LogicalNode
	70,  // 4: evsemodule.CapabilityConfigurationDESE.sourceCapabilityConfiguration:type_name -> commonmodule.SourceCapabilityConfiguration
	9,   // 5: evsemodule.CapabilityConfigurationDESE.capabilityConfigurationDEA0:type_name -> evsemodule.CapabilityConfigurationDEAO
	10,  // 6: evsemodule.CapabilityConfigurationDESE.capabilityConfigurationDEDO:type_name -> evsemodule.CapabilityConfigurationDEDO
	71,  // 7: evsemodule.CapabilityConfigurationDESE.ChaPwrRtg:type_name -> commonmodule.ASG
	71,  // 8: evsemodule.CapabilityConfigurationDESE.ChaPwrTgt:type_name -> commonmodule.ASG
	71,  // 9: evsemodule.CapabilityConfigurationDESE.ChaPwrLim:type_name -> commonmodule.ASG
	72,  // 10: evsemodule.EVSECapabilityOverride.nameplateValue:type_name -> commonmodule.NameplateValue
	11,  // 11: evsemodule.EVSECapabilityOverride.capabilityConfigurationDESE:type_name -> evsemodule.CapabilityConfigurationDESE
	73,  // 12: evsemodule.EVSE.conductingEquipment:type_name -> commonmodule.ConductingEquipment
	74,  // 13: evsemodule.EVSECapabilityOverrideProfile.capabilityMessageInfo:type_name -> commonmodule.CapabilityMessageInfo
	13,  // 14: evsemodule.EVSECapabilityOverrideProfile.evse:type_name -> evsemodule.EVSE
	12,  // 15: evsemodule.EVSECapabilityOverrideProfile.evseCapabilityOverride:type_name -> evsemodule.EVSECapabilityOverride
	68,  // 16: evsemodule.CapabilityRatingsZCAB.logicalNode:type_name -> commonmodule.LogicalNode
	71,  // 17: evsemodule.CapabilityRatingsZCAB.ARtg:type_name -> commonmodule.ASG
	71,  // 18: evsemodule.CapabilityRatingsZCAB.OvlMaxPct:type_name -> commonmodule.ASG
	69,  // 19: evsemodule.CapabilityRatingsZCAB.OvlMaxTm:type_name -> commonmodule.ControlING
	68,  // 20: evsemodule.CapabilityRatingsDEAO.logicalNode:type_name -> commonmodule.LogicalNode
	69,  // 21: evsemodule.CapabilityRatingsDEAO.ChaARtg:type_name -> commonmodule.ControlING
	69,  // 22: evsemodule.CapabilityRatingsDEAO.ChaAMax:type_name -> commonmodule.ControlING
	68,  // 23: evsemodule.CapabilityRatingsDEDO.logicalNode:type_name -> commonmodule.LogicalNode
	75,  // 24: evsemodule.CapabilityRatingsDESE.sourceCapabilityRatings:type_name -> commonmodule.SourceCapabilityRatings
	16,  // 25: evsemodule.CapabilityRatingsDESE.capabilityRatingsDEAO:type_name -> evsemodule.CapabilityRatingsDEAO
	17,  // 26: evsemodule.CapabilityRatingsDESE.capabilityRatingsDEDO:type_name -> evsemodule.CapabilityRatingsDEDO
	71,  // 27: evsemodule.CapabilityRatingsDESE.ChaPwrRtg:type_name -> commonmodule.ASG
	71,  // 28: evsemodule.CapabilityRatingsDESE.ChaPwrTgt:type_name -> commonmodule.ASG
	71,  // 29: evsemodule.CapabilityRatingsDESE.ChaPwrLim:type_name -> commonmodule.ASG
	76,  // 30: evsemodule.CapabilityRatingsDESE.ConnTypDC:type_name -> commonmodule.SPG
	76,  // 31: evsemodule.CapabilityRatingsDESE.ConnTypPhs1:type_name -> commonmodule.SPG
	76,  // 32: evsemodule.CapabilityRatingsDESE.ConnTypPhs2:type_name -> commonmodule.SPG
	76,  // 33: evsemodule.CapabilityRatingsDESE.ConnTypPhs3:type_name -> commonmodule.SPG
	72,  // 34: evsemodule.EVSECapability.nameplateValue:type_name -> commonmodule.NameplateValue
	18,  // 35: evsemodule.EVSECapability.capabilityRatingsDESE:type_name -> evsemodule.CapabilityRatingsDESE
	11,  // 36: evsemodule.EVSECapability.capabilityConfigurationDESE:type_name -> evsemodule.CapabilityConfigurationDESE
	15,  // 37: evsemodule.EVSECapability.capabilityRatingsZCAB:type_name -> evsemodule.CapabilityRatingsZCAB
	74,  // 38: evsemodule.EVSECapabilityProfile.capabilityMessageInfo:type_name -> commonmodule.CapabilityMessageInfo
	13,  // 39: evsemodule.EVSECapabilityProfile.evse:type_name -> evsemodule.EVSE
	19,  // 40: evsemodule.EVSECapabilityProfile.evseCapability:type_name -> evsemodule.EVSECapability
	77,  // 41: evsemodule.EVSEFunction.capacityFirming:type_name -> commonmodule.CapacityFirming
	78,  // 42: evsemodule.EVSEFunction.frequencyRegulation:type_name -> commonmodule.FrequencyRegulation
	79,  // 43: evsemodule.EVSEFunction.peakShaving:type_name -> commonmodule.PeakShaving
	80,  // 44: evsemodule.EVSEFunction.socLimit:type_name -> commonmodule.SocLimit
	81,  // 45: evsemodule.EVSEFunction.socManagement:type_name -> commonmodule.SOCManagement
	82,  // 46: evsemodule.EVSEFunction.voltageDroop:type_name -> commonmodule.VoltageDroop
	83,  // 47: evsemodule.EVSEFunction.voltagePI:type_name -> commonmodule.VoltagePI
	0,   // 48: evsemodule.Optional_ChargingStateKind.value:type_name -> evsemodule.ChargingStateKind
	21,  // 49: evsemodule.EVSEPoint.function:type_name -> evsemodule.EVSEFunction
	84,  // 50: evsemodule.EVSEPoint.mode:type_name -> commonmodule.ENG_GridConnectModeKind
	85,  // 51: evsemodule.EVSEPoint.rampRates:type_name -> commonmodule.RampRate
	86,  // 52: evsemodule.EVSEPoint.reset:type_name -> commonmodule.ControlSPC
	22,  // 53: evsemodule.EVSEPoint.state:type_name -> evsemodule.Optional_ChargingStateKind
	87,  // 54: evsemodule.EVSEPoint.enterServiceOperation:type_name -> commonmodule.EnterServiceAPC
	88,  // 55: evsemodule.EVSEPoint.hzWOperation:type_name -> commonmodule.HzWAPC
	89,  // 56: evsemodule.EVSEPoint.limitWOperation:type_name -> commonmodule.LimitWAPC
	90,  // 57: evsemodule.EVSEPoint.pFOperation:type_name -> commonmodule.PFSPC
	91,  // 58: evsemodule.EVSEPoint.tmHzTripOperation:type_name -> commonmodule.TmHzCSG
	92,  // 59: evsemodule.EVSEPoint.tmVoltTripOperation:type_name -> commonmodule.TmVoltCSG
	93,  // 60: evsemodule.EVSEPoint.vArOperation:type_name -> commonmodule.VarSPC
	94,  // 61: evsemodule.EVSEPoint.voltVarOperation:type_name -> commonmodule.VoltVarCSG
	95,  // 62: evsemodule.EVSEPoint.voltWOperation:type_name -> commonmodule.VoltWCSG
	96,  // 63: evsemodule.EVSEPoint.wVarOperation:type_name -> commonmodule.WVarCSG
	97,  // 64: evsemodule.EVSEPoint.wOperation:type_name -> commonmodule.WSPC
	23,  // 65: evsemodule.EVSECurvePoint.control:type_name -> evsemodule.EVSEPoint
	98,  // 66: evsemodule.EVSECurvePoint.startTime:type_name -> commonmodule.ControlTimestamp
	24,  // 67: evsemodule.EVSECSG.crvPts:type_name -> evsemodule.EVSECurvePoint
	25,  // 68: evsemodule.DESEControlScheduleFSCH.ValDCSG:type_name -> evsemodule.EVSECSG
	99,  // 69: evsemodule.DEEVControlScheduleFSCH.ValACSG:type_name -> commonmodule.ScheduleCSG
	100, // 70: evsemodule.ControlDEEV.logicalNodeForControl:type_name -> commonmodule.LogicalNodeForControl
	27,  // 71: evsemodule.ControlDEEV.deevControlScheduleFSCH:type_name -> evsemodule.DEEVControlScheduleFSCH
	100, // 72: evsemodule.ControlDEAO.logicalNodeForControl:type_name -> commonmodule.LogicalNodeForControl
	28,  // 73: evsemodule.ControlDEAO.controlDEEV:type_name -> evsemodule.ControlDEEV
	100, // 74: evsemodule.ControlDEDO.logicalNodeForControl:type_name -> commonmodule.LogicalNodeForControl
	28,  // 75: evsemodule.ControlDEDO.controlDEEV:type_name -> evsemodule.ControlDEEV
	101, // 76: evsemodule.ControlDESE.controlFSCC:type_name -> commonmodule.ControlFSCC
	26,  // 77: evsemodule.ControlDESE.deseControlScheduleFSCH:type_name -> evsemodule.DESEControlScheduleFSCH
	29,  // 78: evsemodule.ControlDESE.controlDEAO:type_name -> evsemodule.ControlDEAO
	30,  // 79: evsemodule.ControlDESE.controlDEEO:type_name -> evsemodule.ControlDEDO
	102, // 80: evsemodule.ControlDESE.ChaAMax:type_name -> google.protobuf.FloatValue
	103, // 81: evsemodule.EVSEControl.controlValue:type_name -> commonmodule.ControlValue
	31,  // 82: evsemodule.EVSEControl.controlDESE:type_name -> evsemodule.ControlDESE
	104, // 83: evsemodule.EVSEControl.check:type_name -> commonmodule.CheckConditions
	105, // 84: evsemodule.EVSEControlProfile.controlMessageInfo:type_name -> commonmodule.ControlMessageInfo
	13,  // 85: evsemodule.EVSEControlProfile.evse:type_name -> evsemodule.EVSE
	32,  // 86: evsemodule.EVSEControlProfile.evseControl:type_name -> evsemodule.EVSEControl
	100, // 87: evsemodule.DiscreteControlDESE.logicalNodeForControl:type_name -> commonmodule.LogicalNodeForControl
	23,  // 88: evsemodule.DiscreteControlDESE.control:type_name -> evsemodule.EVSEPoint
	103, // 89: evsemodule.EVSEDiscreteControl.controlValue:type_name -> commonmodule.ControlValue
	34,  // 90: evsemodule.EVSEDiscreteControl.discreteControlDESE:type_name -> evsemodule.DiscreteControlDESE
	104, // 91: evsemodule.EVSEDiscreteControl.check:type_name -> commonmodule.CheckConditions
	105, // 92: evsemodule.EVSEDiscreteControlProfile.controlMessageInfo:type_name -> commonmodule.ControlMessageInfo
	13,  // 93: evsemodule.EVSEDiscreteControlProfile.evse:type_name -> evsemodule.EVSE
	35,  // 94: evsemodule.EVSEDiscreteControlProfile.evseDiscreteControl:type_name -> evsemodule.EVSEDiscreteControl
	21,  // 95: evsemodule.EVSEPointStatus.function:type_name -> evsemodule.EVSEFunction
	84,  // 96: evsemodule.EVSEPointStatus.mode:type_name -> commonmodule.ENG_GridConnectModeKind
	85,  // 97: evsemodule.EVSEPointStatus.rampRates:type_name -> commonmodule.RampRate
	86,  // 98: evsemodule.EVSEPointStatus.reset:type_name -> commonmodule.ControlSPC
	22,  // 99: evsemodule.EVSEPointStatus.state:type_name -> evsemodule.Optional_ChargingStateKind
	87,  // 100: evsemodule.EVSEPointStatus.enterServiceOperation:type_name -> commonmodule.EnterServiceAPC
	88,  // 101: evsemodule.EVSEPointStatus.hzWOperation:type_name -> commonmodule.HzWAPC
	89,  // 102: evsemodule.EVSEPointStatus.limitWOperation:type_name -> commonmodule.LimitWAPC
	90,  // 103: evsemodule.EVSEPointStatus.pFOperation:type_name -> commonmodule.PFSPC
	91,  // 104: evsemodule.EVSEPointStatus.tmHzTripOperation:type_name -> commonmodule.TmHzCSG
	92,  // 105: evsemodule.EVSEPointStatus.tmVoltTripOperation:type_name -> commonmodule.TmVoltCSG
	93,  // 106: evsemodule.EVSEPointStatus.vArOperation:type_name -> commonmodule.VarSPC
	94,  // 107: evsemodule.EVSEPointStatus.voltVarOperation:type_name -> commonmodule.VoltVarCSG
	95,  // 108: evsemodule.EVSEPointStatus.voltWOperation:type_name -> commonmodule.VoltWCSG
	96,  // 109: evsemodule.EVSEPointStatus.wVarOperation:type_name -> commonmodule.WVarCSG
	97,  // 110: evsemodule.EVSEPointStatus.wOperation:type_name -> commonmodule.WSPC
	106, // 111: evsemodule.EVSEPointStatus.noRestricEnable:type_name -> commonmodule.StatusSPS
	106, // 112: evsemodule.EVSEPointStatus.chargeControlEnable:type_name -> commonmodule.StatusSPS
	1,   // 113: evsemodule.Optional_EVACConnectionStateKind.value:type_name -> evsemodule.EVACConnectionStateKind
	107, // 114: evsemodule.ENS_EVACConnectionStateKind.q:type_name -> commonmodule.Quality
	1,   // 115: evsemodule.ENS_EVACConnectionStateKind.stVal:type_name -> evsemodule.EVACConnectionStateKind
	108, // 116: evsemodule.ENS_EVACConnectionStateKind.t:type_name -> commonmodule.Timestamp
	2,   // 117: evsemodule.Optional_EVACPlugStateKind.value:type_name -> evsemodule.EVACPlugStateKind
	107, // 118: evsemodule.ENS_EVACPlugStateKind.q:type_name -> commonmodule.Quality
	2,   // 119: evsemodule.ENS_EVACPlugStateKind.stVal:type_name -> evsemodule.EVACPlugStateKind
	108, // 120: evsemodule.ENS_EVACPlugStateKind.t:type_name -> commonmodule.Timestamp
	3,   // 121: evsemodule.Optional_EVACCableCapabilityKind.value:type_name -> evsemodule.EVACCableCapabilityKind
	107, // 122: evsemodule.ENS_EVACCableCapabilityKind.q:type_name -> commonmodule.Quality
	3,   // 123: evsemodule.ENS_EVACCableCapabilityKind.stVal:type_name -> evsemodule.EVACCableCapabilityKind
	108, // 124: evsemodule.ENS_EVACCableCapabilityKind.t:type_name -> commonmodule.Timestamp
	4,   // 125: evsemodule.Optional_EVConnectionChargingKind.value:type_name -> evsemodule.EVConnectionChargingKind
	107, // 126: evsemodule.ENS_EVConnectionChargingKind.q:type_name -> commonmodule.Quality
	4,   // 127: evsemodule.ENS_EVConnectionChargingKind.stVal:type_name -> evsemodule.EVConnectionChargingKind
	108, // 128: evsemodule.ENS_EVConnectionChargingKind.t:type_name -> commonmodule.Timestamp
	109, // 129: evsemodule.EventAndStatusDEEV.logicalNodeForEventAndStatus:type_name -> commonmodule.LogicalNodeForEventAndStatus
	110, // 130: evsemodule.EventAndStatusDEEV.EVId:type_name -> google.protobuf.StringValue
	110, // 131: evsemodule.EventAndStatusDEEV.EMAId:type_name -> google.protobuf.StringValue
	45,  // 132: evsemodule.EventAndStatusDEEV.ConnTypSel:type_name -> evsemodule.ENS_EVConnectionChargingKind
	111, // 133: evsemodule.EventAndStatusDEEV.DptTm:type_name -> commonmodule.ClearingTime
	112, // 134: evsemodule.EventAndStatusDEEV.WHReq:type_name -> commonmodule.MV
	112, // 135: evsemodule.EventAndStatusDEEV.WHAvail:type_name -> commonmodule.MV
	112, // 136: evsemodule.EventAndStatusDEEV.Soc:type_name -> commonmodule.MV
	109, // 137: evsemodule.EventAndStatusDEAO.logicalNodeForEventAndStatus:type_name -> commonmodule.LogicalNodeForEventAndStatus
	46,  // 138: evsemodule.EventAndStatusDEAO.eventAndStatusDEEV:type_name -> evsemodule.EventAndStatusDEEV
	106, // 139: evsemodule.EventAndStatusDEAO.DigComm:type_name -> commonmodule.StatusSPS
	39,  // 140: evsemodule.EventAndStatusDEAO.ConnSt:type_name -> evsemodule.ENS_EVACConnectionStateKind
	41,  // 141: evsemodule.EventAndStatusDEAO.PlgStAC:type_name -> evsemodule.ENS_EVACPlugStateKind
	43,  // 142: evsemodule.EventAndStatusDEAO.CabRtgAC:type_name -> evsemodule.ENS_EVACCableCapabilityKind
	5,   // 143: evsemodule.Optional_EVDCCableCapabilityKind.value:type_name -> evsemodule.EVDCCableCapabilityKind
	107, // 144: evsemodule.ENS_EVDCCableCapabilityKind.q:type_name -> commonmodule.Quality
	5,   // 145: evsemodule.ENS_EVDCCableCapabilityKind.stVal:type_name -> evsemodule.EVDCCableCapabilityKind
	108, // 146: evsemodule.ENS_EVDCCableCapabilityKind.t:type_name -> commonmodule.Timestamp
	6,   // 147: evsemodule.Optional_EVDCConnectionStateAKind.value:type_name -> evsemodule.EVDCConnectionStateAKind
	107, // 148: evsemodule.ENS_EVDCConnectionStateAKind.q:type_name -> commonmodule.Quality
	6,   // 149: evsemodule.ENS_EVDCConnectionStateAKind.stVal:type_name -> evsemodule.EVDCConnectionStateAKind
	108, // 150: evsemodule.ENS_EVDCConnectionStateAKind.t:type_name -> commonmodule.Timestamp
	7,   // 151: evsemodule.Optional_EVDCConnectionStateCKind.value:type_name -> evsemodule.EVDCConnectionStateCKind
	107, // 152: evsemodule.ENS_EVDCConnectionStateCKind.q:type_name -> commonmodule.Quality
	7,   // 153: evsemodule.ENS_EVDCConnectionStateCKind.stVal:type_name -> evsemodule.EVDCConnectionStateCKind
	108, // 154: evsemodule.ENS_EVDCConnectionStateCKind.t:type_name -> commonmodule.Timestamp
	8,   // 155: evsemodule.Optional_EVDCPlugStateKind.value:type_name -> evsemodule.EVDCPlugStateKind
	107, // 156: evsemodule.ENS_EVDCPlugStateKind.q:type_name -> commonmodule.Quality
	8,   // 157: evsemodule.ENS_EVDCPlugStateKind.stVal:type_name -> evsemodule.EVDCPlugStateKind
	108, // 158: evsemodule.ENS_EVDCPlugStateKind.t:type_name -> commonmodule.Timestamp
	109, // 159: evsemodule.EventAndStatusDEDO.logicalNodeForEventAndStatus:type_name -> commonmodule.LogicalNodeForEventAndStatus
	46,  // 160: evsemodule.EventAndStatusDEDO.eventAndStatusDEEV:type_name -> evsemodule.EventAndStatusDEEV
	49,  // 161: evsemodule.EventAndStatusDEDO.CabRtgDC:type_name -> evsemodule.ENS_EVDCCableCapabilityKind
	51,  // 162: evsemodule.EventAndStatusDEDO.ConnStA:type_name -> evsemodule.ENS_EVDCConnectionStateAKind
	53,  // 163: evsemodule.EventAndStatusDEDO.ConnStC:type_name -> evsemodule.ENS_EVDCConnectionStateCKind
	55,  // 164: evsemodule.EventAndStatusDEDO.PlgStDC:type_name -> evsemodule.ENS_EVDCPlugStateKind
	109, // 165: evsemodule.EventAndStatusDESE.logicalNodeForEventAndStatus:type_name -> commonmodule.LogicalNodeForEventAndStatus
	47,  // 166: evsemodule.EventAndStatusDESE.eventAndStatusDEAO:type_name -> evsemodule.EventAndStatusDEAO
	56,  // 167: evsemodule.EventAndStatusDESE.eventAndStatusDEDO:type_name -> evsemodule.EventAndStatusDEDO
	106, // 168: evsemodule.EventAndStatusDESE.IsoTestFlt:type_name -> commonmodule.StatusSPS
	106, // 169: evsemodule.EventAndStatusDESE.ScTestFlt:type_name -> commonmodule.StatusSPS
	106, // 170: evsemodule.EventAndStatusDESE.DigCommLos:type_name -> commonmodule.StatusSPS
	106, // 171: evsemodule.EventAndStatusDESE.WldDet:type_name -> commonmodule.StatusSPS
	37,  // 172: evsemodule.EventAndStatusDESE.PointStatus:type_name -> evsemodule.EVSEPointStatus
	113, // 173: evsemodule.EVSEEvent.eventValue:type_name -> commonmodule.EventValue
	57,  // 174: evsemodule.EVSEEvent.eventAndStatusDESE:type_name -> evsemodule.EventAndStatusDESE
	114, // 175: evsemodule.EVSEEventProfile.eventMessageInfo:type_name -> commonmodule.EventMessageInfo
	13,  // 176: evsemodule.EVSEEventProfile.evse:type_name -> evsemodule.EVSE
	58,  // 177: evsemodule.EVSEEventProfile.evseEvent:type_name -> evsemodule.EVSEEvent
	68,  // 178: evsemodule.ReadingDEEV.logicalNode:type_name -> commonmodule.LogicalNode
	112, // 179: evsemodule.ReadingDEEV.Soc:type_name -> commonmodule.MV
	68,  // 180: evsemodule.ReadingDEAO.logicalNode:type_name -> commonmodule.LogicalNode
	60,  // 181: evsemodule.ReadingDEAO.readingDEEV:type_name -> evsemodule.ReadingDEEV
	68,  // 182: evsemodule.ReadingDEDO.logicalNode:type_name -> commonmodule.LogicalNode
	60,  // 183: evsemodule.ReadingDEDO.readingDEEV:type_name -> evsemodule.ReadingDEEV
	68,  // 184: evsemodule.EVSEReadingDESE.logicalNode:type_name -> commonmodule.LogicalNode
	61,  // 185: evsemodule.EVSEReadingDESE.readingDEAO:type_name -> evsemodule.ReadingDEAO
	62,  // 186: evsemodule.EVSEReadingDESE.readingDEDO:type_name -> evsemodule.ReadingDEDO
	112, // 187: evsemodule.EVSEReadingDESE.ChaV:type_name -> commonmodule.MV
	112, // 188: evsemodule.EVSEReadingDESE.ChaA:type_name -> commonmodule.MV
	112, // 189: evsemodule.EVSEReadingDESE.ChaW:type_name -> commonmodule.MV
	112, // 190: evsemodule.EVSEReadingDESE.ChaWh:type_name -> commonmodule.MV
	115, // 191: evsemodule.EVSEReading.conductingEquipmentTerminalReading:type_name -> commonmodule.ConductingEquipmentTerminalReading
	116, // 192: evsemodule.EVSEReading.readingMMXU:type_name -> commonmodule.ReadingMMXU
	117, // 193: evsemodule.EVSEReading.readingMMTR:type_name -> commonmodule.ReadingMMTR
	63,  // 194: evsemodule.EVSEReading.evseReadingDESE:type_name -> evsemodule.EVSEReadingDESE
	118, // 195: evsemodule.EVSEReading.phaseMMTN:type_name -> commonmodule.PhaseMMTN
	119, // 196: evsemodule.EVSEReading.readingMMDC:type_name -> commonmodule.ReadingMMDC
	120, // 197: evsemodule.EVSEReadingProfile.readingMessageInfo:type_name -> commonmodule.ReadingMessageInfo
	13,  // 198: evsemodule.EVSEReadingProfile.evse:type_name -> evsemodule.EVSE
	64,  // 199: evsemodule.EVSEReadingProfile.evseReading:type_name -> evsemodule.EVSEReading
	121, // 200: evsemodule.EVSEStatus.statusValue:type_name -> commonmodule.StatusValue
	57,  // 201: evsemodule.EVSEStatus.eventAndStatusDESE:type_name -> evsemodule.EventAndStatusDESE
	122, // 202: evsemodule.EVSEStatusProfile.statusMessageInfo:type_name -> commonmodule.StatusMessageInfo
	13,  // 203: evsemodule.EVSEStatusProfile.evse:type_name -> evsemodule.EVSE
	66,  // 204: evsemodule.EVSEStatusProfile.evseStatus:type_name -> evsemodule.EVSEStatus
	205, // [205:205] is the sub-list for method output_type
	205, // [205:205] is the sub-list for method input_type
	205, // [205:205] is the sub-list for extension type_name
	205, // [205:205] is the sub-list for extension extendee
	0,   // [0:205] is the sub-list for field type_name
}

func init() { file_evsemodule_evsemodule_proto_init() }
func file_evsemodule_evsemodule_proto_init() {
	if File_evsemodule_evsemodule_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_evsemodule_evsemodule_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   59,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_evsemodule_evsemodule_proto_goTypes,
		DependencyIndexes: file_evsemodule_evsemodule_proto_depIdxs,
		EnumInfos:         file_evsemodule_evsemodule_proto_enumTypes,
		MessageInfos:      file_evsemodule_evsemodule_proto_msgTypes,
	}.Build()
	File_evsemodule_evsemodule_proto = out.File
	file_evsemodule_evsemodule_proto_rawDesc = nil
	file_evsemodule_evsemodule_proto_goTypes = nil
	file_evsemodule_evsemodule_proto_depIdxs = nil
}
