// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.22.2
// source: switchmodule/switchmodule.proto

// OpenFMB Operational Model (61850-CIM) (v2.1.0).eapx
// Monday, April 3, 2023 7:34:35 PM UTC

package switchmodule

import (
	_ "gitlab.com/openfmb/psm/ops/protobuf/go-openfmb-ops-protobuf/v2/openfmb"
	commonmodule "gitlab.com/openfmb/psm/ops/protobuf/go-openfmb-ops-protobuf/v2/openfmb/commonmodule"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// OpenFMB specialization for switch control:  LN: Circuit switch   Name: XSWI
type SwitchDiscreteControlXSWI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	LogicalNodeForControl *commonmodule.LogicalNodeForControl `protobuf:"bytes,1,opt,name=logicalNodeForControl,proto3" json:"logicalNodeForControl,omitempty"`
	// MISSING DOCUMENTATION!!!
	Pos *commonmodule.PhaseDPC `protobuf:"bytes,2,opt,name=Pos,proto3" json:"Pos,omitempty"`
	// MISSING DOCUMENTATION!!!
	ResetProtectionPickup *commonmodule.ControlSPC `protobuf:"bytes,3,opt,name=ResetProtectionPickup,proto3" json:"ResetProtectionPickup,omitempty"`
}

func (x *SwitchDiscreteControlXSWI) Reset() {
	*x = SwitchDiscreteControlXSWI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_switchmodule_switchmodule_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchDiscreteControlXSWI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchDiscreteControlXSWI) ProtoMessage() {}

func (x *SwitchDiscreteControlXSWI) ProtoReflect() protoreflect.Message {
	mi := &file_switchmodule_switchmodule_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchDiscreteControlXSWI.ProtoReflect.Descriptor instead.
func (*SwitchDiscreteControlXSWI) Descriptor() ([]byte, []int) {
	return file_switchmodule_switchmodule_proto_rawDescGZIP(), []int{0}
}

func (x *SwitchDiscreteControlXSWI) GetLogicalNodeForControl() *commonmodule.LogicalNodeForControl {
	if x != nil {
		return x.LogicalNodeForControl
	}
	return nil
}

func (x *SwitchDiscreteControlXSWI) GetPos() *commonmodule.PhaseDPC {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SwitchDiscreteControlXSWI) GetResetProtectionPickup() *commonmodule.ControlSPC {
	if x != nil {
		return x.ResetProtectionPickup
	}
	return nil
}

// Switch discrete control
type SwitchDiscreteControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ControlValue *commonmodule.ControlValue `protobuf:"bytes,1,opt,name=controlValue,proto3" json:"controlValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	Check *commonmodule.CheckConditions `protobuf:"bytes,2,opt,name=check,proto3" json:"check,omitempty"`
	// MISSING DOCUMENTATION!!!
	SwitchDiscreteControlXSWI *SwitchDiscreteControlXSWI `protobuf:"bytes,3,opt,name=switchDiscreteControlXSWI,proto3" json:"switchDiscreteControlXSWI,omitempty"`
}

func (x *SwitchDiscreteControl) Reset() {
	*x = SwitchDiscreteControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_switchmodule_switchmodule_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchDiscreteControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchDiscreteControl) ProtoMessage() {}

func (x *SwitchDiscreteControl) ProtoReflect() protoreflect.Message {
	mi := &file_switchmodule_switchmodule_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchDiscreteControl.ProtoReflect.Descriptor instead.
func (*SwitchDiscreteControl) Descriptor() ([]byte, []int) {
	return file_switchmodule_switchmodule_proto_rawDescGZIP(), []int{1}
}

func (x *SwitchDiscreteControl) GetControlValue() *commonmodule.ControlValue {
	if x != nil {
		return x.ControlValue
	}
	return nil
}

func (x *SwitchDiscreteControl) GetCheck() *commonmodule.CheckConditions {
	if x != nil {
		return x.Check
	}
	return nil
}

func (x *SwitchDiscreteControl) GetSwitchDiscreteControlXSWI() *SwitchDiscreteControlXSWI {
	if x != nil {
		return x.SwitchDiscreteControlXSWI
	}
	return nil
}

// A ProtectedSwitch is a switching device that can be operated by ProtectionEquipment.
type ProtectedSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ConductingEquipment *commonmodule.ConductingEquipment `protobuf:"bytes,1,opt,name=conductingEquipment,proto3" json:"conductingEquipment,omitempty"`
}

func (x *ProtectedSwitch) Reset() {
	*x = ProtectedSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_switchmodule_switchmodule_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectedSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectedSwitch) ProtoMessage() {}

func (x *ProtectedSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_switchmodule_switchmodule_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectedSwitch.ProtoReflect.Descriptor instead.
func (*ProtectedSwitch) Descriptor() ([]byte, []int) {
	return file_switchmodule_switchmodule_proto_rawDescGZIP(), []int{2}
}

func (x *ProtectedSwitch) GetConductingEquipment() *commonmodule.ConductingEquipment {
	if x != nil {
		return x.ConductingEquipment
	}
	return nil
}

// Switch control profile
type SwitchDiscreteControlProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ControlMessageInfo *commonmodule.ControlMessageInfo `protobuf:"bytes,1,opt,name=controlMessageInfo,proto3" json:"controlMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	ProtectedSwitch *ProtectedSwitch `protobuf:"bytes,2,opt,name=protectedSwitch,proto3" json:"protectedSwitch,omitempty"`
	// MISSING DOCUMENTATION!!!
	SwitchDiscreteControl *SwitchDiscreteControl `protobuf:"bytes,3,opt,name=switchDiscreteControl,proto3" json:"switchDiscreteControl,omitempty"`
}

func (x *SwitchDiscreteControlProfile) Reset() {
	*x = SwitchDiscreteControlProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_switchmodule_switchmodule_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchDiscreteControlProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchDiscreteControlProfile) ProtoMessage() {}

func (x *SwitchDiscreteControlProfile) ProtoReflect() protoreflect.Message {
	mi := &file_switchmodule_switchmodule_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchDiscreteControlProfile.ProtoReflect.Descriptor instead.
func (*SwitchDiscreteControlProfile) Descriptor() ([]byte, []int) {
	return file_switchmodule_switchmodule_proto_rawDescGZIP(), []int{3}
}

func (x *SwitchDiscreteControlProfile) GetControlMessageInfo() *commonmodule.ControlMessageInfo {
	if x != nil {
		return x.ControlMessageInfo
	}
	return nil
}

func (x *SwitchDiscreteControlProfile) GetProtectedSwitch() *ProtectedSwitch {
	if x != nil {
		return x.ProtectedSwitch
	}
	return nil
}

func (x *SwitchDiscreteControlProfile) GetSwitchDiscreteControl() *SwitchDiscreteControl {
	if x != nil {
		return x.SwitchDiscreteControl
	}
	return nil
}

// OpenFMB specialization for SwitchEventProfile
type SwitchEventXSWI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	LogicalNodeForEventAndStatus *commonmodule.LogicalNodeForEventAndStatus `protobuf:"bytes,1,opt,name=logicalNodeForEventAndStatus,proto3" json:"logicalNodeForEventAndStatus,omitempty"`
	// Dynamic test status
	DynamicTest *commonmodule.ENS_DynamicTestKind `protobuf:"bytes,2,opt,name=DynamicTest,proto3" json:"DynamicTest,omitempty"`
	// MISSING DOCUMENTATION!!!
	Pos *commonmodule.PhaseDPS `protobuf:"bytes,3,opt,name=Pos,proto3" json:"Pos,omitempty"`
}

func (x *SwitchEventXSWI) Reset() {
	*x = SwitchEventXSWI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_switchmodule_switchmodule_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchEventXSWI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchEventXSWI) ProtoMessage() {}

func (x *SwitchEventXSWI) ProtoReflect() protoreflect.Message {
	mi := &file_switchmodule_switchmodule_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchEventXSWI.ProtoReflect.Descriptor instead.
func (*SwitchEventXSWI) Descriptor() ([]byte, []int) {
	return file_switchmodule_switchmodule_proto_rawDescGZIP(), []int{4}
}

func (x *SwitchEventXSWI) GetLogicalNodeForEventAndStatus() *commonmodule.LogicalNodeForEventAndStatus {
	if x != nil {
		return x.LogicalNodeForEventAndStatus
	}
	return nil
}

func (x *SwitchEventXSWI) GetDynamicTest() *commonmodule.ENS_DynamicTestKind {
	if x != nil {
		return x.DynamicTest
	}
	return nil
}

func (x *SwitchEventXSWI) GetPos() *commonmodule.PhaseDPS {
	if x != nil {
		return x.Pos
	}
	return nil
}

// Switch event
type SwitchEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	EventValue *commonmodule.EventValue `protobuf:"bytes,1,opt,name=eventValue,proto3" json:"eventValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	SwitchEventXSWI *SwitchEventXSWI `protobuf:"bytes,2,opt,name=switchEventXSWI,proto3" json:"switchEventXSWI,omitempty"`
}

func (x *SwitchEvent) Reset() {
	*x = SwitchEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_switchmodule_switchmodule_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchEvent) ProtoMessage() {}

func (x *SwitchEvent) ProtoReflect() protoreflect.Message {
	mi := &file_switchmodule_switchmodule_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchEvent.ProtoReflect.Descriptor instead.
func (*SwitchEvent) Descriptor() ([]byte, []int) {
	return file_switchmodule_switchmodule_proto_rawDescGZIP(), []int{5}
}

func (x *SwitchEvent) GetEventValue() *commonmodule.EventValue {
	if x != nil {
		return x.EventValue
	}
	return nil
}

func (x *SwitchEvent) GetSwitchEventXSWI() *SwitchEventXSWI {
	if x != nil {
		return x.SwitchEventXSWI
	}
	return nil
}

// Switch event profile
type SwitchEventProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	EventMessageInfo *commonmodule.EventMessageInfo `protobuf:"bytes,1,opt,name=eventMessageInfo,proto3" json:"eventMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	ProtectedSwitch *ProtectedSwitch `protobuf:"bytes,2,opt,name=protectedSwitch,proto3" json:"protectedSwitch,omitempty"`
	// MISSING DOCUMENTATION!!!
	SwitchEvent *SwitchEvent `protobuf:"bytes,3,opt,name=switchEvent,proto3" json:"switchEvent,omitempty"`
}

func (x *SwitchEventProfile) Reset() {
	*x = SwitchEventProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_switchmodule_switchmodule_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchEventProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchEventProfile) ProtoMessage() {}

func (x *SwitchEventProfile) ProtoReflect() protoreflect.Message {
	mi := &file_switchmodule_switchmodule_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchEventProfile.ProtoReflect.Descriptor instead.
func (*SwitchEventProfile) Descriptor() ([]byte, []int) {
	return file_switchmodule_switchmodule_proto_rawDescGZIP(), []int{6}
}

func (x *SwitchEventProfile) GetEventMessageInfo() *commonmodule.EventMessageInfo {
	if x != nil {
		return x.EventMessageInfo
	}
	return nil
}

func (x *SwitchEventProfile) GetProtectedSwitch() *ProtectedSwitch {
	if x != nil {
		return x.ProtectedSwitch
	}
	return nil
}

func (x *SwitchEventProfile) GetSwitchEvent() *SwitchEvent {
	if x != nil {
		return x.SwitchEvent
	}
	return nil
}

// Switch reading value
type SwitchReading struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ConductingEquipmentTerminalReading *commonmodule.ConductingEquipmentTerminalReading `protobuf:"bytes,1,opt,name=conductingEquipmentTerminalReading,proto3" json:"conductingEquipmentTerminalReading,omitempty"`
	// MISSING DOCUMENTATION!!!
	DiffReadingMMXU *commonmodule.ReadingMMXU `protobuf:"bytes,2,opt,name=diffReadingMMXU,proto3" json:"diffReadingMMXU,omitempty"`
	// MISSING DOCUMENTATION!!!
	PhaseMMTN *commonmodule.PhaseMMTN `protobuf:"bytes,3,opt,name=phaseMMTN,proto3" json:"phaseMMTN,omitempty"`
	// MISSING DOCUMENTATION!!!
	ReadingMMTR *commonmodule.ReadingMMTR `protobuf:"bytes,4,opt,name=readingMMTR,proto3" json:"readingMMTR,omitempty"`
	// MISSING DOCUMENTATION!!!
	ReadingMMXU *commonmodule.ReadingMMXU `protobuf:"bytes,5,opt,name=readingMMXU,proto3" json:"readingMMXU,omitempty"`
}

func (x *SwitchReading) Reset() {
	*x = SwitchReading{}
	if protoimpl.UnsafeEnabled {
		mi := &file_switchmodule_switchmodule_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchReading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchReading) ProtoMessage() {}

func (x *SwitchReading) ProtoReflect() protoreflect.Message {
	mi := &file_switchmodule_switchmodule_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchReading.ProtoReflect.Descriptor instead.
func (*SwitchReading) Descriptor() ([]byte, []int) {
	return file_switchmodule_switchmodule_proto_rawDescGZIP(), []int{7}
}

func (x *SwitchReading) GetConductingEquipmentTerminalReading() *commonmodule.ConductingEquipmentTerminalReading {
	if x != nil {
		return x.ConductingEquipmentTerminalReading
	}
	return nil
}

func (x *SwitchReading) GetDiffReadingMMXU() *commonmodule.ReadingMMXU {
	if x != nil {
		return x.DiffReadingMMXU
	}
	return nil
}

func (x *SwitchReading) GetPhaseMMTN() *commonmodule.PhaseMMTN {
	if x != nil {
		return x.PhaseMMTN
	}
	return nil
}

func (x *SwitchReading) GetReadingMMTR() *commonmodule.ReadingMMTR {
	if x != nil {
		return x.ReadingMMTR
	}
	return nil
}

func (x *SwitchReading) GetReadingMMXU() *commonmodule.ReadingMMXU {
	if x != nil {
		return x.ReadingMMXU
	}
	return nil
}

// Switch reading profile
type SwitchReadingProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	ReadingMessageInfo *commonmodule.ReadingMessageInfo `protobuf:"bytes,1,opt,name=readingMessageInfo,proto3" json:"readingMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	ProtectedSwitch *ProtectedSwitch `protobuf:"bytes,2,opt,name=protectedSwitch,proto3" json:"protectedSwitch,omitempty"`
	// MISSING DOCUMENTATION!!!
	SwitchReading []*SwitchReading `protobuf:"bytes,3,rep,name=switchReading,proto3" json:"switchReading,omitempty"`
}

func (x *SwitchReadingProfile) Reset() {
	*x = SwitchReadingProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_switchmodule_switchmodule_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchReadingProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchReadingProfile) ProtoMessage() {}

func (x *SwitchReadingProfile) ProtoReflect() protoreflect.Message {
	mi := &file_switchmodule_switchmodule_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchReadingProfile.ProtoReflect.Descriptor instead.
func (*SwitchReadingProfile) Descriptor() ([]byte, []int) {
	return file_switchmodule_switchmodule_proto_rawDescGZIP(), []int{8}
}

func (x *SwitchReadingProfile) GetReadingMessageInfo() *commonmodule.ReadingMessageInfo {
	if x != nil {
		return x.ReadingMessageInfo
	}
	return nil
}

func (x *SwitchReadingProfile) GetProtectedSwitch() *ProtectedSwitch {
	if x != nil {
		return x.ProtectedSwitch
	}
	return nil
}

func (x *SwitchReadingProfile) GetSwitchReading() []*SwitchReading {
	if x != nil {
		return x.SwitchReading
	}
	return nil
}

// OpenFMB specialization for SwitchStatusProfile
type SwitchStatusXSWI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	LogicalNodeForEventAndStatus *commonmodule.LogicalNodeForEventAndStatus `protobuf:"bytes,1,opt,name=logicalNodeForEventAndStatus,proto3" json:"logicalNodeForEventAndStatus,omitempty"`
	// MISSING DOCUMENTATION!!!
	DynamicTest *commonmodule.ENS_DynamicTestKind `protobuf:"bytes,2,opt,name=DynamicTest,proto3" json:"DynamicTest,omitempty"`
	// MISSING DOCUMENTATION!!!
	Pos *commonmodule.PhaseDPS `protobuf:"bytes,4,opt,name=Pos,proto3" json:"Pos,omitempty"`
	// Fault latch: LT01=51A OR 51B OR 51C
	ProtectionPickup *commonmodule.PhaseSPS `protobuf:"bytes,5,opt,name=ProtectionPickup,proto3" json:"ProtectionPickup,omitempty"`
}

func (x *SwitchStatusXSWI) Reset() {
	*x = SwitchStatusXSWI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_switchmodule_switchmodule_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchStatusXSWI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchStatusXSWI) ProtoMessage() {}

func (x *SwitchStatusXSWI) ProtoReflect() protoreflect.Message {
	mi := &file_switchmodule_switchmodule_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchStatusXSWI.ProtoReflect.Descriptor instead.
func (*SwitchStatusXSWI) Descriptor() ([]byte, []int) {
	return file_switchmodule_switchmodule_proto_rawDescGZIP(), []int{9}
}

func (x *SwitchStatusXSWI) GetLogicalNodeForEventAndStatus() *commonmodule.LogicalNodeForEventAndStatus {
	if x != nil {
		return x.LogicalNodeForEventAndStatus
	}
	return nil
}

func (x *SwitchStatusXSWI) GetDynamicTest() *commonmodule.ENS_DynamicTestKind {
	if x != nil {
		return x.DynamicTest
	}
	return nil
}

func (x *SwitchStatusXSWI) GetPos() *commonmodule.PhaseDPS {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SwitchStatusXSWI) GetProtectionPickup() *commonmodule.PhaseSPS {
	if x != nil {
		return x.ProtectionPickup
	}
	return nil
}

// Switch status
type SwitchStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	StatusValue *commonmodule.StatusValue `protobuf:"bytes,1,opt,name=statusValue,proto3" json:"statusValue,omitempty"`
	// MISSING DOCUMENTATION!!!
	SwitchStatusXSWI *SwitchStatusXSWI `protobuf:"bytes,2,opt,name=switchStatusXSWI,proto3" json:"switchStatusXSWI,omitempty"`
}

func (x *SwitchStatus) Reset() {
	*x = SwitchStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_switchmodule_switchmodule_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchStatus) ProtoMessage() {}

func (x *SwitchStatus) ProtoReflect() protoreflect.Message {
	mi := &file_switchmodule_switchmodule_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchStatus.ProtoReflect.Descriptor instead.
func (*SwitchStatus) Descriptor() ([]byte, []int) {
	return file_switchmodule_switchmodule_proto_rawDescGZIP(), []int{10}
}

func (x *SwitchStatus) GetStatusValue() *commonmodule.StatusValue {
	if x != nil {
		return x.StatusValue
	}
	return nil
}

func (x *SwitchStatus) GetSwitchStatusXSWI() *SwitchStatusXSWI {
	if x != nil {
		return x.SwitchStatusXSWI
	}
	return nil
}

// Switch status profile
type SwitchStatusProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UML inherited base object
	StatusMessageInfo *commonmodule.StatusMessageInfo `protobuf:"bytes,1,opt,name=statusMessageInfo,proto3" json:"statusMessageInfo,omitempty"`
	// MISSING DOCUMENTATION!!!
	ProtectedSwitch *ProtectedSwitch `protobuf:"bytes,2,opt,name=protectedSwitch,proto3" json:"protectedSwitch,omitempty"`
	// MISSING DOCUMENTATION!!!
	SwitchStatus *SwitchStatus `protobuf:"bytes,3,opt,name=switchStatus,proto3" json:"switchStatus,omitempty"`
}

func (x *SwitchStatusProfile) Reset() {
	*x = SwitchStatusProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_switchmodule_switchmodule_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchStatusProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchStatusProfile) ProtoMessage() {}

func (x *SwitchStatusProfile) ProtoReflect() protoreflect.Message {
	mi := &file_switchmodule_switchmodule_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchStatusProfile.ProtoReflect.Descriptor instead.
func (*SwitchStatusProfile) Descriptor() ([]byte, []int) {
	return file_switchmodule_switchmodule_proto_rawDescGZIP(), []int{11}
}

func (x *SwitchStatusProfile) GetStatusMessageInfo() *commonmodule.StatusMessageInfo {
	if x != nil {
		return x.StatusMessageInfo
	}
	return nil
}

func (x *SwitchStatusProfile) GetProtectedSwitch() *ProtectedSwitch {
	if x != nil {
		return x.ProtectedSwitch
	}
	return nil
}

func (x *SwitchStatusProfile) GetSwitchStatus() *SwitchStatus {
	if x != nil {
		return x.SwitchStatus
	}
	return nil
}

var File_switchmodule_switchmodule_proto protoreflect.FileDescriptor

var file_switchmodule_switchmodule_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0c, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x1a,
	0x09, 0x75, 0x6d, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf6, 0x01, 0x0a, 0x19,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x58, 0x53, 0x57, 0x49, 0x12, 0x5f, 0x0a, 0x15, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e,
	0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x01, 0x52, 0x15, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65,
	0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x28, 0x0a, 0x03, 0x50, 0x6f,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x44, 0x50, 0x43, 0x52,
	0x03, 0x50, 0x6f, 0x73, 0x12, 0x4e, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x50, 0x43, 0x52, 0x15, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69,
	0x63, 0x6b, 0x75, 0x70, 0x22, 0xf9, 0x01, 0x0a, 0x15, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x44,
	0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x44,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x65, 0x0a, 0x19, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x58, 0x53, 0x57, 0x49, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x58, 0x53, 0x57, 0x49, 0x52, 0x19, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x44, 0x69, 0x73,
	0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x58, 0x53, 0x57, 0x49,
	0x22, 0x6c, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x12, 0x59, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6e,
	0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xb4,
	0x02, 0x0a, 0x1c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x56, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x01, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x51, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x42,
	0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x63, 0x0a, 0x15, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x44,
	0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x08,
	0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x15, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x3a,
	0x04, 0xc0, 0xf3, 0x18, 0x01, 0x22, 0xf6, 0x01, 0x0a, 0x0f, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x58, 0x53, 0x57, 0x49, 0x12, 0x74, 0x0a, 0x1c, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x01, 0x52, 0x1c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x43, 0x0a, 0x0b, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x45, 0x4e, 0x53, 0x5f, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54,
	0x65, 0x73, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0b, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x54, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x50, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x44, 0x50, 0x53, 0x52, 0x03, 0x50, 0x6f, 0x73, 0x22, 0x96,
	0x01, 0x0a, 0x0b, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3e,
	0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x01, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x47,
	0x0a, 0x0f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x58, 0x53, 0x57,
	0x49, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x58, 0x53, 0x57, 0x49, 0x52, 0x0f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x58, 0x53, 0x57, 0x49, 0x22, 0x86, 0x02, 0x0a, 0x12, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x50,
	0x0a, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x10,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x51, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5,
	0x18, 0x01, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x12, 0x45, 0x0a, 0x0b, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x3a, 0x04, 0xc0, 0xf3, 0x18, 0x01,
	0x22, 0x8e, 0x03, 0x0a, 0x0d, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x86, 0x01, 0x0a, 0x22, 0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6e,
	0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x22, 0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x0f, 0x64,
	0x69, 0x66, 0x66, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x58, 0x55, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x58, 0x55, 0x52,
	0x0f, 0x64, 0x69, 0x66, 0x66, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x58, 0x55,
	0x12, 0x35, 0x0a, 0x09, 0x70, 0x68, 0x61, 0x73, 0x65, 0x4d, 0x4d, 0x54, 0x4e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x4d, 0x4d, 0x54, 0x4e, 0x52, 0x09, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x4d, 0x4d, 0x54, 0x4e, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x4d, 0x4d, 0x54, 0x52, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x54, 0x52, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x4d, 0x4d, 0x54, 0x52, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d,
	0x4d, 0x58, 0x55, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x4d, 0x4d, 0x58, 0x55, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x4d, 0x58,
	0x55, 0x22, 0x98, 0x02, 0x0a, 0x14, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x56, 0x0a, 0x12, 0x72, 0x65,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x12,
	0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x51, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01,
	0x90, 0xb5, 0x18, 0x01, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x4f, 0x0a, 0x0d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x0c, 0x88, 0xb5, 0x18, 0x01, 0x90,
	0xb5, 0x18, 0x01, 0x98, 0xb5, 0x18, 0x02, 0x52, 0x0d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x04, 0xc0, 0xf3, 0x18, 0x01, 0x22, 0xc5, 0x02, 0x0a,
	0x10, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x58, 0x53, 0x57,
	0x49, 0x12, 0x74, 0x0a, 0x1c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65,
	0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f,
	0x64, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x1c, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x4e, 0x53, 0x5f,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x52,
	0x0b, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x03,
	0x50, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x44, 0x50,
	0x53, 0x52, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x4c, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x53, 0x50, 0x53, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5,
	0x18, 0x01, 0x52, 0x10, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69,
	0x63, 0x6b, 0x75, 0x70, 0x22, 0x9d, 0x01, 0x0a, 0x0c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4a, 0x0a, 0x10, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x58, 0x53, 0x57, 0x49, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x58, 0x53,
	0x57, 0x49, 0x52, 0x10, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x58, 0x53, 0x57, 0x49, 0x22, 0x8d, 0x02, 0x0a, 0x13, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x53, 0x0a, 0x11,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x11,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x51, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90,
	0xb5, 0x18, 0x01, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0x88, 0xb5, 0x18, 0x01, 0x90, 0xb5, 0x18, 0x01,
	0x52, 0x0c, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x04,
	0xc0, 0xf3, 0x18, 0x01, 0x42, 0x84, 0x01, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62,
	0x2e, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x01, 0x5a,
	0x53, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
	0x66, 0x6d, 0x62, 0x2f, 0x70, 0x73, 0x6d, 0x2f, 0x6f, 0x70, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2d,
	0x6f, 0x70, 0x73, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x32, 0x2f,
	0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0xaa, 0x02, 0x14, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x62, 0x2e, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_switchmodule_switchmodule_proto_rawDescOnce sync.Once
	file_switchmodule_switchmodule_proto_rawDescData = file_switchmodule_switchmodule_proto_rawDesc
)

func file_switchmodule_switchmodule_proto_rawDescGZIP() []byte {
	file_switchmodule_switchmodule_proto_rawDescOnce.Do(func() {
		file_switchmodule_switchmodule_proto_rawDescData = protoimpl.X.CompressGZIP(file_switchmodule_switchmodule_proto_rawDescData)
	})
	return file_switchmodule_switchmodule_proto_rawDescData
}

var file_switchmodule_switchmodule_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_switchmodule_switchmodule_proto_goTypes = []interface{}{
	(*SwitchDiscreteControlXSWI)(nil),                       // 0: switchmodule.SwitchDiscreteControlXSWI
	(*SwitchDiscreteControl)(nil),                           // 1: switchmodule.SwitchDiscreteControl
	(*ProtectedSwitch)(nil),                                 // 2: switchmodule.ProtectedSwitch
	(*SwitchDiscreteControlProfile)(nil),                    // 3: switchmodule.SwitchDiscreteControlProfile
	(*SwitchEventXSWI)(nil),                                 // 4: switchmodule.SwitchEventXSWI
	(*SwitchEvent)(nil),                                     // 5: switchmodule.SwitchEvent
	(*SwitchEventProfile)(nil),                              // 6: switchmodule.SwitchEventProfile
	(*SwitchReading)(nil),                                   // 7: switchmodule.SwitchReading
	(*SwitchReadingProfile)(nil),                            // 8: switchmodule.SwitchReadingProfile
	(*SwitchStatusXSWI)(nil),                                // 9: switchmodule.SwitchStatusXSWI
	(*SwitchStatus)(nil),                                    // 10: switchmodule.SwitchStatus
	(*SwitchStatusProfile)(nil),                             // 11: switchmodule.SwitchStatusProfile
	(*commonmodule.LogicalNodeForControl)(nil),              // 12: commonmodule.LogicalNodeForControl
	(*commonmodule.PhaseDPC)(nil),                           // 13: commonmodule.PhaseDPC
	(*commonmodule.ControlSPC)(nil),                         // 14: commonmodule.ControlSPC
	(*commonmodule.ControlValue)(nil),                       // 15: commonmodule.ControlValue
	(*commonmodule.CheckConditions)(nil),                    // 16: commonmodule.CheckConditions
	(*commonmodule.ConductingEquipment)(nil),                // 17: commonmodule.ConductingEquipment
	(*commonmodule.ControlMessageInfo)(nil),                 // 18: commonmodule.ControlMessageInfo
	(*commonmodule.LogicalNodeForEventAndStatus)(nil),       // 19: commonmodule.LogicalNodeForEventAndStatus
	(*commonmodule.ENS_DynamicTestKind)(nil),                // 20: commonmodule.ENS_DynamicTestKind
	(*commonmodule.PhaseDPS)(nil),                           // 21: commonmodule.PhaseDPS
	(*commonmodule.EventValue)(nil),                         // 22: commonmodule.EventValue
	(*commonmodule.EventMessageInfo)(nil),                   // 23: commonmodule.EventMessageInfo
	(*commonmodule.ConductingEquipmentTerminalReading)(nil), // 24: commonmodule.ConductingEquipmentTerminalReading
	(*commonmodule.ReadingMMXU)(nil),                        // 25: commonmodule.ReadingMMXU
	(*commonmodule.PhaseMMTN)(nil),                          // 26: commonmodule.PhaseMMTN
	(*commonmodule.ReadingMMTR)(nil),                        // 27: commonmodule.ReadingMMTR
	(*commonmodule.ReadingMessageInfo)(nil),                 // 28: commonmodule.ReadingMessageInfo
	(*commonmodule.PhaseSPS)(nil),                           // 29: commonmodule.PhaseSPS
	(*commonmodule.StatusValue)(nil),                        // 30: commonmodule.StatusValue
	(*commonmodule.StatusMessageInfo)(nil),                  // 31: commonmodule.StatusMessageInfo
}
var file_switchmodule_switchmodule_proto_depIdxs = []int32{
	12, // 0: switchmodule.SwitchDiscreteControlXSWI.logicalNodeForControl:type_name -> commonmodule.LogicalNodeForControl
	13, // 1: switchmodule.SwitchDiscreteControlXSWI.Pos:type_name -> commonmodule.PhaseDPC
	14, // 2: switchmodule.SwitchDiscreteControlXSWI.ResetProtectionPickup:type_name -> commonmodule.ControlSPC
	15, // 3: switchmodule.SwitchDiscreteControl.controlValue:type_name -> commonmodule.ControlValue
	16, // 4: switchmodule.SwitchDiscreteControl.check:type_name -> commonmodule.CheckConditions
	0,  // 5: switchmodule.SwitchDiscreteControl.switchDiscreteControlXSWI:type_name -> switchmodule.SwitchDiscreteControlXSWI
	17, // 6: switchmodule.ProtectedSwitch.conductingEquipment:type_name -> commonmodule.ConductingEquipment
	18, // 7: switchmodule.SwitchDiscreteControlProfile.controlMessageInfo:type_name -> commonmodule.ControlMessageInfo
	2,  // 8: switchmodule.SwitchDiscreteControlProfile.protectedSwitch:type_name -> switchmodule.ProtectedSwitch
	1,  // 9: switchmodule.SwitchDiscreteControlProfile.switchDiscreteControl:type_name -> switchmodule.SwitchDiscreteControl
	19, // 10: switchmodule.SwitchEventXSWI.logicalNodeForEventAndStatus:type_name -> commonmodule.LogicalNodeForEventAndStatus
	20, // 11: switchmodule.SwitchEventXSWI.DynamicTest:type_name -> commonmodule.ENS_DynamicTestKind
	21, // 12: switchmodule.SwitchEventXSWI.Pos:type_name -> commonmodule.PhaseDPS
	22, // 13: switchmodule.SwitchEvent.eventValue:type_name -> commonmodule.EventValue
	4,  // 14: switchmodule.SwitchEvent.switchEventXSWI:type_name -> switchmodule.SwitchEventXSWI
	23, // 15: switchmodule.SwitchEventProfile.eventMessageInfo:type_name -> commonmodule.EventMessageInfo
	2,  // 16: switchmodule.SwitchEventProfile.protectedSwitch:type_name -> switchmodule.ProtectedSwitch
	5,  // 17: switchmodule.SwitchEventProfile.switchEvent:type_name -> switchmodule.SwitchEvent
	24, // 18: switchmodule.SwitchReading.conductingEquipmentTerminalReading:type_name -> commonmodule.ConductingEquipmentTerminalReading
	25, // 19: switchmodule.SwitchReading.diffReadingMMXU:type_name -> commonmodule.ReadingMMXU
	26, // 20: switchmodule.SwitchReading.phaseMMTN:type_name -> commonmodule.PhaseMMTN
	27, // 21: switchmodule.SwitchReading.readingMMTR:type_name -> commonmodule.ReadingMMTR
	25, // 22: switchmodule.SwitchReading.readingMMXU:type_name -> commonmodule.ReadingMMXU
	28, // 23: switchmodule.SwitchReadingProfile.readingMessageInfo:type_name -> commonmodule.ReadingMessageInfo
	2,  // 24: switchmodule.SwitchReadingProfile.protectedSwitch:type_name -> switchmodule.ProtectedSwitch
	7,  // 25: switchmodule.SwitchReadingProfile.switchReading:type_name -> switchmodule.SwitchReading
	19, // 26: switchmodule.SwitchStatusXSWI.logicalNodeForEventAndStatus:type_name -> commonmodule.LogicalNodeForEventAndStatus
	20, // 27: switchmodule.SwitchStatusXSWI.DynamicTest:type_name -> commonmodule.ENS_DynamicTestKind
	21, // 28: switchmodule.SwitchStatusXSWI.Pos:type_name -> commonmodule.PhaseDPS
	29, // 29: switchmodule.SwitchStatusXSWI.ProtectionPickup:type_name -> commonmodule.PhaseSPS
	30, // 30: switchmodule.SwitchStatus.statusValue:type_name -> commonmodule.StatusValue
	9,  // 31: switchmodule.SwitchStatus.switchStatusXSWI:type_name -> switchmodule.SwitchStatusXSWI
	31, // 32: switchmodule.SwitchStatusProfile.statusMessageInfo:type_name -> commonmodule.StatusMessageInfo
	2,  // 33: switchmodule.SwitchStatusProfile.protectedSwitch:type_name -> switchmodule.ProtectedSwitch
	10, // 34: switchmodule.SwitchStatusProfile.switchStatus:type_name -> switchmodule.SwitchStatus
	35, // [35:35] is the sub-list for method output_type
	35, // [35:35] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_switchmodule_switchmodule_proto_init() }
func file_switchmodule_switchmodule_proto_init() {
	if File_switchmodule_switchmodule_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_switchmodule_switchmodule_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchDiscreteControlXSWI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_switchmodule_switchmodule_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchDiscreteControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_switchmodule_switchmodule_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectedSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_switchmodule_switchmodule_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchDiscreteControlProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_switchmodule_switchmodule_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchEventXSWI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_switchmodule_switchmodule_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_switchmodule_switchmodule_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchEventProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_switchmodule_switchmodule_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchReading); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_switchmodule_switchmodule_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchReadingProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_switchmodule_switchmodule_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchStatusXSWI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_switchmodule_switchmodule_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_switchmodule_switchmodule_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchStatusProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_switchmodule_switchmodule_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_switchmodule_switchmodule_proto_goTypes,
		DependencyIndexes: file_switchmodule_switchmodule_proto_depIdxs,
		MessageInfos:      file_switchmodule_switchmodule_proto_msgTypes,
	}.Build()
	File_switchmodule_switchmodule_proto = out.File
	file_switchmodule_switchmodule_proto_rawDesc = nil
	file_switchmodule_switchmodule_proto_goTypes = nil
	file_switchmodule_switchmodule_proto_depIdxs = nil
}
